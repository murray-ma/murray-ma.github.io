<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马瑞个人笔记</title>
  
  <subtitle>勤勤恳恳程序员一枚</subtitle>
  <link href="https://www.rainbowrise.top/atom.xml" rel="self"/>
  
  <link href="https://www.rainbowrise.top/"/>
  <updated>2024-03-07T12:44:54.756Z</updated>
  <id>https://www.rainbowrise.top/</id>
  
  <author>
    <name>Murray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现SNMP Agent代理程序</title>
    <link href="https://www.rainbowrise.top/2022/04/01/%E5%AE%9E%E7%8E%B0Agent%E4%BB%A3%E7%90%86%E7%A8%8B%E5%BA%8F(SNMP)/"/>
    <id>https://www.rainbowrise.top/2022/04/01/%E5%AE%9E%E7%8E%B0Agent%E4%BB%A3%E7%90%86%E7%A8%8B%E5%BA%8F(SNMP)/</id>
    <published>2022-03-31T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装snmp及mib2c工具"><a href="#安装snmp及mib2c工具" class="headerlink" title="安装snmp及mib2c工具"></a>安装snmp及mib2c工具</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器：http://net-snmp.sourceforge.net/download.html</span><br><span class="line">命令行：wget --no-check-certificate https://sourceforge.net/projects/net-snmp/files/net-snmp/5.8/net-snmp-5.8.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf net-snmp-5.8.tar.gz &amp;&amp; mv net-snmp-5.8 /opt/net-snmp</span><br></pre></td></tr></table></figure><h3 id="3-配置并安装"><a href="#3-配置并安装" class="headerlink" title="3. 配置并安装"></a>3. 配置并安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker -y</span><br><span class="line"></span><br><span class="line">cd /opt/net-snmp</span><br><span class="line"></span><br><span class="line">./configure --with-default-snmp-version=&quot;2&quot; --with-sys-contact=&quot;myz0012@h3c.com&quot; --with-sys-location=&quot;China&quot; --with-logfile=&quot;/var/log/snmpd.log&quot; --with-persistent-directory=&quot;/var/net-snmp&quot; --enable-mfd-rewrites</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">cp /opt/net-snmp/python/netsnmp/tests/cp snmpd.conf /etc/snmp/snmpd.conf</span><br></pre></td></tr></table></figure><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin/snmpd -c /etc/snmp/snmpd.conf &amp;</span><br></pre></td></tr></table></figure><h3 id="5-停止"><a href="#5-停止" class="headerlink" title="5. 停止"></a>5. 停止</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 `ps -ef | grep &quot;snmpd&quot; | grep -v &quot;grep&quot; | awk &#x27;&#123;printf $2&#125;&#x27;`</span><br></pre></td></tr></table></figure><h2 id="定义MIB及加载"><a href="#定义MIB及加载" class="headerlink" title="定义MIB及加载"></a>定义MIB及加载</h2><h3 id="1-定义MIB"><a href="#1-定义MIB" class="headerlink" title="1. 定义MIB"></a>1. 定义MIB</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">-- the filename is mib-demo.txt</span><br><span class="line">-- MIB file的都以DEFINITIONS ::= BEGIN关键字开始，以END结束</span><br><span class="line">DEMO-MIB DEFINITIONS ::= BEGIN</span><br><span class="line"></span><br><span class="line">-- 模块引用区域，利用IMPORTS标识</span><br><span class="line">-- 所有的模块引用及群组的引用均使用FROM关键字说明其出处,引用使用分号（;）结束。</span><br><span class="line">IMPORTS</span><br><span class="line">    OBJECT-GROUP, MODULE-COMPLIANCE, NOTIFICATION-GROUP</span><br><span class="line">        FROM SNMPv2-CONF</span><br><span class="line">    enterprises, Integer32, Unsigned32, OBJECT-TYPE, MODULE-IDENTITY, NOTIFICATION-TYPE</span><br><span class="line">        FROM SNMPv2-SMI</span><br><span class="line">    DisplayString</span><br><span class="line">        FROM SNMPv2-TC;</span><br><span class="line"></span><br><span class="line">--enterprises就是.1.3.4.1.4.1</span><br><span class="line">-- ::=&#123;&#125;格式里定义的就是当前节点的访问地址</span><br><span class="line">--.1.3.6.1.4.1.54321</span><br><span class="line">demoMIB MODULE-IDENTITY</span><br><span class="line">    LAST-UPDATED &quot;202203251450Z&quot;</span><br><span class="line">    ORGANIZATION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    CONTACT-INFO</span><br><span class="line">        &quot;admin&quot;</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;DEMO List MIB.&quot;</span><br><span class="line">    ::= &#123; enterprises 54321 &#125;</span><br><span class="line"></span><br><span class="line">--定义一个根节点，访问地址为 demoMIB.1,也就是.1.3.6.1.4.1.54321.1</span><br><span class="line">--这个根节点下面又定义了3个子节点</span><br><span class="line">--SYNTAX是该节点数据类型，可自定义。标准类型：Counter(计数)、Gauge(标准)、DisplayString(显示字符串)、Interger(整数)、TimeTicks（时间戳）、NetworkAddress(网络地址)、IpAddress（Ipv4地址）</span><br><span class="line">--MAX-Access是该节点的读写属性，如：not-accessibl(不可访问),read-only(只读),read-write(读写),read-create(读和创建)</span><br><span class="line">--STATUS是该节点的状态，如：current (当前的)、deprecated (反对的)、obsolete(废弃的)</span><br><span class="line">demo OBJECT IDENTIFIER ::= &#123; demoMIB 1 &#125;</span><br><span class="line">    name OBJECT-TYPE</span><br><span class="line">        SYNTAX DisplayString</span><br><span class="line">        MAX-ACCESS read-write</span><br><span class="line">        STATUS current</span><br><span class="line">        DESCRIPTION</span><br><span class="line">            &quot;this is name.&quot;</span><br><span class="line">        ::= &#123; demo 1 &#125;</span><br><span class="line"></span><br><span class="line">    limit OBJECT-TYPE</span><br><span class="line">        SYNTAX Integer32</span><br><span class="line">        MAX-ACCESS read-write</span><br><span class="line">        STATUS current</span><br><span class="line">        DESCRIPTION</span><br><span class="line">            &quot;this is limit.&quot;</span><br><span class="line">        ::= &#123; demo 2 &#125;</span><br><span class="line"></span><br><span class="line">    type OBJECT-TYPE</span><br><span class="line">        SYNTAX Integer32</span><br><span class="line">        MAX-ACCESS read-write</span><br><span class="line">        STATUS obsolete</span><br><span class="line">        DESCRIPTION</span><br><span class="line">            &quot;this is type.&quot;</span><br><span class="line">        ::= &#123; demo 3 &#125;</span><br><span class="line"></span><br><span class="line">-- 定义TRAP</span><br><span class="line">demoTraps OBJECT IDENTIFIER ::= &#123; demoMIB 2 &#125;</span><br><span class="line">demoTrapPrefix OBJECT IDENTIFIER ::= &#123; demoTraps 0 &#125;</span><br><span class="line"></span><br><span class="line">demoInfo NOTIFICATION-TYPE</span><br><span class="line">    OBJECTS &#123;</span><br><span class="line">        name,</span><br><span class="line">        limit</span><br><span class="line">    &#125;</span><br><span class="line">    STATUS  current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;This is demo message.&quot;</span><br><span class="line">    ::= &#123; demoTrapPrefix 1 &#125;</span><br><span class="line"></span><br><span class="line">-- 定义表格</span><br><span class="line">-- demoTable OBJECT INDETIFIER ::= &#123; demoMIB 3&#125;</span><br><span class="line">demoTable OBJECT-TYPE</span><br><span class="line">    SYNTAX SEQUENCE OF demoEntry</span><br><span class="line">    MAX-ACCESS not-accessible</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;this is test table.&quot;</span><br><span class="line">    ::= &#123;demoMIB 3&#125;</span><br><span class="line"></span><br><span class="line">demoEntry OBJECT-TYPE</span><br><span class="line">    SYNTAX demoSequence</span><br><span class="line">    MAX-ACCESS not-accessible</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;this is test entry.&quot;</span><br><span class="line">    INDEX &#123; demoIndex &#125;</span><br><span class="line">    ::= &#123;demoTable 1&#125;</span><br><span class="line"></span><br><span class="line">demoSequence ::= SEQUENCE &#123;undefined</span><br><span class="line">    demoIndex  Integer32,</span><br><span class="line">    demoNum Integer32,</span><br><span class="line">    demoname  DisplayString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demoIndex OBJECT-TYPE</span><br><span class="line">    SYNTAX  Integer32</span><br><span class="line">    MAX-ACCESS read-write</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    ::= &#123;demoEntry 1&#125;</span><br><span class="line"></span><br><span class="line">demoNum OBJECT-TYPE</span><br><span class="line">    SYNTAX  Integer32</span><br><span class="line">    MAX-ACCESS read-write</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    ::= &#123;demoEntry 2&#125;</span><br><span class="line"></span><br><span class="line">demoname OBJECT-TYPE</span><br><span class="line">    SYNTAX  DisplayString</span><br><span class="line">    MAX-ACCESS read-write</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    ::= &#123;demoEntry 3&#125;</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-加载MIB"><a href="#2-加载MIB" class="headerlink" title="2. 加载MIB"></a>2. 加载MIB</h3><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/snmp/snmp.conf &lt;&lt;EOF</span><br><span class="line">mibdirs /usr/share/snmp/mibs:/usr/local/share/snmp/mibs</span><br><span class="line">mibs All</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmptranslate -Tp -IR demoMIB</span><br><span class="line">// 或</span><br><span class="line">snmptranslate -Tp -IR DEMO-MIB::demoMIB</span><br></pre></td></tr></table></figure><p>请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmpget -c public -v 2c localhost .1.3.6.1.4.1.54321.1</span><br><span class="line"></span><br><span class="line">//结果：DEMO-MIB::demo = No Such Object available on this agent at this OID</span><br></pre></td></tr></table></figure><h3 id="3-生产并编译"><a href="#3-生产并编译" class="headerlink" title="3. 生产并编译"></a>3. 生产并编译</h3><h4 id="a-生成-c和-h文件"><a href="#a-生成-c和-h文件" class="headerlink" title="a. 生成.c和.h文件"></a>a. 生成.c和.h文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; mib2c -c mib2c.scalar.conf demo</span><br><span class="line"></span><br><span class="line">//说明：mib2c.int_watch.conf为只读， mib2c.scalar.conf为其他</span><br></pre></td></tr></table></figure><h4 id="b-修改节点demo-c和demo-h"><a href="#b-修改节点demo-c和demo-h" class="headerlink" title="b. 修改节点demo.c和demo.h"></a>b. 修改节点demo.c和demo.h</h4><p>修改demo.c</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Note: this file originally auto-generated by mib2c</span><br><span class="line"> * using mib2c.scalar.conf</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#include &lt;net-snmp/net-snmp-config.h&gt;</span><br><span class="line">#include &lt;net-snmp/net-snmp-includes.h&gt;</span><br><span class="line">#include &lt;net-snmp/agent/net-snmp-agent-includes.h&gt;</span><br><span class="line">#include &quot;demo.h&quot;</span><br><span class="line"></span><br><span class="line">/* myName*/</span><br><span class="line">#define BUFSIZE 1024</span><br><span class="line">static char myName[BUFSIZE] = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">/* 定义默认limit、type */</span><br><span class="line">unsigned int myLimit = 10;</span><br><span class="line">unsigned int myType = 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** Initializes the demo module */</span><br><span class="line">void</span><br><span class="line">init_demo(void)</span><br><span class="line">&#123;</span><br><span class="line">    const oid name_oid[] = &#123; 1,3,6,1,4,1,54321,1,1 &#125;;</span><br><span class="line">    const oid limit_oid[] = &#123; 1,3,6,1,4,1,54321,1,2 &#125;;</span><br><span class="line">    const oid type_oid[] = &#123; 1,3,6,1,4,1,54321,1,3 &#125;;</span><br><span class="line"></span><br><span class="line">  DEBUGMSGTL((&quot;demo&quot;, &quot;Initializing\n&quot;));</span><br><span class="line"></span><br><span class="line">    netsnmp_register_scalar(</span><br><span class="line">        netsnmp_create_handler_registration(&quot;name&quot;, handle_name,</span><br><span class="line">                               name_oid, OID_LENGTH(name_oid),</span><br><span class="line">                               HANDLER_CAN_RWRITE</span><br><span class="line">        ));</span><br><span class="line">    netsnmp_register_scalar(</span><br><span class="line">        netsnmp_create_handler_registration(&quot;limit&quot;, handle_limit,</span><br><span class="line">                               limit_oid, OID_LENGTH(limit_oid),</span><br><span class="line">                               HANDLER_CAN_RWRITE</span><br><span class="line">        ));</span><br><span class="line">    netsnmp_register_scalar(</span><br><span class="line">        netsnmp_create_handler_registration(&quot;type&quot;, handle_type,</span><br><span class="line">                               type_oid, OID_LENGTH(type_oid),</span><br><span class="line">                               HANDLER_CAN_RWRITE</span><br><span class="line">        ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">handle_name(netsnmp_mib_handler *handler,</span><br><span class="line">                          netsnmp_handler_registration *reginfo,</span><br><span class="line">                          netsnmp_agent_request_info   *reqinfo,</span><br><span class="line">                          netsnmp_request_info         *requests)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    switch(reqinfo-&gt;mode) &#123;</span><br><span class="line">        </span><br><span class="line">        /*完善get处理*/</span><br><span class="line">        case MODE_GET:</span><br><span class="line">            snmp_set_var_typed_value(requests-&gt;requestvb, ASN_OCTET_STR,</span><br><span class="line">                                   myName  /* XXX: a pointer to the scalar&#x27;s data */,</span><br><span class="line">                                   strlen(myName)  /* XXX: the length of the data in bytes */);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE1:</span><br><span class="line">            ret = netsnmp_check_vb_type(requests-&gt;requestvb, ASN_OCTET_STR);</span><br><span class="line">            if ( ret != SNMP_ERR_NOERROR ) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, ret );</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE2:</span><br><span class="line">            if ( 0 /* XXX if malloc, or whatever, failed: */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_FREE:</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_ACTION:</span><br><span class="line">            memcpy(myName,requests-&gt;requestvb-&gt;buf,requests-&gt;requestvb-&gt;val_len);</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, /* some error */0);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_COMMIT:</span><br><span class="line">            /* XXX: delete temporary storage */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_UNDO:</span><br><span class="line">            /* XXX: UNDO and return to previous value for the object */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_UNDOFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            /* we should never get here, so this is a really bad error */</span><br><span class="line">            snmp_log(LOG_ERR, &quot;unknown mode (%d) in handle_name\n&quot;, reqinfo-&gt;mode );</span><br><span class="line">            return SNMP_ERR_GENERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return SNMP_ERR_NOERROR;</span><br><span class="line">&#125;</span><br><span class="line">int</span><br><span class="line">handle_limit(netsnmp_mib_handler *handler,</span><br><span class="line">                          netsnmp_handler_registration *reginfo,</span><br><span class="line">                          netsnmp_agent_request_info   *reqinfo,</span><br><span class="line">                          netsnmp_request_info         *requests)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    </span><br><span class="line">    switch(reqinfo-&gt;mode) &#123;</span><br><span class="line"></span><br><span class="line">        case MODE_GET:</span><br><span class="line">            snmp_set_var_typed_value(requests-&gt;requestvb, ASN_INTEGER,</span><br><span class="line">                                      (u_char *)&amp;myLimit /* XXX: a pointer to the scalar&#x27;s data */,</span><br><span class="line">                                     sizeof(myLimit) /* XXX: the length of the data in bytes */);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE1:</span><br><span class="line">            ret = netsnmp_check_vb_type(requests-&gt;requestvb, ASN_INTEGER);</span><br><span class="line">            if ( ret != SNMP_ERR_NOERROR ) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, ret );</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE2:</span><br><span class="line">            if (0/* XXX if malloc, or whatever, failed: */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_FREE:</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_ACTION:</span><br><span class="line">            memcpy(&amp;myLimit,requests-&gt;requestvb-&gt;buf,requests-&gt;requestvb-&gt;val_len);</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, /* some error */0);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_COMMIT:</span><br><span class="line">            /* XXX: delete temporary storage */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_UNDO:</span><br><span class="line">            /* XXX: UNDO and return to previous value for the object */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_UNDOFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            /* we should never get here, so this is a really bad error */</span><br><span class="line">            snmp_log(LOG_ERR, &quot;unknown mode (%d) in handle_limit\n&quot;, reqinfo-&gt;mode );</span><br><span class="line">            return SNMP_ERR_GENERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return SNMP_ERR_NOERROR;</span><br><span class="line">&#125;</span><br><span class="line">int</span><br><span class="line">handle_type(netsnmp_mib_handler *handler,</span><br><span class="line">                          netsnmp_handler_registration *reginfo,</span><br><span class="line">                          netsnmp_agent_request_info   *reqinfo,</span><br><span class="line">                          netsnmp_request_info         *requests)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    </span><br><span class="line">    switch(reqinfo-&gt;mode) &#123;</span><br><span class="line"></span><br><span class="line">        case MODE_GET:</span><br><span class="line">            snmp_set_var_typed_value(requests-&gt;requestvb, ASN_INTEGER,</span><br><span class="line">                                     (u_char *)&amp;myType /* XXX: a pointer to the scalar&#x27;s data */,</span><br><span class="line">                                     sizeof(myType)/* XXX: the length of the data in bytes */);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE1:</span><br><span class="line">            /* or you could use netsnmp_check_vb_type_and_size instead */</span><br><span class="line">            ret = netsnmp_check_vb_type(requests-&gt;requestvb, ASN_INTEGER);</span><br><span class="line">            if ( ret != SNMP_ERR_NOERROR ) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, ret );</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE2:</span><br><span class="line">            /* XXX malloc &quot;undo&quot; storage buffer */</span><br><span class="line">            if (0/* XXX if malloc, or whatever, failed: */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_FREE:</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_ACTION:</span><br><span class="line">            memcpy(&amp;myType,requests-&gt;requestvb-&gt;buf,requests-&gt;requestvb-&gt;val_len);</span><br><span class="line">            /* XXX: perform the value change here */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, /* some error */0);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_COMMIT:</span><br><span class="line">            /* XXX: delete temporary storage */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_UNDO:</span><br><span class="line">            /* XXX: UNDO and return to previous value for the object */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_UNDOFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            /* we should never get here, so this is a really bad error */</span><br><span class="line">            snmp_log(LOG_ERR, &quot;unknown mode (%d) in handle_type\n&quot;, reqinfo-&gt;mode );</span><br><span class="line">            return SNMP_ERR_GENERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return SNMP_ERR_NOERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="c-编译："><a href="#c-编译：" class="headerlink" title="c. 编译："></a>c. 编译：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; net-snmp-config --compile-subagent demo demo.c</span><br><span class="line">// 或</span><br><span class="line">env MIBS=&quot;+DEMO-MIB&quot; net-snmp-config --compile-subagent demo --norm demo.c // --norm 参数来阻止编译后删除生成的中间代码文件</span><br></pre></td></tr></table></figure><h4 id="d·运行demo"><a href="#d·运行demo" class="headerlink" title="d·运行demo"></a>d·运行demo</h4><blockquote><p>注意<br>上面编译后并没有生效，暂时不知原因，换另外一种方式（重新编译snmpd）：</p></blockquote><h4 id="c-拷贝：demo-c和demo-h到源码目录-opt-net-snmp-net-snmp-agent-mibgroup-下"><a href="#c-拷贝：demo-c和demo-h到源码目录-opt-net-snmp-net-snmp-agent-mibgroup-下" class="headerlink" title="c. 拷贝：demo.c和demo.h到源码目录/opt/net-snmp/net-snmp/agent/mibgroup/下"></a>c. 拷贝：demo.c和demo.h到源码目录/opt/net-snmp/net-snmp/agent/mibgroup/下</h4><h4 id="d-配置并编译"><a href="#d-配置并编译" class="headerlink" title="d. 配置并编译"></a>d. 配置并编译</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-default-snmp-version=&quot;2&quot; --with-sys-contact=&quot;myz0012@h3c.com&quot; --with-sys-location=&quot;China&quot; --with-logfile=&quot;/var/log/snmpd.log&quot; --with-persistent-directory=&quot;/var/snmp&quot; --enable-mfd-rewrites --with-mib-modules=&quot;demo&quot;</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="e-重新reboot"><a href="#e-重新reboot" class="headerlink" title="e. 重新reboot"></a>e. 重新reboot</h4><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">错误信息：error while loading shared libraries: libnetsnmpmibs.so.35: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line">// 解决，设置环境变量</span><br><span class="line">cat &gt;&gt; /etc/profile&lt;&lt;EOF</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib</span><br><span class="line">EOF</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="4"><li>测试<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 设置</span><br><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmpset -c public -v 2c localhost .1.3.6.1.4.1.54321.1.1.0 s &quot;nihao&quot;</span><br><span class="line">// 查询</span><br><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmpget -c public -v 2c localhost .1.3.6.1.4.1.54321.1.1.0</span><br></pre></td></tr></table></figure></li></ol><h2 id="编译的方法"><a href="#编译的方法" class="headerlink" title="编译的方法"></a>编译的方法</h2><ol><li>静态加载，将生成的.c和.h文件加入到相应的位置，重新编译snmp库，优点是不需要修改配置文件，缺点是每次添加都得重新编译；</li><li>动态加载，将生成的.c和.h文件再编译成.so库，修改snmpd.conf配置文件。优点是每次添加不需要重新编译，缺点是必须支持dlmod命令；</li><li>子代理扩展，将生成的.c和.h文件编译成可执行程序，运行该程序和snmpd即可，优点是操作简单，缺点是需要运行两个程序才行。</li></ol><h3 id="一、静态链接"><a href="#一、静态链接" class="headerlink" title="一、静态链接"></a>一、静态链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">demo.c和demo.h复制到/opt/net-snmp/agent/mibgroup，这里是说net-snmp源码里。</span><br><span class="line">编译./configure --with-mib-modules=demo，make &amp;&amp; make install。</span><br><span class="line">静态加载成功</span><br></pre></td></tr></table></figure><h3 id="二、动态加载"><a href="#二、动态加载" class="headerlink" title="二、动态加载"></a>二、动态加载</h3><p>编写makefile文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">FLAGS=-I. `net-snmp-config --cflags` -g</span><br><span class="line">DLFLAGS=-shared -fPIC -g</span><br><span class="line">demo.so: demo.c</span><br><span class="line">    $(CC) $(CFLAGS) $(DLFLAGS) -c -o demo.o demo.c</span><br><span class="line">    $(CC) $(CFLAGS) $(DLFLAGS) -o demo.so demo.o</span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm -f *.so *.o</span><br></pre></td></tr></table></figure><p>编译生成.so库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改snmpd.conf配置文件，在文件末尾加入dlmod demo $&#123;demo.so所在绝对路径&#125;/demo.so</span><br><span class="line">启动snmpd: /usr/local/sbin/snmpd -c /etc/snmp/snmpd.conf &amp;</span><br><span class="line">动态加载完成</span><br></pre></td></tr></table></figure><h3 id="三、子代理扩展"><a href="#三、子代理扩展" class="headerlink" title="三、子代理扩展"></a>三、子代理扩展</h3><p>生成demo程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net-snmp-config --compile-subagent demo demo.c</span><br></pre></td></tr></table></figure><p>启动snmpd,demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin/snmpd -c /etc/snmp/snmpd.conf</span><br><span class="line">./demo</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装snmp及mib2c工具&quot;&gt;&lt;a href=&quot;#安装snmp及mib2c工具&quot; class=&quot;headerlink&quot; title=&quot;安装snmp及mib2c工具&quot;&gt;&lt;/a&gt;安装snmp及mib2c工具&lt;/h2&gt;&lt;h3 id=&quot;1-下载&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="SNMP" scheme="https://www.rainbowrise.top/categories/SNMP/"/>
    
    
    <category term="Linux" scheme="https://www.rainbowrise.top/tags/Linux/"/>
    
    <category term="SNMP" scheme="https://www.rainbowrise.top/tags/SNMP/"/>
    
  </entry>
  
  <entry>
    <title>Springboot集成SNMP</title>
    <link href="https://www.rainbowrise.top/2022/03/01/Springboot%E9%9B%86%E6%88%90SNMP/"/>
    <id>https://www.rainbowrise.top/2022/03/01/Springboot%E9%9B%86%E6%88%90SNMP/</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Springboot集成SNMP"><a href="#Springboot集成SNMP" class="headerlink" title="Springboot集成SNMP"></a>Springboot集成SNMP</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.snmp4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;snmp4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、初始化SNMP"><a href="#2、初始化SNMP" class="headerlink" title="2、初始化SNMP"></a>2、初始化SNMP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class SnmpReceiver implements CommandResponder &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ServerConfig serverConfig;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SnmpService snmpService;</span><br><span class="line"></span><br><span class="line">    private Snmp snmp;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化snmp</span><br><span class="line">     */</span><br><span class="line">    private void init() throws Exception &#123;</span><br><span class="line">        ThreadPool threadPool = ThreadPool.create(serverConfig.getThreadPoolName(), serverConfig.getThreadPoolSize());</span><br><span class="line"></span><br><span class="line">        // 初始化多线程消息转发类</span><br><span class="line">        MultiThreadedMessageDispatcher dispatcher = new MultiThreadedMessageDispatcher(threadPool, new MessageDispatcherImpl());</span><br><span class="line">        String addr = String.format(&quot;%s:%s/%s&quot;, serverConfig.getProtocol(), serverConfig.getIp(), serverConfig.getPort());</span><br><span class="line">        Address listenAddress = GenericAddress.parse(addr); // 本地IP与监听端口</span><br><span class="line"></span><br><span class="line">        TransportMapping&lt;?&gt; transport = null;</span><br><span class="line">        // 创建transportMapping，对TCP与UDP协议进行处理</span><br><span class="line">        if (listenAddress instanceof UdpAddress) &#123;</span><br><span class="line">            transport = new DefaultUdpTransportMapping((UdpAddress) listenAddress);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            transport = new DefaultTcpTransportMapping((TcpAddress) listenAddress);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 创建snmp</span><br><span class="line">        snmp = new Snmp(dispatcher, transport);</span><br><span class="line">        // 其中要增加三种处理模型。如果snmp初始化使用的是Snmp(TransportMapping&lt;? extends Address&gt; transportMapping) ,就不需要增加</span><br><span class="line">        snmp.getMessageDispatcher().addMessageProcessingModel(new MPv1());</span><br><span class="line">        snmp.getMessageDispatcher().addMessageProcessingModel(new MPv2c());</span><br><span class="line">        // 当要支持snmpV3版本时，需要配置user</span><br><span class="line">        USM usm = new USM(SecurityProtocols.getInstance(), new OctetString(MPv3.createLocalEngineID()), 0);</span><br><span class="line">        UsmUser user = new UsmUser(new OctetString(serverConfig.getSecurityName()), AuthMD5.ID, new OctetString(serverConfig.getAuthPass()), PrivDES.ID, new OctetString(serverConfig.getPrivacyPass()));</span><br><span class="line">        usm.addUser(user.getSecurityName(), user);</span><br><span class="line">        SecurityModels.getInstance().addSecurityModel(usm);</span><br><span class="line">        snmp.getMessageDispatcher().addMessageProcessingModel(new MPv3());</span><br><span class="line"></span><br><span class="line">        // 监听</span><br><span class="line">        snmp.listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动进程</span><br><span class="line">     */</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            init();</span><br><span class="line">            snmp.addCommandResponder(this);</span><br><span class="line">            log.info(&quot;开始监听SNMP-Trap信息&quot;);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 当监听到消息时，会自动调用该方法</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void processPdu(CommandResponderEvent respEvent) &#123;</span><br><span class="line">        if (respEvent == null || respEvent.getPDU() == null) &#123;</span><br><span class="line">            log.warn(&quot;未监听到消息！&quot;);</span><br><span class="line">        &#125; else if (respEvent.getPDU().getType() != PDU.TRAP) &#123;</span><br><span class="line">            log.warn(&quot;仅支持Trap消息！&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Vector&lt;? extends VariableBinding&gt; recVBs = respEvent.getPDU().getVariableBindings();</span><br><span class="line">            log.info(String.format(&quot;Type TRAP   : %s&quot;, respEvent.getPDU().getType() == PDU.TRAP));</span><br><span class="line">            log.info(String.format(&quot;Address     : %s&quot;, respEvent.getPeerAddress()));</span><br><span class="line">            log.info(String.format(&quot;Community   : %s&quot;, new String(respEvent.getSecurityName())));</span><br><span class="line">            log.info(String.format(&quot;Variable    : %s&quot;, recVBs));</span><br><span class="line"></span><br><span class="line">            ConcurrentHashMap&lt;String, Object&gt; map = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">            for (int i = 0; i &lt; recVBs.size(); i++) &#123;</span><br><span class="line">                VariableBinding recVB = recVBs.elementAt(i);</span><br><span class="line">                // map.put(recVB.getOid().toString(), recVB.getVariable().toString());</span><br><span class="line">                map.put(recVB.getOid().toString(), recVB.toValueString());</span><br><span class="line">            &#125;</span><br><span class="line">            snmpService.handlerSnmpData(map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、监听Trap消息"><a href="#3、监听Trap消息" class="headerlink" title="3、监听Trap消息"></a>3、监听Trap消息</h3><p>实现ApplicationRunner接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(scanBasePackages = &#123;&quot;com.h3c&quot;&#125;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@EnableAsync</span><br><span class="line">public class NoticeApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication app = new SpringApplication(NoticeApplication.class);</span><br><span class="line">        app.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">    // 其他省略</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SnmpReceiver snmpReceiver;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ApplicationRunner startSnmpReceiver() &#123;</span><br><span class="line">        return args -&gt; snmpReceiver.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、解析Trap消息"><a href="#4、解析Trap消息" class="headerlink" title="4、解析Trap消息"></a>4、解析Trap消息</h3><p>接收到Trap信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Type TRAP   : true</span><br><span class="line">Address     : 192.168.11.34/38952</span><br><span class="line">Community   : private</span><br><span class="line">Variable    : [1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82, 1.3.6.1.6.3.1.1.4.1.0 = 1.3.6.1.4.1.25506.4.2.26.2.6.9, 1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82, 1.3.6.1.4.1.25506.4.2.26.1.3 = 1, 1.3.6.1.4.1.25506.4.2.26.1.9 = sda, 1.3.6.1.4.1.25506.4.2.26.1.12 = 276, 1.3.6.1.4.1.25506.4.2.26.1.13 = 100, 1.3.6.1.4.1.25506.4.2.26.1.1 = cvknode1, 1.3.6.1.4.1.25506.4.2.26.1.2 = 192.168.11.34]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来的主要工作解析Variable中参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82</span><br><span class="line">1.3.6.1.6.3.1.1.4.1.0 = 1.3.6.1.4.1.25506.4.2.26.2.6.9</span><br><span class="line">1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.3 = 1</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.9 = sda</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.12 = 276</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.13 = 100</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.1 = cvknode1</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.2 = 192.168.11.34</span><br></pre></td></tr></table></figure><p>将上述的OID转为具体的消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">等级: 紧急 类型: 主机磁盘吞吐量告警 描述: 主机“cvknode1”(192.168.11.34)磁盘“sda”吞吐量(总) 超过100KBps,当前吞吐量276KBps</span><br></pre></td></tr></table></figure><p>在程序中定义了Trap的消息模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trapTplMap.put(&quot;1.3.6.1.4.1.25506.4.2.26.2.6.9&quot;, OidUtils.template(&quot;1.3.6.1.4.1.25506.4.2.26.1.3&quot;, &quot;主机磁盘吞吐量告警&quot;, &quot;主机“&#123;1.3.6.1.4.1.25506.4.2.26.1.1&#125;”(&#123;1.3.6.1.4.1.25506.4.2.26.1.2&#125;)磁盘“&#123;1.3.6.1.4.1.25506.4.2.26.1.9&#125;”吞吐量(总) 超过&#123;1.3.6.1.4.1.25506.4.2.26.1.13&#125;KBps,当前吞吐量&#123;1.3.6.1.4.1.25506.4.2.26.1.12&#125;KBps&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Springboot集成SNMP&quot;&gt;&lt;a href=&quot;#Springboot集成SNMP&quot; class=&quot;headerlink&quot; title=&quot;Springboot集成SNMP&quot;&gt;&lt;/a&gt;Springboot集成SNMP&lt;/h2&gt;&lt;h3 id=&quot;1、引入依赖&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="SNMP" scheme="https://www.rainbowrise.top/categories/SNMP/"/>
    
    
    <category term="Java" scheme="https://www.rainbowrise.top/tags/Java/"/>
    
    <category term="SNMP" scheme="https://www.rainbowrise.top/tags/SNMP/"/>
    
    <category term="Springboot" scheme="https://www.rainbowrise.top/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>FRP 笔记</title>
    <link href="https://www.rainbowrise.top/2021/10/02/FRP%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.rainbowrise.top/2021/10/02/FRP%20%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FRP-一款很好用的内网穿透工具"><a href="#FRP-一款很好用的内网穿透工具" class="headerlink" title="FRP: 一款很好用的内网穿透工具"></a>FRP: 一款很好用的内网穿透工具</h3><ul><li>对于没有公网 IP 的内网用户来说，远程管理或在外网访问内网机器上的服务是一个问题。</li><li>FRP（Fast Reverse Proxy）是一款好用内网穿透工具。FRP 是一个使用 Go 语言开发的高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务。</li><li>FRP 支持 TCP、UDP、HTTP、HTTPS等协议类型，并且支持 Web 服务根据域名进行路由转发。</li><li>FRP 项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></li></ul><h4 id="FRP-的作用"><a href="#FRP-的作用" class="headerlink" title="FRP 的作用"></a>FRP 的作用</h4><ul><li>利用处于内网或防火墙后的机器，对外网环境提供 HTTP 或 HTTPS 服务。</li><li>对于 HTTP, HTTPS 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口。</li><li>利用处于内网或防火墙后的机器，对外网环境提供 TCP 和 UDP 服务，例如在家里通过 SSH 访问处于公司内网环境内的主机。</li></ul><h4 id="FRP-安装"><a href="#FRP-安装" class="headerlink" title="FRP 安装"></a>FRP 安装</h4><blockquote><p>FRP 采用 Go 语言开发，支持 Windows、Linux、MacOS、ARM等多平台部署。FRP 安装非常容易，只需下载对应系统平台的软件包，并解压就可用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例Linux 下安装，为了方便管理把解压后的目录重命名为frp</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.27.1/frp_0.27.1_linux_amd64.tar.gz</span><br><span class="line">tar xzvf frp_0.27.1_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> frp_0.27.1_linux_amd64 frp</span><br></pre></td></tr></table></figure><blockquote><p>软件包下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p></blockquote><h4 id="FRP-服务端配置"><a href="#FRP-服务端配置" class="headerlink" title="FRP 服务端配置"></a>FRP 服务端配置</h4><blockquote><p>配置 FRP 服务端的前提条件是需要一台具有 <strong>公网IP</strong> 的设备，得益于 FRP 是 Go 语言开发的，具有良好的跨平台特性。可以在 Windows、Linux、MacOS、ARM 等几乎任何可联网设备上部署。<br>FRP 默认给出两个服务端配置文件，一个是简版的 frps.ini，另一个是完整版本 frps_full.ini。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 FRP 服务端</span></span><br><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><h4 id="FRP-客户端配置"><a href="#FRP-客户端配置" class="headerlink" title="FRP 客户端配置"></a>FRP 客户端配置</h4><blockquote><p>和 FRP 服务端类似，FRP 默认也给出两个客户端配置文件，一个是简版的 frpc.ini，另一个是完整版本 frpc_full.ini。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line"><span class="comment"># FRP 服务端的公网 IP</span></span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line"><span class="comment"># FRP 服务端监听的端口</span></span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line"><span class="comment"># 本机IP</span></span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 FRP 客户端</span></span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">ssh 4.3.2.1 6000</span><br></pre></td></tr></table></figure><h4 id="FRP-使用实例"><a href="#FRP-使用实例" class="headerlink" title="FRP 使用实例"></a>FRP 使用实例</h4><p><strong>通过 TCP 访问内网机器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 修改 FRP 客户端配置文件 frpc.ini 文件</span><br><span class="line">cat frpc.ini</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line"># 启动 FRP 客户端</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过自定义域名访问部署于内网的 Web 服务</strong></p><blockquote><p>有时需要在公有网络通过域名访问我们在本地环境搭建的 Web 服务，但是由于本地环境机器并没有公网 IP，无法将域名直接解析到本地的机器。<br>通过 FRP 就可以很容易实现这一功能。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 首先修改 FRP 服务端配置文件，通过 vhost_http_port 参数来设置 HTTP 访问端口，这里将 HTTP 访问端口设为 8080。</span><br><span class="line">vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line"></span><br><span class="line"># 启动 FRP 服务端</span><br><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line"># 其次修改 FRP 客户端配置文件并增加如下内容</span><br><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = **.***.com</span><br><span class="line"># 通过 local_port 和 custom_domains 参数来设置本地机器上 Web 服务对应的端口和自定义的域名，这里我们分别设置端口为 80，对应域名为 **.***.com。</span><br><span class="line"></span><br><span class="line"># 启动 FRP 客户端</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 最后将 ..com 的域名 A 记录解析到 FRP 服务器的公网 IP 上，可以通过 http://.*.com:8080 这个 URL 访问到处于内网机器上对应的 Web 服务。</span><br><span class="line"></span><br><span class="line"># HTTPS 服务配置方法类似，只需将 vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</span><br></pre></td></tr></table></figure><p><strong>通过密码保护你的 Web 服务</strong></p><blockquote><p>由于所有客户端共用一个 FRP 服务端的 HTTP 服务端口，任何知道你的域名和 URL 的人都能访问到你部署在内网的 Web 服务，但是在某些场景下需要确保只有限定的用户才能访问。</p></blockquote><blockquote><p>FRP 支持通过 HTTP Basic Auth 来保护你的 Web 服务，使用户需要通过用户名和密码才能访问到你的服务。需要实现此功能主要需要在 FRP 客户端的配置文件中添加用户名和密码的设置。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = **.***.com</span><br><span class="line"></span><br><span class="line"># 设置认证的用户名</span><br><span class="line">http_user = abc</span><br><span class="line"></span><br><span class="line"># 设置认证的密码</span><br><span class="line">http_pwd = abc</span><br></pre></td></tr></table></figure><blockquote><p>这时访问 http://.*.com:8080 这个 URL 时就需要输入配置的用户名和密码才能访问。<br>该功能目前仅限于 HTTP 类型的代理。</p></blockquote><p><strong>给 Web 服务增加自定义二级域名</strong></p><blockquote><p>在多人同时使用一个 FRP 服务端实现 Web 服务时，通过自定义二级域名的方式来使用会更加方便。</p></blockquote><blockquote><p>通过在 FRP 服务端的配置文件中配置 subdomain_host参数就可以启用该特性。之后在 FRP 客户端的 http、https 类型的代理中可以不配置 custom_domains，而是配置一个 subdomain 参数。<br>然后只需要将 *.{subdomain_host} 解析到 FRP 服务端所在服务器。之后用户可以通过 subdomain 自行指定自己的 Web 服务所需要使用的二级域名，并通过 {subdomain}.{subdomain_host} 来访问自己的 Web 服务。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 首先在 FRP 服务端配置 subdomain_host 参数</span><br><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">subdomain_host = ***.com</span><br><span class="line"></span><br><span class="line"># 其次在 FRP 客户端配置文件配置 subdomain 参数</span><br><span class="line">vim frpc.ini</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">subdomain = test</span><br></pre></td></tr></table></figure><blockquote><p>然后将泛域名 .com 解析到 FRP 服务端所在服务器的公网 IP 地址。FRP 服务端 和 FRP 客户端都启动成功后，通过 test.**.com 就可以访问到内网的 Web 服务。<br>同一个 HTTP 或 HTTPS 类型的代理中 custom_domains 和 subdomain 可以同时配置。</p></blockquote><blockquote><p>需要注意的是如果 FPR 服务端配置了 subdomain_host，则 custom_domains 中不能是属于 subdomain_host 的子域名或者泛域名。</p></blockquote><p><strong>修改 Host Header</strong></p><blockquote><p>通常情况下 FRP 不会修改转发的任何数据。但有一些后端服务会根据 HTTP 请求 header 中的 host 字段来展现不同的网站，例如 Nginx 的虚拟主机服务，启用 host-header 的修改功能可以动态修改 HTTP 请求中的 host 字段。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 实现此功能只需要在 FRP 客户端配置文件中定义 host_header_rewrite 参数。</span><br><span class="line">vim frpc.ini</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = test.***.com</span><br><span class="line">host_header_rewrite = dev.***.com</span><br><span class="line"></span><br><span class="line"># 原来 HTTP 请求中的 host 字段 test.***.com 转发到后端服务时会被替换为 dev.***.com。</span><br></pre></td></tr></table></figure><blockquote><p>该功能仅限于 HTTP 类型的代理。</p></blockquote><p><strong>URL 路由</strong></p><blockquote><p>FRP 支持根据请求的 URL 路径路由转发到不同的后端服务。要实现这个功能可通过 FRP 客户端配置文件中的 locations 字段来指定。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim frpc.ini</span><br><span class="line"></span><br><span class="line">[web01]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = web.***.com</span><br><span class="line">locations = /</span><br><span class="line"></span><br><span class="line">[web02]</span><br><span class="line">type = http</span><br><span class="line">local_port = 81</span><br><span class="line">custom_domains = web.***.com</span><br><span class="line">locations = /news,/about</span><br></pre></td></tr></table></figure><blockquote><p>按照上述的示例配置后，web.***.com 这个域名下所有以 /news 以及 /about 作为前缀的 URL 请求都会被转发到后端 web02 所在的后端服务，其余的请求会被转发到 web01 所在的后端服务。</p></blockquote><blockquote><p>目前仅支持最大前缀匹配，之后会考虑支持正则匹配。</p></blockquote><p><strong>通过 UDP 访问内网机器</strong></p><blockquote><p>DNS 查询请求通常使用 UDP 协议，FRP 支持对内网 UDP 服务的穿透，配置方式和 TCP 基本一致。这里以转发到 Google 的 DNS 查询服务器 8.8.8.8 的 UDP 端口为例。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 首先修改 FRP 客户端配置文件，并增加如下内容：</span><br><span class="line">vim frpc.ini</span><br><span class="line">[dns]</span><br><span class="line">type = udp</span><br><span class="line">local_ip = 8.8.8.8</span><br><span class="line">local_port = 53</span><br><span class="line">remote_port = 6001</span><br><span class="line"></span><br><span class="line"># 要转发到内网 DNS 服务器只需把 local_ip 改成对应 IP 即可。</span><br><span class="line"># 其次重新启动 FRP 客户端：</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 最后通过 dig 命令测试 UDP 包转发是否成功，预期会返回 www.google.com 域名的解析结果</span><br><span class="line">dig @4.3.2.1 -p 6001 www.google.com</span><br></pre></td></tr></table></figure><p><strong>转发 Unix 域套接字</strong></p><blockquote><p>通过 TCP 端口访问内网的 Unix 域套接字，这里以和本地机器上的 Docker Daemon 通信为例。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 首先修改 FRP 客户端配置文件，并增加如下内容：</span><br><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[unix_domain_socket]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 6002</span><br><span class="line">plugin = unix_domain_socket</span><br><span class="line">plugin_unix_path = /var/run/docker.sock</span><br><span class="line"></span><br><span class="line"># 这里主要是使用 plugin 和 plugin_unix_path 两个参数启用了 unix_domain_socket 插件和配置对应的套接字路径。</span><br><span class="line"></span><br><span class="line"># 其次重新启动 FRP 客户端：</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 最后通过 curl 命令查看 Docker 版本信息进行测试：</span><br><span class="line">curl http://4.3.2.1:6002/version</span><br></pre></td></tr></table></figure><blockquote><p>FRP 从 1.5 版本开始支持客户端热加载配置文件，并不用每次都重启客户端程序。</p></blockquote><h3 id="FRP-高级进阶"><a href="#FRP-高级进阶" class="headerlink" title="FRP 高级进阶"></a>FRP 高级进阶</h3><p><strong>给 FRP 服务端增加一个 Dashboard</strong></p><blockquote><p>通过 Dashboard 可以方便的查看 FRP 的状态以及代理统计信息展示，要使用这个功能首先需要在 FRP 服务端配置文件中指定 Dashboard 服务使用的端口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line"># 指定 Dashboard 的监听的 IP 地址</span><br><span class="line">dashboard_addr = 0.0.0.0</span><br><span class="line"># 指定 Dashboard 的监听的端口</span><br><span class="line">dashboard_port = 7500</span><br><span class="line"># 指定访问 Dashboard 的用户名</span><br><span class="line">dashboard_user = admin</span><br><span class="line"># 指定访问 Dashboard 的端口</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"></span><br><span class="line"># 其次重新启动 FRP 服务端：</span><br><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line"># 最后通过 http://[server_addr]:7500 访问 Dashboard 界面，用户名密码默认都为 admin。</span><br></pre></td></tr></table></figure><p><strong>给 FRP 服务端加上身份验证</strong></p><blockquote><p>默认情况下只要知道 FRP 服务端开放的端口，任意 FRP 客户端都可以随意在服务端上注册端口映射，这样对于在公网上的 FRP 服务来说显然不太安全。FRP 提供了身份验证机制来提高 FRP 服务端的安全性。要启用这一特性也很简单，只需在 FRP 服务端和 FRP 客户端的 common 配置中启用 privilege_token 参数就行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">privilege_token = 12345678</span><br></pre></td></tr></table></figure><blockquote><p>启用这一特性后，只有 FRP 服务端和 FRP 客户端的 common 配置中的 privilege_token 参数一致身份验证才会通过，FRP 客户端才能成功在 FRP 服务端注册端口映射。否则就会注册失败，出现类似下面的错误：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:284] proxy removed: []</span><br><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:294] proxy added: [ssh web dns unix_domain_socket]</span><br><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:317] visitor removed: []</span><br><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:326] visitor added: []</span><br><span class="line">2018/01/25 17:29:27 [E] [control.go:230] authorization failed</span><br><span class="line">2018/01/25 17:29:27 [W] [control.go:109] login to server failed: authorization failed</span><br><span class="line">authorization failed</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是 FRP 客户端所在机器和 FRP 服务端所在机器的时间相差不能超过 15 分钟，因为时间戳会被用于加密验证中，防止报文被劫持后被其他人利用。这个超时时间可以在配置文件中通过 authentication_timeout 这个参数来修改，单位为秒，默认值为 900，即 15 分钟。如果修改为 0，则 FRP 服务端将不对身份验证报文的时间戳进行超时校验。</p></blockquote><p><strong>FRP 客户端热加载配置文件</strong></p><blockquote><p>当修改了 FRP 客户端中的配置文件，从 0.15 版本开始可以通过 frpc reload 命令来动态加载配置文件，通常会在 10 秒内完成代理的更新。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 启用此功能需要在 FRP 客户端配置文件中启用 admin 端口，用于提供 API 服务。配置如下：</span><br><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">admin_addr = 127.0.0.1</span><br><span class="line">admin_port = 7400</span><br><span class="line"># 重启 FRP 客户端，以后就可通过热加载方式进行 FRP 客户端配置变更了。</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 重新加载配置</span><br><span class="line">./frpc reload -c ./frpc.ini</span><br></pre></td></tr></table></figure><blockquote><p>等待一段时间后客户端会根据新的配置文件创建、更新、删除代理。<br>需要注意的是 [common] 中的参数除了 start 外目前无法被修改。</p></blockquote><blockquote><p>启用 admin_addr 后，还可以通过 frpc status -c ./frpc.ini 命令在 FRP 客户端很方便的查看当前代理状态信息。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc status -c ./frpc.ini</span><br></pre></td></tr></table></figure><p><strong>给 FRP 服务端增加端口白名单</strong></p><blockquote><p>为了防止 FRP 端口被滥用，FRP 提供了指定允许哪些端口被分配的功能。可通过 FRP 服务端的配置文件中 privilege_allow_ports 参数来指定：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">privilege_allow_ports = 2000-3000,3001,3003,4000-5000</span><br><span class="line"></span><br><span class="line">privilege_allow_ports </span><br></pre></td></tr></table></figure><blockquote><p>可以配置允许使用的某个指定端口或者是一个范围内的所有端口，以 , 分隔，指定的范围以 - 分隔。</p></blockquote><blockquote><p>当使用不允许的端口注册时，就会注册失败。出现类似以下错误：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc status -c ./frpc.ini</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Proxy Status...</span><br><span class="line">TCP</span><br><span class="line">Name Status LocalAddr Plugin RemoteAddr Error</span><br><span class="line">ssh start error 127.0.0.1:22 4.3.2.1:60000 port not allowed</span><br><span class="line">unix_domain_socket start error unix_domain_socket 4.3.2.1:60002 port not allowed</span><br></pre></td></tr></table></figure><p><strong>启用 TCP 多路复用</strong></p><blockquote><p>从 v0.10.0 版本开始，客户端和服务器端之间的连接支持多路复用，不再需要为每一个用户请求创建一个连接，使连接建立的延迟降低，并且避免了大量文件描述符的占用，使 FRP 可以承载更高的并发数。</p></blockquote><blockquote><p>该功能默认启用，如需关闭可以在 FRP 服务端配置文件和 FRP 客户端配置文件中配置，该配置项在服务端和客户端必须一致：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># frps.ini 和 frpc.ini 中</span><br><span class="line">[common]</span><br><span class="line">tcp_mux = falseFRP </span><br></pre></td></tr></table></figure><p><strong>底层通信启用 KCP 协议</strong></p><blockquote><p>FRP 从 v0.12.0 版本开始，底层通信协议支持选择 KCP 协议，在弱网络环境下传输效率会提升明显，但是会有一些额外的流量消耗。</p></blockquote><blockquote><p>要开启 KCP 协议支持，首先要在 FRP 服务端配置文件中启用 KCP 协议支持：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line"># 指定一个 UDP 端口用于接收客户端请求 KCP 绑定的是 UDP 端口，可以和 bind_port 一样</span><br><span class="line">kcp_bind_port = 7000</span><br></pre></td></tr></table></figure><blockquote><p>其次是在 FRP 客户端配置文件指定需要使用的协议类型，目前只支持 TCP 和 KCP。其它代理配置不需要变更：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line"># server_port 指定为 FRP 服务端里 kcp_bind_port 指定的端口</span><br><span class="line">server_port = 7000</span><br><span class="line"># 指定需要使用的协议类型，默认类型为 TCP</span><br><span class="line">protocol = kcp</span><br></pre></td></tr></table></figure><blockquote><p>需要注意开放相关机器上的 UDP 端口的访问权限。</p></blockquote><p><strong>给 FRP 服务端配置连接池</strong></p><blockquote><p>默认情况下，当用户请求建立连接后，FRP 服务端才会请求 FRP 客户端主动与后端服务建立一个连接。</p></blockquote><blockquote><p>当为指定的 FRP 服务端启用连接池功能后，FRP 会预先和后端服务建立起指定数量的连接，每次接收到用户请求后，会从连接池中取出一个连接和用户连接关联起来，避免了等待与后端服务建立连接以及 FRP 客户端 和 FRP 服务端之间传递控制信息的时间。</p></blockquote><blockquote><p>首先需要在 FRP 服务端配置文件中设置每个代理可以创建的连接池上限，避免大量资源占用，客户端设置超过此配置后会被调整到当前值：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">max_pool_count = 5</span><br></pre></td></tr></table></figure><blockquote><p>其次在 FRP 客户端配置文件中为客户端启用连接池，指定预创建连接的数量：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">pool_count = 1</span><br></pre></td></tr></table></figure><blockquote><p>此功能比较适合有大量短连接请求时开启。</p></blockquote><p><strong>加密与压缩</strong></p><blockquote><p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 SSH 协议等，可通过设置 use_encryption = true，将 FRP 客户端 与 FRP 服务端之间的通信内容加密传输，将会有效防止流量被拦截。</p></blockquote><blockquote><p>如果传输的报文长度较长，通过设置 use_compression = true 对传输内容进行压缩，可以有效减小 FRP 客户端 与 FRP 服务端之间的网络流量，来加快流量转发速度，但是会额外消耗一些 CPU 资源。<br>这两个功能默认是不开启的，需要在 FRP 客户端配置文件中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用的是 snappy。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br></pre></td></tr></table></figure><p><strong>通过 FRP 客户端代理其它内网机器访问外网</strong></p><blockquote><p>FRP 客户端内置了 http_proxy 和 socks5 插件，通过这两个插件可以使其它内网机器通过 FPR 客户端的的网络访问互联网。</p></blockquote><blockquote><p>要启用此功能，首先需要在 FRP 客户端配置文件中启用相关插件，这里以 http_proxy 插件为例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 6000</span><br><span class="line">plugin = http_proxy</span><br></pre></td></tr></table></figure><blockquote><p>其次将需要通过这个代理访问外网的内部机器的代理地址设置为 4.3.2.1:6000，这样就可以通过 FRP 客户端机器的网络访问互联网了。<br>http_proxy 插件也支持认证机制，如果需要启用认证可通过配置参数 plugin_http_user 和 plugin_http_passwd 启用。</p></blockquote><blockquote><p>如需启用 Socks5 代理，只需将 plugin 的值更换为 socks5 即可。</p></blockquote><blockquote><p>通过代理连接 FRP 服务端<br>在只能通过代理访问外网的环境内，FRP 客户端支持通过 HTTP_PROXY 参数来配置代理和 FRP 服务端进行通信。要使用此功能可以通过设置系统环境变量 HTTP_PROXY 或者通过在 FRP 客户端的配置文件中设置 http_proxy 参数来使用此功能。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line">protocol = tcp</span><br><span class="line">http_proxy = http://user:pwd@4.3.2.2:8080</span><br></pre></td></tr></table></figure><blockquote><p>仅在 protocol = tcp 时生效，暂时不支持 kcp 协议。</p></blockquote><p><strong>安全地暴露内网服务</strong></p><blockquote><p>对于一些比较敏感的服务如果直接暴露于公网上将会存在安全隐患，FRP 也提供了一种安全的转发方式 STCP。使用 STCP (secret tcp) 类型的代理可以避免让任何人都能访问到穿透到公网的内网服务，要使用 STCP 模式访问者需要单独运行另外一个 FRP 客户端。</p></blockquote><blockquote><p>下面就以创建一个只有自己能访问到的 SSH 服务代理为例，FRP 服务端和其它的部署步骤相同，主要区别是在 FRP 客户端上。</p></blockquote><blockquote><p>首先配置 FRP 客户端，和常规 TCP 转发不同的是这里不需要指定远程端口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[secret_ssh]</span><br><span class="line">type = stcp</span><br><span class="line"></span><br><span class="line"># 只有 sk 一致的用户才能访问到此服务</span><br><span class="line">sk = abcdefg</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br></pre></td></tr></table></figure><blockquote><p>其次在要访问这个服务的机器上启动另外一个 FRP 客户端，配置如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[secret_ssh_visitor]</span><br><span class="line">type = stcp</span><br><span class="line"># STCP 的访问者</span><br><span class="line">role = visitor</span><br><span class="line"># 要访问的 STCP 代理的名字，和前面定义的相同。</span><br><span class="line">server_name = secret_ssh</span><br><span class="line"># 和前面定义的要一致</span><br><span class="line">sk = abcdefg</span><br><span class="line"># 绑定本地端口用于访问 ssh 服务</span><br><span class="line">bind_addr = 127.0.0.1</span><br><span class="line">bind_port = 6005</span><br></pre></td></tr></table></figure><blockquote><p>最后在本机启动一个 FRP 客户端，这样就可以通过本机 6005 端口对内网机器 SSH 服务进行访问，假设用户名为 mike：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>点对点内网穿透</strong></p><blockquote><p>在传输大量数据时如果都经过服务器中转的话，这样会对服务器端带宽压力比较大。FRP 提供了一种新的代理类型 XTCP 来解决这个问题，XTCP 模式下可以在传输大量数据时让流量不经过服务器中转。<br>使用方式同 STCP 类似，需要在传输数据的两端都部署上 FRP 客户端上用于建立直接的连接。</p></blockquote><blockquote><p>首先在 FRP 服务端配置上增加一个 UDP 端口用于支持该类型的客户端:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">bind_udp_port = 7001</span><br></pre></td></tr></table></figure><blockquote><p>其次配置 FRP 客户端，和常规 TCP 转发不同的是这里不需要指定远程端口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[p2p_ssh]</span><br><span class="line">type = xtcp</span><br><span class="line"></span><br><span class="line"># 只有 sk 一致的用户才能访问到此服务</span><br><span class="line">sk = abcdefg</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br></pre></td></tr></table></figure><blockquote><p>然后在要访问这个服务的机器上启动另外一个 FRP 客户端，配置如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[p2p_ssh_visitor]</span><br><span class="line">type = xtcp</span><br><span class="line"># XTCP 的访问者</span><br><span class="line">role = visitor</span><br><span class="line"># 要访问的 XTCP 代理的名字</span><br><span class="line">server_name = p2p_ssh</span><br><span class="line">sk = abcdefg</span><br><span class="line"># 绑定本地端口用于访问 ssh 服务</span><br><span class="line">bind_addr = 127.0.0.1</span><br><span class="line">bind_port = 6006</span><br></pre></td></tr></table></figure><blockquote><p>最后在本机启动一个 FRP 客户端，这样就可以通过本机 6006 端口对内网机器 SSH 服务进行访问，假设用户名为 mike：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><h3 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h3><blockquote><p>项目地址：<a href="https://github.com/clangcn/onekey-install-shell/%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC">https://github.com/clangcn/onekey-install-shell/下载一键部署脚本</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh</span><br><span class="line"><span class="built_in">chmod</span> 700 ./install-frps.sh  </span><br><span class="line"><span class="comment"># 安装 FRP 服务端</span></span><br><span class="line">./install-frps.sh install </span><br></pre></td></tr></table></figure><blockquote><p>配置 FRP</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./install-frps.sh # config更新 FRP 服务端</span><br><span class="line">./install-frps.sh # update卸载 FRP 服务端</span><br><span class="line">./install-frps.sh # uninstallFRP 服务端日常管理</span><br></pre></td></tr></table></figure><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p><strong>自定义服务frpc.service</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># vim /lib/systemd/system/frpc.service</span><br><span class="line">[Unit]</span><br><span class="line">Description= frpc start service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/root/code/frp/frpc -c /root/code/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">TimeoutStopSec=10</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注册服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable frpc.service</span><br><span class="line">systemctl start frpc.service</span><br><span class="line">systemctl status frpc.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;FRP-一款很好用的内网穿透工具&quot;&gt;&lt;a href=&quot;#FRP-一款很好用的内网穿透工具&quot; class=&quot;headerlink&quot; title=&quot;FRP: 一款很好用的内网穿透工具&quot;&gt;&lt;/a&gt;FRP: 一款很好用的内网穿透工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于没有公网</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Frp" scheme="https://www.rainbowrise.top/tags/Frp/"/>
    
  </entry>
  
  <entry>
    <title>Grafana笔记</title>
    <link href="https://www.rainbowrise.top/2021/10/02/Grafana%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.rainbowrise.top/2021/10/02/Grafana%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Grafana-安装笔记"><a href="#Grafana-安装笔记" class="headerlink" title="Grafana 安装笔记"></a>Grafana 安装笔记</h3><ul><li>Grafana+Prometheus打造全方位立体监控系统：<a href="https://yq.aliyun.com/articles/236395">https://yq.aliyun.com/articles/236395</a></li></ul><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul><li>官网地址：<a href="https://grafana.com/">https://grafana.com/</a></li><li>官方文档: <a href="https://grafana.com/grafana">https://grafana.com/grafana</a></li><li>安装指南: <a href="http://docs.grafana.org/installation/rpm/">http://docs.grafana.org/installation/rpm/</a></li><li>下载地址: <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></li></ul><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。它主要有以下六大特点：</p></blockquote><ul><li>展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式；</li><li>数据源：Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB等；</li><li>通知提醒：以可视方式定义最重要指标的警报规则，Grafana将不断计算并发送通知，在数据达到阈值时通过Slack、PagerDuty等获得通知；</li><li>混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源；</li><li>注释：使用来自不同数据源的丰富事件注释图表，将鼠标悬停在事件上会显示完整的事件元数据和标记；</li><li>过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询。</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>ubuntu 安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://dl.grafana.com/oss/release/grafana_6.3.3_amd64.deb </span><br><span class="line">sudo dpkg -i grafana_6.3.3_amd64.deb </span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">service grafana-server start</span><br><span class="line"></span><br><span class="line"># 访问</span><br><span class="line">http://server:3000 # 系统默认用户名和密码为admin/admin</span><br></pre></td></tr></table></figure><blockquote><p>docker 安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=grafana -p 3000:3000 grafana/grafana</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><blockquote><p>BashBoard地址: <a href="https://grafana.com/dashboards?dataSource=influxdb">https://grafana.com/dashboards?dataSource=influxdb</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Grafana-安装笔记&quot;&gt;&lt;a href=&quot;#Grafana-安装笔记&quot; class=&quot;headerlink&quot; title=&quot;Grafana 安装笔记&quot;&gt;&lt;/a&gt;Grafana 安装笔记&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Grafana+Prometheus打造全方位立</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.rainbowrise.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://www.rainbowrise.top/tags/Docker/"/>
    
    <category term="Grafana" scheme="https://www.rainbowrise.top/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>IaaS、PaaS、SaaS、CaaS、MaaS五者的区别（云计算概念）</title>
    <link href="https://www.rainbowrise.top/2021/10/02/IaaS%E3%80%81PaaS%E3%80%81SaaS%E3%80%81CaaS%E3%80%81MaaS%E4%BA%94%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E5%BF%B5%EF%BC%89/"/>
    <id>https://www.rainbowrise.top/2021/10/02/IaaS%E3%80%81PaaS%E3%80%81SaaS%E3%80%81CaaS%E3%80%81MaaS%E4%BA%94%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E5%BF%B5%EF%BC%89/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="云计算构架图"><a href="#云计算构架图" class="headerlink" title="云计算构架图"></a>云计算构架图</h3><blockquote><p>很明显，这五者之间主要的区别在于第一个单词，而aaS都是as-a-service（即服务）的意思，这五个模式都是近年来兴起的，且这五者都是云计算的落地产品，所以我们先来了解一下云计算是什么。</p></blockquote><h4 id="架构图："><a href="#架构图：" class="headerlink" title="架构图："></a>架构图：</h4><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2020/xaasCloud20200911102822.png" alt="架构图"></p><h5 id="1、云计算是什么"><a href="#1、云计算是什么" class="headerlink" title="1、云计算是什么"></a>1、云计算是什么</h5><p>云计算（cloud computing）是基于互联网的相关服务的增加、使用和交付模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。云是网络、互联网的一种比喻说法。云计算甚至可以让你体验每秒10万亿次的运算能力，拥有这么强大的计算能力可以模拟核爆炸、预测气候变化和市场发展趋势。用户通过电脑、笔记本、手机等方式接入数据中心，按自己的需求进行运算。 </p><p>通俗的来说云计算就是以前的服务器计算的升级版，其主要有扩展性强、廉价、虚拟化、计算能力强这几个特点。</p><h5 id="2、IaaS是什么意思？"><a href="#2、IaaS是什么意思？" class="headerlink" title="2、IaaS是什么意思？"></a>2、IaaS是什么意思？</h5><p>IaaS: Infrastructure-as-a-Service（基础设施即服务） 第一层叫做IaaS，有时候也叫做Hardware-as-a-Service。<br>几年前如果你想在办公室或者公司的网站上运行一些企业应用，你需要去买服务器，或者别的高昂的硬件来控制本地应用，让你的业务运行起来。<br>但是现在有了IaaS，你可以将硬件外包到别的地方去。IaaS公司会提供场外服务器，存储和网络硬件，你可以租用。节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。</p><p>一些大的IaaS公司包括Amazon, Microsoft, VMWare, Rackspace和Red Hat.不过这些公司又都有自己的专长，比如Amazon和微软给你提供的不只是IaaS，他们还会将其计算能力出租给你来host你的网站。</p><h5 id="3、PaaS是什么意思？"><a href="#3、PaaS是什么意思？" class="headerlink" title="3、PaaS是什么意思？"></a>3、PaaS是什么意思？</h5><p>PaaS: Platform-as-a-Service（平台即服务） 第二层就是所谓的PaaS，某些时候也叫做中间件。你公司所有的开发都可以在这一层进行，节省了时间和资源。</p><p>PaaS公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统。这节省了你在硬件上的费用，也让分散的工作室之间的合作变得更加容易。网页应用管理，应用设计，应用虚拟主机，存储，安全以及应用开发协作工具等。<br>一些大的PaaS提供者有Google App Engine,Microsoft Azure，Force.com,Heroku，Engine Yard。最近兴起的公司有AppFog, Mendix 和 Standing Cloud</p><h5 id="4、SaaS是什么意思？"><a href="#4、SaaS是什么意思？" class="headerlink" title="4、SaaS是什么意思？"></a>4、SaaS是什么意思？</h5><p>SaaS: Software-as-a-Service（软件即服务）<br>第三层也就是所谓SaaS。这一层是和你的生活每天接触的一层，大多是通过网页浏览器来接入。任何一个远程服务器上的应用都可以通过网络来运行，就是SaaS了。<br>你消费的服务完全是从网页如Netflix, MOG, Google Apps, Box.net, Dropbox或者苹果的iCloud那里进入这些分类。尽管这些网页服务是用作商务和娱乐或者两者都有，但这也算是云技术的一部分。<br>一些用作商务的SaaS应用包括Citrix的GoToMeeting，Cisco的WebEx，Salesforce的CRM，ADP，Workday和SuccessFactors。</p><p>目前三者的发展情况都不错，三者之间也有着较为密切的联系，其中IaaS是基础层、PaaS是平台层的，而SaaS是软件层的。<br>近年来随着团队协作的深入发展，CaaS、MaaS也不断的进入人们的视野，那CaaS、MaaS又是什么意思呢？</p><h5 id="5、CaaS是什么意思？"><a href="#5、CaaS是什么意思？" class="headerlink" title="5、CaaS是什么意思？"></a>5、CaaS是什么意思？</h5><p>CaaS是Communications-as-a-Service缩写，意思是通讯即服务(也可称为协作即服务)。CaaS是将传统电信的能力如消息、语音、视频、会议、通信协同等封装成API(Application Programming Interface，应用软件编程接口)或者SDK(Software Development Kit，软件开发工具包)通过互联网对外开放，提供给第三方（企业、SME、垂直行业、CP/SP以及个人开发者等等）使用，将电信能力真正作为服务对外提供。<br>也被称为云计算的第四种业务形式，目前国内华为已经在着手在建立CaaS的生态圈。 </p><h5 id="6、MaaS是什么意思？"><a href="#6、MaaS是什么意思？" class="headerlink" title="6、MaaS是什么意思？"></a>6、MaaS是什么意思？</h5><p>MaaS(Machine as a Service)物联网即服务，这个概念伴随着物联网产生，物联网常见的两种业务形式就是MAI与MaaS，因此MaaS属于物联网业务形式的一种。<br>随着物联网业务量的增加，对数据存储和计算量的需求将带来对”云计算”能力的要求：<br>云计算：从计算中心到数据中心在物联网的初级阶段，PoP即可满足需求<br>在物联网高级阶段，可能出现MVNO/MMO营运商（国外已存在多年），需要虚拟化云计算技术，SOA等技术的结合实现物联网的泛在服务： TaaS （everyTHING As A Service) 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;云计算构架图&quot;&gt;&lt;a href=&quot;#云计算构架图&quot; class=&quot;headerlink&quot; title=&quot;云计算构架图&quot;&gt;&lt;/a&gt;云计算构架图&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;很明显，这五者之间主要的区别在于第一个单词，而aaS都是as-a-service（</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Cloud" scheme="https://www.rainbowrise.top/tags/Cloud/"/>
    
    <category term="Xaas" scheme="https://www.rainbowrise.top/tags/Xaas/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins部署（ubuntu）</title>
    <link href="https://www.rainbowrise.top/2021/10/02/Jenkins%E9%83%A8%E7%BD%B2%EF%BC%88ubuntu%EF%BC%89/"/>
    <id>https://www.rainbowrise.top/2021/10/02/Jenkins%E9%83%A8%E7%BD%B2%EF%BC%88ubuntu%EF%BC%89/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>一般网站部署的流程：需求分析—原型设计—开发代码—内网部署-提交测试—确认上线—备份数据—外网更新-最终测试，如果发现外网部署的代码有异常，需要及时回滚。</p></blockquote><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><blockquote><p>通过jenkins工具平台实现全自动部署+测试，是一个可扩展的持续集成引擎，是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins非常易于安装和配置，简单易用。</p></blockquote><p><strong>简单来说：</strong></p><blockquote><p>开发人员：写好代码，不需要自己进行源码编译、打包等工作，直接将代码分支存放在SVN、GIT仓库即可。 </p></blockquote><blockquote><p>运维人员：减轻人工干预的错误率，ansible一键完成了同时解放运维人员繁杂的上传代码、手动备份、更新.</p></blockquote><blockquote><p>测试人员：可以通过jenkins进行简单的代码及网站测试.</p></blockquote><p><strong>持续集成的意义(总结 提升工作效率)</strong></p><blockquote><p>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</p></blockquote><blockquote><p>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</p></blockquote><blockquote><p>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心</p></blockquote><p><strong>持续集成的组件</strong></p><blockquote><p>一个自动构建过程，包括自动编译、分发、部署和测试<br>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，例如SVN、GIT代码库<br>一个jenkins持续集成服务器就是一个配置简单和使用方便的持续集成服务器</p></blockquote><h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><blockquote><p>由于jenkins是使用java代码开发的，所以我们需要安装java容器才能运行jenkins,又因为java的web服务器用的是tomcat，所以我们要安装JDK+Tomcat</p></blockquote><p><strong>安装jdk+tomcat</strong></p><blockquote><p>安装jdk， <a href="!https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">官网下载</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apt安装</span></span><br><span class="line"><span class="comment"># apt install openjdk-8-jdk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源码安装</span></span><br><span class="line"><span class="comment"># 官方下载对应的*.tar.gz, 以jdk-8u211-linux-x64.tar.gz为例</span></span><br><span class="line"><span class="comment"># 创建一个目录用于存放解压后的文件，并解压缩到该目录下</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /usr/lib/jvm</span><br><span class="line">sudo tar -zxvf jdk-8u211-linux-x64.tar.gz -C /usr/lib/jvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">sudo vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件末尾追加如下内容</span></span><br><span class="line"><span class="comment"># set oracle jdk environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_211</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认jdk</span></span><br><span class="line">update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_211/bin/java 300  </span><br><span class="line">update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_211/bin/javac 300  </span><br><span class="line">update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_211/bin/jar 300   </span><br><span class="line">update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_211/bin/javah 300   </span><br><span class="line">update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_211/bin/javap 300 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">update-alternatives --config java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><blockquote><p>安装tomcat</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="built_in">cd</span> /opt/ &amp;&amp; wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.40/bin/apache-tomcat-8.5.40.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar zxvf apache-tomcat-8.5.40.tar.gz</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/tomcat &amp;&amp; <span class="built_in">mv</span> apache-tomcat-8.5.40/* /usr/local/tomcat</span><br></pre></td></tr></table></figure><p><strong>安装jenkins</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将存储库密钥添加到系统。添加密钥后，系统将返回OK 。</span></span><br><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Debian包存储库地址附加到服务器的sources.list ：</span></span><br><span class="line"><span class="built_in">echo</span> deb http://pkg.jenkins.io/debian-stable binary/ | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/jenkins.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行update ，以便apt-get将使用新的存储库：</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Jenkins及其依赖项，包括Java：</span></span><br><span class="line">sudo apt-get install jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start jenkins</span><br><span class="line"> </span><br><span class="line">netstat -tnlp | grep 8080</span><br><span class="line"><span class="comment"># tcp        0      0 :::8080                     :::*                        LISTEN     6900/java</span></span><br></pre></td></tr></table></figure><h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><blockquote><p>访问http://<sever_ip>:8080, 访问Jenkins， 出现Unlock Jenkins 页面。如果无法访问请检查系统防火墙、云的安全组设置。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-01.png"></p></blockquote><blockquote><p>查看密码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><blockquote><p>复制输出的内容，粘贴到Administrator password，输入 exit 退出容器</p></blockquote><blockquote><p>django项目需要插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git plugin</span><br><span class="line">python plugin</span><br><span class="line">pipeline</span><br></pre></td></tr></table></figure><blockquote><p>此时进行下一步你会看到此界面，点击 select plugins to install<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-02.png"></p></blockquote><blockquote><p>等待安装完成<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-03.png"></p></blockquote><blockquote><p>如果有插件安装失败，安装结束之后会有”Retry”重试选项，点击重试即可。</p></blockquote><blockquote><p>进行下一步<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-04.png"></p></blockquote><blockquote><p>进入主界面后如果看到右上角有错误的提示信息，那么请把你的Jenkins升级到最新版本，然后更新一下插件。</p></blockquote><blockquote><p>如果更新之后出现协议警告,可以直接点击警告中的Protocol Configuration，或者点击系统管理—&gt;全局安全配置—&gt;Agents—&gt;Agent protocols</p></blockquote><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-05.png"></p><h3 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h3><blockquote><p>【系统管理】-&gt; 【插件管理】-&gt; 【高级】-&gt; 【升级站点】</p></blockquote><blockquote><p>更换地址：<a href="http://mirror.xmission.com/jenkins/updates/current/update-center.json">http://mirror.xmission.com/jenkins/updates/current/update-center.json</a><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-06.png"></p></blockquote><h3 id="添加远程主机"><a href="#添加远程主机" class="headerlink" title="添加远程主机"></a>添加远程主机</h3><blockquote><p>添加凭证， 输入远程主机的账号密码，ID 用UUID 即可。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-07.png"></p></blockquote><blockquote><p>凭证-&gt;系统-&gt;全局凭证-&gt;添加凭证<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-08.png"></p></blockquote><blockquote><p>系统管理-&gt;系统设置-&gt;SSH remote host<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-09.png"></p></blockquote><h3 id="创建django测试项目"><a href="#创建django测试项目" class="headerlink" title="创建django测试项目"></a>创建django测试项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line">django-admin startproject mtest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app</span></span><br><span class="line">python manage.py startapp mayw</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings中添加app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;mayw&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello django world !&lt;h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改路由urls.py</span></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">from mayw import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(r<span class="string">&#x27;^$&#x27;</span>, views.index)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到码云</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Jenkins-创建任务"><a href="#Jenkins-创建任务" class="headerlink" title="Jenkins 创建任务"></a>Jenkins 创建任务</h3><blockquote><p>1<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-11.png"><br>2<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-10.png"><br>3 General<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-12.png"><br>4 源码管理（Source Code Management）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-13.png"><br>5 添加ssh私钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;ma.yawei@h3c.com&quot;</span> -f ~/.ssh/id-rsa-gitee</span><br><span class="line">git config --global user.name <span class="string">&quot;mayw&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;ma.yawei@h3c.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-14.png"></p><blockquote><p>6 构建触发器（Build Triggers）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-15.png"><br>H/2 * * * * 2分钟从git上pull一次代码，若代码有变化就构建环境</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* * * * *  </span><br><span class="line">在master-build中创建触发器,设定1分钟执行一次</span><br><span class="line">poll SCM(日常表 可以根据时间来判断)</span><br><span class="line">H/2 * * * *    (2分钟检查一下版本库  如果有更新就不触发  如果没有更新就不触发)</span><br><span class="line">注：Schedule的配置规则是有5个空格隔开的字符组成，从左到右分别代表：分 时 天 月 年。*代表所有，0 20 * * * 表示&quot;在任何年任何月任何天20点0分&quot;进行构建</span><br></pre></td></tr></table></figure><blockquote><p>7 构建（Build）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-16.png"></p></blockquote><blockquote><p>8 构建后操作</p></blockquote><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-17.png"></p><h3 id="创建内网部署任务"><a href="#创建内网部署任务" class="headerlink" title="创建内网部署任务"></a>创建内网部署任务</h3><blockquote><p>注意：<br>BUILD_ID=DONTKILLME : 在jenkins里面在后台运行的程序都会被jenkins自动杀死 所以需要加上BUILDID这个参数。加了这个参数你的程序就不会被杀。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME nohup python manage.py runserver 0.0.0.0:8000 &amp;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-18.png"></p><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-19.png"></p><p><img src="https://gitee.com/sunglowrise/images/raw/masterydnote/2019/jenkins-20.png"></p><blockquote><p>邮箱配置（系统管理-&gt; 系统设置 -&gt; 邮件通知）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在&quot;Jenkins Location&quot;设置系统管理员地址（重要：不能省略！）</span><br><span class="line">在&quot;邮件通知&quot;部分配置发送邮件的用户名、密码（注意这里的密码使用的是163邮箱设置的&quot;客户端授权码&quot;，不是登陆密码）</span><br><span class="line">勾选&quot;通过发送测试邮件测试配置&quot;，填入测试收件人，点击&quot;Test Configuration&quot;</span><br><span class="line">到163邮箱里check新邮件</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-25.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-24.png"></p><h3 id="创建外网部署任务"><a href="#创建外网部署任务" class="headerlink" title="创建外网部署任务"></a>创建外网部署任务</h3><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-21.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-22.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-23.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程主机要做的事情：</span></span><br><span class="line"><span class="comment"># 安装django</span></span><br><span class="line"><span class="comment"># 创建一个目录把代码版本库拉取到本地</span></span><br><span class="line"><span class="comment"># 写脚本来运行代码 </span></span><br><span class="line"><span class="comment"># 脚本内容</span></span><br><span class="line"><span class="comment"># xxx.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># start.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data/git-test</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> /data/git-test/test11</span><br><span class="line"><span class="built_in">nohup</span> python manage.py runserver 0.0.0.0:8000 &gt; /dev/null   2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一般网站部署的流程：需求分析—原型设计—开发代码—内网部署-提交测试—确认上线—备份数据—外网更新-最终测试，如果</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Jenkins" scheme="https://www.rainbowrise.top/tags/Jenkins/"/>
    
    <category term="Ubuntu" scheme="https://www.rainbowrise.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks, Shadowsockr 安装使用</title>
    <link href="https://www.rainbowrise.top/2021/10/02/Shadowsocks,%20Shadowsockr%20%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.rainbowrise.top/2021/10/02/Shadowsocks,%20Shadowsockr%20%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Shadowsocks-一键安装脚本（四合一）"><a href="#Shadowsocks-一键安装脚本（四合一）" class="headerlink" title="Shadowsocks  一键安装脚本（四合一）"></a>Shadowsocks  一键安装脚本（四合一）</h3><h4 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks-all.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line"><span class="comment"># 启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span></span><br><span class="line"><span class="comment"># Shadowsocks-Python 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class="line"></span><br><span class="line"><span class="comment"># ShadowsocksR 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-Go 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-libev 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure><h4 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Shadowsocks-Python 版：</span></span><br><span class="line">/etc/shadowsocks-python/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># ShadowsocksR 版：</span></span><br><span class="line">/etc/shadowsocks-r/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-Go 版：</span></span><br><span class="line">/etc/shadowsocks-go/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-libev 版：</span></span><br><span class="line">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure><h4 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</span></span><br><span class="line"><span class="comment"># 使用root用户登录，运行以下命令：</span></span><br><span class="line">./shadowsocks-all.sh uninstall</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a></p><p>ishadow：<a href="https://d.ishadowx.com/">https://d.ishadowx.com</a></p><h2 id="Shadowsockr"><a href="#Shadowsockr" class="headerlink" title="Shadowsockr"></a>Shadowsockr</h2><h3 id="1-安装ssr"><a href="#1-安装ssr" class="headerlink" title="1. 安装ssr"></a>1. 安装ssr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.djangoz.com/ssr</span><br><span class="line">sudo <span class="built_in">mv</span> ssr /usr/local/bin</span><br><span class="line">sudo <span class="built_in">chmod</span> 766 /usr/local/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般修改以下6项:</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,     //服务器ip</span><br><span class="line"><span class="string">&quot;server_port&quot;</span>:8388,     //端口</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;m&quot;</span>,    //密码</span><br><span class="line"><span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;origin&quot;</span>,    //协议插件</span><br><span class="line"><span class="string">&quot;obfs&quot;</span>:<span class="string">&quot;http_simple&quot;</span>,   //混淆插件</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>, //加密方式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-polipo-安装"><a href="#2-polipo-安装" class="headerlink" title="2. polipo 安装"></a>2. polipo 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install polipo</span><br></pre></td></tr></table></figure><h5 id="修改配置文件-etc-polipo-config"><a href="#修改配置文件-etc-polipo-config" class="headerlink" title="修改配置文件/etc/polipo/config"></a>修改配置文件/etc/polipo/config</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="comment"># from the default values. See /usr/share/doc/polipo/examples/config.sample </span></span><br><span class="line"><span class="comment"># and &quot;polipo -v&quot; for variables you can tweak and further information. </span></span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">proxyAddress = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment">#proxyPort = 8123</span></span><br><span class="line"><span class="comment">#allowedClients = 192.168.31.0/24,192.168.1.0/24  #允许使用代理的客户</span></span><br><span class="line"><span class="comment">#daemonise = true</span></span><br><span class="line"></span><br><span class="line">socksParentProxy = <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="重启polipo服务"><a href="#重启polipo服务" class="headerlink" title="重启polipo服务"></a>重启polipo服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service polipo restart</span><br><span class="line">或</span><br><span class="line">/etc/init.d/polipo start</span><br></pre></td></tr></table></figure><h5 id="设置环境变量-bashrc"><a href="#设置环境变量-bashrc" class="headerlink" title="设置环境变量~/.bashrc"></a>设置环境变量~/.bashrc</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在~/.bashrc下添加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:8123&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:8123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="ssr-config"><a href="#ssr-config" class="headerlink" title="ssr config"></a>ssr config</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;: &quot;149.248.34.161&quot;,</span><br><span class="line">    &quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class="line">    &quot;server_port&quot;: 2333,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;: 1080,</span><br><span class="line"></span><br><span class="line">    &quot;password&quot;: &quot;sdjiwn;zalsdlsa[pojas;dkjSDsdklas;_-SAkljsd&quot;,</span><br><span class="line">    &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;protocol&quot;: &quot;auth_sha1_v4&quot;,</span><br><span class="line">    &quot;protocol_param&quot;: &quot;&quot;,</span><br><span class="line">    &quot;obfs&quot;: &quot;plain&quot;,</span><br><span class="line">    &quot;obfs_param&quot;: &quot;&quot;,</span><br><span class="line">    &quot;speed_limit_per_con&quot;: 0,</span><br><span class="line">    &quot;speed_limit_per_user&quot;: 0,</span><br><span class="line"></span><br><span class="line">    &quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class="line">    &quot;additional_ports_only&quot; : false, // only works under multi-user mode</span><br><span class="line">    &quot;timeout&quot;: 120,</span><br><span class="line">    &quot;udp_timeout&quot;: 60,</span><br><span class="line">    &quot;dns_ipv6&quot;: false,</span><br><span class="line">    &quot;connect_verbose_info&quot;: 0,</span><br><span class="line">    &quot;redirect&quot;: &quot;&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Shadowsocks-一键安装脚本（四合一）&quot;&gt;&lt;a href=&quot;#Shadowsocks-一键安装脚本（四合一）&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks  一键安装脚本（四合一）&quot;&gt;&lt;/a&gt;Shadowsocks  一键安</summary>
      
    
    
    
    <category term="VPN" scheme="https://www.rainbowrise.top/categories/VPN/"/>
    
    
    <category term="VPN" scheme="https://www.rainbowrise.top/tags/VPN/"/>
    
    <category term="Ssr" scheme="https://www.rainbowrise.top/tags/Ssr/"/>
    
  </entry>
  
  <entry>
    <title>sublime&amp;virtualenv开发python代码</title>
    <link href="https://www.rainbowrise.top/2021/10/02/Vagant%20%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.rainbowrise.top/2021/10/02/Vagant%20%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vagrant下载"><a href="#Vagrant下载" class="headerlink" title="Vagrant下载"></a>Vagrant下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">地址：https://www.vagrantup.com/downloads.html</span><br><span class="line">文档：https://www.vagrantup.com/docs/</span><br></pre></td></tr></table></figure><h4 id="VirtuelBox下载"><a href="#VirtuelBox下载" class="headerlink" title="VirtuelBox下载"></a>VirtuelBox下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址：https://www.virtualbox.org/wiki/Downloads</span><br></pre></td></tr></table></figure><h4 id="下载镜像Box"><a href="#下载镜像Box" class="headerlink" title="下载镜像Box"></a>下载镜像Box</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三方box：http://www.vagrantbox.es/</span><br><span class="line">官方box：https://atlas.hashicorp.com/boxes/search</span><br></pre></td></tr></table></figure><h4 id="Vagrant使用"><a href="#Vagrant使用" class="headerlink" title="Vagrant使用"></a>Vagrant使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Box镜像</span></span><br><span class="line">vagrant box add &#123;box-name&#125; &#123;box-url&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Box列表</span></span><br><span class="line">vagrant box list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Box</span></span><br><span class="line">vagrant box remove &#123;box-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Vagrant环境，执行init后，会在当前文件夹创建一个Vagrant配置文件Vagrantfile</span></span><br><span class="line">vagrant init &#123;box-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Vagrant</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Vagrant</span></span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Vagrant， 修改完后执行vagrant reload重启虚拟机生效配置文件。</span></span><br><span class="line">vagrant reload</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置共享文件夹，修改Vagrantfile：</span></span><br><span class="line"></span><br><span class="line">config.vm.synced_folder <span class="string">&quot;/Code/web/&quot;</span>, <span class="string">&quot;/web&quot;</span>, create:<span class="literal">true</span>,</span><br><span class="line">:owner =&gt; <span class="string">&quot;vagrant&quot;</span>,</span><br><span class="line">:group =&gt; <span class="string">&quot;www-data&quot;</span>,</span><br><span class="line">:mount_options =&gt; [<span class="string">&quot;dmode=775&quot;</span>,<span class="string">&quot;fmode=664&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置解释：</span></span><br><span class="line"><span class="comment">#  config.vm.synced_folder host_folder vagrant_folder</span></span><br><span class="line"><span class="comment"># 第一个参数是Host机的文件夹路径，如果你填写的是相对路径的话，则文件夹是相对于当前虚拟机目录。</span></span><br><span class="line"><span class="comment"># 第二个参数是虚拟机的文件夹路径，这个路径必须是绝对路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数：</span></span><br><span class="line"><span class="comment"># create：Bool值。当Host机目录不存在是，是否自动创建。</span></span><br><span class="line"><span class="comment"># group：虚拟机文件夹所属用户组。</span></span><br><span class="line"><span class="comment"># owner：虚拟机文件夹所属用户。</span></span><br><span class="line"><span class="comment"># disabled：Bool值。是否禁用。</span></span><br><span class="line"><span class="comment"># mount_options：挂载参数。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改端口映射"><a href="#修改端口映射" class="headerlink" title="修改端口映射"></a>修改端口映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑Vagrantfile</span></span><br><span class="line"><span class="comment"># 在 Vagrant.configure(&quot;2&quot;) do |config| 下面新增一行</span></span><br><span class="line">config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, guest: 80, host: 8080</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改虚拟机内存"><a href="#修改虚拟机内存" class="headerlink" title="修改虚拟机内存"></a>修改虚拟机内存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件里有写好的配置方法，直接修改这个就行了，但是要注意把注释打开。</span></span><br><span class="line"></span><br><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |vb|  </span><br><span class="line"><span class="comment"># Customize the amount of memory on the VM:</span></span><br><span class="line">vb.memory = <span class="string">&quot;1024&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="修改网卡设置"><a href="#修改网卡设置" class="headerlink" title="修改网卡设置"></a>修改网卡设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 编辑Vagrantfil</span><br><span class="line"># 在 Vagrant.configure(&quot;2&quot;) do |config| 下面新增一行</span><br><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.31.100&quot;</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>vagrant init</td><td>初始化虚拟机</td></tr><tr><td>vagrant up</td><td>启动虚拟机</td></tr><tr><td>vagrant halt</td><td>关闭虚拟机</td></tr><tr><td>vagrant reload</td><td>重启虚拟机</td></tr><tr><td>vagrant suspend</td><td>挂起虚拟机</td></tr><tr><td>vagrant ssh</td><td>登录虚拟机</td></tr><tr><td>vagrant status</td><td>查看虚拟机运行状态</td></tr><tr><td>vagrant destroy</td><td>销毁虚拟机</td></tr><tr><td>vagrant box list</td><td>查看本地Box列表</td></tr><tr><td>vagrant box add {box-name} {box-url}</td><td>添加Box</td></tr><tr><td>vagrant box remove {box-name}</td><td>删除Box</td></tr><tr><td>vagrant package –output xxx.box</td><td>打包虚拟机成Box</td></tr><tr><td>vagrant destroy</td><td>删除虚拟机</td></tr></tbody></table><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Apache/Nginx 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，</span></span><br><span class="line"><span class="comment"># 是由于静态文件缓存造成的。需要对虚拟机里的 Apache/Nginx </span></span><br><span class="line"><span class="comment"># 配置文件进行修改：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache 配置（httpd.conf 或者 apache.conf）添加：</span></span><br><span class="line">EnableSendfile off</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 配置（nginx.conf）添加：</span></span><br><span class="line">sendfile off;</span><br></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><h5 id="Vagrant介绍"><a href="#Vagrant介绍" class="headerlink" title="Vagrant介绍"></a>Vagrant介绍</h5><blockquote><p>Vagrant 是一款用来构建虚拟开发环境的工具，常适合 php/python/ruby/java 这类语言开发 web 应用。</p></blockquote><h5 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h5><blockquote><p>Provider：供应商，在这里指Vagrant调用的虚拟化工具。Vagrant本身并没有能力创建虚拟机，它是调用一些虚拟化工具来创建，如VirtualBox、VMWare、Xen、Docker，甚至AWS，这些虚拟化工具只要安装好了，vagrant会自动封装在底层通过统一的命令调用。也就是说使用vagrant时你电脑上还需要安装对应的Provider，默认是免费开源的virtualbox。</p></blockquote><blockquote><p>Box：可被Vagrant直接使用的虚拟机镜像文件，大小根据内容的不同从200M-2G不等。针对不同的Provider，Box文件的格式是不一样的，从 vagrantcloud.com 你可以找到社区维护的box。</p></blockquote><blockquote><p>Vagrantfile：Vagrant根据Vagrantfile中的配置来创建虚拟机，是Vagrant的核心。在Vagrantfile文件中你需要指明使用哪个Box（可以下载好的或自己制作，或指定在线的URL地址），虚拟机使用的内存大小和CPU，需要预安装哪些软件，虚拟机的网络配置，与host的共享目录等。</p></blockquote><blockquote><p>Provisioner：是Vagrant的插件的一种。大部分现成的box并不是你正好想要的，通过使用你熟悉的provisioner，比如Puppet，可以在你使用vagrant up启动虚拟机时自动的安装软件、修改配置等初始化操作。当然你也可以在最先启动虚拟机后，使用vagrant ssh进去然后手动安装软件，但毕竟不是所有人都是系统管理员，写好Vagrantfile后无需人工干预马上就可以使用vm。目前支持并实现的provisioning有Puppet、Salt、Ansible、Chef这些知名的自动化运维工具，当然需要一定的使用经验；也可以使用shell provisioner，故名思议这个插件就是通过执行shell命令完成统一的作用。</p></blockquote><blockquote><p>Guest Additions：这个是常在下载 base box 介绍里有的，一般用来实现host到vm的端口转发、目录共享，在开发环境上都建议装上以便测试。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Vagrant下载&quot;&gt;&lt;a href=&quot;#Vagrant下载&quot; class=&quot;headerlink&quot; title=&quot;Vagrant下载&quot;&gt;&lt;/a&gt;Vagrant下载&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.rainbowrise.top/categories/Linux/"/>
    
    
    <category term="Vagrant" scheme="https://www.rainbowrise.top/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title>npm 包下载很慢解决办法</title>
    <link href="https://www.rainbowrise.top/2021/10/02/npm%20%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%BE%88%E6%85%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://www.rainbowrise.top/2021/10/02/npm%20%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%BE%88%E6%85%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装Node时自带的npm地址默认是：<a href="http://registry.npmjs.org/">http://registry.npmjs.org</a> </p></blockquote><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure><h4 id="1-通过config命令"><a href="#1-通过config命令" class="headerlink" title="1. 通过config命令"></a>1. 通过config命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org</span><br><span class="line">（如果上面配置正确这个命令会有字符串response）</span><br></pre></td></tr></table></figure><h4 id="2-命令行指定"><a href="#2-命令行指定" class="headerlink" title="2. 命令行指定"></a>2. 命令行指定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm --registry http://registry.cnpmjs.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-编辑node-modules-npm-npmrc加入下面内容"><a href="#3-编辑node-modules-npm-npmrc加入下面内容" class="headerlink" title="3. 编辑node_modules\npm.npmrc加入下面内容"></a>3. 编辑node_modules\npm.npmrc加入下面内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry = http://registry.cnpmjs.org</span><br></pre></td></tr></table></figure><blockquote><p>如果上面的npm地址不行的话，大家可以试试淘宝的npm，非常稳定:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址：https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="4-通过cnpm使用"><a href="#4-通过cnpm使用" class="headerlink" title="4. 通过cnpm使用"></a>4. 通过cnpm使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="npm地址"><a href="#npm地址" class="headerlink" title="npm地址"></a>npm地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 默认</span><br><span class="line">http://registry.npmjs.org </span><br><span class="line"></span><br><span class="line"># 国内npm地址</span><br><span class="line">http://registry.cnpmjs.org</span><br><span class="line"></span><br><span class="line"># 淘宝npm地址</span><br><span class="line">https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;安装Node时自带的npm地址默认是：&lt;a href=&quot;http://registry.npmjs.org/&quot;&gt;http://registry.npmjs.org&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;临时使用&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Nodejs" scheme="https://www.rainbowrise.top/tags/Nodejs/"/>
    
    <category term="Npm" scheme="https://www.rainbowrise.top/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>sublime&amp;virtualenv开发python代码</title>
    <link href="https://www.rainbowrise.top/2021/10/02/sublime&amp;virtualenv%E5%BC%80%E5%8F%91python%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.rainbowrise.top/2021/10/02/sublime&amp;virtualenv%E5%BC%80%E5%8F%91python%E4%BB%A3%E7%A0%81/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sublime-amp-virtualenv开发python代码"><a href="#sublime-amp-virtualenv开发python代码" class="headerlink" title="sublime&amp;virtualenv开发python代码"></a>sublime&amp;virtualenv开发python代码</h3><h4 id="1-基础安装"><a href="#1-基础安装" class="headerlink" title="1. 基础安装"></a>1. 基础安装</h4><ul><li>安装python, 并把python目录添加到 $path</li><li>安装virtualenv<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple virtualenv</span><br></pre></td></tr></table></figure></li><li><a href="http://www.sublimet/">下载</a> sublimetext3 推荐portable版。</li></ul><h4 id="2-配置sublime（安装Virtulalenv插件）"><a href="#2-配置sublime（安装Virtulalenv插件）" class="headerlink" title="2. 配置sublime（安装Virtulalenv插件）"></a>2. 配置sublime（安装Virtulalenv插件）</h4><ul><li><p>添加Virtualenv插件</p><blockquote><p>ctrl+shift+p 出现悬浮框，输入package，然后选择package control–install package，输入virtualenv，选择它回车即可安装，安装完后会出现一个新窗口Package Control Messages，有Virtualenv简介。 </p></blockquote></li><li><p>新建python虚拟环境</p><blockquote><p>Crtl+Shift+P，选中Virtualenv:New选项，在SublimeText底部Virtualenv Path输入虚拟环境安装目录后回车键。等待安装完成后，Tool-&gt;Build systems 中选中Python+Virtualenv，即可使用虚拟环境来执行python，但是在执行前需要先运行python虚拟环境； </p></blockquote></li><li><p>运行python虚拟环境</p><blockquote><p>Project -&gt; Add forlder to Project， 选择D:\sublime\（推荐：其实虚拟环境目录是安装在根目录下），在左侧即可看到安装的虚拟环境，Crtl+Shift+P，选中Virtualenv:Activate选项，选择对应的虚拟环境即可激活。激活之后,Crtl+Shift+P可以看到选项中多了一个Virtualenv:Deactivate，通过这个可以关闭虚拟环境；删除也看得到。 </p></blockquote></li><li><p>Ctrl+B 执行 python文件</p><blockquote><p>Sublime Text默认Ctrl+B执行python程序不支持交互式默认以及raw_input等，所以有时需通过SublimeREPL来执行python程序. </p></blockquote></li></ul><blockquote><p>SublimeText3 安装SublimeREPL插件（Crtl+Shift+P），该插件调用的python默认为系统path中设置的 python</p></blockquote><ul><li>为SublimeREPL添加快捷键 <blockquote><p>Preference-&gt;key Bindings-&gt;user中添加下面配置，<br>其中F2用来执行python文件，对应于Tools-&gt;SublimeREPL-&gt;python-&gt;Python RUN current file<br>其中F1用来进入python交互式模式，对应于Tools-&gt;SublimeREPL-&gt;python-&gt;Python</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sublime-amp-virtualenv开发python代码&quot;&gt;&lt;a href=&quot;#sublime-amp-virtualenv开发python代码&quot; class=&quot;headerlink&quot; title=&quot;sublime&amp;amp;virtualenv开发pyth</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Sublime" scheme="https://www.rainbowrise.top/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker安装Jenkins</title>
    <link href="https://www.rainbowrise.top/2021/10/02/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>https://www.rainbowrise.top/2021/10/02/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Jenkins/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jenkins-简介"><a href="#Jenkins-简介" class="headerlink" title="Jenkins 简介"></a>Jenkins 简介</h3><blockquote><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p></blockquote><h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><ol><li><p>新建Dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/jenkins &amp;&amp; <span class="built_in">cd</span> /opt/jenkins &amp;&amp; vim Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile 内容</span></span><br><span class="line">FROM jenkins</span><br><span class="line"></span><br><span class="line">USER root</span><br><span class="line"><span class="comment">#清除基础镜像设置的源，切换成aliyun的jessie源;使用腾讯云需要将 aliyun 改为 tencentyun</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span> &gt; /etc/apt/sources.list.d/jessie-backports.list \</span><br><span class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian jessie main contrib non-free&quot;</span> &gt; /etc/apt/sources.list \</span><br><span class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新源并安装缺少的包</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y libltdl7 vim sudo &amp;&amp; apt-get update</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;jenkins ALL=NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers</span><br><span class="line"></span><br><span class="line">ARG dockerGid=999</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;docker:x:<span class="variable">$&#123;dockerGid&#125;</span>:jenkins&quot;</span> &gt;&gt; /etc/group </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker-compose 因为构建环境需要</span></span><br><span class="line">RUN curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line">RUN <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">USER jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>构建jenkins镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/jenkins &amp;&amp; docker build -t jenkins-mine .</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动jenkins</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在启动Jenkins时，需要先创建一个Jenkins的配置目录，并且挂载到docker 里的Jenkins目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/jenkins_home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改目录权限（很重要！）</span></span><br><span class="line"><span class="built_in">chown</span> -R 1000:1000 /var/jenkins_home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器并启动</span></span><br><span class="line">docker run --memory 1.5G --name jenkins \</span><br><span class="line">    -p 8080:8080 -p 50000:50000 -u root -d \</span><br><span class="line">    --<span class="built_in">env</span> JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx512m  -XX:MaxNewSize=256m&quot;</span> \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v $(<span class="built_in">which</span> docker):/bin/docker \</span><br><span class="line">    -v /var/jenkins_home:/var/jenkins_home \</span><br><span class="line">    -d jenkins-mine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps | grep jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><blockquote><p>访问http://<sever_ip>:8080, 访问Jenkins， 出现Unlock Jenkins 页面。如果无法访问请检查系统防火墙、云的安全组设置。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-01.png"></p></blockquote><blockquote><p>进入容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it jenkins bash</span><br></pre></td></tr></table></figure><blockquote><p>查看密码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><blockquote><p>复制输出的内容，粘贴到Administrator password，输入 exit 退出容器</p></blockquote><blockquote><p>此时进行下一步你会看到此界面，点击 Install suggested plugins<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-02.png"></p></blockquote><blockquote><p>等待安装完成<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-03.png"></p></blockquote><blockquote><p>如果有插件安装失败，安装结束之后会有”Retry”重试选项，点击重试即可。</p></blockquote><blockquote><p>进行下一步<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-04.png"></p></blockquote><blockquote><p>进入主界面后如果看到右上角有错误的提示信息，那么请把你的Jenkins升级到最新版本，然后更新一下插件。</p></blockquote><blockquote><p>如果更新之后出现协议警告,可以直接点击警告中的Protocol Configuration，或者点击系统管理—&gt;全局安全配置—&gt;Agents—&gt;Agent protocols</p></blockquote><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-05.png"></p><h3 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h3><blockquote><p>【系统管理】-&gt; 【插件管理】-&gt; 【高级】-&gt; 【升级站点】</p></blockquote><blockquote><p>更换地址：<a href="http://mirror.xmission.com/jenkins/updates/current/update-center.json">http://mirror.xmission.com/jenkins/updates/current/update-center.json</a><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-06.png"></p></blockquote><h3 id="添加远程主机"><a href="#添加远程主机" class="headerlink" title="添加远程主机"></a>添加远程主机</h3><blockquote><p>添加凭证， 输入远程主机的账号密码，ID 用UUID 即可。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-07.png"></p></blockquote><blockquote><p>凭证-&gt;系统-&gt;全局凭证-&gt;添加凭证<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-08.png"></p></blockquote><blockquote><p>系统管理-&gt;系统设置-&gt;SSH remote host<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-09.png"></p></blockquote><h3 id="创建django测试项目"><a href="#创建django测试项目" class="headerlink" title="创建django测试项目"></a>创建django测试项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line">django-admin startproject mtest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app</span></span><br><span class="line">python manage.py startapp mayw</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings中添加app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;mayw&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello django world !&lt;h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改路由urls.py</span></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">from mayw import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(r<span class="string">&#x27;^$&#x27;</span>, views.index)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到码云</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Jenkins-创建任务"><a href="#Jenkins-创建任务" class="headerlink" title="Jenkins 创建任务"></a>Jenkins 创建任务</h3><blockquote><p>1<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-11.png"><br>2<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-10.png"><br>3 General<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-12.png"><br>4 源码管理（Source Code Management）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-13.png"><br>5 添加ssh私钥</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;ma.yawei@h3c.com&quot;</span> -f ~/.ssh/id-rsa-gitee</span><br><span class="line">git config --global user.name <span class="string">&quot;mayw&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;ma.yawei@h3c.com&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-14.png"></p><blockquote><p>6 构建触发器（Build Triggers）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-15.png"><br>H/2 * * * * 2分钟从git上pull一次代码，若代码有变化就构建环境</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* * * * *  </span><br><span class="line">在master-build中创建触发器,设定1分钟执行一次</span><br><span class="line">poll SCM(日常表 可以根据时间来判断)</span><br><span class="line">H/2 * * * *    (2分钟检查一下版本库  如果有更新就不触发  如果没有更新就不触发)</span><br><span class="line">注：Schedule的配置规则是有5个空格隔开的字符组成，从左到右分别代表：分 时 天 月 年。*代表所有，0 20 * * * 表示&quot;在任何年任何月任何天20点0分&quot;进行构建</span><br></pre></td></tr></table></figure><blockquote><p>7 构建（Build）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-16.png"></p></blockquote><blockquote><p>8 构建后操作</p></blockquote><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-17.png"></p><h3 id="创建内网部署任务"><a href="#创建内网部署任务" class="headerlink" title="创建内网部署任务"></a>创建内网部署任务</h3><blockquote><p>注意：<br>BUILD_ID=DONTKILLME : 在jenkins里面在后台运行的程序都会被jenkins自动杀死 所以需要加上BUILDID这个参数。加了这个参数你的程序就不会被杀。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-18.png"></p></blockquote><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-19.png"></p><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-20.png"></p><h3 id="创建外网部署任务"><a href="#创建外网部署任务" class="headerlink" title="创建外网部署任务"></a>创建外网部署任务</h3><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-21.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-22.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-23.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程主机要做的事情：</span></span><br><span class="line"><span class="comment"># 安装django</span></span><br><span class="line"><span class="comment"># 创建一个目录把代码版本库拉取到本地</span></span><br><span class="line"><span class="comment"># 写脚本来运行代码 </span></span><br><span class="line"><span class="comment"># 脚本内容</span></span><br><span class="line"><span class="comment"># xxx.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># start.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data/git-test</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> /data/git-test/test11</span><br><span class="line"><span class="built_in">nohup</span> python manage.py runserver 0.0.0.0:8000 &gt; /dev/null   2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Jenkins-简介&quot;&gt;&lt;a href=&quot;#Jenkins-简介&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 简介&quot;&gt;&lt;/a&gt;Jenkins 简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Jenkins是一个开源软件项目，是基于Java开</summary>
      
    
    
    
    <category term="CICD" scheme="https://www.rainbowrise.top/categories/CICD/"/>
    
    
    <category term="Docker" scheme="https://www.rainbowrise.top/tags/Docker/"/>
    
    <category term="Jenkins" scheme="https://www.rainbowrise.top/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>使用pip安装自己的程序（上传python程序到PyPi）</title>
    <link href="https://www.rainbowrise.top/2021/10/02/%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8A%E4%BC%A0python%E7%A8%8B%E5%BA%8F%E5%88%B0PyPi%EF%BC%89/"/>
    <id>https://www.rainbowrise.top/2021/10/02/%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8A%E4%BC%A0python%E7%A8%8B%E5%BA%8F%E5%88%B0PyPi%EF%BC%89/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用pip安装自己的程序（上传python程序到PyPi）"><a href="#使用pip安装自己的程序（上传python程序到PyPi）" class="headerlink" title="使用pip安装自己的程序（上传python程序到PyPi）"></a>使用pip安装自己的程序（上传python程序到PyPi）</h3><h4 id="1-注册Pypi账号"><a href="#1-注册Pypi账号" class="headerlink" title="1. 注册Pypi账号"></a>1. 注册Pypi账号</h4><blockquote><p>注册：<a href="https://pypi.org/account/register/">https://pypi.org/account/register/</a></p></blockquote><h4 id="2-安装-setuotools-wheel-twine"><a href="#2-安装-setuotools-wheel-twine" class="headerlink" title="2. 安装 setuotools, wheel, twine"></a>2. 安装 setuotools, wheel, twine</h4><blockquote><p>setuotools 和 wheel 用来构建项目，一般都会随 Python 安装。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已安装的包</span></span><br><span class="line">pip list</span><br><span class="line"><span class="comment"># 若未安装 setuotools、wheel</span></span><br><span class="line">python -m pip install -i https://pypi.douban.com/simple setuptools wheel</span><br></pre></td></tr></table></figure><blockquote><p>twine 用来上传自己的包到PyPi</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装 twine</span><br><span class="line">python -m pip install -i https://pypi.douban.com/simple twine</span><br></pre></td></tr></table></figure><h4 id="3-构建项目"><a href="#3-构建项目" class="headerlink" title="3. 构建项目"></a>3. 构建项目</h4><ul><li><p>项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xlwt-fixed\</span><br><span class="line">├─ .gitignore</span><br><span class="line">│  LICENSE</span><br><span class="line">│  README.md</span><br><span class="line">│  requirements.txt</span><br><span class="line">│  setup.cfg</span><br><span class="line">│  setup.py</span><br><span class="line">│</span><br><span class="line">├─xlwt</span><br><span class="line">│      Bitmap.py</span><br><span class="line">│      Workbook.py</span><br><span class="line">│      Worksheet.py</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>setup.py文件</p><blockquote><p>setup.py 是setuptools的构建脚本。包含了自己的包（例如名称和版本）以及要包含的代码文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages, setup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;README.md&#x27;</span>), <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    LONG_DESCRIPTION = fh.read()</span><br><span class="line"></span><br><span class="line">DESCRIPTION = (</span><br><span class="line">    <span class="string">&#x27;fix bitmap base on xlwt 1.3.0&#x27;</span></span><br><span class="line">)</span><br><span class="line">CLASSIFIERS = [</span><br><span class="line">    <span class="string">&#x27;Operating System :: OS Independent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;License :: OSI Approved :: TIM License&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Development Status :: 5 - Production/Stable&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Intended Audience :: Developers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Software Development :: Libraries :: Python Modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Office/Business :: Financial :: Spreadsheet&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Database&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 2.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: Implementation :: CPython&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">KEYWORDS = (</span><br><span class="line">    <span class="string">&#x27;xls excel spreadsheet workbook worksheet pyExcelerator&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;xlwt-fixed&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    maintainer=<span class="string">&#x27;Murray&#x27;</span>,</span><br><span class="line">    maintainer_email=<span class="string">&#x27;1063967330@qq.com&#x27;</span>,</span><br><span class="line">    url=<span class="string">&#x27;https://github.com/murray88/xlwt-fixed/&#x27;</span>,</span><br><span class="line">    download_url=<span class="string">&#x27;https://github.com/murray88/xlwt-fixed/&#x27;</span>,</span><br><span class="line">    description=DESCRIPTION,</span><br><span class="line">    long_description=LONG_DESCRIPTION,</span><br><span class="line">    license=<span class="string">&#x27;MIT&#x27;</span>,</span><br><span class="line">    platforms=<span class="string">&#x27;Platform Independent&#x27;</span>,</span><br><span class="line">    keywords=KEYWORDS,</span><br><span class="line">    classifiers=CLASSIFIERS,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    zip_safe=<span class="literal">False</span>,</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*&quot;</span>,</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&#x27;six&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>重要参数说明</p></blockquote></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>包名，发布之前请上 PyPi 搜索一下有没有同名的包，防止冲突。</td></tr><tr><td>version</td><td>版本号，更新时会寻找比当前版本更高的版本号，不要乱写。</td></tr><tr><td>description</td><td>短描述</td></tr><tr><td>long_description</td><td>长描述，详细的介绍。</td></tr><tr><td>url</td><td>项目的地址，一般会填 github 地址。</td></tr><tr><td>packages</td><td>包列表，setuptools.find_packages() 可以自动找到目录下所有的包。</td></tr><tr><td>install_requires</td><td>该包的所需的依赖。</td></tr><tr><td>classifiers</td><td>分类，根据 <a href="https://pypi.org/classifiers/">PyPi Classifiers</a> 填写，至少要包含所用的 Python 版本。</td></tr></tbody></table><ul><li>setup.cfg文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[isort]</span><br><span class="line">combine_as_imports = true</span><br><span class="line">default_section = THIRDPARTY</span><br><span class="line">include_trailing_comma = true</span><br><span class="line">known_first_party = xlwt</span><br><span class="line">multi_line_output = 5</span><br><span class="line">not_skip = __init__.py</span><br><span class="line"></span><br><span class="line">[metadata]</span><br><span class="line">license_file = LICENSE</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-LICENSE"><a href="#4-LICENSE" class="headerlink" title="4. LICENSE"></a>4. LICENSE</h4><blockquote><p>上传到 PyPi 的每个包都要包含许可证，选择<a href="https://choosealicense.com/">许可证</a>，打开 LICENSE 并输入许可证文本。</p></blockquote><h4 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5. 构建项目"></a>5. 构建项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.py 所在的目录进行构建</span></span><br><span class="line"><span class="comment"># 1. 检查一下 setup.py 文件是否有错误，没有错误才能进行构建。</span></span><br><span class="line">python setup.py check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构建，若无错误，则会生成build、dist、*.egg-info等目录，其中重要的是 dist 目录。</span></span><br><span class="line">python setup.py sdist bdist_wheel</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-上传"><a href="#6-上传" class="headerlink" title="6. 上传"></a>6. 上传</h4><ul><li><p>方式1（指令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">twine upload --repository-url https://upload.pypi.org/legacy/ dist/*</span><br><span class="line"># 根据提示输入在 PyPi 注册的账号和密码就可以上传了</span><br></pre></td></tr></table></figure></li><li><p>方式2（配置文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 创建.pypric文件</span><br><span class="line"># window 下，将.pypric放在 C:\\User\用户名\ 下， 用 cmd 命令创建。</span><br><span class="line">echo a 2&gt;.pypric</span><br><span class="line"></span><br><span class="line"># linux 下，将.pypric 放在 ~/ 也就是 %HOME% 目录下。</span><br><span class="line"># .pypric内容</span><br><span class="line">[distutils]</span><br><span class="line">index-servers=pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">repository = https://upload.pypi.org/legacy/</span><br><span class="line">username: [username]</span><br><span class="line">password: [password]</span><br><span class="line"></span><br><span class="line"># 上传</span><br><span class="line">twine upload dist/*</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h3><h4 id="1-删除dist旧版本"><a href="#1-删除dist旧版本" class="headerlink" title="1. 删除dist旧版本"></a>1. 删除dist旧版本</h4><h4 id="2-修改版本号"><a href="#2-修改版本号" class="headerlink" title="2. 修改版本号"></a>2. 修改版本号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim setup.py</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">sed -i <span class="string">&quot;s/version=&#x27;[0-9\.]*&#x27;/version=&#x27;1.0.2&#x27;/g&quot;</span> setup.py</span><br></pre></td></tr></table></figure><h4 id="3-打包新版本build"><a href="#3-打包新版本build" class="headerlink" title="3. 打包新版本build"></a>3. 打包新版本build</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py check</span><br><span class="line">python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure><h4 id="4-上传新版本"><a href="#4-上传新版本" class="headerlink" title="4. 上传新版本"></a>4. 上传新版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload --repository-url https://upload.pypi.org/legacy/ dist/*</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用pip安装自己的程序（上传python程序到PyPi）&quot;&gt;&lt;a href=&quot;#使用pip安装自己的程序（上传python程序到PyPi）&quot; class=&quot;headerlink&quot; title=&quot;使用pip安装自己的程序（上传python程序到PyPi）&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Python" scheme="https://www.rainbowrise.top/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.rainbowrise.top/tags/Python/"/>
    
    <category term="Pip" scheme="https://www.rainbowrise.top/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>技术栈总结</title>
    <link href="https://www.rainbowrise.top/2021/10/02/%E6%8A%80%E6%9C%AF%E6%A0%88%E6%80%BB%E7%BB%93/"/>
    <id>https://www.rainbowrise.top/2021/10/02/%E6%8A%80%E6%9C%AF%E6%A0%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.756Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis相关"><a href="#redis相关" class="headerlink" title="redis相关"></a>redis相关</h4><ol><li><p>在项目中使用redis，主要是从两个角度去考虑:性能和并发。</p></li><li><p>redis还具备可以做分布式锁等其他功能</p></li><li><p>使用redis主要是四个问题：</p><blockquote><p>(1) 缓存和数据库双写一致性问题<br><br>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p></blockquote></li></ol><blockquote><p>(2) 缓存雪崩问题<br><br>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。<br><br>解决方案:<br><br>(一)给缓存的失效时间，加上一个随机值，避免集体失效。<br><br>(二)使用互斥锁，但是该方案吞吐量明显下降了。<br><br>(三)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。<br><br>然后细分以下几个小点<br><br>I 从缓存A读数据库，有则直接返回<br><br>II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。<br><br>III 更新线程同时更新缓存A和缓存B。</p></blockquote><blockquote><p>(3)缓存击穿问题<br><br>缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。<br><br>解决方案:<br><br>(一)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试<br><br>(二)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。<br><br>(三)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。</p></blockquote><blockquote><p>(4)缓存的并发竞争问题<br><br>分析:这个问题大致就是，同时有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。需要说明一下，博主提前百度了一下，发现答案基本都是推荐用redis事务机制。博主不推荐使用redis的事务机制。因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，redis的事务机制，十分鸡肋。<br><br>回答:<br><br>(1)如果对这个key操作，不要求顺序<br>这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。<br><br>(2)如果对这个key操作，要求顺序<br>假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.期望按照key1的value值按照valueA–&gt;valueB–&gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。</p></blockquote><ol start="4"><li>redis的过期策略以及内存淘汰机制</li></ol><blockquote><p>定期删除<br><br>用一个定时器来负责监视key,过期则自动删除,虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略</p></blockquote><blockquote><p>惰性删除<br><br>在获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p></blockquote><blockquote><p>内存淘汰机制<br><br>1）noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。<br>2）allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。推荐使用，目前项目在用这种。<br>3）allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。应该也没人用吧，你不删最少使用Key,去随机删。<br>4）volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。这种情况一般是把redis既当缓存，又做持久化存储的时候才用。不推荐<br>5）volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。依然不推荐<br>6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。不推荐<br>ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。</p></blockquote><ol start="5"><li>redis实现分布式锁功能<br></li></ol><blockquote><p>实现思想<br></p></blockquote><ul><li>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</li><li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li><li>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放</li></ul><h4 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h4><ol><li>索引对于增删改操作的性能影响比较</li></ol><ul><li>insert操作</li></ul><blockquote><p>insert过程为，先把数据插入到表中，然后再把数据插入到相关索引中，如果这个表有5个索引，那么就得维护这5个索引，不管这个插入的数据是否为NULL值。所以，索引个数越多，对于insert操作来说，维护的成本就越大，插入一条数据的速度也就越慢。如果发现插入速度很慢，可以检查一下是否这个表的索引太多了。</p></blockquote><blockquote><p>把数据插入索引的过程中，为了维护索引中字段的顺序，会先在索引中查找这个值，如果能找到，就把这个值查到后面空闲的地方，如果没有找到，就先把值加入到叶子节点，然后在分支节点中新增这个值 和 指向叶子节点的指针（就是一个地址）。在这个过程中，如果某个页满了，还要新申请一个空的页，把满的页拆分开，把一半的索引数据放到空闲页中，而且为了保证数据的一致性（这个插入操作是并发的，可能有几十上百个线程同时进行），会给相关的索引页加上闩锁（一种更低级别的内存锁）。如此看来，这个过程的开销是很大的。</p></blockquote><ul><li>delete操作</li></ul><blockquote><p>delete操作刚好和isnert相反，当删除一条数据时，会把这条数据涉及到的多个索引中的数据删除。<br><br>比如：A表包含字段 ID，name，age，memo，biz_date，storeID，employeeID，update_date，等字段，在name、age、biz_date、storeID、employeeID字段上分别创建了索引，也就是总共有5个索引。<br><br>现在运行 delete from A where ID = 100, 就得把ID=100的这条数据，在各个索引中删掉，开销要比insert小。</p></blockquote><ul><li>update操作</li></ul><blockquote><p>这个操作不同于insert，delete，只有当update的这个字段，涉及到索引时，才需要维护索引，相对来说开销要小一些。<br><br>比如：update A set memo=’备注信息’ where ID = 100， 因为更新的memo字段上并没有索引，所以不需要维护索引，<br>而update A set storeID=12345 where ID = 100，只需要更新storeID字段的索引，其他4个索引不需要维护。</p></blockquote><ol start="2"><li>sql优化</li></ol><ul><li><p>使用索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① 经常出现在Where子句中的字段，特别是大表的字段，应该建立索引</span><br><span class="line">② 经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。</span><br><span class="line">③ 数据唯一性强的字段建立索引</span><br><span class="line">④ 经常变动的数据字段不要建立索引</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对于创建的多列索引,只要查询的条件中用到了最左边的列,索引一般就会被使用</span><br><span class="line">对于使用 like 的查询,后面如果是常量并且只有%号不在第一个字符,索引才可能会被使用</span><br><span class="line">应尽量避免在 where 中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销</span><br><span class="line">尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些</span><br><span class="line">任何地方都不要使用 select * from t ，用具体的字段列表代替&quot;*&quot;，不要返回用不到的任何字段</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;redis相关&quot;&gt;&lt;a href=&quot;#redis相关&quot; class=&quot;headerlink&quot; title=&quot;redis相关&quot;&gt;&lt;/a&gt;redis相关&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在项目中使用redis，主要是从两个角度去考虑:性能和并发。&lt;/p&gt;
&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Database" scheme="https://www.rainbowrise.top/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>win10 子系统 Ubuntu</title>
    <link href="https://www.rainbowrise.top/2021/10/01/win10%20%E5%AD%90%E7%B3%BB%E7%BB%9F%20Ubuntu/"/>
    <id>https://www.rainbowrise.top/2021/10/01/win10%20%E5%AD%90%E7%B3%BB%E7%BB%9F%20Ubuntu/</id>
    <published>2021-09-30T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="win10最高权限"><a href="#win10最高权限" class="headerlink" title="win10最高权限"></a>win10最高权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 设置注册表（实测无效）</span><br><span class="line">1.Win+R组合键之后，输入【regedit】 点击确定打开注册表编辑器；在注册表左侧依次展开HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System；</span><br><span class="line"></span><br><span class="line">2.在右侧双击打开&quot;FilterAdministratorToken&quot;将其数值数据修改为&quot;1&quot;点击确定（如果没有则单击右键，【新建】-【DWORD（32位）值】，将其命名为FilterAdministratorToken ，将其数值数据修改为1即可）；</span><br><span class="line"></span><br><span class="line"># 修改策略组</span><br><span class="line">1、Win+R组合键之后，输入【gpedit.msc】点击确定打开本地组策略管理器。</span><br><span class="line">2、依次点击打开：计算机配置 -&gt; Windows设置 -&gt; 安全设置 -&gt; 本地策略 -&gt; 安全选项 ,找到&quot;账户：管理员状态&quot;，可以看见状态为&quot;已禁用&quot;，需要的是将它开启。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="window10安装ubuntu"><a href="#window10安装ubuntu" class="headerlink" title="window10安装ubuntu"></a>window10安装ubuntu</h2><h3 id="检查WSL"><a href="#检查WSL" class="headerlink" title="检查WSL"></a>检查WSL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 打开 控制面版，查看方式可选择大图标，在点击程序与功能—&gt;启用或关闭Windows功能</span><br><span class="line">打开：Hyper-V、  适用于Linux的Windows子系统、虚拟机平台</span><br><span class="line"></span><br><span class="line"># 命令在PowerShell（管理员）执行</span><br><span class="line"></span><br><span class="line">2. WSL版本需要WSL1升级为WSL2</span><br><span class="line">a. 查看当前版本，打开PowerShell（管理员）</span><br><span class="line">wsl -l -v</span><br><span class="line"></span><br><span class="line">b. 下载并安装 适用于 x64 计算机的 WSL2 Linux 内核更新包</span><br><span class="line">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</span><br><span class="line"></span><br><span class="line">c. 启动虚拟机</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line">d. 设置WSL默认版本</span><br><span class="line">wsl --set-default-version 2</span><br><span class="line">或设置分发版的WSL版本</span><br><span class="line">wsl --set-version 分发版名称 版本号</span><br><span class="line">如：wsl --set-version Ubuntu-20.04 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置源（Ubuntu20-04）"><a href="#配置源（Ubuntu20-04）" class="headerlink" title="配置源（Ubuntu20.04）"></a>配置源（Ubuntu20.04）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 备份source.list</span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"># 设置阿里云源</span><br><span class="line">sudo cat &gt; /etc/apt/sources.list &lt;&lt; EOF </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 更新</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">sudo apt-get install \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg \</span><br><span class="line">lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">echo \</span><br><span class="line">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line">$(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装docker</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://qgikhnmb.mirror.aliyuncs.com&quot;, &quot;http://hub-mirror.c.163.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;47.96.100.34&quot;],</span><br><span class="line">  &quot;iptables&quot;:false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 设置用户组</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="docker无法启动"><a href="#docker无法启动" class="headerlink" title="docker无法启动"></a>docker无法启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以管理员身份启动wsl</span><br></pre></td></tr></table></figure><h4 id="docker镜像报错"><a href="#docker镜像报错" class="headerlink" title="docker镜像报错"></a>docker镜像报错</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 问题</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:722: waiting for init preliminary setup caused: EOF: unknown.</span><br><span class="line">ERRO[0004] error waiting for container: context canceled</span><br><span class="line"></span><br><span class="line"># 解决</span><br><span class="line">WSL版本问题，需要WSL1升级为WSL2</span><br></pre></td></tr></table></figure><h3 id="IDEA无法启动"><a href="#IDEA无法启动" class="headerlink" title="IDEA无法启动"></a>IDEA无法启动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">报错：</span><br><span class="line">java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind</span><br><span class="line">at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)</span><br><span class="line">at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)</span><br><span class="line">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1702)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line">使用管理员身份打开命令提示符，</span><br><span class="line">执行命令net stop winnat和net start winnat，不用重启</span><br></pre></td></tr></table></figure><h3 id="xshell登陆Win10-Linux子系统"><a href="#xshell登陆Win10-Linux子系统" class="headerlink" title="xshell登陆Win10 Linux子系统"></a>xshell登陆Win10 Linux子系统</h3><ol><li><p>备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ssh</span><br><span class="line">sudo cp sshd_config sshd_config.bak</span><br><span class="line">sudo vim sshd_config</span><br></pre></td></tr></table></figure></li><li><p>修改sshd_config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Port 2233  #修改端口</span><br><span class="line">ListenAddress 0.0.0.0  #打开本地监听</span><br><span class="line">#StrictModes yes  #注释掉</span><br><span class="line">PasswordAuthentication yes  #允许密码登陆</span><br></pre></td></tr></table></figure></li><li><p>重启ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure></li><li><p>重新生成host key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure openssh-server</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;win10最高权限&quot;&gt;&lt;a href=&quot;#win10最高权限&quot; class=&quot;headerlink&quot; title=&quot;win10最高权限&quot;&gt;&lt;/a&gt;win10最高权限&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="Other" scheme="https://www.rainbowrise.top/categories/Other/"/>
    
    
    <category term="Docker" scheme="https://www.rainbowrise.top/tags/Docker/"/>
    
    <category term="Ubuntu" scheme="https://www.rainbowrise.top/tags/Ubuntu/"/>
    
    <category term="Windows" scheme="https://www.rainbowrise.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>GitHub上优秀的Go开源项目</title>
    <link href="https://www.rainbowrise.top/2021/08/08/GitHub%E4%B8%8A%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>https://www.rainbowrise.top/2021/08/08/GitHub%E4%B8%8A%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-08-07T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GitHub上优秀的Go开源项目"><a href="#GitHub上优秀的Go开源项目" class="headerlink" title="GitHub上优秀的Go开源项目"></a>GitHub上优秀的Go开源项目</h3><blockquote><p>近一年来，学习和研究Go语言，断断续续的收集了一些比较优秀的开源项目，这些项目都非常不错，可以供我们学习和研究Go用，从中可以学到很多关于Go的使用、技巧以及相关工具和方法。我把他们整理发出来，大家有兴趣可以根据自己的爱好选择一些进行研究和阅读，提升自己的能力，更好的使用Go语言，开发出更优秀的项目。</p></blockquote><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a><a href="https://github.com/docker/docker">docker</a></h4><p>无人不知的虚拟华平台，开源的应用容器引擎,借助该引擎，开发者可以打包他们的应用，移植到任何平台上。<br><a href="https://github.com/docker/docker">https://github.com/docker/docker</a></p><h4 id="golang"><a href="#golang" class="headerlink" title="golang"></a><a href="https://github.com/golang/go">golang</a></h4><p>go本身，也是用go语言实现的，包括他的编译器，要研究go源代码的可以看此项目录<br><a href="https://github.com/golang/go">https://github.com/golang/go</a></p><h4 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a><a href="https://github.com/getlantern/lantern">lantern</a></h4><p>蓝灯，一款P2P的过墙软件，他和SS不一样的是，他是分布式的，P2P的，通过蓝灯，你可以和自由上网的用户共享网络，对方可以自由上网，你也就自由了。<br><a href="https://github.com/getlantern/lantern">https://github.com/getlantern/lantern</a></p><h4 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a><a href="https://github.com/kubernetes/kubernetes">kubernetes</a></h4><p>Google出品，用于调度和管理Docker的开源容器管理系统，利用他，可以方便的管理你的docker实例，哪怕非常多，也是目前最流行的docker管理系统。<br><a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a></p><h4 id="awesome-go"><a href="#awesome-go" class="headerlink" title="awesome-go"></a><a href="https://github.com/avelino/awesome-go">awesome-go</a></h4><p>这不是一个go项目，他是一个学习go的资料网站，属于著名的awesome系列，里面关于go的资源非常详细。<br><a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a></p><h4 id="gogs"><a href="#gogs" class="headerlink" title="gogs"></a><a href="https://github.com/gogits/gogs">gogs</a></h4><p>一款基于Git的代码托管系统，类似于github和gitlab，不过其小巧易用，功能强大，部署方便，也有不少用户在使用。<br><a href="https://github.com/gogits/gogs">https://github.com/gogits/gogs</a></p><h4 id="syncthing"><a href="#syncthing" class="headerlink" title="syncthing"></a><a href="https://github.com/syncthing/syncthing">syncthing</a></h4><p>开源的文件同步系统,它使用了其独有的对等自由块交换协议,速度很快,据说可以替换BitTorrent Sync。<br><a href="https://github.com/syncthing/syncthing">https://github.com/syncthing/syncthing</a></p><h4 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a><a href="ttps://github.com/spf13/hugo">hugo</a></h4><p>一款极速的静态页面生成器，让你可以很快的搭建个人网站，提供了多套主题可供使用，并且可以自己定制，和NodeJS的Hexo是一样的。<br><a href="https://github.com/spf13/hugo">https://github.com/spf13/hugo</a></p><h4 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a><a href="https://github.com/grafana/grafana">grafana</a></h4><p>一款开源监控度量的看板系统，可以接Graphite,Elasticsearch,InfluxDB等数据源，定制化很高。<br><a href="https://github.com/grafana/grafana">https://github.com/grafana/grafana</a></p><h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a><a href="https://github.com/coreos/etcd">etcd</a></h4><p>一款分布式的，可靠的K-V存储系统，使用简单，速度快，又安全。<br><a href="https://github.com/coreos/etcd">https://github.com/coreos/etcd</a></p><h4 id="hub"><a href="#hub" class="headerlink" title="hub"></a><a href="https://github.com/github/hub">hub</a></h4><p>一款更便捷使用github的工具，包装并且扩展了git，提供了很多特性和功能，使用和git差不多。<br><a href="https://github.com/github/hub">https://github.com/github/hub</a></p><h4 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a><a href="https://github.com/influxdata/influxdb">influxdb</a></h4><p>可伸缩的数据库，使用场景主要用来存储测量数据，事件点击以及其他等实时分析数据，用来做监控性能很不错。<br><a href="https://github.com/influxdata/influxdb">https://github.com/influxdata/influxdb</a></p><h4 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a><a href="https://github.com/mholt/caddy">caddy</a></h4><p>快速的，跨平台的HTTP/2 Web服务器。<br><a href="https://github.com/mholt/caddy">https://github.com/mholt/caddy</a></p><h4 id="beego"><a href="#beego" class="headerlink" title="beego"></a><a href="https://github.com/astaxie/beego">beego</a></h4><p>国产开源的高性能Web框架，让你快速的开发Go Web应用服务，谢大主笔。<br><a href="https://github.com/astaxie/beego">https://github.com/astaxie/beego</a></p><h4 id="martini"><a href="#martini" class="headerlink" title="martini"></a><a href="https://github.com/go-martini/martini">martini</a></h4><p>也是一款不错的Web框架。<br><a href="https://github.com/go-martini/martini">https://github.com/go-martini/martini</a></p><h4 id="cayley"><a href="#cayley" class="headerlink" title="cayley"></a><a href="https://github.com/cayleygraph/cayley">cayley</a></h4><p>Google开源的图数据库，这是一个NoSql数据库，适合处理复杂的，但是结构化低的数据,适用于社交网络，推荐系统等。<br><a href="https://github.com/cayleygraph/cayley">https://github.com/cayleygraph/cayley</a></p><h4 id="nsq"><a href="#nsq" class="headerlink" title="nsq"></a><a href="https://github.com/nsqio/nsq">nsq</a></h4><p>一款开源的实时的，分布式的消息中间件系统。<br><a href="https://github.com/nsqio/nsq">https://github.com/nsqio/nsq</a></p><h4 id="codis"><a href="#codis" class="headerlink" title="codis"></a><a href="https://github.com/CodisLabs/codis">codis</a></h4><p>Codis是一个分布式Redis解决方案,其实就是一个数据库代理，让你在使用Redis集群的时候，就像使用单机版的Redis是一样的，对开发者透明。<br><a href="https://github.com/CodisLabs/codis">https://github.com/CodisLabs/codis</a></p><h4 id="delve"><a href="#delve" class="headerlink" title="delve"></a><a href="https://github.com/derekparker/delve">delve</a></h4><p>这个Go开发者都知道，一款go应用开发的调试工具。<br><a href="https://github.com/derekparker/delve">https://github.com/derekparker/delve</a></p><h4 id="cobra"><a href="#cobra" class="headerlink" title="cobra"></a><a href="https://github.com/spf13/cobra">cobra</a></h4><p>cobra是一个命令行go库，可以让你创建非常强大的，现代的CLI命令行应用。<br><a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra</a></p><h4 id="shadowsocks-go"><a href="#shadowsocks-go" class="headerlink" title="shadowsocks-go"></a><a href="https://github.com/shadowsocks/shadowsocks-go">shadowsocks-go</a></h4><p>go版本的shadowsocks，大家都懂的。<br><a href="https://github.com/shadowsocks/shadowsocks-go">https://github.com/shadowsocks/shadowsocks-go</a></p><h4 id="pholcus"><a href="#pholcus" class="headerlink" title="pholcus"></a><a href="https://github.com/henrylee2cn/pholcus">pholcus</a></h4><p>Pholcus（幽灵蛛）是一款纯Go语言编写的支持分布式的高并发、重量级爬虫软件，定位于互联网数据采集，为具备一定Go或JS编程基础的人提供一个只需关注规则定制的功能强大的爬虫工具。<br><a href="https://github.com/henrylee2cn/pholcus">https://github.com/henrylee2cn/pholcus</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;GitHub上优秀的Go开源项目&quot;&gt;&lt;a href=&quot;#GitHub上优秀的Go开源项目&quot; class=&quot;headerlink&quot; title=&quot;GitHub上优秀的Go开源项目&quot;&gt;&lt;/a&gt;GitHub上优秀的Go开源项目&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;近</summary>
      
    
    
    
    <category term="Go" scheme="https://www.rainbowrise.top/categories/Go/"/>
    
    
    <category term="Go" scheme="https://www.rainbowrise.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go笔记</title>
    <link href="https://www.rainbowrise.top/2021/08/08/Go%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.rainbowrise.top/2021/08/08/Go%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-07T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用golang开发"><a href="#使用golang开发" class="headerlink" title="使用golang开发"></a>使用golang开发</h3><ul><li>直接设置代理  <a href="https://goproxy.io/">https://goproxy.io/</a></li><li>使用阿里云镜像代理：<a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></li></ul><h3 id="go能做什么？"><a href="#go能做什么？" class="headerlink" title="go能做什么？"></a>go能做什么？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、命令行程序。不分windows、linux、macos，扔进去就能用读写数据库、小爬虫、定时任务等等，个人目前主要是用来同步数据，定时备份和清理垃圾。</span><br><span class="line"></span><br><span class="line">2、图形化工具。还是全平台通用，官方虽然没有GUI库，但是第三方有的是。选个合适的库，c++能搞的，golang差不多都可以搞（GUI库的选择请参考https://www.zhihu.com/question/268536384/answer/1215107185）。</span><br><span class="line"></span><br><span class="line">3、私人服务器。这回不光不挑平台了，还能直接扔在路由器或者旧手机上了（旧安卓手机废物利用请参考https://zhuanlan.zhihu.com/p/92664273）。golang天生支持arm，私人服务，无非就是个网盘、博客之类的，完全没必要买云空间（家庭网络穿透定位部分不展开）。</span><br><span class="line"></span><br><span class="line">4、各种正牌服务。目前已经用caddy代替了nginx（证书自动展期方便），gin代替了tomcat（服务器内存太贵了）。剩下普通的API服务，自己写就完事了。目前最长的高吞吐量服务，已经跑了700多天还活蹦乱跳，上次停机还是停电的时候。</span><br><span class="line"></span><br><span class="line">5、用go写了文件同步工具，基于自带的sftp库以及到处都是的开源ssh库。</span><br><span class="line"></span><br><span class="line">6、处理日志、数据打包、虚拟机处理、文件系统、分布式系统、数据库代理等；网络编程方面，Go语言广泛应用于Web 应用、API应用、下载应用。Go语言还适用于内存数据库和云平台领域，目前国外很多云平台都是采用Go开发。</span><br></pre></td></tr></table></figure><h3 id="goProxy配置"><a href="#goProxy配置" class="headerlink" title="goProxy配置"></a>goProxy配置</h3><blockquote><p>GOPROXY<br>由于国内的网络环境，我们可以通过配置GOPROXY避免DNS污染导致的模块拉取缓慢或失败的问题，加速构建。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># GOPROXY </span><br><span class="line">阿里云Go Module代理： https://mirrors.aliyun.com/goproxy/</span><br><span class="line">Goproxy 中国： https://github.com/goproxy/goproxy.cn</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line"># 1. 终端</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"># 2. macOS 或 Linux</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br><span class="line"># 或者</span><br><span class="line">echo &quot;export GOPROXY=https://goproxy.cn&quot; &gt;&gt; ~/.profile &amp;&amp; source ~/.profile</span><br><span class="line"># 3. windows</span><br><span class="line">C:\&gt; $env:GOPROXY = &quot;https://goproxy.cn&quot;</span><br><span class="line"># 或</span><br><span class="line">配置环境变量</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="go环境配置"><a href="#go环境配置" class="headerlink" title="go环境配置"></a>go环境配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 全局配置</span><br><span class="line">export GOROOT=/usr/lib/go</span><br><span class="line">export GOPATH=~/workspace/go</span><br><span class="line">#export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line">export GOPROXY=https://goproxy.cn,direct</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dep构建"><a href="#dep构建" class="headerlink" title="dep构建"></a>dep构建</h3><p>参考：<a href="https://blog.csdn.net/chenguolinblog/article/details/90665116">https://blog.csdn.net/chenguolinblog/article/details/90665116</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># 设置环境变量， 使用vendor目录</span><br><span class="line">GO15VENDOREXPERIMENT=1</span><br><span class="line">GO111MODULE=off</span><br><span class="line"></span><br><span class="line"># 安装dep</span><br><span class="line">go get -u github.com/golang/dep/cmd/dep</span><br><span class="line"></span><br><span class="line"># dep初始化</span><br><span class="line">dep init -v </span><br><span class="line"></span><br><span class="line"># 依赖管理</span><br><span class="line">dep help ensure  # 依赖管理帮助</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson  # 添加依赖</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson@=0.4.3  # @=指定依赖tag</span><br><span class="line">dep ensure # 安装项目依赖的代码</span><br><span class="line">dep ensure -update -v # 更新项目依赖</span><br><span class="line">dep ensure -v  # 建议使用</span><br><span class="line">dep prune -v  # 删除没有用到的package</span><br><span class="line">dep status # 查看依赖状态</span><br><span class="line"></span><br><span class="line"># 删除依赖</span><br><span class="line">修改Gopkg.toml文件相应内容，同时要保证代码中没有引用，</span><br><span class="line">再执行dep ensure 或dep ensure -update 均可</span><br><span class="line"></span><br><span class="line"># 说明文档</span><br><span class="line">https://golang.github.io/dep/docs/introduction.html</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"># 初始化dep项目</span><br><span class="line">mkdir $GOPATH/src/test</span><br><span class="line">cd  $GOPATH/src/test</span><br><span class="line">dep init</span><br><span class="line"># test目录生成如下文件</span><br><span class="line">├── Gopkg.lock</span><br><span class="line">├── Gopkg.toml</span><br><span class="line">└── vendor</span><br><span class="line"># 说明</span><br><span class="line">Gopkg.lock 是生成的文件，不要手工修改 Gopkg.lock 官方文档。</span><br><span class="line">Gopkg.toml 是依赖管理的核心文件，可以生成也可以手动修改，</span><br><span class="line">一般情况下Gopkg.toml里面只定义直接依赖项，而Gopkg.lock里面除了包含Gopkg.toml中的所有项之外，还包含传递依赖项。比如我们的项目依赖项目A， 而项目A又依赖B、C，那么只有A会包含在Gopkg.toml中，而A、B、C都会定义在Gopkg.lock中。所以Gopkg.lock定义了所有依赖的项目的详细信息（commit ID和packages），使得每次build我们自己的项目时，始终基于确定不变的依赖项。Gopkg.toml 官方文档。</span><br><span class="line">vendor目录是 golang1.5 以后依赖管理目录，这个目录的依赖代码是优先加载的，类似 node 的 node_module 目录。</span><br><span class="line"></span><br><span class="line"># 依赖管理</span><br><span class="line"># 依赖管理帮助</span><br><span class="line">dep help ensure</span><br><span class="line"># 添加一条依赖</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson</span><br><span class="line"># 这里 @= 参数指定的是 某个 tag</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson@=0.4.3</span><br><span class="line"># 添加后一定记住执行 确保 同步</span><br><span class="line">dep ensure</span><br><span class="line"># 建议使用</span><br><span class="line">dep ensure -v</span><br><span class="line"># 删除没有用到的 package</span><br><span class="line">dep prune -v</span><br><span class="line"># 依赖更新</span><br><span class="line">dep ensure -update -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决go-get问题"><a href="#解决go-get问题" class="headerlink" title="解决go get问题"></a>解决go get问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">方案一：</span><br><span class="line"># 例如安装godoc</span><br><span class="line">go get -v golang.org/x/tools/cmd/godoc</span><br><span class="line"># 报错如： </span><br><span class="line">Fetching https://golang.org/x/net/context/ctxhttp?go-get=1</span><br><span class="line">https fetch failed: Get https://golang.org/x/net/context/ctxhttp?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</span><br><span class="line">...</span><br><span class="line"># 原因：</span><br><span class="line">部分网络资源在中国无法直接访问。</span><br><span class="line"># 解决：</span><br><span class="line">在$GOPATH/src路径下创建golang/x文件夹并下载想要的包。以Windows为例，下面的报错信息提示无法获取https://golang.org/x/net/context/ctxhttp，现在我们来手动获取。</span><br><span class="line">mkidr -p d:/workspace/go/src/golang.org/x</span><br><span class="line">cd d:/workspace/go/src/golang.org/x</span><br><span class="line">git clone https://github.com/golang/net.git</span><br><span class="line">go get -v golang.org/x/tools/cmd/godoc</span><br><span class="line"></span><br><span class="line">方案二：</span><br><span class="line">要求 go version: &gt;= 1.13</span><br><span class="line">通过增加go proxy ：</span><br><span class="line">export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="struct-类型channel"><a href="#struct-类型channel" class="headerlink" title="struct{}类型channel"></a>struct{}类型channel</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ch chan struct&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>struct{}就是一种普通数据类型，只是没有具体的值而已。</li><li>通常struct{}类型channel的用法是使用同步，一般不需要往channel里面写数据，只有读等待，而读等待会在channel被关闭的时候返回。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var mapChan = make(chan map[string]int, 1)</span><br><span class="line">func main() &#123;</span><br><span class="line">syncChan := make(chan struct&#123;&#125;, 2)</span><br><span class="line">go func() &#123; // 用于演示接收操作。</span><br><span class="line">for &#123;</span><br><span class="line">if elem, ok := &lt;-mapChan; ok &#123;</span><br><span class="line">elem[&quot;count&quot;]++</span><br><span class="line">&#125; else &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;Stopped. [receiver]&quot;)</span><br><span class="line">syncChan &lt;- struct&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">go func() &#123; // 用于演示发送操作。</span><br><span class="line">countMap := make(map[string]int)</span><br><span class="line">for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">mapChan &lt;- countMap</span><br><span class="line">time.Sleep(time.Millisecond)</span><br><span class="line">fmt.Printf(&quot;The count map: %v. [sender]\n&quot;, countMap)</span><br><span class="line">&#125;</span><br><span class="line">close(mapChan)</span><br><span class="line">syncChan &lt;- struct&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-syncChan</span><br><span class="line">&lt;-syncChan</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="interface"><a href="#interface" class="headerlink" title="interface{}"></a>interface{}</h3><blockquote><p>interface{}可用于向函数传递任意类型的变量，但对于函数内部，该变量仍然为interface{}类型（空接口类型）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func echoArray(a interface&#123;&#125;)&#123;</span><br><span class="line">    b,_:=a.([]int)//通过断言实现类型转换</span><br><span class="line">  for _,v:=range b&#123;</span><br><span class="line">    fmt.Print(v,&quot; &quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println()</span><br><span class="line">  return</span><br><span class="line">&#125;</span><br><span class="line">func main()&#123;</span><br><span class="line">  a:=[]int&#123;2,1,3,5,4&#125;</span><br><span class="line">  echoArray(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>interface{}使得我们可以向函数传递任意类型的变量；</li><li>断言解决在使用interface{}的情况下，空接口类型向普通类型转换的类型转换问题；</li><li>普通类型之间的转换最好使用显式的类型转换，否者很可能导致严重的错误。<h3 id="从-dep-迁移到-go-mod"><a href="#从-dep-迁移到-go-mod" class="headerlink" title="从 dep 迁移到 go mod"></a>从 dep 迁移到 go mod</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># golang 依赖管理从 dep 迁移到 go modules</span><br><span class="line">1. 执行 go version 确保你的 go 版本在 11 或更高</span><br><span class="line">2. 将你的代码移动到 GOPATH 之外 并设置 export GO111MODULE=on</span><br><span class="line">3. go mod init [module path] 这个会从你的 Gopkg.lock 文件中读取依赖</span><br><span class="line">4. go mod tidy 这个会移除一些你不需要的依赖</span><br><span class="line">5. rm -rf vendor/ 你可以选择性的删除掉 vendor 目录</span><br><span class="line">6. go build 测试有一下是否成功</span><br><span class="line">7. rm -f Gopkg.lock Gopkg.toml 最后你可以删除掉你的 dep 依赖文件了</span><br><span class="line">8. go 读取了 Dep 的依赖文件 Gopkg.lock 然后创建了一个 go.mod 文件</span><br><span class="line"></span><br><span class="line"># 如果需要保留 vendor 目录，可以执行以下命令</span><br><span class="line">1. 执行 go mod vendor 拷贝你的依赖到 vendor 目录</span><br><span class="line">2. 执行 go build -mod=vendor 确保编译时使用 vendor 目录</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="go-Mod构建"><a href="#go-Mod构建" class="headerlink" title="go Mod构建"></a>go Mod构建</h3><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">go mod download</td><td align="left">下载依赖包到本地（默认为 GOPATH/pkg/mod 目录）</td></tr><tr><td align="left">go mod edit</td><td align="left">编辑 go.mod 文件</td></tr><tr><td align="left">go mod graph</td><td align="left">打印模块依赖图</td></tr><tr><td align="left">go mod init</td><td align="left">初始化当前文件夹，创建 go.mod 文件</td></tr><tr><td align="left">go mod tidy</td><td align="left">增加缺少的包，删除无用的包</td></tr><tr><td align="left">go mod vendor</td><td align="left">将依赖复制到 vendor 目录下</td></tr><tr><td align="left">go mod verify</td><td align="left">校验依赖</td></tr><tr><td align="left">go mod why</td><td align="left">解释为什么需要依赖</td></tr></tbody></table><blockquote><p>下载官方包1.11(及其以上版本将会自动支持gomod)<br>默认GO111MODULE=auto(auto是指如果在gopath下不启用mod)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Golang 提供一个环境变量 GO111MODULE 来设置是否使用mod，它有3个可选值，分别是off, on, auto（默认值），具体含义如下：</span><br><span class="line">off: GOPATH mode，查找vendor和GOPATH目录</span><br><span class="line">on：module-aware mode，使用 go module，忽略GOPATH目录</span><br><span class="line">auto：如果当前目录不在$GOPATH 并且 当前目录（或者父目录）下有go.mod文件，则使用 GO111MODULE， 否则仍旧使用 GOPATH mode。</span><br><span class="line"></span><br><span class="line"># 修改 GO111MODULE 的值的语句是</span><br><span class="line">set GO111MODULE=on</span><br><span class="line"></span><br><span class="line"># 在使用模块的时候， GOPATH是无意义的，不过它还是会把下载的依赖储存在 GOPATH/src/mod中，也会把 go install的结果放在 GOPATH/bin（如果 GOBIN 不存在的话）</span><br><span class="line">go mod download 下载模块到本地缓存，缓存路径是 $GOPATH/pkg/mod/cache</span><br><span class="line">go mod edit 是提供了命令版编辑 go.mod 的功能，例如 go mod edit -fmt go.mod 会格式化 go.mod</span><br><span class="line">go mod graph 把模块之间的依赖图显示出来</span><br><span class="line">go mod init 初始化模块（例如把原本dep管理的依赖关系转换过来）</span><br><span class="line">go mod tidy 增加缺失的包，移除没用的包</span><br><span class="line">go mod vendor 把依赖拷贝到 vendor/ 目录下</span><br><span class="line">go mod verify 确认依赖关系</span><br><span class="line">go mod why 解释为什么需要包和模块</span><br><span class="line"></span><br><span class="line">#注意有几个坑的地方：</span><br><span class="line">go mod 命令在 $GOPATH 里默认是执行不了的，因为 GO111MODULE 的默认值是 auto。默认在$GOPATH 里是不会执行， 如果一定要强制执行，就设置环境变量为 on。</span><br><span class="line">go mod init 在没有接module名字的时候是执行不了的，会报错 go: cannot determine module path for source directory。可以这样执行：</span><br><span class="line">go mod init github.com/jiajunhuang/hello</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># mod使用步骤</span><br><span class="line">1. 指定module的根目录并生成go.mod文件</span><br><span class="line">go mod init example.com/hello</span><br><span class="line">2. 下载并添加依赖到go.mod文件中</span><br><span class="line">go build</span><br><span class="line">go test</span><br><span class="line">3. 查看module下的所有依赖</span><br><span class="line">go list -mod= all</span><br><span class="line">go list -m -json all</span><br><span class="line">4. 更新稳定版依赖</span><br><span class="line">go get rsc.io/sampler</span><br><span class="line">5. 更新为指定版本依赖</span><br><span class="line">go list -mod=mod -m -versions rsc.io/sampler</span><br><span class="line">go get rsc.io/sampler@v1.3.1</span><br><span class="line">6. 清理无用的依赖</span><br><span class="line">go mod tidy</span><br><span class="line">7. 将依赖复制到项目路径的vendor文件夹中</span><br><span class="line">go mod vendor</span><br><span class="line">8. 忽略cache里的包，只使用vendor目录里的依赖进行编译</span><br><span class="line">go build -mod=vendor</span><br><span class="line">9. 校验依赖并查看是否有修改</span><br><span class="line">go mod verify</span><br><span class="line">10. 更替版本</span><br><span class="line">go mod edit -require=google.golang.org/grpc@v1.26.0</span><br><span class="line">go get -x google.golang.org/grpc@v1.26.0</span><br><span class="line">go mod vendor</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="go设置多个GOPATH"><a href="#go设置多个GOPATH" class="headerlink" title="go设置多个GOPATH"></a>go设置多个GOPATH</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 配置GOPATH</span><br><span class="line">export GOPATH=~/workspace/go:~/workspace/go/src/goprojects</span><br><span class="line">export GOROOT=/usr/lib/go</span><br><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line"># 配置PATH</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;GOROOT&#125;/bin:$&#123;GOPATH//://bin:&#125;/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Linux安装Go"><a href="#Linux安装Go" class="headerlink" title="Linux安装Go"></a>Linux安装Go</h3><p><a href="https://golang.google.cn/doc/install">https://golang.google.cn/doc/install</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># download: https://golang.google.cn/dl/</span><br><span class="line">wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压安装</span><br><span class="line">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">vim ~/.profile</span><br><span class="line"></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=~/go</span><br><span class="line">#export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line"></span><br><span class="line">source ~/.profile</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set GOARCH=amd64</span><br><span class="line">set GOOS=windows</span><br></pre></td></tr></table></figure><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set GOARCH=amd64</span><br><span class="line">set GOOS=linux</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用golang开发&quot;&gt;&lt;a href=&quot;#使用golang开发&quot; class=&quot;headerlink&quot; title=&quot;使用golang开发&quot;&gt;&lt;/a&gt;使用golang开发&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接设置代理  &lt;a href=&quot;https://goproxy</summary>
      
    
    
    
    <category term="Go" scheme="https://www.rainbowrise.top/categories/Go/"/>
    
    
    <category term="Go" scheme="https://www.rainbowrise.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>beego项目笔记</title>
    <link href="https://www.rainbowrise.top/2021/08/08/beego%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.rainbowrise.top/2021/08/08/beego%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-07T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># GOROOT: go安装根目录</span><br><span class="line">GOROOT</span><br><span class="line">GOROOT/bin</span><br><span class="line"></span><br><span class="line"># GOPATH: Go全局目录</span><br><span class="line">GOPATH</span><br><span class="line">GOPATH/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="beego安装"><a href="#beego安装" class="headerlink" title="beego安装"></a>beego安装</h3><blockquote><p>beego的安装是典型的 Go 安装包的形式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/astaxie/beego</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装bee工具"><a href="#安装bee工具" class="headerlink" title="安装bee工具"></a>安装bee工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/beego/bee</span><br><span class="line"><span class="comment"># 安装完之后，bee 可执行文件默认存放在 $GOPATH/bin 里面</span></span><br><span class="line"><span class="comment"># 需要把 $GOPATH/bin 添加到环境变量中</span></span><br></pre></td></tr></table></figure><h3 id="参考：https-beego-me-docs"><a href="#参考：https-beego-me-docs" class="headerlink" title="参考：https://beego.me/docs/"></a>参考：<a href="https://beego.me/docs/">https://beego.me/docs/</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;配置环境变量&quot;&gt;&lt;a href=&quot;#配置环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置环境变量&quot;&gt;&lt;/a&gt;配置环境变量&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="Go" scheme="https://www.rainbowrise.top/categories/Go/"/>
    
    
    <category term="Go" scheme="https://www.rainbowrise.top/tags/Go/"/>
    
    <category term="Beego" scheme="https://www.rainbowrise.top/tags/Beego/"/>
    
  </entry>
  
  <entry>
    <title>K8S架构图</title>
    <link href="https://www.rainbowrise.top/2021/06/29/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/"/>
    <id>https://www.rainbowrise.top/2021/06/29/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/</id>
    <published>2021-06-28T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/k8s.png" alt="K8S架构图"></p><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/k8s_architecture.png" alt="K8S架构图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/k8s.png&quot; alt=&quot;K8S架构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/sunglowri</summary>
      
    
    
    
    <category term="CICD" scheme="https://www.rainbowrise.top/categories/CICD/"/>
    
    
    <category term="K8S" scheme="https://www.rainbowrise.top/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>K8s之GlusterFS集群文件系统安装使用</title>
    <link href="https://www.rainbowrise.top/2021/06/29/K8s%E4%B9%8BGlusterFS%E9%9B%86%E7%BE%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.rainbowrise.top/2021/06/29/K8s%E4%B9%8BGlusterFS%E9%9B%86%E7%BE%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-28T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.744Z</updated>
    
    <content type="html"><![CDATA[<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><table><thead><tr><th>IP</th><th>主机名</th><th>clusterFs角色</th></tr></thead><tbody><tr><td>10.94.12.220</td><td>k8s-master</td><td>master</td></tr><tr><td>10.94.12.221</td><td>k8s-node1</td><td>slave</td></tr><tr><td>10.94.12.222</td><td>k8s-node2</td><td>slave</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置本地hosts</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">10.94.12.220  k8s-master</span><br><span class="line">10.94.12.221  k8s-node1</span><br><span class="line">10.94.12.222  k8s-node2</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Centos</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># centos </span></span><br><span class="line">yum install -y centos-release-gluster </span><br><span class="line">yum install -y glusterfs glusterfs-server glusterfs-fuse glusterfs-rdma</span><br><span class="line"></span><br><span class="line">systemctl start glusterd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> glusterd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt install -y glusterfs-server</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="将slave节点加入到根gluster集群"><a href="#将slave节点加入到根gluster集群" class="headerlink" title="将slave节点加入到根gluster集群"></a>将slave节点加入到根gluster集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gluster peer probe k8s-master</span><br><span class="line">gluster peer probe k8s-node1</span><br><span class="line">gluster peer probe k8s-node2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点的状态</span></span><br><span class="line">gluster peer status</span><br><span class="line"> </span><br><span class="line"><span class="comment">#删除指定的节点，后跟主机名或IP</span></span><br><span class="line">gluster peer detach node2</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gluster peer命令帮助信息</span></span><br><span class="line">gluster peer <span class="built_in">help</span></span><br></pre></td></tr></table></figure><h4 id="创建卷"><a href="#创建卷" class="headerlink" title="创建卷"></a>创建卷</h4><blockquote><p>为了满足不同应用对高性能、高可用的需求，GlusterFS 支持 7 种卷，即 distribute 卷、stripe 卷、replica 卷、distribute stripe 卷、distribute replica 卷、stripe Replica 卷、distribute stripe replica 卷。<br>其实不难看出，GlusterFS 卷类型实际上可以分为3种基本卷和4种复合卷，每种类型的卷都有其自身的特点和适用场景。</p></blockquote><h5 id="1-分布式卷"><a href="#1-分布式卷" class="headerlink" title="1. 分布式卷"></a>1. 分布式卷</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/gluster</span><br><span class="line"><span class="comment"># 创建卷</span></span><br><span class="line">gluster volume create k8s_data k8s-master:/data/gluster k8s-node1:/data/gluster k8s-node2:/data/gluster force</span><br></pre></td></tr></table></figure><h5 id="2-复制式卷"><a href="#2-复制式卷" class="headerlink" title="2. 复制式卷"></a>2. 复制式卷</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s_data 这个是卷的名称</span></span><br><span class="line"><span class="comment"># replica 3  表示是三份副本，也就是一份数据写三分</span></span><br><span class="line"><span class="comment"># 目前支持比较好的是2或者3副本，事实上个人觉得3最好，性能上还可以接受，安全上比2要好，因为是无中心的，2个brick复制可能脑裂的几率会比较大。</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/gluster</span><br><span class="line">gluster volume create k8s_data replica 3 k8s-master:/data/gluster k8s-node1:/data/gluster k8s-node2:/data/gluster force</span><br></pre></td></tr></table></figure><h5 id="3-分布式复制式卷"><a href="#3-分布式复制式卷" class="headerlink" title="3. 分布式复制式卷"></a>3. 分布式复制式卷</h5><blockquote><p>这个模式比较的重要，企业开发中，一般会使用这个模式。执行添加卷的时候，一定要确保挂载的目录存在，不然，就会报错。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/gluster2</span><br><span class="line"><span class="comment"># 创建备份</span></span><br><span class="line">gluster volume create k8s_data replica 2 k8s-node1:/data/gluster2 k8s-node2:/data/gluster2 force</span><br><span class="line"><span class="comment"># 添加备份</span></span><br><span class="line">gluster volume add-brick k8s_data replica 2 k8s-master:/data/gluster2 force</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-收缩卷"><a href="#4-收缩卷" class="headerlink" title="4. 收缩卷"></a>4. 收缩卷</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开始缩容</span></span><br><span class="line">gluster volume remove-brick k8s_data k8s-node1:/data/gluster2/ k8s-node2:/data/gluster2/ start</span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">gluster volume remove-brick k8s_data k8s-node1:/data/gluster2/ k8s-node2:/data/gluster2/ status</span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line">gluster volume remove-brick k8s_data k8s-node1:/data/gluster2/ k8s-node2:/data/gluster2/ commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-迁移卷"><a href="#5-迁移卷" class="headerlink" title="5. 迁移卷"></a>5. 迁移卷</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刚刚删除了卷，然后现在需要将k8s-master节点，换成k8s-node1节点</span></span><br><span class="line"><span class="comment"># 开始迁移 </span></span><br><span class="line">gluster volume replace-brick k8s_data k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ start</span><br><span class="line"><span class="comment"># 查看迁移状态 </span></span><br><span class="line">gluster volume replace-brick k8s_data k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ status</span><br><span class="line"><span class="comment"># 数据迁移完毕后提交 </span></span><br><span class="line">gluster volume replace-brick k8s_data k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ commit</span><br><span class="line"><span class="comment"># 如果机器10.0.21.246出现故障已经不能运行,执行强制提交 </span></span><br><span class="line">gluster volume replace-brick k8s_data  k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ commit -force</span><br><span class="line"><span class="comment"># 同步整个卷</span></span><br><span class="line">gluster volume heal k8s_data full</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="卷操作"><a href="#卷操作" class="headerlink" title="卷操作"></a>卷操作</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#启动卷</span><br><span class="line">gluster volume start k8s_data</span><br><span class="line">#停止卷</span><br><span class="line">gluster volume  stop k8s_data</span><br><span class="line">#查看节点状态</span><br><span class="line">gluster  volume status</span><br><span class="line">#查看卷的情况</span><br><span class="line">gluster volume info k8s_data</span><br><span class="line">#删除卷</span><br><span class="line">gluster volume delete  k8s_data</span><br></pre></td></tr></table></figure><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gluster peer probe <span class="comment"># 增加一个节点，参数为主机名或IP</span></span><br><span class="line">gluster peer detach <span class="comment"># 删除指定的节点，后跟主机名或IP</span></span><br><span class="line">gluster peer status <span class="comment"># 列出切点的状态</span></span><br><span class="line">gluster peer <span class="built_in">help</span> <span class="comment"># 关于gluster peer命令的帮助信息</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/xuguokun1986/article/details/71693769">https://blog.csdn.net/xuguokun1986/article/details/71693769</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;clusterFs角色&lt;/th&gt;
&lt;/tr&gt;
</summary>
      
    
    
    
    <category term="CICD" scheme="https://www.rainbowrise.top/categories/CICD/"/>
    
    
    <category term="K8S" scheme="https://www.rainbowrise.top/tags/K8S/"/>
    
    <category term="GlusterFS" scheme="https://www.rainbowrise.top/tags/GlusterFS/"/>
    
  </entry>
  
  <entry>
    <title>k8s yaml文件详解</title>
    <link href="https://www.rainbowrise.top/2021/06/29/k8s%20yaml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.rainbowrise.top/2021/06/29/k8s%20yaml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-06-28T16:00:00.000Z</published>
    <updated>2024-03-07T12:44:54.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="k8s-yaml文件详解"><a href="#k8s-yaml文件详解" class="headerlink" title="k8s yaml文件详解"></a>k8s yaml文件详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1             <span class="comment">#指定api版本，此值必须在kubectl apiversion中  </span></span><br><span class="line">kind: Pod                  <span class="comment">#指定创建资源的角色/类型  </span></span><br><span class="line">metadata:                  <span class="comment">#资源的元数据/属性  </span></span><br><span class="line">  name: web04-pod          <span class="comment">#资源的名字，在同一个namespace中必须唯一  </span></span><br><span class="line">  labels:                  <span class="comment">#设定资源的标签，详情请见http://blog.csdn.net/liyingke112/article/details/77482384</span></span><br><span class="line">    k8s-app: apache  </span><br><span class="line">    version: v1  </span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">&quot;true&quot;</span>  </span><br><span class="line">  annotations:             <span class="comment">#自定义注解列表  </span></span><br><span class="line">    - name: String         <span class="comment">#自定义注解名字  </span></span><br><span class="line">spec:<span class="comment">#specification of the resource content 指定该资源的内容  </span></span><br><span class="line">  restartPolicy: Always    <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器  </span></span><br><span class="line">  nodeSelector:            <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1  </span></span><br><span class="line">    zone: node1  </span><br><span class="line">  containers:  </span><br><span class="line">  - name: web04-pod        <span class="comment">#容器的名字  </span></span><br><span class="line">    image: web:apache      <span class="comment">#容器使用的镜像地址  </span></span><br><span class="line">    imagePullPolicy: Never <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都检查</span></span><br><span class="line">                           <span class="comment"># Never，每次都不检查（不管本地是否有）</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;sh&#x27;</span>]        <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT  </span></span><br><span class="line">    args: [<span class="string">&quot;<span class="subst">$(str)</span>&quot;</span>]       <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数  </span></span><br><span class="line">    <span class="built_in">env</span>:                   <span class="comment">#指定容器中的环境变量  </span></span><br><span class="line">    - name: str            <span class="comment">#变量的名字  </span></span><br><span class="line">      value: <span class="string">&quot;/etc/run.sh&quot;</span> <span class="comment">#变量的值  </span></span><br><span class="line">    resources:             <span class="comment">#资源管理，请求请见http://blog.csdn.net/liyingke112/article/details/77452630</span></span><br><span class="line">      requests:            <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行  </span></span><br><span class="line">        cpu: 0.1           <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">        memory: 32Mi       <span class="comment">#内存使用量  </span></span><br><span class="line">      limits:              <span class="comment">#资源限制  </span></span><br><span class="line">        cpu: 0.5  </span><br><span class="line">        memory: 32Mi  </span><br><span class="line">    ports:  </span><br><span class="line">    - containerPort: 80    <span class="comment">#容器开发对外的端口</span></span><br><span class="line">      name: httpd          <span class="comment">#名称</span></span><br><span class="line">      protocol: TCP  </span><br><span class="line">    livenessProbe:         <span class="comment">#pod内容器健康检查的设置，详情请见http://blog.csdn.net/liyingke112/article/details/77531584</span></span><br><span class="line">      httpGet:             <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常  </span></span><br><span class="line">        path: /            <span class="comment">#URI地址  </span></span><br><span class="line">        port: 80  </span><br><span class="line">        <span class="comment">#host: 127.0.0.1   #主机地址  </span></span><br><span class="line">        scheme: HTTP  </span><br><span class="line">      initialDelaySeconds: 180 <span class="comment">#表明第一次检测在容器启动后多长时间后开始  </span></span><br><span class="line">      timeoutSeconds: 5    <span class="comment">#检测的超时时间  </span></span><br><span class="line">      periodSeconds: 15    <span class="comment">#检查间隔时间  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常  </span></span><br><span class="line">      <span class="comment">#  command:  </span></span><br><span class="line">      <span class="comment">#    - cat  </span></span><br><span class="line">      <span class="comment">#    - /tmp/health  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康   </span></span><br><span class="line">      <span class="comment">#  port: number   </span></span><br><span class="line">    lifecycle:             <span class="comment">#生命周期管理  </span></span><br><span class="line">      postStart:           <span class="comment">#容器运行之前运行的任务  </span></span><br><span class="line">        <span class="built_in">exec</span>:  </span><br><span class="line">          <span class="built_in">command</span>:  </span><br><span class="line">            - <span class="string">&#x27;sh&#x27;</span>  </span><br><span class="line">            - <span class="string">&#x27;yum upgrade -y&#x27;</span>  </span><br><span class="line">      preStop:             <span class="comment">#容器关闭之前运行的任务  </span></span><br><span class="line">        <span class="built_in">exec</span>:  </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;service httpd stop&#x27;</span>]  </span><br><span class="line">    volumeMounts:          <span class="comment">#详情请见http://blog.csdn.net/liyingke112/article/details/76577520</span></span><br><span class="line">    - name: volume         <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应    </span></span><br><span class="line">      mountPath: /data     <span class="comment">#挂载到容器的某个路径下  </span></span><br><span class="line">      readOnly: True  </span><br><span class="line">  volumes:                 <span class="comment">#定义一组挂载设备  </span></span><br><span class="line">  - name: volume           <span class="comment">#定义一个挂载设备的名字  </span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;  </span></span><br><span class="line">    hostPath:  </span><br><span class="line">      path: /opt           <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;k8s-yaml文件详解&quot;&gt;&lt;a href=&quot;#k8s-yaml文件详解&quot; class=&quot;headerlink&quot; title=&quot;k8s yaml文件详解&quot;&gt;&lt;/a&gt;k8s yaml文件详解&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="CICD" scheme="https://www.rainbowrise.top/categories/CICD/"/>
    
    
    <category term="K8S" scheme="https://www.rainbowrise.top/tags/K8S/"/>
    
    <category term="Yaml" scheme="https://www.rainbowrise.top/tags/Yaml/"/>
    
  </entry>
  
</feed>
