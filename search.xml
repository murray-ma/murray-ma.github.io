<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>$.ajax()方法详解</title>
    <url>/2019/06/02/$.ajax()%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="ajax-方法详解"><a href="#ajax-方法详解" class="headerlink" title="$.ajax()方法详解"></a>$.ajax()方法详解</h3><h4 id="jquery中的ajax方法参数"><a href="#jquery中的ajax方法参数" class="headerlink" title="jquery中的ajax方法参数"></a>jquery中的ajax方法参数</h4><ol>
<li><p>url:<br>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</p>
</li>
<li><p>type:<br>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p>
</li>
<li><p>timeout:<br>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p>
</li>
<li><p>async:<br>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p>
</li>
<li><p>cache:<br>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p>
</li>
<li><p>data:<br>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看  processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</p>
</li>
<li><p>dataType:<br>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个”?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p>
</li>
<li><p>beforeSend：<br>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</p>
<pre><code>     function(XMLHttpRequest)&#123;
        this;   //调用本次ajax请求时传递的options参数
     &#125;
</code></pre>
</li>
<li><p>complete：<br>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。</p>
<pre><code>   function(XMLHttpRequest, textStatus)&#123;
      this;    //调用本次ajax请求时传递的options参数
   &#125;
</code></pre>
</li>
<li><p>success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。</p>
<pre><code> (1)由服务器返回，并根据dataType参数进行处理后的数据。
 (2)描述状态的字符串。
 function(data, textStatus)&#123;
    //data可能是xmlDoc、jsonObj、html、text等等
    this;  //调用本次ajax请求时传递的options参数
 &#125;
</code></pre>
</li>
<li><p>error:<br>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：<br>   function(XMLHttpRequest, textStatus, errorThrown){</p>
<pre><code>  //通常情况下textStatus和errorThrown只有其中一个包含信息
  this;   //调用本次ajax请求时传递的options参数
</code></pre>
<p>   }</p>
</li>
<li><p>contentType：<br>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</p>
</li>
</ol>
<p>13.dataFilter：<br>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。<br>            function(data, type){<br>                //返回处理后的数据<br>                return data;<br>            }</p>
<ol start="14">
<li><p>global：<br>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。</p>
</li>
<li><p>ifModified：<br>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</p>
</li>
<li><p>jsonp：<br>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</p>
</li>
<li><p>username：<br>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。</p>
</li>
<li><p>password：<br>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</p>
</li>
<li><p>processData：<br>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</p>
</li>
<li><p>scriptCharset：<br>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p>
</li>
</ol>
<p><strong>代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    $(&#x27;#send&#x27;).click(function()&#123;</span><br><span class="line">         $.ajax(&#123;</span><br><span class="line">             type: &quot;GET&quot;,</span><br><span class="line">             url: &quot;test.json&quot;,</span><br><span class="line">             data: &#123;username:$(&quot;#username&quot;).val(), content:$(&quot;#content&quot;).val()&#125;,</span><br><span class="line">             dataType: &quot;json&quot;,</span><br><span class="line">             success: function(data)&#123;</span><br><span class="line">                         $(&#x27;#resText&#x27;).empty();   //清空resText里面的所有内容</span><br><span class="line">                         var html = &#x27;&#x27;;</span><br><span class="line">                         $.each(data, function(commentIndex, comment)&#123;</span><br><span class="line">                               html += &#x27;&lt;div class=&quot;comment&quot;&gt;&lt;h6&gt;&#x27; + comment[&#x27;username&#x27;]</span><br><span class="line">                                         + &#x27;:&lt;/h6&gt;&lt;p class=&quot;para&quot;&#x27; + comment[&#x27;content&#x27;]</span><br><span class="line">                                         + &#x27;&lt;/p&gt;&lt;/div&gt;&#x27;;</span><br><span class="line">                         &#125;);</span><br><span class="line">                         $(&#x27;#resText&#x27;).html(html);</span><br><span class="line">                      &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="21">
<li>$.each()函数:<br>$.each()函数不同于JQuery对象的each()方法，它是一个全局函数，不操作JQuery对象，而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.each(data.root,function(idx,item)&#123;</span><br><span class="line">if(idx==0)&#123;</span><br><span class="line">   return true;//同countinue，返回false同break</span><br><span class="line">   &#125;</span><br><span class="line">   alert(&quot;name:&quot;+item.name+&quot;,value:&quot;+item.value);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>API网关之Kong网关</title>
    <url>/2021/03/01/API%E7%BD%91%E5%85%B3%E4%B9%8BKong%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h2 id="Docker-部署-Kong-网关"><a href="#Docker-部署-Kong-网关" class="headerlink" title="Docker 部署 Kong 网关"></a>Docker 部署 Kong 网关</h2><h3 id="Kong-之-docker-部署"><a href="#Kong-之-docker-部署" class="headerlink" title="Kong 之 docker 部署"></a>Kong 之 docker 部署</h3><h4 id="1-创建-Docker-network"><a href="#1-创建-Docker-network" class="headerlink" title="1. 创建 Docker network"></a>1. 创建 Docker network</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create kong-net</span><br></pre></td></tr></table></figure>

<h4 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2. 拉取镜像"></a>2. 拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull kong:1.3.0</span><br><span class="line">docker pull postgres:11.5</span><br><span class="line">docker pull pgbi/kong-dashboard:v3</span><br></pre></td></tr></table></figure>

<h4 id="3-postgres数据库"><a href="#3-postgres数据库" class="headerlink" title="3. postgres数据库"></a>3. postgres数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">--network=kong-net \</span><br><span class="line">-v /opt/kong/postgres/data:/var/lib/postgresql/data \</span><br><span class="line">-p 5432:5432 \</span><br><span class="line">-e <span class="string">&quot;POSTGRES_USER=kong&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;POSTGRES_DB=kong&quot;</span> \</span><br><span class="line">postgres:11.5</span><br></pre></td></tr></table></figure>

<h4 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4. 初始化数据库"></a>4. 初始化数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> \</span><br><span class="line">--<span class="built_in">link</span> kong-database:kong-database \</span><br><span class="line">--network=kong-net \</span><br><span class="line">-e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> \</span><br><span class="line">kong:1.3.0 kong migrations bootstrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意:如果kong低于0.15,使用up命令代替bootstrap。</span></span><br></pre></td></tr></table></figure>

<h4 id="5-kong"><a href="#5-kong" class="headerlink" title="5. kong"></a>5. kong</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong \</span><br><span class="line">--<span class="built_in">link</span> kong-database:kong-database \</span><br><span class="line">--network=kong-net \</span><br><span class="line">-e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> \</span><br><span class="line">-p 8000:8000 \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 8001:8001 \</span><br><span class="line">-p 8444:8444 \</span><br><span class="line">-p 7946:7946 \</span><br><span class="line">-p 7946:7946/udp \</span><br><span class="line">kong:1.3.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置，配置挂载</span></span><br><span class="line">-v /opt/kong/kong.conf:/etc/kong/kong.conf \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意:配置可以自定义，包括数据库连接。值得一提的是多个kong共用一个数据库也是kong集群搭建原理的重要一环。</span></span><br></pre></td></tr></table></figure>

<h4 id="6-UI管理-kong-dashboard"><a href="#6-UI管理-kong-dashboard" class="headerlink" title="6. UI管理, kong-dashboard"></a>6. UI管理, kong-dashboard</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Kong Dashboard(https://github.com/PGBI/kong-dashboard)只支持到 kong 0.14版本。</span><br><span class="line">docker run -d --name kong-dashboard \</span><br><span class="line">--rm \</span><br><span class="line">-p 8088:8080 \</span><br><span class="line">--network=kong-net \</span><br><span class="line">pgbi/kong-dashboard:v3 \</span><br><span class="line">start --kong-url http://kong:8001 \</span><br><span class="line">--basic-auth user1=password1 user2=password2</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="7-UI管理-konga"><a href="#7-UI管理-konga" class="headerlink" title="7. UI管理, konga"></a>7. UI管理, konga</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 1337:1337 \</span><br><span class="line">--name konga \</span><br><span class="line">--network kong-net \</span><br><span class="line">--link kong-database:kong-database \</span><br><span class="line">-e &quot;NODE_ENV=production&quot; \</span><br><span class="line">-e &quot;TOKEN_SECRET=your_token_secret&quot; \</span><br><span class="line">-e &quot;DB_ADAPTER=postgres&quot; \</span><br><span class="line">-e &quot;DB_HOST=kong-database&quot; \</span><br><span class="line">-e &quot;DB_PORT=5432:5432&quot; \</span><br><span class="line">-e &quot;DB_USER=kong&quot; \</span><br><span class="line">-e &quot;DB_PASSWORD=konga&quot; \</span><br><span class="line">-e &quot;DB_DATABASE=konga&quot; \</span><br><span class="line">pantsel/konga</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Kong-之-docker-compose-部署"><a href="#Kong-之-docker-compose-部署" class="headerlink" title="Kong 之 docker-compose 部署"></a>Kong 之 docker-compose 部署</h3><h4 id="1-docker-compose-yml-编排"><a href="#1-docker-compose-yml-编排" class="headerlink" title="1. docker-compose.yml 编排"></a>1. docker-compose.yml 编排</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kong-database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:11.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kong-database</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=kong</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=kong</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/opt/kong/postgres/data:/var/lib/postgresql/data&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kong-net</span></span><br><span class="line">  <span class="attr">kong:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kong:1.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kong</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_DATABASE=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PG_HOST=kong-database</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_CASSANDRA_CONTACT_POINTS=kong-database</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PROXY_ACCESS_LOG=/dev/stdout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_ADMIN_ACCESS_LOG=/dev/stdout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PROXY_ERROR_LOG=/dev/stderr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_ADMIN_ERROR_LOG=/dev/stderr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_ADMIN_LISTEN=0.0.0.0:8001,</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8444</span> <span class="string">ssl</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="comment">#    depends_on:</span></span><br><span class="line"><span class="comment">#      - kong-database</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8443:8443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8001:8001&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8444:8444&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7946:7946&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7946:7946/udp&quot;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kong-database:kong-database</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/etc/localtime:/etc/localtime:ro&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/etc/letsencrypt:/etc/letsencrypt:ro&quot;</span></span><br><span class="line"><span class="comment">#      - &quot;/usr/local/container/kong/kong.conf:/etc/kong/kong.conf:ro&quot;</span></span><br><span class="line"><span class="comment">#      - &quot;/usr/local/container/kong/nginx-kong.conf/:/usr/local/kong/nginx-kong.conf:ro&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kong-net</span></span><br><span class="line"><span class="comment">#  kong-ui:</span></span><br><span class="line"><span class="comment">#    image: pgbi/kong-dashboard</span></span><br><span class="line"><span class="comment">#    container_name: kong-dashboard</span></span><br><span class="line"><span class="comment">#    restart: on-failure</span></span><br><span class="line"><span class="comment">#    links:</span></span><br><span class="line"><span class="comment">#      - kong</span></span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - &quot;8080:8080&quot;</span></span><br><span class="line"><span class="comment">#    networks:</span></span><br><span class="line"><span class="comment">#      - default</span></span><br><span class="line"><span class="comment">#      - kong-net</span></span><br><span class="line">  <span class="attr">kong-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">pantsel/konga</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">konga</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TOKEN_SECRET=your_token_secret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_ADAPTER=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=kong-database</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=5432:5432</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=kong</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASSWORD=konga</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_DATABASE=konga</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kong-database</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kong-database:kong-database</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1337:1337&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kong-net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">kong-net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2. 初始化数据库"></a>2. 初始化数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml run --<span class="built_in">rm</span> kong kong migrations bootstrap</span><br></pre></td></tr></table></figure>

<h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up –d --no-recreate</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Gateway</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>Kong</tag>
      </tags>
  </entry>
  <entry>
    <title>APScheduler笔记</title>
    <url>/2021/04/01/APScheduler%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="APScheduler定时任务（python模块）"><a href="#APScheduler定时任务（python模块）" class="headerlink" title="APScheduler定时任务（python模块）"></a>APScheduler定时任务（python模块）</h3><blockquote>
<p>APScheduler基于Quartz的一个Python定时任务框架，实现了Quartz的所有功能，使用起来十分方便。提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持久化任务。基于这些功能，我们可以很方便的实现一个python定时任务系统。</p>
</blockquote>
<h4 id="APScheduler有四种组成部分"><a href="#APScheduler有四种组成部分" class="headerlink" title="APScheduler有四种组成部分"></a>APScheduler有四种组成部分</h4><ul>
<li>触发器(trigger)：包含调度逻辑，每一个作业有它自己的触发器，用于决定接下来哪一个作业会运行。除了他们自己初始配置意外，触发器完全是无状态的。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># APScheduler 有三种内置的触发器类型:</span><br><span class="line">date: 一次性指定日期，特定的时间点触发</span><br><span class="line">interval: 在某个时间范围内间隔多长时间执行一次 ，固定时间间隔触发</span><br><span class="line">cron: 和Linux crontab格式兼容，最为强大，在特定时间周期性地触发</span><br></pre></td></tr></table></figure></li>
<li>作业存储(job store)：存储被调度的作业，默认的作业存储是简单地把作业保存在内存中，其他的作业存储是将作业保存在数据库中。一个作业的数据讲在保存在持久化作业存储时被序列化，并在加载时被反序列化。调度器不能分享同一个作业存储。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 作业存储</span><br><span class="line">MemoryJobStore: 默认的作业存储器</span><br><span class="line">Mongo: mongodb 作为作业存储</span><br><span class="line">SQLAlchemy JobStore： 用于支持大多数RDBMS数据库</span><br></pre></td></tr></table></figure></li>
<li>执行器(executor)：处理作业的运行，他们通常通过在作业中提交制定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor: 默认的执行器</span><br><span class="line">ProcessPoolExecutor： 用于应用涉及到CPU密集型操作，来使用更多的CPU核心。也可以同时使用两者，将ProcessPoolExecutor作为第二执行器。</span><br></pre></td></tr></table></figure></li>
<li>调度器(scheduler)：是其他的组成部分。你通常在应用只有一个调度器，应用的开发者通常不会直接处理作业存储、调度器和触发器，相反，调度器提供了处理这些的合适的接口。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 调度器</span><br><span class="line">BlockingScheduler : 当调度器是应用中唯一要运行的东西时。 </span><br><span class="line">BackgroundScheduler : 当没有运行任何其他框架并希望调度器在你应用的后台执行时使用（充电桩即使用此种方式）。 </span><br><span class="line">AsyncIOScheduler : 当程序使用了asyncio（一个异步框架）的时候使用。 </span><br><span class="line">GeventScheduler : 当程序使用了gevent（高性能的Python并发框架）的时候使用。 </span><br><span class="line">TornadoScheduler : 当程序基于Tornado（一个web框架）的时候使用。 </span><br><span class="line">TwistedScheduler : 当程序使用了Twisted（一个异步框架）的时候使用 </span><br><span class="line">QtScheduler : 如果应用是一个Qt应用的时候可以使用。 </span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple apscheduler</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created By Murray(m18527) on 2019/8/14 9:55</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.base <span class="keyword">import</span> STATE_STOPPED</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_command</span>():</span><br><span class="line">    command = <span class="string">&quot;python hello.py&quot;</span></span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job_func</span>(<span class="params">text=<span class="string">&quot;Tick&quot;</span></span>):</span><br><span class="line">    <span class="comment"># print(&#x27;%s! The time is: %s&#x27; % (text, datetime.now()))</span></span><br><span class="line">    <span class="comment"># os.system(get_command())</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Time: &#123;2&#125;, job thread_id-&#123;0&#125;, process_id-&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(threading.get_ident(), os.getpid(), datetime.today()))</span><br><span class="line">    os.popen(get_command(), mode=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">date_scheduler_demo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    最基本的一种调度，作业只会执行一次。</span></span><br><span class="line"><span class="string">    参数如下：</span></span><br><span class="line"><span class="string">        run_date (datetime|str) – 作业的运行日期或时间</span></span><br><span class="line"><span class="string">        timezone (datetime.tzinfo|str) – 指定时区</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    scheduler = BackgroundScheduler()</span><br><span class="line">    <span class="comment"># scheduler.add_job(job_func, &#x27;date&#x27;, run_date=date(2019, 8, 14), args=[&#x27;text&#x27;])</span></span><br><span class="line">    scheduler.add_job(job_func, <span class="string">&#x27;date&#x27;</span>, run_date=datetime(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">42</span>, <span class="number">0</span>), args=[<span class="string">&quot;Date&quot;</span>])</span><br><span class="line">    scheduler.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        scheduler.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interval_scheduler_demo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    interval 间隔调度，参数如下:</span></span><br><span class="line"><span class="string">        weeks (int) – 间隔几周</span></span><br><span class="line"><span class="string">        days (int) – 间隔几天</span></span><br><span class="line"><span class="string">        hours (int) – 间隔几小时</span></span><br><span class="line"><span class="string">        minutes (int) – 间隔几分钟</span></span><br><span class="line"><span class="string">        seconds (int) – 间隔多少秒</span></span><br><span class="line"><span class="string">        start_date (datetime|str) – 开始日期</span></span><br><span class="line"><span class="string">        end_date (datetime|str) – 结束日期</span></span><br><span class="line"><span class="string">        timezone (datetime.tzinfo|str) – 时区</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    scheduler = BackgroundScheduler()</span><br><span class="line">    <span class="comment"># 间隔3秒钟执行一次</span></span><br><span class="line">    scheduler.add_job(job_func, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">3</span>)</span><br><span class="line">    scheduler.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> scheduler.running:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">1000</span>:</span><br><span class="line">                scheduler.shutdown()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        scheduler.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cron_scheduler_demo</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    cron 间隔调度，参数如下:</span></span><br><span class="line"><span class="string">        year (int|str) – 年，4位数字</span></span><br><span class="line"><span class="string">        month (int|str) – 月 (范围1-12)</span></span><br><span class="line"><span class="string">        day (int|str) – 日 (范围1-31)</span></span><br><span class="line"><span class="string">        week (int|str) – 周 (范围1-53)</span></span><br><span class="line"><span class="string">        day_of_week (int|str) – 周内第几天或者星期几 (范围0-6 或者 mon,tue,wed,thu,fri,sat,sun)</span></span><br><span class="line"><span class="string">        hour (int|str) – 时 (范围0-23)</span></span><br><span class="line"><span class="string">        minute (int|str) – 分 (范围0-59)</span></span><br><span class="line"><span class="string">        second (int|str) – 秒 (范围0-59)</span></span><br><span class="line"><span class="string">        start_date (datetime|str) – 最早开始日期(包含)</span></span><br><span class="line"><span class="string">        end_date (datetime|str) – 最晚结束时间(包含)</span></span><br><span class="line"><span class="string">        timezone (datetime.tzinfo|str) – 指定时区</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    scheduler = BackgroundScheduler()</span><br><span class="line">    <span class="comment"># # job_func 将会在6,7,8,11,12月的第3个周五的1,2,3点运行</span></span><br><span class="line">    <span class="comment"># scheduler.add_job(job_func, &#x27;cron&#x27;, month=&#x27;6-8,11-12&#x27;, day=&#x27;3rd fri&#x27;, hour=&#x27;0-3&#x27;)</span></span><br><span class="line">    <span class="comment"># 截止到2016-12-30 00:00:00，每周一到周五早上五点半运行job_func</span></span><br><span class="line">    scheduler.add_job(job_func, <span class="string">&#x27;cron&#x27;</span>, day_of_week=<span class="string">&#x27;mon-fri&#x27;</span>, hour=<span class="number">5</span>, minute=<span class="number">30</span>, end_date=<span class="string">&#x27;2019-12-31&#x27;</span>)</span><br><span class="line">    scheduler.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> scheduler.running:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">1000</span>:</span><br><span class="line">                scheduler.shutdown()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        scheduler.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jobstore_demo</span>():</span><br><span class="line">    <span class="keyword">from</span> pytz <span class="keyword">import</span> utc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line">    <span class="keyword">from</span> apscheduler.jobstores.sqlalchemy <span class="keyword">import</span> SQLAlchemyJobStore</span><br><span class="line">    <span class="keyword">from</span> apscheduler.executors.pool <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line">    <span class="keyword">from</span> apscheduler.jobstores.memory <span class="keyword">import</span> MemoryJobStore</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置作业存储器</span></span><br><span class="line">    job_stores = &#123;</span><br><span class="line">        <span class="comment"># &#x27;default&#x27;: SQLAlchemyJobStore(url=&#x27;sqlite:///jobs.sqlite&#x27;)</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: MemoryJobStore()  <span class="comment"># 内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 配置执行器，并设置线程数</span></span><br><span class="line">    executors = &#123;</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: ThreadPoolExecutor(<span class="number">10</span>),</span><br><span class="line">        <span class="string">&#x27;processpool&#x27;</span>: ProcessPoolExecutor(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    job_defaults = &#123;</span><br><span class="line">        <span class="string">&#x27;coalesce&#x27;</span>: <span class="literal">False</span>,  <span class="comment"># 默认情况下关闭新的作业</span></span><br><span class="line">        <span class="string">&#x27;max_instances&#x27;</span>: <span class="number">3</span>  <span class="comment"># 设置调度程序将同时运行的特定作业的最大实例数3</span></span><br><span class="line">    &#125;</span><br><span class="line">    scheduler = BackgroundScheduler(jobstores=job_stores, executors=executors, job_defaults=job_defaults, timezone=utc)</span><br><span class="line">    scheduler.start()</span><br><span class="line"></span><br><span class="line">    job_id = <span class="string">&#x27;my_test_job_id&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        scheduler.remove_job(job_id=job_id, jobstore=<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;delete job: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(job_id))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    scheduler.add_job(job_func, <span class="string">&#x27;cron&#x27;</span>, day_of_week=<span class="string">&#x27;*&#x27;</span>, hour=<span class="string">&quot;*&quot;</span>, minute=<span class="string">&quot;*&quot;</span>, second=<span class="string">&quot;*/5&quot;</span>, <span class="built_in">id</span>=job_id,</span><br><span class="line">                      replace_existing=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Jobs: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(scheduler.get_jobs()))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        scheduler.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    jobstore_demo()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>APScheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>APT、DEB、YUM、RPM指令用法</title>
    <url>/2020/10/01/APT%E3%80%81DEB%E3%80%81YUM%E3%80%81RPM%E6%8C%87%E4%BB%A4%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install package_name 安装/更新一个 deb 包 </span><br><span class="line">apt-cdrom install package_name 从光盘安装/更新一个 deb 包 </span><br><span class="line">apt-get update 升级列表中的软件包 </span><br><span class="line">apt-get upgrade 升级所有已安装的软件 </span><br><span class="line">apt-get remove package_name 从系统删除一个deb包 </span><br><span class="line">apt-get check 确认依赖的软件仓库正确 </span><br><span class="line">apt-get clean 从下载的软件包中清理缓存 </span><br><span class="line">apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</span><br></pre></td></tr></table></figure>

<h3 id="DEB-包-Debian-Ubuntu-以及类似系统"><a href="#DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="DEB 包 (Debian, Ubuntu 以及类似系统)"></a>DEB 包 (Debian, Ubuntu 以及类似系统)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -i package.deb 安装/更新一个 deb 包 </span><br><span class="line">dpkg -r package_name 从系统删除一个 deb 包 </span><br><span class="line">dpkg -l 显示系统中所有已经安装的 deb 包 </span><br><span class="line">dpkg -l | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的deb包 </span><br><span class="line">dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 </span><br><span class="line">dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 </span><br><span class="line">dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表 </span><br><span class="line">dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 </span><br></pre></td></tr></table></figure>

<h3 id="RPM-包-（Fedora-Redhat及类似系统）"><a href="#RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="RPM 包 - （Fedora, Redhat及类似系统）"></a>RPM 包 - （Fedora, Redhat及类似系统）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh package.rpm 安装一个rpm包 </span><br><span class="line">rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 </span><br><span class="line">rpm -U package.rpm 更新一个rpm包但不改变其配置文件 </span><br><span class="line">rpm -F package.rpm 更新一个确定已经安装的rpm包 </span><br><span class="line">rpm -e package_name.rpm 删除一个rpm包</span><br><span class="line">rpm -e --nodeps package_name.rpm 强力删除一个rpm包 </span><br><span class="line">rpm -qa 显示系统中所有已经安装的rpm包 </span><br><span class="line">rpm -qa | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的rpm包 </span><br><span class="line">rpm -qi package_name 获取一个已安装包的特殊信息 </span><br><span class="line">rpm -qg &quot;System Environment/Daemons&quot; 显示一个组件的rpm包 </span><br><span class="line">rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 </span><br><span class="line">rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 </span><br><span class="line">rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表 </span><br><span class="line">rpm -q package_name --whatprovides 显示一个rpm包所占的体积 </span><br><span class="line">rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l </span><br><span class="line">rpm -q package_name --changelog 显示一个rpm包的修改历史 </span><br><span class="line">rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 </span><br><span class="line">rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 </span><br><span class="line">rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 </span><br><span class="line">rpm --checksig package.rpm 确认一个rpm包的完整性 </span><br><span class="line">rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 </span><br><span class="line">rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 </span><br><span class="line">rpm -Va 检查系统中所有已安装的rpm包- 小心使用 </span><br><span class="line">rpm -Vp package.rpm 确认一个rpm包还未安装 </span><br><span class="line"></span><br><span class="line"># 查询系统装已经安装的软件信息</span><br><span class="line">rpm -qa  查询系统中已经安装的软件</span><br><span class="line">rpm -qf package.rpm绝对路径 查询一个已经安装的文件属于哪个软件包</span><br><span class="line">rpm -ql package_name 查询已安装软件包都安装到何处</span><br><span class="line">rpm  -qi package_name 查询一个已安装软件包的信息</span><br><span class="line">rpm -qc package_name 查看一下已安装软件的配置文件</span><br><span class="line">rpm -qd package_name 查看一个已经安装软件的文档安装位置</span><br><span class="line">rpm -qR package_name 查看一下已安装软件所依赖的软件包及文件</span><br><span class="line"></span><br><span class="line"># 对于未安装的软件包信息查询</span><br><span class="line">rpm -qpi rpm文件 查看一个软件包的用途、版本等信息</span><br><span class="line">rpm -qpl rpm文件 查看一件软件包所包含的文件</span><br><span class="line">rpm -qpd rpm文件 查看软件包的文档所在的位置</span><br><span class="line">rpm -qpc rpm文件 查看一个软件包的配置文件</span><br><span class="line">rpm -qpR rpm文件 查看一个软件包的配置文件</span><br><span class="line"></span><br><span class="line"># 软件包的安装、升级、删除等</span><br><span class="line">rpm -ivh rpm文件【安装】 </span><br><span class="line">rpm -ivh --replacepkgs rpm文件【重新安装】</span><br><span class="line">rpm -ivh --force rpm文件【强制安装，解决包冲突】</span><br><span class="line">rpm -ivh --nodeps rpm文件【关联性安装】</span><br><span class="line">rpm -Uvh rpm文件【更新】</span><br><span class="line"></span><br><span class="line"># 删除一个rpm 包</span><br><span class="line">rpm -e 软件名</span><br><span class="line">rpm -e --nodeps 软件名 // 强力删除模式</span><br><span class="line"></span><br><span class="line"># 签名导入</span><br><span class="line">rpm --import 签名文件  rpm --import RPM-GPG-KEY</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install package_name 下载并安装一个rpm包 </span><br><span class="line">yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 </span><br><span class="line">yum check-update  检查可以更新的软件包 </span><br><span class="line">yum update 更新所有的软件包 </span><br><span class="line">yum update package_name.rpm 更新当前系统中所有安装的rpm包 </span><br><span class="line">yum update package_name 更新一个rpm包 </span><br><span class="line">yum remove package_name 删除一个rpm包 </span><br><span class="line">yum list 列出当前系统中安装的所有包 </span><br><span class="line">yum list updates 列出资源库中所有可以更新的rpm包</span><br><span class="line">yum list installed 列出已经安装的所有的rpm包</span><br><span class="line">yum list extras 列出已经安装的但是不包含在资源库中的rpm包 </span><br><span class="line">yum search package_name 在rpm仓库中搜寻软件包 </span><br><span class="line">yum clean packages 清理rpm缓存删除下载的包 </span><br><span class="line">yum clean headers 删除所有头文件 </span><br><span class="line">yum clean old headers 清除缓存中旧的头文件 </span><br><span class="line">yum clean all 删除所有缓存的包和头文件 </span><br><span class="line"></span><br><span class="line">yum info rpm包信息显示(info参数同list)，列出资源库中所有可以安装或更新的rpm包的信息 </span><br><span class="line">yum info updates  列出资源库中所有可以更新的rpm包的信息</span><br><span class="line">yum info installed 列出已经安装的所有的rpm包的信息</span><br><span class="line">yum localinstall package 本地安装软件包</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Layout布局</title>
    <url>/2018/02/02/Android-Layout%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h3 id="TableLayout-表格布局-中属性说明"><a href="#TableLayout-表格布局-中属性说明" class="headerlink" title="TableLayout(表格布局)中属性说明"></a>TableLayout(表格布局)中属性说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:collapseColumns=&quot;1,2&quot;---表示第2列和第3列不可见（序号从0开始）</span><br><span class="line">android:shrinkColumns=&quot;0&quot; ---表示第1列可压缩</span><br><span class="line">android:stretchColumns=&quot;0&quot;---表示第1列可拉伸</span><br></pre></td></tr></table></figure>

<h3 id="RelativeLayout（相对布局）中属性说明"><a href="#RelativeLayout（相对布局）中属性说明" class="headerlink" title="RelativeLayout（相对布局）中属性说明"></a>RelativeLayout（相对布局）中属性说明</h3><h4 id="相对于给定ID控件"><a href="#相对于给定ID控件" class="headerlink" title="相对于给定ID控件"></a>相对于给定ID控件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:layout_above 将该控件的底部置于给定ID的控件之上;</span><br><span class="line">android:layout_below 将该控件的底部置于给定ID的控件之下;</span><br><span class="line">android:layout_toLeftOf    将该控件的右边缘与给定ID的控件左边缘对齐;</span><br><span class="line">android:layout_toRightOf  将该控件的左边缘与给定ID的控件右边缘对齐;</span><br><span class="line">android:layout_alignBaseline  将该控件的baseline与给定ID的baseline对齐;</span><br><span class="line">android:layout_alignTop        将该控件的顶部边缘与给定ID的顶部边缘对齐;</span><br><span class="line">android:layout_alignBottom   将该控件的底部边缘与给定ID的底部边缘对齐;</span><br><span class="line">android:layout_alignLeft        将该控件的左边缘与给定ID的左边缘对齐;</span><br><span class="line">android:layout_alignRight      将该控件的右边缘与给定ID的右边缘对齐;</span><br></pre></td></tr></table></figure>

<h4 id="相对于父组件"><a href="#相对于父组件" class="headerlink" title="相对于父组件"></a>相对于父组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:layout_alignParentTop      如果为true,将该控件的顶部与其父控件的顶部对齐;</span><br><span class="line">android:layout_alignParentBottom 如果为true,将该控件的底部与其父控件的底部对齐;</span><br><span class="line">android:layout_alignParentLeft      如果为true,将该控件的左部与其父控件的左部对齐;</span><br><span class="line">android:layout_alignParentRight    如果为true,将该控件的右部与其父控件的右部对齐;</span><br></pre></td></tr></table></figure>

<h4 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:layout_centerHorizontal 如果为true,将该控件的置于水平居中;</span><br><span class="line">android:layout_centerVertical     如果为true,将该控件的置于垂直居中;</span><br><span class="line">android:layout_centerInParent   如果为true,将该控件的置于父控件的中央;</span><br></pre></td></tr></table></figure>

<h4 id="指定移动像素"><a href="#指定移动像素" class="headerlink" title="指定移动像素"></a>指定移动像素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:layout_marginTop     上偏移的值;</span><br><span class="line">android:layout_marginBottom  下偏移的值;</span><br><span class="line">android:layout_marginLeft    左偏移的值;</span><br><span class="line">android:layout_marginRight   右偏移的值;</span><br></pre></td></tr></table></figure>

<h3 id="TabWidget-切换卡布局-说明"><a href="#TabWidget-切换卡布局-说明" class="headerlink" title="TabWidget(切换卡布局)说明"></a>TabWidget(切换卡布局)说明</h3><p>layout中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;TabHost xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:id=&quot;@+id/tabhost&quot;</span><br><span class="line">    android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">    android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"> </span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"> </span><br><span class="line">        &lt;TabWidget</span><br><span class="line">            android:id=&quot;@android:id/tabs&quot;</span><br><span class="line">            android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_alignParentBottom=&quot;true&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;FrameLayout</span><br><span class="line">            android:id=&quot;@android:id/tabcontent&quot;</span><br><span class="line">            android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">            android:layout_height=&quot;fill_parent&quot; &gt;</span><br><span class="line"> </span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:id=&quot;@+id/tab1&quot;</span><br><span class="line">                android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">                android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">                android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"> </span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:id=&quot;@+id/view1&quot;</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                    android:text=&quot;电影列表：&quot; /&gt;</span><br><span class="line">            &lt;/LinearLayout&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:id=&quot;@+id/tab2&quot;</span><br><span class="line">                android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">                android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">                android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"> </span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:id=&quot;@+id/view2&quot;</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                    android:text=&quot;音乐列表：&quot; /&gt;</span><br><span class="line">            &lt;/LinearLayout&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:id=&quot;@+id/tab3&quot;</span><br><span class="line">                android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">                android:layout_height=&quot;fill_parent&quot;</span><br><span class="line">                android:orientation=&quot;vertical&quot; &gt;</span><br><span class="line"> </span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:id=&quot;@+id/view3&quot;</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                    android:text=&quot;书籍列表：&quot; /&gt;</span><br><span class="line">            &lt;/LinearLayout&gt;</span><br><span class="line">        &lt;/FrameLayout&gt;</span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/TabHost&gt;</span><br></pre></td></tr></table></figure>

<p>activity中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TabHost tabs = (TabHost) findViewById(R.id.tabhost);</span><br><span class="line">tabs.setup();</span><br><span class="line">TabHost.TabSpec spec = tabs.newTabSpec(&quot;this is 1st tab&quot;);</span><br><span class="line">spec.setContent(R.id.view1);</span><br><span class="line">spec.setIndicator(&quot;Movie&quot;);// 如果需要带icon图标，则使用setIndicator(CharSequence label, Drawable icon)函数</span><br><span class="line">tabs.addTab(spec);</span><br><span class="line"></span><br><span class="line">spec = tabs.newTabSpec(&quot;this is 2nd tab&quot;);</span><br><span class="line">spec.setContent(R.id.view2);</span><br><span class="line">spec.setIndicator(&quot;Music&quot;);       </span><br><span class="line">tabs.addTab(spec);</span><br><span class="line"></span><br><span class="line">spec = tabs.newTabSpec(&quot;this is 3rd tab&quot;);</span><br><span class="line">spec.setContent(R.id.view3);</span><br><span class="line">spec.setIndicator(&quot;Book&quot;);</span><br><span class="line">tabs.addTab(spec);</span><br><span class="line">setTitle(&quot;Online Market&quot;);</span><br><span class="line"></span><br><span class="line">// 启动时显示第一个标签页</span><br><span class="line">tabs.setCurrentTab(0);</span><br></pre></td></tr></table></figure>

<h3 id="自动提示文本框"><a href="#自动提示文本框" class="headerlink" title="自动提示文本框"></a>自动提示文本框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;AutoCompleteTextView</span><br><span class="line">        android:id=&quot;@+id/myAutoCompleteTextView&quot;</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] myStr = new String[] &#123; &quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;, &quot;aab&quot;, &quot;aac&quot;, &quot;aad&quot; &#125;;// 常量数组</span><br><span class="line">ArrayAdapter&lt;String&gt; aa = new ArrayAdapter&lt;String&gt;( // 创建适配器</span><br><span class="line">        this, // Context</span><br><span class="line">        android.R.layout.simple_dropdown_item_1line, // 布局</span><br><span class="line">        myStr); // 资源数组</span><br><span class="line">AutoCompleteTextView myAutoCompleteTextView = // 得到控件的引用</span><br><span class="line">(AutoCompleteTextView) findViewById(R.id.myAutoCompleteTextView);</span><br><span class="line">myAutoCompleteTextView.setAdapter(aa); // 设置适配器</span><br><span class="line">myAutoCompleteTextView.setThreshold(1); // 定义需要用户输入的字符数</span><br></pre></td></tr></table></figure>

<h3 id="时钟控件"><a href="#时钟控件" class="headerlink" title="时钟控件"></a>时钟控件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 声明一个AnalogClock控件 --&gt;</span><br><span class="line"> &lt;AnalogClock</span><br><span class="line">    android:id=&quot;@+id/analog&quot;</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_gravity=&quot;center_horizontal&quot; /&gt;</span><br><span class="line"> &lt;!-- 声明一个DigitalClock控件 --&gt;</span><br><span class="line">&lt;DigitalClock</span><br><span class="line">    android:id=&quot;@+id/digital&quot;</span><br><span class="line">    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_gravity=&quot;center_horizontal&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="spinner使用"><a href="#spinner使用" class="headerlink" title="spinner使用"></a>spinner使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Spinner</span><br><span class="line">    android:id=&quot;@+id/Spinner01&quot;</span><br><span class="line">    android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spinner sp = (Spinner) this.findViewById(R.id.Spinner01); // 初始化Spinner</span><br><span class="line">    BaseAdapter ba = new BaseAdapter() &#123; // 为Spinner准备内容适配器</span><br><span class="line"></span><br><span class="line">        public int getCount() &#123;</span><br><span class="line">            return 3;</span><br><span class="line">        &#125; // 总共三个选项</span><br><span class="line"></span><br><span class="line">        public Object getItem(int arg0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; // 重写的getItem方法</span><br><span class="line"></span><br><span class="line">        public long getItemId(int arg0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125; // 重写的getItemId方法</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public View getView(int arg0, View arg1, ViewGroup arg2) &#123;</span><br><span class="line">            // 动态生成每个下拉项对应的View，每个下拉项View由LinearLayout</span><br><span class="line">            // 中包含一个ImageView及一个TextView构成</span><br><span class="line">            // 初始化LinearLayout</span><br><span class="line">            LinearLayout ll = new LinearLayout(Sample_5_1.this);</span><br><span class="line">            ll.setOrientation(LinearLayout.HORIZONTAL); // 设置朝向</span><br><span class="line">            // 初始化ImageView</span><br><span class="line">            ImageView ii = new ImageView(Sample_5_1.this);</span><br><span class="line">            ii.setImageDrawable(getResources().getDrawable(drawableIds[arg0]));// 设置图片</span><br><span class="line">            ll.addView(ii); // 添加到LinearLayout中</span><br><span class="line">            // 初始化TextView</span><br><span class="line">            TextView tv = new TextView(Sample_5_1.this);</span><br><span class="line">            tv.setText(&quot; &quot; + getResources().getText(msgIds[arg0]));// 设置内容</span><br><span class="line">            tv.setTextSize(24); // 设置字体大小</span><br><span class="line">            tv.setTextColor(R.color.black); // 设置字体颜色</span><br><span class="line">            ll.addView(tv); // 添加到LinearLayout中</span><br><span class="line">            return ll; // 将LinearLayout</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    sp.setAdapter(ba); // 为Spinner设置内容适配器</span><br><span class="line">    sp.setOnItemSelectedListener( // 设置选项选中的监听器</span><br><span class="line">    new OnItemSelectedListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onItemSelected(AdapterView&lt;?&gt; arg0, View arg1,</span><br><span class="line">                int arg2, long arg3) &#123; // 重写选项被选中事件的处理方法</span><br><span class="line">            LinearLayout ll = (LinearLayout) arg1; // 获取当前选中选项对应的LinearLayout</span><br><span class="line">            Log.i(&quot;myLog&quot;,&quot;arg0:&quot;+arg0+&quot;arg1：&quot;+arg1+&quot;arg2：&quot;+arg2+&quot;arg3：&quot;+arg3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void onNothingSelected(AdapterView&lt;?&gt; arg0) &#123;</span><br><span class="line">        &#125; // 重写的onNothingSelected方法</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] items = &#123; this.getString(R.string.a),</span><br><span class="line">        this.getString(R.string.b), this.getString(R.string.c),</span><br><span class="line">        this.getString(R.string.d), this.getString(R.string.e) &#125;;</span><br><span class="line"></span><br><span class="line">sp = (Spinner) findViewById(R.id.spinner1);</span><br><span class="line"></span><br><span class="line">adapter = new ArrayAdapter&lt;String&gt;(this,</span><br><span class="line">        android.R.layout.simple_spinner_item, items);</span><br><span class="line">sp.setAdapter(adapter);</span><br><span class="line">adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);</span><br><span class="line">sp.setOnItemSelectedListener(new Spinner.OnItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onItemSelected(AdapterView&lt;?&gt; arg0, View arg1,</span><br><span class="line">            int arg2, long arg3) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        iview.setImageResource(draws[arg2]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNothingSelected(AdapterView&lt;?&gt; arg0) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="简单对话框"><a href="#简单对话框" class="headerlink" title="简单对话框"></a>简单对话框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Dialog onCreateDialog(int id) &#123; // 重写onCreateDialog方法</span><br><span class="line">    Dialog dialog = null; // 声明一个Dialog对象用于返回</span><br><span class="line">    switch (id) &#123; // 对id进行判断</span><br><span class="line">    case COMMON_DIALOG:</span><br><span class="line">        Builder b = new AlertDialog.Builder(this);</span><br><span class="line">        b.setIcon(R.drawable.header); // 设置对话框的图标</span><br><span class="line">        b.setTitle(R.string.btn); // 设置对话框的标题</span><br><span class="line">        b.setMessage(R.string.dialog_msg); // 设置对话框的显示内容</span><br><span class="line">        b.setPositiveButton( // 添加按钮</span><br><span class="line">                R.string.ok, new OnClickListener() &#123; // 为按钮添加监听器</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        EditText et = (EditText) findViewById(R.id.EditText01);</span><br><span class="line">                        et.setText(R.string.dialog_msg);// 设置EditText内容</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        dialog = b.create(); // 生成Dialog对象</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case LIST_DIALOG:</span><br><span class="line">        Builder lb = new AlertDialog.Builder(this); // 创建Builder对象</span><br><span class="line">        lb.setIcon(R.drawable.header); // 设置图标</span><br><span class="line">        lb.setTitle(R.string.listtitle); // 设置标题</span><br><span class="line">        lb.setItems( // 设置列表中的各个属性</span><br><span class="line">                R.array.msa, // 字符串数组</span><br><span class="line">                new DialogInterface.OnClickListener() &#123; // 为列表设置OnClickListener监听器</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        EditText et = (EditText) findViewById(R.id.EditText01);</span><br><span class="line">                        et.setText(&quot;您选择了：&quot;</span><br><span class="line">                                + getResources()</span><br><span class="line">                                        .getStringArray(R.array.msa)[which]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        dialog = lb.create(); // 生成Dialog对象</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case LIST_DIALOG_SINGLE:</span><br><span class="line">        Builder lsb = new AlertDialog.Builder(this); // 创建Builder对象</span><br><span class="line">        lsb.setIcon(R.drawable.header); // 设置图标</span><br><span class="line">        lsb.setTitle(R.string.lstitle); // 设置标题</span><br><span class="line">        lsb.setSingleChoiceItems( // 设置单选列表选项</span><br><span class="line">                R.array.msa, 0, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        EditText et = (EditText) findViewById(R.id.EditText01);</span><br><span class="line">                        et.setText(&quot;您选择了：&quot;</span><br><span class="line">                                + getResources()</span><br><span class="line">                                        .getStringArray(R.array.msa)[which]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        lsb.setPositiveButton( // 添加一个按钮</span><br><span class="line">                R.string.ok, // 按钮显示的文本</span><br><span class="line">                new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        dialog = lsb.create(); // 生成Dialog对象</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case LIST_DIALOG_MULTIPLE:</span><br><span class="line">        Builder mb = new AlertDialog.Builder(this); // 创建Builder对象</span><br><span class="line">        mb.setIcon(R.drawable.header); // 设置图标</span><br><span class="line">        mb.setTitle(R.string.title); // 设置标题</span><br><span class="line">        mb.setMultiChoiceItems( // 设置多选选项</span><br><span class="line">                R.array.msa, mulFlags, // 传入初始的选中状态</span><br><span class="line">                new DialogInterface.OnMultiChoiceClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which,</span><br><span class="line">                            boolean isChecked) &#123;</span><br><span class="line">                        mulFlags[which] = isChecked; // 设置选中标志位</span><br><span class="line">                        String result = &quot;您选择了：&quot;;</span><br><span class="line">                        for (int i = 0; i &lt; mulFlags.length; i++) &#123;</span><br><span class="line">                            if (mulFlags[i]) &#123; // 如果该选项被选中</span><br><span class="line">                                result = result + items[i] + &quot;、&quot;;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        EditText et = (EditText) findViewById(R.id.EditText01);</span><br><span class="line">                        et.setText(result.substring(0, result.length() - 1)); // 设置EditText显示的内容</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        mb.setPositiveButton( // 添加按钮</span><br><span class="line">                R.string.ok, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        dialog = mb.create(); // 生成Dialog方法</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    return dialog; // 返回生成Dialog的对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>array.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;string-array name=&quot;msa&quot;&gt;                            &lt;!-- 声明一个字符串数组 --&gt;</span><br><span class="line">        &lt;item&gt;游泳&lt;/item&gt;                                &lt;!-- 向数组中加入元素 --&gt;</span><br><span class="line">        &lt;item&gt;打篮球&lt;/item&gt;                            &lt;!-- 向数组中加入元素 --&gt;</span><br><span class="line">        &lt;item&gt;吃货&lt;/item&gt;                        &lt;!-- 向数组中加入元素 --&gt;</span><br><span class="line">    &lt;/string-array&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>触摸事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean onTouchEvent(MotionEvent event) &#123; // 让按钮随触控笔的移动一起移动</span><br><span class="line">    Button bok = (Button) this.findViewById(R.id.Button01); // 得到按钮引用</span><br><span class="line">    ViewGroup.LayoutParams lp = new AbsoluteLayout.LayoutParams( // 创建LayoutParams</span><br><span class="line">            WRAP_CONTENT, WRAP_CONTENT, (int) event.getRawX() - xSpan</span><br><span class="line">                    - X_MODIFY, // x坐标</span><br><span class="line">            (int) event.getRawY() - ySpan - Y_MODIFY // y坐标</span><br><span class="line">    );</span><br><span class="line">    bok.setLayoutParams(lp);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="带有图片的Toast"><a href="#带有图片的Toast" class="headerlink" title="带有图片的Toast"></a>带有图片的Toast</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ImageView iv = new ImageView(Sample_6_8.this); // 创建ImageView</span><br><span class="line">iv.setImageResource(R.drawable.header); // 设置ImageView的显示内容</span><br><span class="line">LinearLayout ll = new LinearLayout(Sample_6_8.this); // 创建一个线性布局</span><br><span class="line">Toast toast = Toast.makeText(Sample_6_8.this, &quot;这是一个带图片的Toast&quot;,</span><br><span class="line">        Toast.LENGTH_LONG);</span><br><span class="line">toast.setGravity(Gravity.CENTER, 0, 0); // 设置Toast的gravity属性</span><br><span class="line">View toastView = toast.getView(); // 获得Toast的View</span><br><span class="line">ll.setOrientation(LinearLayout.HORIZONTAL); // 设置线性布局的排列方式</span><br><span class="line">ll.addView(iv); // 将ImageView添加到线性布局</span><br><span class="line">ll.addView(toastView); // 将Toast的View添加到线性布局</span><br><span class="line">toast.setView(ll);</span><br><span class="line">toast.show(); // 显示Toast</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Layout</tag>
      </tags>
  </entry>
  <entry>
    <title>Android学习笔记</title>
    <url>/2018/02/02/Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="拨打电话："><a href="#拨打电话：" class="headerlink" title="拨打电话："></a>拨打电话：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 直接打电话的方法</span><br><span class="line">    */</span><br><span class="line">public void call() &#123;</span><br><span class="line">    String data = &quot;tel:&quot; + editText.getText();// 电话号码参数字符串</span><br><span class="line">    Uri uri = Uri.parse(data);// 将字符串转化为Uri实例</span><br><span class="line">    Intent intent = new Intent();// 实例化Intent</span><br><span class="line">    intent.setAction(Intent.ACTION_CALL);// 设置Intent的Action属性</span><br><span class="line">    intent.setData(uri);// 设置Intent的Data属性</span><br><span class="line">    startActivity(intent);// 启动Activity</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 启动一个拨号器的方法</span><br><span class="line">    */</span><br><span class="line">public void dial() &#123;</span><br><span class="line">    String data = &quot;tel:&quot; + editText.getText();// 电话号码参数字符串</span><br><span class="line">    Uri uri = Uri.parse(data);// 将字符串转化为Uri实例</span><br><span class="line">    Intent intent = new Intent();// 实例化Intent</span><br><span class="line">    intent.setAction(Intent.ACTION_DIAL);// 设置Intent的Action属性</span><br><span class="line">    intent.setData(uri);// 设置Intent的Data属性</span><br><span class="line">    startActivity(intent);// 启动Activity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CheckBox的监听"><a href="#CheckBox的监听" class="headerlink" title="CheckBox的监听"></a>CheckBox的监听</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxButton.setOnCheckedChangeListener(new OnCheckedChangeListener()&#123;</span><br><span class="line">    /**</span><br><span class="line">    * CheckBox组件选中状态改变时触发该方法</span><br><span class="line">    * @param buttonView:触发当前事件的组件</span><br><span class="line">    * @param isChecked:当前组件的选中状态，true：选中，false：未选中</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">    @Override</span><br><span class="line">    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) </span><br><span class="line">        if(isChecked)&#123;</span><br><span class="line">            //要做的事</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //要做的事</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="布局文件例子"><a href="#布局文件例子" class="headerlink" title="布局文件例子"></a>布局文件例子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!-- 外层LinearLayout为垂直布局 --&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">	android:orientation=&quot;vertical&quot; android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">	android:layout_height=&quot;fill_parent&quot; android:background=&quot;#FFF0F0F0&quot;&gt;</span><br><span class="line">	&lt;!-- 表格布局 --&gt;</span><br><span class="line">	&lt;TableLayout android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">		android:layout_height=&quot;fill_parent&quot; </span><br><span class="line">		android:layout_weight=&quot;1&quot;&gt;</span><br><span class="line">		&lt;TableRow android:layout_weight=&quot;1&quot;&gt;</span><br><span class="line">			&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">				android:layout_height=&quot;fill_parent&quot; android:text=&quot;第1行，第1列&quot;</span><br><span class="line">				android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">				android:layout_weight=&quot;1&quot; android:background=&quot;#FFFF0000&quot; /&gt;</span><br><span class="line">			&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">				android:layout_height=&quot;fill_parent&quot; android:text=&quot;第1行，第2列&quot;</span><br><span class="line">				android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">				android:layout_weight=&quot;1&quot; android:background=&quot;#FF00FF00&quot; /&gt;</span><br><span class="line">			&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">				android:layout_height=&quot;fill_parent&quot; android:text=&quot;第1行，第3列&quot;</span><br><span class="line">				android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">				android:layout_weight=&quot;1&quot; android:background=&quot;#FF0000FF&quot; /&gt;</span><br><span class="line">		&lt;/TableRow&gt;</span><br><span class="line">		&lt;TableRow android:layout_weight=&quot;1&quot;&gt;</span><br><span class="line">			&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">				android:layout_height=&quot;fill_parent&quot; android:text=&quot;第2行，第1列&quot;</span><br><span class="line">				android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">				android:layout_weight=&quot;1&quot; android:background=&quot;#FFFFFF00&quot; /&gt;</span><br><span class="line">			&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">				android:layout_height=&quot;fill_parent&quot; android:text=&quot;第2行，第2列&quot;</span><br><span class="line">				android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">				android:layout_weight=&quot;1&quot; android:background=&quot;#FF00FFFF&quot; /&gt;</span><br><span class="line">			&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">				android:layout_height=&quot;fill_parent&quot; android:text=&quot;第2行，第3列&quot;</span><br><span class="line">				android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">				android:layout_weight=&quot;1&quot; android:background=&quot;#FFFF00FF&quot; /&gt;</span><br><span class="line">		&lt;/TableRow&gt;</span><br><span class="line">	&lt;/TableLayout&gt;</span><br><span class="line">	&lt;!-- 流式布局 --&gt;</span><br><span class="line">	&lt;LinearLayout android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">		android:layout_height=&quot;fill_parent&quot; android:orientation=&quot;horizontal&quot;</span><br><span class="line">		android:layout_weight=&quot;1&quot; android:layout_marginTop=&quot;5px&quot;&gt;</span><br><span class="line">		&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">			android:layout_height=&quot;fill_parent&quot; android:text=&quot;组件1&quot;</span><br><span class="line">			android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">			android:layout_weight=&quot;1&quot; android:background=&quot;#FFFF0000&quot; /&gt;</span><br><span class="line">		&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">			android:layout_height=&quot;fill_parent&quot; android:text=&quot;组件2&quot;</span><br><span class="line">			android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">			android:layout_weight=&quot;1&quot; android:background=&quot;#FF00FF00&quot; /&gt;</span><br><span class="line">		&lt;TextView android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">			android:layout_height=&quot;fill_parent&quot; android:text=&quot;组件3&quot;</span><br><span class="line">			android:textSize=&quot;15px&quot; android:textColor=&quot;#FF000000&quot;</span><br><span class="line">			android:layout_weight=&quot;1&quot; android:background=&quot;#FF0000FF&quot; /&gt;</span><br><span class="line">	&lt;/LinearLayout&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="日期插件dialog"><a href="#日期插件dialog" class="headerlink" title="日期插件dialog"></a>日期插件dialog</h3><p>【3.0版本之前】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final DatePicker mDatePicker = new DatePicker(DatePickerDialogExample.this);</span><br><span class="line">        AlertDialog.Builder timeDialog = new AlertDialog.Builder(DatePickerDialogExample.this);</span><br><span class="line">        timeDialog.setTitle(&quot;ceshi&quot;);</span><br><span class="line">        timeDialog.setIcon(R.drawable.icon);</span><br><span class="line">        timeDialog.setCancelable(false);</span><br><span class="line">        timeDialog.setView(mDatePicker); //只需将您时间控件的view引入</span><br><span class="line">        timeDialog.setPositiveButton(&quot;test&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">             //取出TimePicker设定的时间就行了</span><br><span class="line">            int year = mDatePicker.getYear();</span><br><span class="line">           int month = mDatePicker.getMonth() + 1;</span><br><span class="line">           int dayOfMonth = mDatePicker.getDayOfMonth();</span><br><span class="line">           showDate.setText(year+&quot;-&quot;+month+&quot;-&quot;+dayOfMonth);//修改TextView显示的信息为当前的年月日</span><br><span class="line">        &#125;;</span><br><span class="line">        timeDialog.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                        dialog.cancel();</span><br><span class="line">                    &#125;;  </span><br><span class="line">    &#125;).create();</span><br><span class="line">      timeDialog.show();</span><br></pre></td></tr></table></figure>
<p>【3.0版本之】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setDate.setOnClickListener(new OnClickListener()&#123;//&quot;设置日期&quot;按钮的单击事件</span><br><span class="line"> </span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                    //创建DatePickerDialog对象。</span><br><span class="line">                    //构造函数原型:public DatePickerDialog (Context context, DatePickerDialog.OnDateSetListener callBack, int year, int monthOfYear, int dayOfMonth)</span><br><span class="line">                    //参数含义依次为context：组件运行Activity,DatePickerDialog.OnDateSetListener:选择日期事件</span><br><span class="line">                    //year:当前组件上显示的年，monthOfYear：当前组件上显示的月，dayOfMonth：当前组件上显示的日</span><br><span class="line">                    DatePickerDialog dpd=new DatePickerDialog(DatePickerDialogExample.this,AlertDialog.THEME_DEVICE_DEFAULT_LIGHT,new OnDateSetListener()&#123;</span><br><span class="line"> </span><br><span class="line">                        /*</span><br><span class="line">                         * view:该事件关联的组件</span><br><span class="line">                         * myyear：当前选择的年</span><br><span class="line">                         * monthOfYear:当前选择的月</span><br><span class="line">                         * dayOfMonth：当前选择的日</span><br><span class="line">                         */</span><br><span class="line">                        @Override</span><br><span class="line">                        public void onDateSet(DatePicker view, int myyear, int monthOfYear,</span><br><span class="line">                                int dayOfMonth) &#123;</span><br><span class="line">                            //在DatePickerDialog组件上设置日期后，同时修改TextView上的信息</span><br><span class="line">                             showDate.setText(myyear+&quot;-&quot;+(monthOfYear+1)+&quot;-&quot;+dayOfMonth);</span><br><span class="line">                             //修改year，month，day变量值，以便在依次单击按钮时DatePickerDialog上显示上一次修改后的值</span><br><span class="line">                             year=myyear;</span><br><span class="line">                             month=monthOfYear;</span><br><span class="line">                             day=dayOfMonth;</span><br><span class="line"> </span><br><span class="line">                        &#125;&#125;,year,month,day);</span><br><span class="line"> </span><br><span class="line">                    dpd.show();//显示DatePickerDialog组件</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;);</span><br><span class="line">```    </span><br><span class="line">### 滚动条layout</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="utf-8"?>
<pre><code>&lt;!--
    ScrollView标签为滚动view标签，当内容超出窗口可视范围会自动出现滚动条
    android:scrollbarThumbVertical： 指定滚动条的背景图片
--&gt;
</code></pre>
<p><ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="fill_parent"
    android:layout_height="fill_parent" android:background="#ffF4F4F4"
    android:fadingEdge="vertical" android:fadingEdgeLength="100px"
    android:scrollbarThumbVertical="@drawable/scrollbackground"><br>    <!-- android:text:指定TextView上显示的文字为strings.xml中变量lineheight1内容  --><br>    <TextView android:layout_width="fill_parent"
        android:layout_height="wrap_content" android:text="@string/lineheight1"
        android:textColor="#ff000000" /><br></ScrollView></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 隐藏窗体的状态栏</span><br></pre></td></tr></table></figure>
<p>Window window=this.getWindow();//获取当前Activity的Window<br>//隐藏窗体的状态栏<br>window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);<br>this.requestWindowFeature(Window.FEATURE_NO_TITLE);    //隐藏窗体上方的标题栏<br>setContentView(R.layout.main);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### colors.xml颜色大全</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="utf-8" ?><resources>  
    <color name="transparent">#00000000</color><!--透明色 -->  
    <color name="white">#FFFFFF</color><!--白色 -->  
    <color name="ivory">#FFFFF0</color><!--象牙色 -->  
    <color name="lightyellow">#FFFFE0</color><!--亮黄色 -->  
    <color name="yellow">#FFFF00</color><!--黄色 -->  
    <color name="snow">#FFFAFA</color><!--雪白色 -->  
    <color name="floralwhite">#FFFAF0</color><!--花白色 -->  
    <color name="lemonchiffon">#FFFACD</color><!--柠檬绸色 -->  
    <color name="cornsilk">#FFF8DC</color><!--米绸色 -->  
    <color name="seashell">#FFF5EE</color><!--海贝色 -->  
    <color name="lavenderblush">#FFF0F5</color><!--淡紫红 -->  
    <color name="papayawhip">#FFEFD5</color><!--番木色 -->  
    <color name="blanchedalmond">#FFEBCD</color><!--白杏色 -->  
    <color name="mistyrose">#FFE4E1</color><!--浅玫瑰色 -->  
    <color name="bisque">#FFE4C4</color><!--桔黄色 -->  
    <color name="moccasin">#FFE4B5</color><!--鹿皮色 -->  
    <color name="navajowhite">#FFDEAD</color><!--纳瓦白 -->  
    <color name="peachpuff">#FFDAB9</color><!--桃色 -->  
    <color name="gold">#FFD700</color><!--金色 -->  
    <color name="pink">#FFC0CB</color><!--粉红色 -->  
    <color name="lightpink">#FFB6C1</color><!--亮粉红色 -->  
    <color name="orange">#FFA500</color><!--橙色 -->  
    <color name="lightsalmon">#FFA07A</color><!--亮肉色 -->  
    <color name="darkorange">#FF8C00</color><!--暗桔黄色 -->  
    <color name="coral">#FF7F50</color><!--珊瑚色 -->  
    <color name="hotpink">#FF69B4</color><!--热粉红色 -->
    <color name="tomato">#FF6347</color><!--西红柿色 -->  
    <color name="orangered">#FF4500</color><!--红橙色 -->  
    <color name="deeppink">#FF1493</color><!--深粉红色 -->  
    <color name="fuchsia">#FF00FF</color><!--紫红色 -->   
    <color name="red">#FF0000</color><!--红色 -->  
    <color name="oldlace">#FDF5E6</color><!--老花色 -->  
    <color name="lightgoldenrodyellow">#FAFAD2</color><!--亮金黄色 -->  
    <color name="linen">#FAF0E6</color><!--亚麻色 -->  
    <color name="antiquewhite">#FAEBD7</color><!--古董白 -->  
    <color name="salmon">#FA8072</color><!--鲜肉色 -->  
    <color name="ghostwhite">#F8F8FF</color><!--幽灵白 -->  
    <color name="mintcream">#F5FFFA</color><!--薄荷色 -->  
    <color name="whitesmoke">#F5F5F5</color><!--烟白色 -->  
    <color name="beige">#F5F5DC</color><!--米色 -->  
    <color name="wheat">#F5DEB3</color><!--浅黄色 -->  
    <color name="sandybrown">#F4A460</color><!--沙褐色 -->  
    <color name="azure">#F0FFFF</color><!--天蓝色 -->  
    <color name="honeydew">#F0FFF0</color><!--蜜色 -->  
    <color name="aliceblue">#F0F8FF</color><!--艾利斯兰 -->  
    <color name="khaki">#F0E68C</color><!--黄褐色 -->  
    <color name="lightcoral">#F08080</color><!--亮珊瑚色 -->  
    <color name="palegoldenrod">#EEE8AA</color><!--苍麒麟色 -->  
    <color name="violet">#EE82EE</color><!--紫罗兰色 -->  
    <color name="darksalmon">#E9967A</color><!--暗肉色 -->  
    <color name="lavender">#E6E6FA</color><!--淡紫色 -->  
    <color name="lightcyan">#E0FFFF</color><!--亮青色 -->  
    <color name="burlywood">#DEB887</color><!--实木色 -->  
    <color name="plum">#DDA0DD</color><!--洋李色 -->  
    <color name="gainsboro">#DCDCDC</color><!--淡灰色 -->  
    <color name="crimson">#DC143C</color><!--暗深红色 -->  
    <color name="palevioletred">#DB7093</color><!--苍紫罗兰色 -->  
    <color name="goldenrod">#DAA520</color><!--金麒麟色 -->  
    <color name="orchid">#DA70D6</color><!--淡紫色 -->  
    <color name="thistle">#D8BFD8</color><!--蓟色 -->  
    <color name="lightgray">#D3D3D3</color><!--亮灰色 -->  
    <color name="tan">#D2B48C</color><!--茶色 -->  
    <color name="chocolate">#D2691E</color><!--巧可力色 -->  
    <color name="peru">#CD853F</color><!--秘鲁色 -->  
    <color name="indianred">#CD5C5C</color><!--印第安红 -->  
    <color name="mediumvioletred">#C71585</color><!--中紫罗兰色 -->  
    <color name="silver">#C0C0C0</color><!--银色 -->  
    <color name="darkkhaki">#BDB76B</color><!--暗黄褐色 -->  
    <color name="rosybrown">#BC8F8F</color><!--褐玫瑰红 -->  
    <color name="mediumorchid">#BA55D3</color><!--中粉紫色 -->  
    <color name="darkgoldenrod">#B8860B</color><!--暗金黄色 -->  
    <color name="firebrick">#B22222</color><!--火砖色 -->  
    <color name="powderblue">#B0E0E6</color><!--粉蓝色 -->  
    <color name="lightsteelblue">#B0C4DE</color><!--亮钢兰色 -->  
    <color name="paleturquoise">#AFEEEE</color><!--苍宝石绿 -->  
    <color name="greenyellow">#ADFF2F</color><!--黄绿色 -->  
    <color name="lightblue">#ADD8E6</color><!--亮蓝色 -->  
    <color name="darkgray">#A9A9A9</color><!--暗灰色 -->  
    <color name="brown">#A52A2A</color><!--褐色 -->  
    <color name="sienna">#A0522D</color><!--赭色 -->  
    <color name="darkorchid">#9932CC</color><!--暗紫色 -->  
    <color name="palegreen">#98FB98</color><!--苍绿色 -->  
    <color name="darkviolet">#9400D3</color><!--暗紫罗兰色 -->  
    <color name="mediumpurple">#9370DB</color><!--中紫色 -->  
    <color name="lightgreen">#90EE90</color><!--亮绿色 -->  
    <color name="darkseagreen">#8FBC8F</color><!--暗海兰色 -->  
    <color name="saddlebrown">#8B4513</color><!--重褐色 -->  
    <color name="darkmagenta">#8B008B</color><!--暗洋红 -->  
    <color name="darkred">#8B0000</color><!--暗红色 -->  
    <color name="blueviolet">#8A2BE2</color><!--紫罗兰蓝色 -->  
    <color name="lightskyblue">#87CEFA</color><!--亮天蓝色 -->  
    <color name="skyblue">#87CEEB</color><!--天蓝色 -->  
    <color name="gray">#808080</color><!--灰色 -->  
    <color name="olive">#808000</color><!--橄榄色 -->  
    <color name="purple">#800080</color><!--紫色 -->  
    <color name="maroon">#800000</color><!--粟色 -->  
    <color name="aquamarine">#7FFFD4</color><!--碧绿色 -->  
    <color name="chartreuse">#7FFF00</color><!--黄绿色 -->  
    <color name="lawngreen">#7CFC00</color><!--草绿色 -->  
    <color name="mediumslateblue">#7B68EE</color><!--中暗蓝色 -->  
    <color name="lightslategray">#778899</color><!--亮蓝灰 -->  
    <color name="slategray">#708090</color><!--灰石色 -->  
    <color name="olivedrab">#6B8E23</color><!--深绿褐色 -->  
    <color name="slateblue">#6A5ACD</color><!--石蓝色 -->  
    <color name="dimgray">#696969</color><!--暗灰色 -->  
    <color name="mediumaquamarine">#66CDAA</color><!--中绿色 -->  
    <color name="cornflowerblue">#6495ED</color><!--菊兰色 -->  
    <color name="cadetblue">#5F9EA0</color><!--军兰色 -->  
    <color name="darkolivegreen">#556B2F</color><!--暗橄榄绿 -->  
    <color name="indigo">#4B0082</color><!--靛青色 -->  
    <color name="mediumturquoise">#48D1CC</color><!--中绿宝石 -->  
    <color name="darkslateblue">#483D8B</color><!--暗灰蓝色 -->  
    <color name="steelblue">#4682B4</color><!--钢兰色 -->  
    <color name="royalblue">#4169E1</color><!--皇家蓝 -->  
    <color name="turquoise">#40E0D0</color><!--青绿色 -->  
    <color name="mediumseagreen">#3CB371</color><!--中海蓝 -->  
    <color name="limegreen">#32CD32</color><!--橙绿色 -->  
    <color name="darkslategray">#2F4F4F</color><!--暗瓦灰色 -->  
    <color name="seagreen">#2E8B57</color><!--海绿色 -->  
    <color name="forestgreen">#228B22</color><!--森林绿 -->  
    <color name="lightseagreen">#20B2AA</color><!--亮海蓝色 -->  
    <color name="dodgerblue">#1E90FF</color><!--闪兰色 -->  
    <color name="midnightblue">#191970</color><!--中灰兰色 -->  
    <color name="aqua">#00FFFF</color><!--浅绿色 -->  
    <color name="cyan">#00FFFF</color><!--青色 -->  
    <color name="springgreen">#00FF7F</color><!--春绿色 -->  
    <color name="lime">#00FF00</color><!--酸橙色 -->  
    <color name="mediumspringgreen">#00FA9A</color><!--中春绿色 -->  
    <color name="darkturquoise">#00CED1</color><!--暗宝石绿 -->  
    <color name="deepskyblue">#00BFFF</color><!--深天蓝色 -->  
    <color name="darkcyan">#008B8B</color><!--暗青色 -->  
    <color name="teal">#008080</color><!--水鸭色 -->  
    <color name="green">#008000</color><!--绿色 -->  
    <color name="darkgreen">#006400</color><!--暗绿色 -->  
    <color name="blue">#0000FF</color><!--蓝色 -->  
    <color name="mediumblue">#0000CD</color><!--中兰色 -->  
    <color name="darkblue">#00008B</color><!--暗蓝色 -->  
    <color name="navy">#000080</color><!--海军色 -->  
    <color name="black">#000000</color><!--黑色 -->  
    <color name="grassgreen">#99cc33</color><!--草绿色 -->
    <color name="gray_cc">#cccccc</color><!--灰色cc -->  
    <color name="gray_8f">#8f8f8f</color><!--灰色8f -->  
</resources> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### android权限大全</span><br><span class="line">1. android.permission.WRITE_USER_DICTIONARY</span><br><span class="line">允许应用程序向用户词典中写入新词</span><br><span class="line">2. android.permission.WRITE_SYNC_SETTINGS</span><br><span class="line">写入Google在线同步设置</span><br><span class="line">3. android.permission.WRITE_SOCIAL_STREAM</span><br><span class="line">读取用户的社交信息流</span><br><span class="line">4. android.permission.WRITE_SMS</span><br><span class="line">允许程序写短信</span><br><span class="line">5. android.permission.WRITE_SETTINGS</span><br><span class="line">允许程序读取或写入系统设置</span><br><span class="line">6. android.permission.WRITE_SECURE_SETTINGS</span><br><span class="line">允许应用程序读取或写入安全系统设置</span><br><span class="line">7. android.permission.WRITE_PROFILE</span><br><span class="line">允许程序写入个人资料数据</span><br><span class="line">8. com.android.browser.permission.WRITE_HISTORY_BOOKMARKS</span><br><span class="line">允许一个应用程序写(但不可读)用户的浏览历史和书签</span><br><span class="line">9. android.permission.WRITE_GSERVICES</span><br><span class="line">允许程序修改Google服务地图</span><br><span class="line">10. android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line">允许程序写入外部存储,如SD卡上写文件</span><br><span class="line">11. android.permission.WRITE_CONTACTS</span><br><span class="line">写入联系人,但不可读取</span><br><span class="line">12. android.permission.WRITE_CALL_LOG</span><br><span class="line">允许程序写入（但是不能读）用户的联系人数据</span><br><span class="line">13. android.permission.WRITE_CALENDAR</span><br><span class="line">允许程序写入日程，但不可读取</span><br><span class="line">14. android.permission.WRITE_APN_SETTINGS</span><br><span class="line">允许程序写入网络GPRS接入点设置</span><br><span class="line">15. android.permission.WAKE_LOCK</span><br><span class="line">允许程序在手机屏幕关闭后后台进程仍然运行</span><br><span class="line">16. android.permission.VIBRATE</span><br><span class="line">允许程序振动</span><br><span class="line">17. android.permission.USE_SIP</span><br><span class="line">允许程序使用SIP视频服务</span><br><span class="line">18. android.permission.USE_CREDENTIALS</span><br><span class="line">允许程序请求验证从AccountManager</span><br><span class="line">19. android.permission.UPDATE_DEVICE_STATS</span><br><span class="line">允许程序更新设备状态</span><br><span class="line">20. com.android.launcher.permission.UNINSTALL_SHORTCUT</span><br><span class="line">删除快捷方式</span><br><span class="line">21. android.permission.TRANSMIT_IR</span><br><span class="line">允许使用设备的红外发射器，如果可用</span><br><span class="line">22. android.permission.SYSTEM_ALERT_WINDOW</span><br><span class="line">允许程序显示系统窗口</span><br><span class="line">23. android.permission.SUBSCRIBED_FEEDS_WRITE</span><br><span class="line">允许程序写入或修改订阅内容的数据库</span><br><span class="line">24. android.permission.SUBSCRIBED_FEEDS_READ</span><br><span class="line">允许程序访问订阅信息的数据库</span><br><span class="line">22. android.permission.STATUS_BAR</span><br><span class="line">允许程序打开、关闭、禁用状态栏</span><br><span class="line">23. android.permission.SIGNAL_PERSISTENT_PROCESSES</span><br><span class="line">允许程序发送一个永久的进程信号</span><br><span class="line">24. android.permission.SET_WALLPAPER_HINTS</span><br><span class="line">允许程序设置壁纸建议</span><br><span class="line">25. android.permission.SET_WALLPAPER</span><br><span class="line">允许程序设置桌面壁纸</span><br><span class="line">26. android.permission.SET_TIME_ZONE</span><br><span class="line">允许程序设置系统时区</span><br><span class="line">27. android.permission.SET_TIME</span><br><span class="line">允许程序设置系统时间</span><br><span class="line">28. android.permission.SET_PROCESS_LIMIT</span><br><span class="line">允许程序设置最大的进程数量的限制</span><br><span class="line">29. android.permission.SET_PREFERRED_APPLICATIONS</span><br><span class="line">允许程序设置应用的参数，已不再工作具体查看addPackageToPreferred(String) 介绍</span><br><span class="line">30. android.permission.SET_POINTER_SPEED</span><br><span class="line">无法被第三方应用获得，系统权限</span><br><span class="line">31. android.permission.SET_ORIENTATION</span><br><span class="line">允许程序设置屏幕方向为横屏或标准方式显示，不用于普通应用</span><br><span class="line">32. android.permission.SET_DEBUG_APP</span><br><span class="line">允许程序设置调试程序，一般用于开发</span><br><span class="line">33. android.permission.SET_ANIMATION_SCALE</span><br><span class="line">允许程序设置全局动画缩放</span><br><span class="line">34. android.permission.SET_ALWAYS_FINISH</span><br><span class="line">允许程序设置程序在后台是否总是退出</span><br><span class="line">36. com.android.alarm.permission.SET_ALARM</span><br><span class="line">允许程序设置闹铃提醒</span><br><span class="line">37. android.permission.SET_ACTIVITY_WATCHER</span><br><span class="line">允许程序设置Activity观察器一般用于monkey测试</span><br><span class="line">38. android.permission.SEND_SMS</span><br><span class="line">允许程序发送短信</span><br><span class="line">39. android.permission.SEND_RESPOND_VIA_MESSAGE</span><br><span class="line">允许用户在来电的时候用你的应用进行即时的短信息回复。</span><br><span class="line">40. android.permission.RESTART_PACKAGES</span><br><span class="line">允许程序结束任务通过restartPackage(String)方法，该方式将在外来放弃</span><br><span class="line">41. android.permission.REORDER_TASKS</span><br><span class="line">允许程序重新排序系统Z轴运行中的任务</span><br><span class="line">42. android.permission.RECORD_AUDIO</span><br><span class="line">允许程序录制声音通过手机或耳机的麦克</span><br><span class="line">43. android.permission.RECEIVE_WAP_PUSH</span><br><span class="line">允许程序接收WAP PUSH信息</span><br><span class="line">44. android.permission.RECEIVE_SMS</span><br><span class="line">允许程序接收短信</span><br><span class="line">45. android.permission.RECEIVE_MMS</span><br><span class="line">允许程序接收彩信</span><br><span class="line">46. android.permission.RECEIVE_BOOT_COMPLETED</span><br><span class="line">允许程序开机自动运行</span><br><span class="line">47. android.permission.REBOOT</span><br><span class="line">允许程序重新启动设备</span><br><span class="line">48. android.permission.READ_USER_DICTIONARY</span><br><span class="line">从一个提供器中获取数据，针对对应的提供器，应用程序需要&quot;读访问权限&quot;</span><br><span class="line">49. android.permission.READ_SYNC_STATS</span><br><span class="line">允许程序读取同步状态，获得Google在线同步状态</span><br><span class="line">50. android.permission.READ_SYNC_SETTINGS</span><br><span class="line">允许程序读取同步设置，读取Google在线同步设置</span><br><span class="line">51. android.permission.READ_SOCIAL_STREAM</span><br><span class="line">读取用户的社交信息流</span><br><span class="line">52. android.permission.READ_SMS</span><br><span class="line">允许程序读取短信内容</span><br><span class="line">53. android.permission.READ_PROFILE</span><br><span class="line">访问用户个人资料</span><br><span class="line">54. android.permission.READ_PHONE_STATE</span><br><span class="line">允许程序访问电话状态</span><br><span class="line">55. android.permission.READ_LOGS</span><br><span class="line">允许程序读取系统底层日志</span><br><span class="line">56. android.permission.READ_INPUT_STATE</span><br><span class="line">允许程序读取当前键的输入状态，仅用于系统</span><br><span class="line">57. com.android.browser.permission.READ_HISTORY_BOOKMARKS</span><br><span class="line">允许程序读取浏览器收藏夹和历史记录</span><br><span class="line">58. android.permission.READ_FRAME_BUFFER</span><br><span class="line">允许程序读取帧缓存用于屏幕截图</span><br><span class="line">59. android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">程序可以读取设备外部存储空间（内置SDcard和外置SDCard）的文件，如果您的App已经添加了&quot;WRITE_EXTERNAL_STORAGE &quot;权限 ，则就没</span><br><span class="line">必要添加读的权限了，写权限已经包含了读权限了。</span><br><span class="line">60. android.permission.READ_CONTACTS</span><br><span class="line">允许程序访问联系人通讯录信息</span><br><span class="line">61. android.permission.READ_CALL_LOG</span><br><span class="line">读取通话记录</span><br><span class="line">62. android.permission.READ_CALENDAR</span><br><span class="line">允许程序读取用户的日程信息</span><br><span class="line">63. android.permission.PROCESS_OUTGOING_CALLS</span><br><span class="line">允许程序监视，修改或放弃播出电话</span><br><span class="line">64. android.permission.PERSISTENT_ACTIVITY</span><br><span class="line">允许程序创建一个永久的Activity，该功能标记为将来将被移除</span><br><span class="line">65. android.permission.NFC</span><br><span class="line">允许程序执行NFC近距离通讯操作，用于移动支持</span><br><span class="line">66. android.permission.MOUNT_UNMOUNT_FILESYSTEMS</span><br><span class="line">允许程序挂载、反挂载外部文件系统</span><br><span class="line">67. android.permission.MOUNT_FORMAT_FILESYSTEMS</span><br><span class="line">允许程序格式化可移动文件系统，比如格式化清空SD卡</span><br><span class="line">68. android.permission.MODIFY_PHONE_STATE</span><br><span class="line">允许程序修改电话状态，如飞行模式，但不包含替换系统拨号器界面</span><br><span class="line">69. android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class="line">允许程序修改声音设置信息</span><br><span class="line">70. android.permission.MEDIA_CONTENT_CONTROL</span><br><span class="line">允许一个应用程序知道什么是播放和控制其内容。不被第三方应用使用。</span><br><span class="line">71. android.permission.MASTER_CLEAR</span><br><span class="line">允许程序执行软格式化，删除系统配置信息</span><br><span class="line">72. android.permission.MANAGE_DOCUMENTS</span><br><span class="line">允许一个应用程序来管理文档的访问，通常是一个文档选择器部分</span><br><span class="line">73. android.permission.MANAGE_APP_TOKENS</span><br><span class="line">管理创建、摧毁、Z轴顺序，仅用于系统</span><br><span class="line">74. android.permission.MANAGE_ACCOUNTS</span><br><span class="line">允许程序管理AccountManager中的账户列表</span><br><span class="line">75. android.permission.LOCATION_HARDWARE</span><br><span class="line">允许一个应用程序中使用定位功能的硬件，不使用第三方应用</span><br><span class="line">76. android.permission.KILL_BACKGROUND_PROCESSES</span><br><span class="line">允许程序调用killBackgroundProcesses(String).方法结束后台进程</span><br><span class="line">77. android.permission.INTERNET</span><br><span class="line">允许程序访问网络连接，可能产生GPRS流量</span><br><span class="line">78. android.permission.INTERNAL_SYSTEM_WINDOW</span><br><span class="line">允许程序打开内部窗口，不对第三方应用程序开放此权限</span><br><span class="line">79. com.android.launcher.permission.INSTALL_SHORTCUT</span><br><span class="line">创建快捷方式</span><br><span class="line">80. android.permission.INSTALL_PACKAGES</span><br><span class="line">允许程序安装应用</span><br><span class="line">81. android.permission.INSTALL_LOCATION_PROVIDER</span><br><span class="line">允许程序安装定位提供</span><br><span class="line">82. android.permission.INJECT_EVENTS</span><br><span class="line">允许程序访问本程序的底层事件，获取按键、轨迹球的事件流</span><br><span class="line">83. android.permission.HARDWARE_TEST</span><br><span class="line">允许程序访问硬件辅助设备，用于硬件测试</span><br><span class="line">84. android.permission.GLOBAL_SEARCH</span><br><span class="line">允许程序允许全局搜索</span><br><span class="line">85. android.permission.GET_TOP_ACTIVITY_INFO</span><br><span class="line">允许一个应用程序检索私有信息是当前最顶级的活动，不被第三方应用使用</span><br><span class="line">86. android.permission.GET_TASKS</span><br><span class="line">允许程序获取任务信息</span><br><span class="line">87. android.permission.GET_PACKAGE_SIZE</span><br><span class="line">允许程序获取应用的文件大小</span><br><span class="line">88. android.permission.GET_ACCOUNTS</span><br><span class="line">允许程序访问账户Gmail列表</span><br><span class="line">89. android.permission.FORCE_BACK</span><br><span class="line">允许程序强制使用back后退按键，无论Activity是否在顶层</span><br><span class="line">90. android.permission.FLASHLIGHT</span><br><span class="line">允许访问闪光灯</span><br><span class="line">91. android.permission.FACTORY_TEST</span><br><span class="line">允许程序运行工厂测试模式</span><br><span class="line">92. android.permission.EXPAND_STATUS_BAR</span><br><span class="line">允许程序扩展或收缩状态栏</span><br><span class="line">93. android.permission.DUMP</span><br><span class="line">允许程序获取系统dump信息从系统服务</span><br><span class="line">94. android.permission.DISABLE_KEYGUARD</span><br><span class="line">允许程序禁用键盘锁</span><br><span class="line">95. android.permission.DIAGNOSTIC</span><br><span class="line">允许程序到RW到诊断资源</span><br><span class="line">96. android.permission.DEVICE_POWER</span><br><span class="line">允许程序访问底层电源管理</span><br><span class="line">97. android.permission.DELETE_PACKAGES</span><br><span class="line">允许程序删除应用</span><br><span class="line">98. android.permission.DELETE_CACHE_FILES</span><br><span class="line">允许程序删除缓存文件</span><br><span class="line">99. android.permission.CONTROL_LOCATION_UPDATES</span><br><span class="line">允许程序获得移动网络定位信息改变</span><br><span class="line">100. android.permission.CLEAR_APP_USER_DATA</span><br><span class="line">允许程序清除用户数据</span><br><span class="line">101. android.permission.CLEAR_APP_CACHE</span><br><span class="line">允许程序清除应用缓存</span><br><span class="line">102. android.permission.CHANGE_WIFI_STATE</span><br><span class="line">允许程序改变WiFi状态</span><br><span class="line">103. android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br><span class="line">允许程序改变WiFi多播状态</span><br><span class="line">104. android.permission.CHANGE_NETWORK_STATE</span><br><span class="line">允许程序改变网络状态,如是否联网</span><br><span class="line">105. android.permission.CHANGE_CONFIGURATION</span><br><span class="line">允许当前应用改变配置，如定位</span><br><span class="line">106. android.permission.CHANGE_COMPONENT_ENABLED_STATE</span><br><span class="line">改变组件是否启用状态</span><br><span class="line">107. android.permission.CAPTURE_VIDEO_OUTPUT</span><br><span class="line">允许一个应用程序捕获视频输出，不被第三方应用使用</span><br><span class="line">108. android.permission.CAPTURE_SECURE_VIDEO_OUTPUT</span><br><span class="line">允许一个应用程序捕获视频输出。不被第三方应用使用</span><br><span class="line">109. android.permission.CAPTURE_AUDIO_OUTPUT</span><br><span class="line">允许一个应用程序捕获音频输出。不被第三方应用使用</span><br><span class="line">110. android.permission.CAMERA</span><br><span class="line">允许程序访问摄像头进行拍照</span><br><span class="line">111. android.permission.CALL_PRIVILEGED</span><br><span class="line">允许程序拨打电话，替换系统的拨号器界面</span><br><span class="line">112. android.permission.CALL_PHONE</span><br><span class="line">允许程序从非系统拨号器里拨打电话</span><br><span class="line">113. android.permission.BROADCAST_WAP_PUSH</span><br><span class="line">WAP PUSH服务收到后触发一个广播</span><br><span class="line">114. android.permission.BROADCAST_STICKY</span><br><span class="line">允许程序收到广播后快速收到下一个广播</span><br><span class="line">115. android.permission.BROADCAST_SMS</span><br><span class="line">允许程序当收到短信时触发一个广播</span><br><span class="line">116. android.permission.BROADCAST_PACKAGE_REMOVED</span><br><span class="line">允许程序删除时广播</span><br><span class="line">117. android.permission.BRICK</span><br><span class="line">能够禁用手机，非常危险，顾名思义就是让手机变成砖头</span><br><span class="line">118. android.permission.BLUETOOTH_PRIVILEGED</span><br><span class="line">允许应用程序配对蓝牙设备，而无需用户交互。这不是第三方应用程序可用。</span><br><span class="line">119. android.permission.BLUETOOTH_ADMIN</span><br><span class="line">允许程序进行发现和配对新的蓝牙设备</span><br><span class="line">120. android.permission.BLUETOOTH</span><br><span class="line">允许程序连接配对过的蓝牙设备</span><br><span class="line">121. android.permission.BIND_WALLPAPER</span><br><span class="line">必须通过WallpaperService服务来请求，只有系统才能用</span><br><span class="line">122. android.permission.BIND_VPN_SERVICE</span><br><span class="line">绑定VPN服务</span><br><span class="line">必须通过VpnService服务来请求,只有系统才能用</span><br><span class="line">123. android.permission.BIND_TEXT_SERVICE</span><br><span class="line">必须要求textservice(例如吗 spellcheckerservice)，以确保只有系统可以绑定到它。</span><br><span class="line">124. android.permission.BIND_REMOTEVIEWS</span><br><span class="line">必须通过RemoteViewsService服务来请求，只有系统才能用</span><br><span class="line">125. android.permission.BIND_PRINT_SERVICE</span><br><span class="line">必须要求由printservice，以确保只有系统可以绑定到它。</span><br><span class="line">126. android.permission.BIND_NOTIFICATION_LISTENER_SERVICE</span><br><span class="line">必须要求由notificationlistenerservice，以确保只有系统可以绑定到它。</span><br><span class="line">127. android.permission.BIND_NFC_SERVICE</span><br><span class="line">由hostapduservice或offhostapduservice必须确保只有系统可以绑定到它。</span><br><span class="line">128. android.permission.BIND_INPUT_METHOD</span><br><span class="line">请求InputMethodService服务，只有系统才能使用</span><br><span class="line">129. android.permission.BIND_DEVICE_ADMIN</span><br><span class="line">请求系统管理员接收者receiver，只有系统才能使用</span><br><span class="line">130. android.permission.BIND_APPWIDGET</span><br><span class="line">允许程序告诉appWidget服务需要访问小插件的数据库，只有非常少的应用才用到此权限</span><br><span class="line">131. android.permission.BIND_ACCESSIBILITY_SERVICE</span><br><span class="line">请求accessibilityservice服务，以确保只有系统可以绑定到它。</span><br><span class="line">132. android.permission.AUTHENTICATE_ACCOUNTS</span><br><span class="line">允许程序通过账户验证方式访问账户管理ACCOUNT_MANAGER相关信息</span><br><span class="line">133. com.android.voicemail.permission.ADD_VOICEMAIL</span><br><span class="line">允许一个应用程序添加语音邮件系统</span><br><span class="line">134. android.permission.ACCOUNT_MANAGER</span><br><span class="line">允许程序获取账户验证信息，主要为GMail账户信息，只有系统级进程才能访问的权限</span><br><span class="line">135. android.permission.ACCESS_WIFI_STATE</span><br><span class="line">允许程序获取当前WiFi接入的状态以及WLAN热点的信息</span><br><span class="line">136. android.permission.ACCESS_SURFACE_FLINGER</span><br><span class="line">Android平台上底层的图形显示支持，一般用于游戏或照相机预览界面和底层模式的屏幕截图</span><br><span class="line">137. android.permission.ACCESS_NETWORK_STATE</span><br><span class="line">允许程序获取网络信息状态，如当前的网络连接是否有效</span><br><span class="line">138. android.permission.ACCESS_MOCK_LOCATION</span><br><span class="line">允许程序获取模拟定位信息，一般用于帮助开发者调试应用</span><br><span class="line">139. android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br><span class="line">允许程序访问额外的定位提供者指令</span><br><span class="line">140. android.permission.ACCESS_FINE_LOCATION</span><br><span class="line">允许程序通过GPS芯片接收卫星的定位信息</span><br><span class="line">141. android.permission.ACCESS_COARSE_LOCATION</span><br><span class="line">允许程序通过WiFi或移动基站的方式获取用户错略的经纬度信息</span><br><span class="line">142. android.permission.ACCESS_CHECKIN_PROPERTIES</span><br><span class="line">允许程序读取或写入登记check-in数据库属性表的权限</span><br><span class="line"></span><br><span class="line">### 简单AlertDialog</span><br></pre></td></tr></table></figure>
public void showMessage(String msg){
new AlertDialog.Builder(MyOpenHelper.this).setTitle("Message")
.setMessage(msg).setNegativeButton("确定",
    new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog,int which) {
        }
}).show();
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### androidURL请求</span><br></pre></td></tr></table></figure>
public class ConnectWeb {
 
    public boolean sendGetRequest(String username,String password,String email){
        boolean pan=false;
        try{
            String url="http://192.168.1.8:8080/AndroidWeb/MyServlet?username="+
            username+"&password="+password+"&email="+email;
            HttpGet request = new HttpGet(url);
            HttpClient httpClient = new DefaultHttpClient();
            HttpResponse response = httpClient.execute(request);
            if(response.getStatusLine().getStatusCode()==HttpStatus.SC_OK){
                 String str = EntityUtils.toString(response.getEntity());
                pan=true;
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return pan;
    }
 
    public boolean sendPostRequest(String username,String password,String email){
        boolean pan=false;
        try{
            String url="http://192.168.1.8:8080/AndroidWeb/MyServlet";
            HttpPost request = new HttpPost(url);
            List <NameValuePair> params = new ArrayList <NameValuePair>();
            params.add(new BasicNameValuePair("username", username));
            params.add(new BasicNameValuePair("password", password));
            params.add(new BasicNameValuePair("email", email));
            request.setEntity(new UrlEncodedFormEntity(params,HTTP.UTF_8));
            HttpResponse response = new DefaultHttpClient().execute(request);
            if(response.getStatusLine().getStatusCode()==HttpStatus.SC_OK){
                String str = EntityUtils.toString(response.getEntity());
                pan=true;
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return pan;
    }
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 判断手机横屏还是竖屏</span><br></pre></td></tr></table></figure>
// 改变横竖屏时
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        // TODO Auto-generated method stub
        super.onConfigurationChanged(newConfig);
 
        Log.i(TAG, "this is onConfigurationChanged");
 
        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            // 横屏时
            Log.i(TAG, "this is ORIENTATION_LANDSCAPE");
        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {
            // 竖屏时
            Log.i(TAG, "this is ORIENTATION_PORTRAIT");
        }
 
        // 检测实体键盘的状态：推出或者合上
        if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) {
            // 实体键盘处于推出状态，在此处添加额外的处理代码
            Log.i(TAG, "this is HARDKEYBOARDHIDDEN_NO");           
        } else if (newConfig.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES) {
            // 实体键盘处于合上状态，在此处添加额外的处理代码
            Log.i(TAG, "this is HARDKEYBOARDHIDDEN_YES");
        }
    }
```








]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Apline 相关</title>
    <url>/2020/10/01/Apline%20%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 永久修改apk下载源地址</span><br><span class="line">vi etc/apk/repositories</span><br><span class="line"></span><br><span class="line"># 替换为阿里源</span><br><span class="line">http://mirrors.aliyun.com/alpine/v3.8/main/</span><br><span class="line">http://mirrors.aliyun.com/alpine/v3.8/community/</span><br><span class="line"></span><br><span class="line"># 更新源</span><br><span class="line">apk update</span><br><span class="line"></span><br><span class="line"># 临时源(直接在软件安装后面 添加源地址)</span><br><span class="line">apk add build-base --repository http://nl.alpinelinux.org/alpine/edge/testing/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apline</tag>
      </tags>
  </entry>
  <entry>
    <title>BlueLake 主题 Hexo</title>
    <url>/2020/09/08/BlueLake%20%E4%B8%BB%E9%A2%98%20Hexo/</url>
    <content><![CDATA[<h3 id="安装参考github"><a href="#安装参考github" class="headerlink" title="安装参考github"></a>安装参考github</h3><p><a href="https://github.com/chaooo/hexo-theme-BlueLake">https://github.com/chaooo/hexo-theme-BlueLake</a></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol>
<li><p>若语言部分没有汉化，需要修改中文配文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ./themes/BlueLake/languages</span><br><span class="line">vim zh-CN.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加RSS插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Sitemap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加baidusitemap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>






</li>
</ol>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU过高的排查方法</title>
    <url>/2020/10/01/CPU%E8%BF%87%E9%AB%98%E7%9A%84%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>根据top命令，发现PID为28555的python进程占用CPU高达98.9%，出现故障。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/Nv6La7ZRzq2wWl1.png"></p>
<p>通过ps aux | grep PID命令，进一步确定是python进程出现的问题。但是，怎么定位到具体线程或者代码呢？<br>首先显示线程列表:<br>ps -mp pid -o THREAD,tid,time<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/kJwTcUmshKbjpGV.png"></p>
<p>其次将需要的线程ID转换为16进制格式：<br>printf “%x\n” tid<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/OExZiCvS4FkALsM.png"></p>
<p>pstack（python stack trace）让python打印线程栈信息<br>pstack: python stack trace. 类似java中的jstack功能. </p>
<p>apt-get install pstack</p>
<p>根据进程号进行查询：</p>
<h1 id="pstree-p-进程号"><a href="#pstree-p-进程号" class="headerlink" title="pstree -p 进程号"></a>pstree -p 进程号</h1><p>top -Hp 进程号</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记</title>
    <url>/2019/06/02/CSS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>1、输入框聚焦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:focus&#123;</span><br><span class="line">    border: 2px solid #bbbbbb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、点击图片边框变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">img.activated&#123;</span><br><span class="line">    border: 2px solid #bbbbbb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、设置html页面背景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-color:#99FF00;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">repeat-x 背景图片横向重复</span><br><span class="line">repeat-y 背景图片竖向重复</span><br><span class="line">no-repeat 背景图片不重复</span><br><span class="line">*/</span><br><span class="line">body &#123;</span><br><span class="line">    background-image:url(../images/css_tutorials/background.jpg);               background-repeat:repeat-y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">背景附着属性(background-attachment)</span><br><span class="line">这个属性和background-image属性连在一起使用，决定图片是跟随内容滚动，还是固定不动。这个属性有两个值，一个是scroll，一个是fixed。缺省值是scroll。</span><br><span class="line">*/ </span><br><span class="line">body &#123;</span><br><span class="line">    background-image:url(../images/css_tutorials/background.jpg);  </span><br><span class="line">    background-repeat:no-repeat; background-attachment:fixed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">背景属性(background)</span><br><span class="line">这个属性是设置背景相关属性的一种快捷的综合写法， 包括background-color, background-image, background-repeat, backgroundattachment, background-position。</span><br><span class="line">body &#123;</span><br><span class="line">    background:#99FF00 url(../images/css_tutorials/background.jpg) no-repeat fixed 40px 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>4、保持td内容在一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">td &#123;</span><br><span class="line">   white-space: nowrap;</span><br><span class="line">   overflow:hidden;</span><br><span class="line">   word-break:keep-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery定时任务时间设置</title>
    <url>/2021/04/01/Celery%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="Celery定时任务时间设置"><a href="#Celery定时任务时间设置" class="headerlink" title="Celery定时任务时间设置"></a>Celery定时任务时间设置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定任务时间使用装饰器</span></span><br><span class="line"><span class="meta">@periodic_task(<span class="params">run_every=<span class="number">10</span></span>)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>run_every 参数是设置定时任务的时间间隔或执行的时间。</p>
</blockquote>
<blockquote>
<p>run_ervery 参数设置有3种方式:</p>
</blockquote>
<ul>
<li>直接设置秒数，例如run_every=10，每10秒执行一次任务。</li>
<li>通过datetime设置时间间隔</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有时直接设置秒数不方便，需要通过计算得到具体秒数，可读性也不高。</span></span><br><span class="line"><span class="comment"># 可采用datetime设置：</span></span><br><span class="line"><span class="keyword">from</span> celery.decorators <span class="keyword">import</span> periodic_task</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"> </span><br><span class="line"><span class="meta">@periodic_task(<span class="params">run_every=datetime.timedelta(<span class="params">hours=<span class="number">1</span>, minutes=<span class="number">15</span>, seconds=<span class="number">40</span></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_task</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;periodic task test.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>celery的crontab表达式<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crontab是比较完善，且稍微有点复杂的方式。可实现各种设置时间的需求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> celery.task.schedules <span class="keyword">import</span> crontab  </span><br><span class="line"><span class="keyword">from</span> celery.decorators <span class="keyword">import</span> periodic_task</span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab()实例化的时候没设置任何参数，都是使用默认值。</span></span><br><span class="line"><span class="meta">@periodic_task(<span class="params">run_every=crontab(<span class="params"></span>)</span>)  </span><span class="comment"># 表示每分钟0秒时刻执行一次</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_task</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;periodic task test.&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="crontab参数说明"><a href="#crontab参数说明" class="headerlink" title="crontab参数说明"></a>crontab参数说明</h4><blockquote>
<p>crontab一共有7个参数，常用有5个参数</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>minute</td>
<td>分钟，范围0-59</td>
</tr>
<tr>
<td>hour</td>
<td>小时，范围0-23</td>
</tr>
<tr>
<td>day_of_week</td>
<td>星期几，范围0-6。以星期天为开始，即0为星期天。星期几还可使用英文缩写表示，如”sun”表示星期天</td>
</tr>
<tr>
<td>day_of_month</td>
<td>每月第几号，范围1-31</td>
</tr>
<tr>
<td>month_of_year</td>
<td>月份，范围1-12</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a、默认参数</span></span><br><span class="line"><span class="comment"># 这些参数可以设置表达式，表达稍微复杂的设置。</span></span><br><span class="line"><span class="comment"># 默认值都是&quot;*&quot;星号，代表任意时刻。</span></span><br><span class="line">crontab()</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">crontab(minute=<span class="string">&#x27;*&#x27;</span>, hour=<span class="string">&#x27;*&#x27;</span>, day_of_week=<span class="string">&#x27;*&#x27;</span>, day_of_month=<span class="string">&#x27;*&#x27;</span>, month_of_year=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="comment"># 含义是每天、每小时、每分钟执行一次任务，简单说就是每1分钟执行一次任务。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b、具体某个值</span></span><br><span class="line"><span class="comment"># 根据参数的取值范围，可直接设置某个值， 指定某个时刻。</span></span><br><span class="line">crontab(minute=<span class="number">15</span>) <span class="comment"># 即每小时的15分时刻执行一次任务</span></span><br><span class="line">crontab(minute=<span class="number">0</span>, hour=<span class="number">0</span>)  <span class="comment"># 每天0点0分时刻执行任务</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 也可以设置多个值（用逗号隔开数值，逗号是表示多个表达式or逻辑关系）</span></span><br><span class="line">crontab(minute=<span class="string">&#x27;0,30&#x27;</span>)  <span class="comment"># 0分和30分执行一次任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c、设置范围</span></span><br><span class="line"><span class="comment"># 设置范围也是设置多个值</span></span><br><span class="line">crontab(minute=<span class="string">&#x27;*&#x27;</span>, hour=<span class="string">&#x27;9-12&#x27;</span>)  <span class="comment"># 指定9点到12点每个小时的每分钟执行任务</span></span><br><span class="line"><span class="comment"># *号是默认值，可省略如：</span></span><br><span class="line">crontab(hour=<span class="string">&#x27;9-12&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拓展</span></span><br><span class="line">crontab(hour=<span class="string">&#x27;9-12,20&#x27;</span>)  <span class="comment"># 指定9点到12点和20点中每分钟执行任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab的表达式越来越复杂了。</span></span><br><span class="line"><span class="comment"># celery还提供了一个类得到表达式解析结果，代码如下：</span></span><br><span class="line"><span class="keyword">from</span> celery.task.schedules <span class="keyword">import</span> crontab_parser</span><br><span class="line">r = crontab_parser(<span class="number">23</span>, <span class="number">0</span>).parse(<span class="string">&#x27;9-12,20&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment"># 其中，crontab_parse是一个解析类。</span></span><br><span class="line"><span class="comment"># 第1个参数是范围的最大值；第2个参数是范围的最小值。</span></span><br><span class="line"><span class="comment"># 通过parse输入表达式，可得到表达式的解析结果：</span></span><br><span class="line"><span class="comment"># set([9, 10, 11, 12, 20])</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># d、设置间隔步长</span></span><br><span class="line">crontab(day_of_month=<span class="string">&#x27;1,3,5,7,9,11&#x27;</span>)  <span class="comment"># 每个月的第1、3、5、7、9、11天每分钟执行任务</span></span><br><span class="line"></span><br><span class="line">crontab(minute=<span class="string">&#x27;*/2&#x27;</span>)  <span class="comment"># 每间隔2分钟就执行一次任务</span></span><br><span class="line">crontab(minute=<span class="string">&#x27;0-59/2&#x27;</span>)  <span class="comment"># 效果等同上面</span></span><br><span class="line">crontab(hour=<span class="string">&#x27;*/2&#x27;</span>)  <span class="comment"># 每2个小时中每分钟执行1次任务</span></span><br><span class="line">crontab(minute=<span class="number">0</span>, hour=<span class="string">&#x27;*/3&#x27;</span>)  <span class="comment"># 每3个小时的0分时刻执行1次任务, 即[0,3,6,9,12,15,18,21]点0分</span></span><br><span class="line">crontab(minute=<span class="number">0</span>, hour=<span class="string">&#x27;*/3,8-12&#x27;</span>)  <span class="comment"># 每3个小时或8点到12点的0分时刻执行1次任务, 即[0,3,6,9,12,15,18,21]+[8,9,10,11,12]点0分</span></span><br><span class="line">crontab(month_of_year=<span class="string">&#x27;*/3&#x27;</span>)  <span class="comment"># 每个季度的第1个月中，每天每分钟执行1次任务</span></span><br><span class="line">crontab(minute=<span class="number">0</span>, hour=<span class="number">0</span>, day_of_month=<span class="string">&#x27;2-31/2&#x27;</span>)  <span class="comment"># 每月偶数天数的0点0分时刻执行1次任务</span></span><br><span class="line">crontab(<span class="number">0</span>, <span class="number">0</span>, day_of_month=<span class="string">&#x27;11&#x27;</span>, month_of_year=<span class="string">&#x27;5&#x27;</span>) <span class="comment"># 每年5月11号的0点0分时刻执行1次任务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下安装RabbitMQ</title>
    <url>/2021/02/01/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><h4 id="安装阿里源"><a href="#安装阿里源" class="headerlink" title="安装阿里源"></a>安装阿里源</h4><p>参考：<a href="https://opsx.alibaba.com/mirror">OPSX</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"># 下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"># 生成缓存</span><br><span class="line">yum makecache</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="erlang-与-rabbitmq版本对应"><a href="#erlang-与-rabbitmq版本对应" class="headerlink" title="erlang 与 rabbitmq版本对应"></a>erlang 与 rabbitmq版本对应</h4><table>
<thead>
<tr>
<th>RabbitMQ</th>
<th>Mini Ver Erlang/OTP</th>
<th>Max Ver Erlang/OTP</th>
</tr>
</thead>
<tbody><tr>
<td>3.7.x</td>
<td>19.3</td>
<td>20.3.x</td>
</tr>
<tr>
<td>3.6.16 / 3.6.15</td>
<td>19.3</td>
<td>20.3.x</td>
</tr>
<tr>
<td>3.6.14 / 3.6.13 / 3.6.12 / 3.6.11</td>
<td>R16B03</td>
<td>20.1.x</td>
</tr>
<tr>
<td>3.6.10 / 3.6.9 / 3.6.8 /3.6.7 / 3.6.6 / 3.6.5/ 3.6.4</td>
<td>R16B03</td>
<td>19.3.x</td>
</tr>
<tr>
<td>3.6.3 / 3.6.2 / 3.6.1 / 3.6.0</td>
<td>R16B03</td>
<td>18.3.x</td>
</tr>
<tr>
<td>3.5.x</td>
<td>R14B04</td>
<td>17.5.x</td>
</tr>
<tr>
<td>3.4.x</td>
<td>R13B03</td>
<td>16B03</td>
</tr>
<tr>
<td><a href="http://www.rabbitmq.com/which-erlang.html">参考</a>: <a href="http://www.rabbitmq.com/which-erlang.html">http://www.rabbitmq.com/which-erlang.html</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="Erlang安装-RabbitMQ依赖Erlang"><a href="#Erlang安装-RabbitMQ依赖Erlang" class="headerlink" title="Erlang安装(RabbitMQ依赖Erlang)"></a>Erlang安装(RabbitMQ依赖Erlang)</h4><ol>
<li>从Erlang Solution安装<blockquote>
<p>参考：<a href="https://packages.erlang-solutions.com/erlang/">Erlang源</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加erlang solutions源</span><br><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm </span><br><span class="line"></span><br><span class="line">rpm -Uvh erlang-solutions-1.0-1.noarch.rpm  </span><br><span class="line"> </span><br><span class="line">$ sudo yum install -y erlang erlang-wx</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：上面方法安装最新版本的erlang，有可能rabbitmq不支持，导致不必要的麻烦。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>若报错如下，安装<code>yum install -y epel-release</code> （和<code>yum install -y unixODBC unixODBC-devel wxBase wxGTK SDL wxGTK-gl</code>）</p>
</blockquote>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line">Error: Package: erlang-wx-21.0-1.el7.centos.x86_64 (erlang-solutions)</span><br><span class="line">           Requires: libwx_gtk2u_adv-2.8.so.0(WXU_2.8)(64bit)</span><br><span class="line">Error: Package: erlang-wx-21.0-1.el7.centos.x86_64 (erlang-solutions)</span><br><span class="line">           Requires: libwx_gtk2u_core-2.8.so.0()(64bit)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Error: Package: erlang-wx-21.0-1.el7.centos.x86_64 (erlang-solutions)</span><br><span class="line">           Requires: libwx_gtk2u_core-2.8.so.0(WXU_2.8.10)(64bit)</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: rpm -Va --nofiles --nodigest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>从EPEL源安装</li>
</ol>
<blockquote>
<p>该方式Erlang版本可能不是最新的，可能不能满足RabbitMQ所需的最低版本要求</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动EPEL源</span><br><span class="line">$ sudo yum install -y epel-release </span><br><span class="line"># 安装erlang</span><br><span class="line">$ sudo yum install -y erlang </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>指定erlang软件源安装（指定版本）</li>
</ol>
<blockquote>
<p>指定版本(需要指定源)：<a href="https://github.com/rabbitmq/erlang-rpm">参考</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># In /etc/yum.repos.d/rabbitmq-erlang.repo</span><br><span class="line">[rabbitmq-erlang]</span><br><span class="line">name=rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/erlang/20/el/7</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install -y erlang</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>测试Erlang是否安装成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">erl -version</span><br><span class="line"></span><br><span class="line"># 输出提示：Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version 9.3.3</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="RabbitMQ安装-1"><a href="#RabbitMQ安装-1" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.15/rabbitmq-server-3.6.15-1.el6.noarch.rpm</span><br><span class="line">rpm --import https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line"># 下载</span><br><span class="line">wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.6/rabbitmq-server-3.7.6-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">yum install -y rabbitmq-server-3.7.6-1.el7.noarch.rpm </span><br></pre></td></tr></table></figure>

<blockquote>
<p>若出现下面错误，说明rpm包有问题，重新下载rpm包。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Running transaction</span><br><span class="line">  Installing : socat-1.7.3.2-2.el7.x86_64                                                                                                                1/2 </span><br><span class="line">  Installing : rabbitmq-server-3.6.15-1.el6.noarch                                                                                                       2/2 </span><br><span class="line">Error unpacking rpm package rabbitmq-server-3.6.15-1.el6.noarch</span><br><span class="line">error: unpacking of archive failed on file /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.15/plugins/rabbitmq_mqtt-3.6.15.ez;5b3b1d27: cpio: read</span><br><span class="line">  Verifying  : socat-1.7.3.2-2.el7.x86_64                                                                                                                1/2 </span><br><span class="line">  Verifying  : rabbitmq-server-3.6.15-1.el6.noarch                                                                                                       2/2 </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  socat.x86_64 0:1.7.3.2-2.el7                                                                                                                     </span><br><span class="line"></span><br><span class="line">Failed:</span><br><span class="line">  rabbitmq-server.noarch 0:3.6.15-1.el6 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>若socat依赖错误，请安装socat: <code>yum install -y socat</code></p>
</blockquote>
<blockquote>
<p>若erlang版本依赖问题，需升级erlang版本。</p>
</blockquote>
<blockquote>
<p>RabbitMQ启动报错</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM_0_6_centos ~]# service rabbitmq-server start</span><br><span class="line">Starting rabbitmq-server (via systemctl):  Job for rabbitmq-server.service failed because the control process exited with error code. See &quot;systemctl status rabbitmq-server.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">[FAILED]</span><br><span class="line"></span><br><span class="line">[root@VM_0_6_centos ~]# systemctl status rabbitmq-server.service</span><br><span class="line">● rabbitmq-server.service - LSB: Enable AMQP service provided by RabbitMQ broker</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/rabbitmq-server; bad; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Tue 2018-07-03 15:36:24 CST; 2min 10s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 10756 ExecStart=/etc/rc.d/init.d/rabbitmq-server start (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">Jul 03 15:36:11 VM_0_6_centos systemd[1]: Starting LSB: Enable AMQP service provided by RabbitMQ broker...</span><br><span class="line">Jul 03 15:36:11 VM_0_6_centos su[10834]: (to rabbitmq) root on none</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：RabbitMQ版本不对，<a href="https://www.rabbitmq.com/install-rpm.html">参考官网(Download the server)</a>,选择正确的版本</p>
<h4 id="RabbitMQ基本操作"><a href="#RabbitMQ基本操作" class="headerlink" title="RabbitMQ基本操作"></a>RabbitMQ基本操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/service rabbitmq-server start   # 启动</span><br><span class="line">/sbin/service rabbitmq-server stop    # 停止</span><br><span class="line">/sbin/service rabbitmq-server restart  # 重启</span><br><span class="line">/sbin/service rabbitmq-server status     # 查看服务状态</span><br><span class="line">chkconfig rabbitmq-server on  # 开机启动RabbitMQ服务</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询</span><br><span class="line">ps -ef | grep rabbitmq</span><br><span class="line"></span><br><span class="line"># 重启报错时杀进程</span><br><span class="line">ps -ef | grep rabbitmq | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用户相关</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users # 查看当前所有用户</span><br><span class="line">rabbitmqctl list_user_permissions guest # 查看默认guest用户的权限</span><br><span class="line"> </span><br><span class="line"># 由于RabbitMQ默认的账号用户名和密码都是guest。为了安全起见, 先删掉默认用户</span><br><span class="line">rabbitmqctl delete_user guest</span><br><span class="line"> </span><br><span class="line"># 为RabbitMQ创建用户</span><br><span class="line">rabbitmqctl add_user username password</span><br><span class="line"> </span><br><span class="line"># 设置用户tag，tag为角色名，对应administrator，monitoring，policymaker，management，或其他自定义名称</span><br><span class="line">rabbitmqctl set_user_tags username tags</span><br><span class="line"> </span><br><span class="line"># 赋予用户默认vhost的全部操作权限</span><br><span class="line">rabbitmqctl set_permissions -p / username &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"> </span><br><span class="line"># 查看用户的权限</span><br><span class="line">rabbitmqctl list_user_permissions username</span><br></pre></td></tr></table></figure>

<p><a href="https://www.rabbitmq.com/rabbitmqctl.8.html">RabbitMQ参考手册</a></p>
<h4 id="开启web管理接口"><a href="#开启web管理接口" class="headerlink" title="开启web管理接口"></a>开启web管理接口</h4><blockquote>
<p>RabbitMQ自带了web管理,更方便RabbitMQ的管理。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启web管理</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>web管理端口为15672，通过浏览器访问即可。</p>
</blockquote>
<blockquote>
<p>rabbitmqctl报错</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=SUPERVISOR REPORT==== 5-Jul-2018::01:22:56.863757 ===</span><br><span class="line">supervisor: &#123;local,&#x27;Elixir.Logger.Supervisor&#x27;&#125;</span><br><span class="line">errorContext: start_error</span><br><span class="line">reason: noproc</span><br><span class="line">offender: [&#123;pid,undefined&#125;,</span><br><span class="line">           &#123;id,&#x27;Elixir.Logger.ErrorHandler&#x27;&#125;,</span><br><span class="line">           &#123;mfargs,</span><br><span class="line">               &#123;&#x27;Elixir.Logger.Watcher&#x27;,start_link,</span><br><span class="line">                   [&#123;error_logger,&#x27;Elixir.Logger.ErrorHandler&#x27;,</span><br><span class="line">                        &#123;true,false,500&#125;&#125;]&#125;&#125;,</span><br><span class="line">           &#123;restart_type,permanent&#125;,</span><br><span class="line">           &#123;shutdown,5000&#125;,</span><br><span class="line">           &#123;child_type,worker&#125;]</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">=INFO REPORT==== 5-Jul-2018::01:22:56.871100 ===</span><br><span class="line">application: logger</span><br><span class="line">exited: &#123;&#123;shutdown,</span><br><span class="line">             &#123;failed_to_start_child,&#x27;Elixir.Logger.ErrorHandler&#x27;,noproc&#125;&#125;,</span><br><span class="line">         &#123;&#x27;Elixir.Logger.App&#x27;,start,[normal,[]]&#125;&#125;</span><br><span class="line">type: temporary</span><br><span class="line">Could not start application logger: Logger.App.start(:normal, []) returned an error: shutdown: failed to start child: Logger.ErrorHandler</span><br><span class="line">** (EXIT) no process: the process is not alive or there&#x27;s no process currently associated with the given name, possibly because its application isn&#x27;t started</span><br><span class="line"></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>见图<img src="http://qiniu.mllove.top/blog/180704/hCLkie5Gkk.png" alt="mark"><br>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据官网的RabbitMQ Erlang版本需求文档：http://www.rabbitmq.com/which-erlang.html</span><br><span class="line">RabbitMQ 3.7.x 所要求的Erlang 版本：</span><br><span class="line">最低要求19.3 ，最高支持20.3.x</span><br><span class="line">所以RabbitMQ 3.7.6和Erlang 21.0 版本不匹配，把Erlang 21.0卸掉，换成Erlang 20.3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="RabbitMQ配置"><a href="#RabbitMQ配置" class="headerlink" title="RabbitMQ配置"></a>RabbitMQ配置</h4><blockquote>
<p>参考:<a href="https://www.rabbitmq.com/configure.html">RabbitMQ官方配置文档</a></p>
</blockquote>
<blockquote>
<p>配置文件rabbitmq.conf路径：<code>/usr/share/doc/rabbitmq-server/</code> 或 <code>/usr/share/doc/rabbitmq-server-3.7.6/</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># RabbitMQ配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 开启用户远程访问</span><br><span class="line"># 默认情况下，RabbitMQ的默认的guest用户只允许本机访问， 若使得guest用户能够远程访问，只需要将配置文件中的loopback_users列表置为空即可</span><br><span class="line">&#123;loopback_users, []&#125;</span><br><span class="line"></span><br><span class="line"># 若使得新添加的用户只能本地访问，将用户名添加到列表即可, 如只允许admin用户本机访问</span><br><span class="line">&#123;loopback_users, [&quot;admin&quot;]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>重启服务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/service rabbitmq-server restart</span><br></pre></td></tr></table></figure>



<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># iptables </span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 5672 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 15672 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># firewall</span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h4><blockquote>
<p>参考：<a href="https://www.rabbitmq.com/networking.html">端口说明</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># erlang发现口</span><br><span class="line">4369 (epmd), 25672 (Erlang distribution)</span><br><span class="line"></span><br><span class="line"># client端通信口</span><br><span class="line">5672, 5671 (AMQP 0-9-1 without and with TLS)</span><br><span class="line"></span><br><span class="line"># 管理界面ui端口</span><br><span class="line">15672 (if management plugin is enabled)</span><br><span class="line"></span><br><span class="line">61613, 61614 (if STOMP is enabled)</span><br><span class="line"></span><br><span class="line">1883, 8883 (if MQTT is enabled)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下搭建Gitlab</title>
    <url>/2020/02/01/CentOS7%E4%B8%8B%E6%90%AD%E5%BB%BAGitlab/</url>
    <content><![CDATA[<h3 id="CentOS-7-安装-Gitlab"><a href="#CentOS-7-安装-Gitlab" class="headerlink" title="CentOS 7 安装 Gitlab"></a>CentOS 7 安装 Gitlab</h3><ul>
<li><p>安装基本系统与依赖包</p>
</li>
<li><p>安装 Gitlab 依赖的工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum -y groupinstall &#x27;Development Tools&#x27;</span><br><span class="line">yum -y install readline readline-devel ncurses-devel gdbm-devel glibc-devel tcl-devel openssl-devel curl-devel expat-devel db4-devel byacc sqlite-devel libyaml libyaml-devel libffi libffi-devel libxml2 libxml2-devel libxslt libxslt-devel libicu libicu-devel system-config-firewall-tui git redis ruby sudo wget crontabs logwatch logrotate perl-Time-HiRes</span><br></pre></td></tr></table></figure></li>
<li><p>安装 Redis<br>访问 <a href="http://www.redis.io/download%EF%BC%8C%E4%B8%8B%E8%BD%BD">http://www.redis.io/download，下载</a> Redis 源代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span><br><span class="line">tar zxvf redis-4.0.2.tar.gz</span><br><span class="line">cd redis-4.0.2</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>若在编译过程中出错，则可以执行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo make test</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br><span class="line">sudo ./utils/install_server.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<br>创建 /etc/init.d/redis 并使用下面的代码作为启动脚本。<br>添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###########################</span><br><span class="line">PATH=/usr/local/bin:/sbin:/usr/bin:/bin</span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">EXEC=/usr/local/bin/redis-server</span><br><span class="line">REDIS_CLI=/usr/local/bin/redis-cli</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis.pid</span><br><span class="line">CONF=&quot;/etc/redis/6379.conf&quot;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        if [ -f $PIDFILE ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$PIDFILE exists, process is already running or crashed&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;Starting Redis server...&quot;</span><br><span class="line">                $EXEC $CONF</span><br><span class="line">        fi</span><br><span class="line">        if [ &quot;$?&quot;=&quot;0&quot; ]</span><br><span class="line">        then</span><br><span class="line">              echo &quot;Redis is running...&quot;</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        if [ ! -f $PIDFILE ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$PIDFILE does not exist, process is not running&quot;</span><br><span class="line">        else</span><br><span class="line">                PID=$(cat $PIDFILE)</span><br><span class="line">                echo &quot;Stopping ...&quot;</span><br><span class="line">                $REDIS_CLI -p $REDISPORT SHUTDOWN</span><br><span class="line">                while [ -x $&#123;PIDFILE&#125; ]</span><br><span class="line">               do</span><br><span class="line">                    echo &quot;Waiting for Redis to shutdown ...&quot;</span><br><span class="line">                    sleep 1</span><br><span class="line">                done</span><br><span class="line">                echo &quot;Redis stopped&quot;</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">   restart|force-reload)</span><br><span class="line">        $&#123;0&#125; stop</span><br><span class="line">        $&#123;0&#125; start</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2</span><br><span class="line">        exit 1</span><br><span class="line">esac</span><br><span class="line">##############################</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>保存后，添加可执行权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/redis</span><br></pre></td></tr></table></figure>

<p>确保 redis 能随系统启动：</p>
<p>设置Redis开启启动参考：<a href="http://www.cnblogs.com/pqchao/p/6549510.html">http://www.cnblogs.com/pqchao/p/6549510.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line">在文件末尾添加下面这行：</span><br><span class="line">service redis start</span><br><span class="line">然后使用上面同样的命令启动 redis 服务：</span><br><span class="line">service redis start</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装邮件服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install postfix</span><br></pre></td></tr></table></figure>
</li>
<li><p> 安装Git<br>先删除系统中原有的老版本 git：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y remove git</span><br><span class="line">yum install zlib-devel perl-CPAN gettext curl-devel expat-devel gettext-devel openssl-devel</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从官方网站下载源代码进行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --progress https://www.kernel.org/pub/software/scm/git/git-2.9.4.tar.gz | tar xz</span><br><span class="line">cd git-2.9.4/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make prefix=/usr/local install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>然后使用下面这个命令检测安装是否有效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which git</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 ruby<br>如果 ruby 的版本低于 2.0 的话，则需要重新安装 ruby。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">curl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.4/ruby-2.4.2.tar.gz | tar xz</span><br><span class="line">cd ruby-2.4.2</span><br><span class="line">./configure --disable-install-rdoc</span><br><span class="line">make</span><br><span class="line">make prefix=/usr/local install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>安装完成后，重新登录终端确保$PATH生效，检测ruby的安装成功与否：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># which ruby</span><br><span class="line">/usr/local/bin/ruby</span><br><span class="line"># ruby -v</span><br><span class="line">ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-linux]</span><br></pre></td></tr></table></figure>

<p>Gitlab的包使用bundler进行依赖关系管理，所以还得安装。<br>如果在国内的用户请先修改Ruby的源服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure>

<p>安装bundle：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo gem install bundler --no-ri --no-rdoc</span><br><span class="line">如果提示sudo: gem: command not found，使用root账号登录执行该命令即可。</span><br></pre></td></tr></table></figure>

<ul>
<li>为 Gitlab 添加系统用户<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adduser --system --shell /bin/bash --comment &#x27;GitLab&#x27; --create-home --home-dir /home/git/ git</span><br></pre></td></tr></table></figure>
为了包含/usr/local/bin到git用户的$PATH，一个方法是编辑超级用户文件。<br>以管理员身份运行：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>然后搜索：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br></pre></td></tr></table></figure>

<p>将其改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin</span><br></pre></td></tr></table></figure>

<ul>
<li>安装数据库<br>MySQL 已经不再包含在 CentOS 7 的源中，而改用了 MariaDB，先搜索 MariaDB 现有的包：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>然后全部删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-*</span><br></pre></td></tr></table></figure>

<p>然后创建 /etc/yum.repos.d/MariaDB.repo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/MariaDB.repo</span><br></pre></td></tr></table></figure>

<p>将以下内容添加至该文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MariaDB 10.3.2 CentOS repository list</span><br><span class="line"># http://mariadb.org/mariadb/repositories/</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.3.2/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>

<p>然后运行下面命令安装 MariaDB 10.3.2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure>
<p>然后启动 MariaDB 服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>
<p>接着运行 mysql_secure_installation：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>登录 MariaDB 并创建相应的数据库用户与数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">CREATE USER &#x27;git&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;$password&#x27;;</span><br><span class="line">SET storage_engine=INNODB;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;</span><br><span class="line">GRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO &#x27;git&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<p>尝试使用新用户连接数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u git -H mysql -u git -p -D gitlabhq_production</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 Gitlab<br>① 克隆源<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u -git cd /home/git</span><br><span class="line">sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 10-1-stable gitlab</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>② 配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/gitlab</span><br><span class="line"></span><br><span class="line"># 复制GitLab的示例配置文件</span><br><span class="line">sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml</span><br><span class="line"></span><br><span class="line"># 确保修改&quot;localhost&quot;为你的GitLab主机的FQDN</span><br><span class="line"># 如果你想要使用https确保你设置了`https`为`true`。具体必要的细节参见#using-https</span><br><span class="line"># 如果你从源代码安装了Git，修改git的bin_path为/usr/local/bin/git</span><br><span class="line">sudo -u git -H vim config/gitlab.yml</span><br><span class="line"></span><br><span class="line"># 确保GitLab可以写入log/和temp/目录</span><br><span class="line">chown -R git &#123;log,tmp&#125;</span><br><span class="line">chmod -R u+rwX  &#123;log,tmp&#125;</span><br><span class="line"></span><br><span class="line"># Create directory for satellites</span><br><span class="line"># 为卫星(?)创建目录</span><br><span class="line">sudo -u git -H mkdir /home/git/gitlab-satellites</span><br><span class="line">chmod u+rwx,g+rx,o-rwx /home/git/gitlab-satellites</span><br><span class="line"></span><br><span class="line"># Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories</span><br><span class="line"># 确保GitLab可以写入tmp/pids/和temp/sockets/目录</span><br><span class="line">chmod -R u+rwX  tmp/&#123;pids,sockets&#125;</span><br><span class="line"></span><br><span class="line"># Make sure GitLab can write to the public/uploads/ directory</span><br><span class="line"># 确保GitLab可以写入public/uploads/目录</span><br><span class="line">chmod -R u+rwX  public/uploads</span><br><span class="line"></span><br><span class="line"># Copy the example Unicorn config</span><br><span class="line"># 复制Unicorn的示例配置文件</span><br><span class="line">sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb</span><br><span class="line"></span><br><span class="line"># Enable cluster mode if you expect to have a high load instance</span><br><span class="line"># Ex. change amount of workers to 3 for 2GB RAM server</span><br><span class="line"># 启用集群模式如果你期望拥有一个高负载实例</span><br><span class="line"># 附：修改worker的数量到3用于2GB内存的服务器</span><br><span class="line">sudo -u git -H vim config/unicorn.rb</span><br><span class="line"></span><br><span class="line"># Copy the example Rack attack config</span><br><span class="line"># 复制Rack attack的示例配置文件</span><br><span class="line">sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb</span><br><span class="line"></span><br><span class="line"># Configure Git global settings for git user, useful when editing via web</span><br><span class="line"># Edit user.email according to what is set in config/gitlab.yml</span><br><span class="line"># 为git用户配置Git全局设定，当通过web修改时有用</span><br><span class="line"># 修改user.email根据config/gitlab.yml中的设定</span><br><span class="line">sudo -u git -H git config --global user.name &quot;GitLab&quot;</span><br><span class="line">sudo -u git -H git config --global user.email &quot;gitlab@localhost&quot;</span><br><span class="line">sudo -u git -H git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>

<p>③ 数据库配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MySQL only:</span><br><span class="line"># 仅限MySQL：</span><br><span class="line">sudo -u git cp config/database.yml.mysql config/database.yml</span><br><span class="line"></span><br><span class="line"># MySQL and remote PostgreSQL only:</span><br><span class="line"># Update username/password in config/database.yml.</span><br><span class="line"># You only need to adapt the production settings (first part).</span><br><span class="line"># If you followed the database guide then please do as follows:</span><br><span class="line"># Change &#x27;secure password&#x27; with the value you have given to $password</span><br><span class="line"># You can keep the double quotes around the password</span><br><span class="line"># 仅限MySQL和远程PostgreSQL：</span><br><span class="line"># 在config/database.yml中更新用户名/密码；</span><br><span class="line"># 你只需要适配生产设定（第一部分）；</span><br><span class="line"># 如果你跟从数据库向导，请按以下操作：</span><br><span class="line"># 修改&#x27;secure password&#x27;使用你刚才设定的$password；</span><br><span class="line"># 你可以保留密码两端的双引号。</span><br><span class="line">sudo -u git -H vim config/database.yml</span><br><span class="line"></span><br><span class="line"># PostgreSQL and MySQL:</span><br><span class="line"># Make config/database.yml readable to git only</span><br><span class="line"># PostgreSQL和MySQL：</span><br><span class="line"># 设置config/database.yml仅对git可读。</span><br><span class="line">sudo -u git -H chmod o-rwx config/database.yml</span><br></pre></td></tr></table></figure>

<p>④ 安装 Gems</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/gitlab</span><br><span class="line"></span><br><span class="line"># For users from China mainland only</span><br><span class="line"># 仅限中国大陆用户</span><br><span class="line">vim /home/git/gitlab/Gemfile</span><br><span class="line">source &quot;https://gems.ruby-china.org/ &quot; // 原始 source &quot;https://rubygems.org/&quot;</span><br><span class="line">或</span><br><span class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">如果遇到 SSL 证书错误，是Ruby 安装方式不正确，你又无法解决，请修改 ~/.gemrc 文件，增加 ssl_verify_mode: 0 配置，以便于 RubyGems 可以忽略 SSL 证书错误。</span><br><span class="line">---</span><br><span class="line">:sources:</span><br><span class="line">- https://gems.ruby-china.org</span><br><span class="line">:ssl_verify_mode: 0</span><br><span class="line"></span><br><span class="line">若提示You are trying to install in deployment mode after changing</span><br><span class="line">your Gemfile. Run `bundle install` elsewhere and add the</span><br><span class="line">updated Gemfile.lock to version control.</span><br><span class="line">If this is a development machine, remove the /home/git/gitlab/Gemfile freeze by running `bundle install --no-deployment`.</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">sudo -u git -H bundle install --no-deployment</span><br><span class="line"></span><br><span class="line"># For MySQL (note, the option says &quot;without ... postgres&quot;)</span><br><span class="line">sudo -u git -H bundle install --deployment --without development test postgres aws</span><br></pre></td></tr></table></figure>

<p>⑤ 安装GitLab Shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GitLab Shell是一个专门为GitLab开发的SSH访问和源管理软件。</span><br><span class="line"># Go to the Gitlab installation folder:</span><br><span class="line"># 转到GitLab安装目录：</span><br><span class="line">cd /home/git/gitlab</span><br><span class="line"></span><br><span class="line"># For users from China mainland only</span><br><span class="line"># 仅限中国大陆用户</span><br><span class="line">vim /home/git/gitlab/Gemfile</span><br><span class="line">source &quot;http://ruby.taobao.org&quot; // 原始 source &quot;https://rubygems.org/&quot;</span><br><span class="line"></span><br><span class="line"># Run the installation task for gitlab-shell (replace `REDIS_URL` if needed):</span><br><span class="line"># 运行gitlab-shell的安装任务（替换`REDIS_URL`如果有需要的话）：</span><br><span class="line">sudo -u git -H bundle exec rake gitlab:shell:install[v1.9.6] REDIS_URL=redis://localhost:6379 RAILS_ENV=production</span><br><span class="line"></span><br><span class="line"># By default, the gitlab-shell config is generated from your main gitlab config.</span><br><span class="line"># 默认的，gitlab-shell的配置文件是由你的gitlab主配置文件生成的。</span><br><span class="line">#</span><br><span class="line"># Note: When using GitLab with HTTPS please change the following:</span><br><span class="line"># - Provide paths to the certificates under `ca_file` and `ca_path options.</span><br><span class="line"># - The `gitlab_url` option must point to the https endpoint of GitLab.</span><br><span class="line"># - In case you are using self signed certificate set `self_signed_cert` to `true`.</span><br><span class="line"># See #using-https for all necessary details.</span><br><span class="line"># 提示：当通过HTTPS使用GitLab时，请做出如下更改：</span><br><span class="line"># - 提供证书的路径在`ca_file`和`ca_path`选项；</span><br><span class="line"># - `gitlab_url`选项必须指向GitLab的https端点；</span><br><span class="line"># - 如果你使用自签名的证书，设置`self-signed_cert`为`true`。</span><br><span class="line"># 所有必需的具体细节参见#using-https</span><br><span class="line">#</span><br><span class="line"># You can review (and modify) it as follows:</span><br><span class="line"># 你可以检查（并修改该）通过以下方法：</span><br><span class="line">sudo -u git -H vim /home/git/gitlab-shell/config.yml</span><br><span class="line"></span><br><span class="line"># Ensure the correct SELinux contexts are set</span><br><span class="line"># Read http://wiki.centos.org/HowTos/Network/SecuringSSH</span><br><span class="line"># 确保正确的SELinux上下文被设置</span><br><span class="line"># 阅读http://wiki.centos.org/HowTos/Network/SecuringSSH</span><br><span class="line">restorecon -Rv /home/git/.ssh</span><br><span class="line">初始化数据库和激活高级功能</span><br><span class="line">sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production</span><br><span class="line"># Type &#x27;yes&#x27; to create the database tables.</span><br><span class="line"># When done you see &#x27;Administrator account created:&#x27;</span><br><span class="line">提示：你可以设置管理员密码通过在环境变量GITLAB_ROOT_PASSWORD中提供，例如：</span><br><span class="line"></span><br><span class="line">sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=newpassword</span><br><span class="line">安装初始化脚本</span><br><span class="line">下载初始化脚本（将放在/etc/init.d/gitlab）：</span><br><span class="line"></span><br><span class="line">sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab</span><br><span class="line">chmod +x /etc/init.d/gitlab</span><br><span class="line">chkconfig --add gitlab</span><br><span class="line">设置GitLab开机启动：</span><br><span class="line"></span><br><span class="line">chkconfig gitlab on</span><br><span class="line">设置日志翻转</span><br><span class="line"></span><br><span class="line">cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab</span><br><span class="line">检查应用状态</span><br><span class="line">sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production</span><br><span class="line">编译静态文件</span><br><span class="line">sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production</span><br><span class="line">启动实例</span><br><span class="line">/etc/init.d/gitlab start</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS搭建 VSFTP</title>
    <url>/2018/12/02/CentOS%E6%90%AD%E5%BB%BA%20VSFTP/</url>
    <content><![CDATA[<h3 id="CentOS7-搭建-VSFTP"><a href="#CentOS7-搭建-VSFTP" class="headerlink" title="CentOS7 搭建 VSFTP"></a>CentOS7 搭建 VSFTP</h3><h4 id="1-1-安装-vsftpd"><a href="#1-1-安装-vsftpd" class="headerlink" title="1.1 安装 vsftpd"></a>1.1 安装 vsftpd</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：</p>
</blockquote>
<ul>
<li>/etc/vsftpd/vsftpd.conf 是核心配置文件。</li>
<li>/etc/vsftpd/ftpusers 是黑名单文件，此文件里的用户不允许访问 FTP 服务器。</li>
<li>/etc/vsftpd/user_list 是白名单文件，是允许访问 FTP 服务器的用户列表</li>
</ul>
<h4 id="1-2-运行以下命令设置开机自启动。"><a href="#1-2-运行以下命令设置开机自启动。" class="headerlink" title="1.2 运行以下命令设置开机自启动。"></a>1.2 运行以下命令设置开机自启动。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure>

<h4 id="1-3-运行以下命令启动-FTP-服务。"><a href="#1-3-运行以下命令启动-FTP-服务。" class="headerlink" title="1.3 运行以下命令启动 FTP 服务。"></a>1.3 运行以下命令启动 FTP 服务。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure>

<h4 id="1-4-运行以下命令查看-FTP-服务端口。"><a href="#1-4-运行以下命令查看-FTP-服务端口。" class="headerlink" title="1.4 运行以下命令查看 FTP 服务端口。"></a>1.4 运行以下命令查看 FTP 服务端口。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -antup | grep ftp</span><br></pre></td></tr></table></figure>

<h4 id="2-1-配置-vsftpd"><a href="#2-1-配置-vsftpd" class="headerlink" title="2.1 配置 vsftpd"></a>2.1 配置 vsftpd</h4><blockquote>
<p>vsftpd 安装后默认开启了匿名 FTP 的功能，使用匿名FTP，用户无需输入用户名密码即可登录 FTP服务器，但没有权限修改或上传文件。</p>
</blockquote>
<h4 id="2-2-配置匿名用户上传文件权限"><a href="#2-2-配置匿名用户上传文件权限" class="headerlink" title="2.2 配置匿名用户上传文件权限"></a>2.2 配置匿名用户上传文件权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改 vsftpd.conf 的配置文</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line"># 将写权限修改为</span><br><span class="line">write_enable=YES。</span><br><span class="line"></span><br><span class="line"># 将匿名上传权限修改为</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"></span><br><span class="line"># 更改 /var/ftp/pub 目录的权限，为 FTP 用户添加写权限，并重新加载配置文件。</span><br><span class="line">chmod o+w /var/ftp/pub/</span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure>

<h4 id="2-3-配置本地用户登录"><a href="#2-3-配置本地用户登录" class="headerlink" title="2.3 配置本地用户登录"></a>2.3 配置本地用户登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户并设置密码</span><br><span class="line">useradd ftptest</span><br><span class="line">passwd ftptest</span><br><span class="line"></span><br><span class="line"># 修改/etc/vsftpd/vsftpd.conf</span><br><span class="line"># 将是否允许匿名登录 FTP 的参数修改为</span><br><span class="line">anonymous enable=NO</span><br><span class="line"></span><br><span class="line"># 将是否允许本地用户登录 FTP 的参数修改为</span><br><span class="line">local_enable=YES</span><br></pre></td></tr></table></figure>
<h4 id="2-4-设置安全组"><a href="#2-4-设置安全组" class="headerlink" title="2.4 设置安全组"></a>2.4 设置安全组</h4><blockquote>
<p>搭建好 FTP 站点后，您需要在实例的安全组的入方向添加一条放行 FTP 端口的规则。</p>
</blockquote>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="1-1-vsftp-读取目录列表失败"><a href="#1-1-vsftp-读取目录列表失败" class="headerlink" title="1.1 vsftp 读取目录列表失败"></a>1.1 vsftp 读取目录列表失败</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态:	正在连接 118.22.6.11:21...</span><br><span class="line">状态:	连接建立，等待欢迎消息...</span><br><span class="line">状态:	已登录</span><br><span class="line">状态:	读取目录列表...</span><br><span class="line">命令:	PWD</span><br><span class="line">响应:	257 &quot;/&quot;</span><br><span class="line">命令:	TYPE I</span><br><span class="line">响应:	200 Switching to Binary mode.</span><br><span class="line">命令:	PASV</span><br><span class="line">响应:	227 Entering Passive Mode (118,22,6,11,95,109).</span><br><span class="line">命令:	LIST</span><br><span class="line">错误:	20 秒后无活动，连接超时</span><br><span class="line">错误:	读取目录列表失败</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开放20、21端口</span><br><span class="line">firewall-cmd --zone=public --add-port=20/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=21/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"># 关闭selinux：</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># FTP客户端设置传输模式为主动模式。</span><br></pre></td></tr></table></figure>

<h4 id="1-2-指定挂载点"><a href="#1-2-指定挂载点" class="headerlink" title="1.2 指定挂载点"></a>1.2 指定挂载点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改/etc/vsftpd.conf</span><br><span class="line"># 添加一行 </span><br><span class="line">local_root=/data</span><br><span class="line"># 假设硬盘挂载点是/data。这样的话，使用普通用户登录的话，ftp的默认目录不再是/home/xxx/ ,而是/data</span><br></pre></td></tr></table></figure>

<h4 id="1-3-PASV问题"><a href="#1-3-PASV问题" class="headerlink" title="1.3 PASV问题"></a>1.3 PASV问题</h4><blockquote>
<p>解决：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vsftpd.conf加上</span><br><span class="line">pasv_enable=NO</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 网络配置</title>
    <url>/2020/10/01/Centos%20%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="Centos-网络配制（静态）"><a href="#Centos-网络配制（静态）" class="headerlink" title="Centos 网络配制（静态）"></a>Centos 网络配制（静态）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line"></span><br><span class="line"># 动态IP</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO=&quot;dhcp&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">PEERDNS=&quot;yes&quot;</span><br><span class="line">PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_PEERDNS=&quot;yes&quot;</span><br><span class="line">IPV6_PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;enp0s3&quot;</span><br><span class="line">UUID=&quot;9999b8c4-07f0-4701-9b04-650019ce77cf&quot;</span><br><span class="line">DEVICE=&quot;enp0s3&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line"># 静态IP</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">PEERDNS=&quot;yes&quot;</span><br><span class="line">PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_PEERDNS=&quot;yes&quot;</span><br><span class="line">IPV6_PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_PRIVACY=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;enp0s3&quot;</span><br><span class="line">UUID=&quot;9999b8c4-07f0-4701-9b04-650019ce77cf&quot;</span><br><span class="line">DEVICE=&quot;enp0s3&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line">IPADDR=&quot;192.168.31.210&quot;</span><br><span class="line">PREFIX=&quot;24&quot; #子网掩码</span><br><span class="line">#NETMASK=255.255.255.0 #配置子网掩码</span><br><span class="line">NETWORK=192.168.31.0 #配置网络地址</span><br><span class="line">GATEWAY=&quot;192.168.31.1&quot; #网关地址</span><br><span class="line">DNS1=&quot;192.168.31.1&quot;</span><br><span class="line">DNS2=&quot;8.8.8.8&quot;</span><br><span class="line"></span><br><span class="line"># 简化静态IP</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">NAME=&quot;enp0s3&quot;</span><br><span class="line">DEVICE=&quot;enp0s3&quot;</span><br><span class="line">UUID=&quot;9999b8c4-07f0-4701-9b04-650019ce77cf&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.31.210&quot;</span><br><span class="line">PREFIX=&quot;24&quot; #子网掩码</span><br><span class="line">#NETMASK=255.255.255.0 #配置子网掩码</span><br><span class="line">NETWORK=192.168.31.0 #配置网络地址</span><br><span class="line">GATEWAY=&quot;192.168.31.1&quot; #网关地址</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 修改：</span></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用DNS</span></span><br><span class="line">114.114.114.114</span><br><span class="line">114.114.115.115</span><br><span class="line">223.5.5.5 <span class="comment">#阿里</span></span><br><span class="line">223.6.6.6 <span class="comment">#阿里</span></span><br><span class="line">180.76.76.76 <span class="comment">#百度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7部署Django项目（Python3）</title>
    <url>/2021/04/01/Centos7%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE%EF%BC%88Python3%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Centos7-部署Django项目（Python3-5）"><a href="#Centos7-部署Django项目（Python3-5）" class="headerlink" title="Centos7 部署Django项目（Python3.5）"></a>Centos7 部署Django项目（Python3.5）</h3><h4 id="1、python安装"><a href="#1、python安装" class="headerlink" title="1、python安装"></a>1、python安装</h4><ul>
<li><p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y <span class="string">&quot;Development tools&quot;</span></span><br><span class="line">yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载python(Python-3.5.4.tar.xz)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.python.org/downloads/source/</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -d Python-3.5.4.tar.xz</span><br><span class="line">tar -xvf Python-3.5.4.tar</span><br><span class="line"><span class="built_in">chown</span> -R root.root Python-3.5.4</span><br><span class="line"><span class="comment"># 配置、编译、安装</span></span><br><span class="line"><span class="built_in">cd</span> Python-3.5.4</span><br><span class="line">./configure </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改python软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/usr/bin/目录下的python文件备份后删除，一定要删！不删会报错</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/python /usr/bin/python.bak  </span><br><span class="line"><span class="built_in">ln</span> –s /usr/local/bin/python3 /usr/bin/python </span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：yum 安装报错 File &quot;/usr/bin/yum&quot;, line 30 except KeyboardInterrupt, e:因为yum包使用python2*等开发，修该为环境修改python3之后有问题，解决：</span></span><br><span class="line"><span class="comment"># 修改文件/usr/bin/yum、/usr/libexec/urlgrabber-ext-down头中相应python为#!/usr/bin/python2.7</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2、项目部署"><a href="#2、项目部署" class="headerlink" title="2、项目部署"></a>2、项目部署</h4><ul>
<li><p>安装setuptool：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install setuptool</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zvxf pip-9.0.1.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> pip-9.0.1</span><br><span class="line">python setup.py install </span><br></pre></td></tr></table></figure>
</li>
<li><p>安装django</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测：</span></span><br><span class="line"><span class="comment"># python  </span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; import django  </span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; django.get_version() </span></span><br><span class="line"><span class="comment"># 能获取到django版本信息则成功。</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="centos7-apache-httpd安装和配置django项目"><a href="#centos7-apache-httpd安装和配置django项目" class="headerlink" title="centos7 apache httpd安装和配置django项目"></a>centos7 apache httpd安装和配置django项目</h3><h4 id="1、httpd服务"><a href="#1、httpd服务" class="headerlink" title="1、httpd服务"></a>1、httpd服务</h4><ul>
<li><p>安装</p>
<blockquote>
<p>apache在centos7中是Apache HTTP server，httpd的解释就是Apache HTTP Server。要安装apache就是要安装httpd。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install httpd</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置httpd服务开机启动:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sbin/chkconfig httpd on</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动httpd服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/sbin/service httpd start</span><br><span class="line"><span class="comment"># 访问IP，测试httpd是否安装成功。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<blockquote>
<p>httpd默认的配置文件目录为 /etc/httpd/</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc/httpd/</span><br><span class="line"><span class="comment"># conf  conf.d  conf.modules.d  logs  modules  run</span></span><br><span class="line"><span class="comment"># 主配置文件是/etc/httpd/conf/httpd.conf。</span></span><br><span class="line"><span class="comment"># 配置存储在的/etc/httpd/conf.d/目录。</span></span><br></pre></td></tr></table></figure></li>
<li><p>*主文件配置**</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器根目录</span></span><br><span class="line">ServerRoot <span class="string">&quot;/etc/httpd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">Listen 80</span><br><span class="line"></span><br><span class="line"><span class="comment">#域名+端口来标识服务器，没有域名用ip也可以</span></span><br><span class="line"><span class="comment">#ServerName www.example.com:80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不许访问根目录</span></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride none</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文档目录</span></span><br><span class="line">DocumentRoot <span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 /var/www目录访问限制</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/var/www&quot;</span>&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    <span class="comment"># Allow open access:</span></span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对/var/www/html目录访问限制</span></span><br><span class="line">&lt;Directory <span class="string">&quot;/var/www/html&quot;</span>&gt;</span><br><span class="line">   Options Indexes FollowSymLinks</span><br><span class="line">   AllowOverride None</span><br><span class="line">   Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认编码</span></span><br><span class="line">AddDefaultCharset UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment">#EnableMMAP off</span></span><br><span class="line">EnableSendfile on</span><br><span class="line"></span><br><span class="line"><span class="comment"># include进来其它配置文件</span></span><br><span class="line"></span><br><span class="line">IncludeOptional conf.d/*.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>下载配置mod_wsgi</strong></p>
<blockquote>
<p>安装mod_wsgi前先进行apache的apxs扩展，http-devel 是为了apxs,yum后可以whereis apxs去寻找他，然后后边编译使用。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y httpd-devel</span><br></pre></td></tr></table></figure>

<p><strong>安装mod_wsgi</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mod_wsgi</span><br></pre></td></tr></table></figure>

<p><strong>在httpd.conf中增加下面配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LoadModule  wsgi_module modules/mod_wsgi.so <span class="comment"># 该配置用来连接django.wsgi，使工程被apache加载。</span></span><br></pre></td></tr></table></figure>

<h4 id="配置django-wsgi"><a href="#配置django-wsgi" class="headerlink" title="配置django wsgi"></a>配置django wsgi</h4><blockquote>
<p>在项目目录下新建wsgi，里面新建django.wsgi，内容如下:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> django.core.handlers.wsgi</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add this file path to sys.path in order to import settings</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(os.path.dirname(os.path.realpath(__file__)), <span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>] = <span class="string">&#x27;cloudcenter.settings&#x27;</span></span><br><span class="line"></span><br><span class="line">sys.stdout = sys.stderr</span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">application = django.core.handlers.wsgi.WSGIHandler()</span><br></pre></td></tr></table></figure>

<ul>
<li>配置wsgi时，<br>必须配置项目路径到系统路径中,因为要通过项目路径找到settings.py配置文件。也就是<code>sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), &#39;..&#39;))</code>。</li>
<li>DJANGO_SETTINGS_MODULE必须指向项目的settings.py文件。</li>
<li>修改了wsgi的配置后必须重启httpd服务。</li>
</ul>
<h4 id="配置django项目虚拟主机"><a href="#配置django项目虚拟主机" class="headerlink" title="配置django项目虚拟主机"></a>配置django项目虚拟主机</h4><blockquote>
<p>在/etc/httpd/conf.d中添加配置文件cloudcenterproject.conf，内容如下</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line"></span><br><span class="line">WSGIScriptAlias / /opt/cloudcenter/wsgi/django.wsgi</span><br><span class="line">Alias /static/ /opt/cloudcenter/</span><br><span class="line"></span><br><span class="line">ServerName 192.168.1.131</span><br><span class="line"><span class="comment">#ServerName example.com</span></span><br><span class="line"><span class="comment">#ServerAlias www.example.com</span></span><br><span class="line"></span><br><span class="line">&lt;Directory /opt/cloudcenter&gt;</span><br><span class="line">    Options Indexes  FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory /opt/cloudcenter&gt;</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">ErrorLog   /etc/httpd/logs/cloudcenterproject.error.log</span><br><span class="line">LogLevel warn</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中 WSGIScriptAlias 直接告诉apache，这个虚拟主机中，请求/就交给WSGI处理，也就是项目中配置的django.wsgi会指明。</li>
<li>Alias 说明访问/static/直接从DocumentRoot中获取，而无需经过WSGI处理。<br>现在就可以通过apache服务器配置的IP访问django项目了。</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Codova 插件开发</title>
    <url>/2018/02/02/Codova%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>加载html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loadUrl(&quot;file:///android_asset/www/html/index.html&quot;);</span><br></pre></td></tr></table></figure>

<p>1、移动开发难题<br>操作系统种类繁多，IOS，Andorid，WP等<br>开发难度大，架构，语言等<br>发布周期</p>
<p>2、移动开发模式<br>原生模式（Native）<br>混合模式（HyBird）<br>PhoneGap，Cordova<br>WebApp （手机浏览器）</p>
<p>3、技术选型<br>Cordova+Html5</p>
<p>4、开发环境准备<br>安装Node.js<br>安装Cordova<br>npm install –g cordova<br>准备开发工具<br>Eclipse(ADT),AndordStudio</p>
<p>5、创建项目<br>cordova create helloword com.icinfo.andorid.myapp HelloWorld<br>进入工程目录<br>添加平台支持<br>Cordova platforms add android<br>添加插件支持<br>cordova plugin add cordova-plugin-device<br>cordova plugin add cordova-plugin-console</p>
<p>6、导入工程开发工具<br>选择目录platforms 下的android文件夹</p>
<p>7、核心JAVA类讲解<br>CordovaActivity：Cordova Activity入口，已实现PluginManager、WebView的相关初始化工作, 只需继承CordovaActivity实现自己的业务需求。<br>PluginManager： 插件管理<br>ExposedJsApi ：javascript调用Native<br>NativeToJsMessageQueue：Native调用javascript，主要包括三种方式：loadUrl 、 轮询、反射WebViewCore执行js</p>
<p>8、Cordova插件开发</p>
<p>插件存放目录：/plugins<br>插件基类：org.apache.cordova.CordovaPlugin</p>
<p>新建插件目录，ExtraInfo（任意位置都可以）</p>
<p>编写插件类com.icinfo.plugin.extrainfo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.plugin.extrainfo;</span><br><span class="line"></span><br><span class="line">import org.apache.cordova.CallbackContext;</span><br><span class="line">import org.apache.cordova.CordovaPlugin;</span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONException;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.Intent;</span><br><span class="line"></span><br><span class="line">public class ExtraInfoPlugin extends CordovaPlugin &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public boolean execute(String action, JSONArray args,</span><br><span class="line">			CallbackContext callbackContext) throws JSONException &#123;</span><br><span class="line">		</span><br><span class="line">		Activity activity = this.cordova.getActivity();</span><br><span class="line">		if(action.equals(&quot;getExtra&quot;))&#123;</span><br><span class="line">            Intent i = activity.getIntent();</span><br><span class="line">            if (i.hasExtra(Intent.EXTRA_TEXT)) &#123;</span><br><span class="line">                callbackContext.success(i.getStringExtra(Intent.EXTRA_TEXT));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                callbackContext.error(&quot;ff&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExtraInfo目录下新建plugin.xml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;plugin id=&quot;com.icinfo.plugin.extrainfo&quot; version=&quot;1.0.0&quot;</span><br><span class="line">    xmlns=&quot;http://apache.org/cordova/ns/plugins/1.0&quot;&gt;</span><br><span class="line">    &lt;name&gt;ExtraInfo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Cordova Test Plugin&lt;/description&gt;</span><br><span class="line">    &lt;license&gt;Apache 2.0&lt;/license&gt;</span><br><span class="line">    &lt;keywords&gt;&lt;/keywords&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;engines&gt;</span><br><span class="line">        &lt;engine name=&quot;cordova-android&quot; version=&quot;&gt;=4.0.0&quot; /&gt;</span><br><span class="line">    &lt;/engines&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;platform name=&quot;android&quot;&gt;</span><br><span class="line">        &lt;config-file parent=&quot;/*&quot; target=&quot;res/xml/config.xml&quot;&gt;</span><br><span class="line">            &lt;feature name=&quot;ExtraInfo&quot;&gt;</span><br><span class="line">                &lt;param name=&quot;android-package&quot; value=&quot;com.icinfo.plugin.extrainfo.ExtraInfoPlugin&quot; /&gt;</span><br><span class="line">            &lt;/feature&gt;</span><br><span class="line">        &lt;/config-file&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;source-file src=&quot;src/android/ExtraInfoPlugin.java&quot; target-dir=&quot;src/com/icinfo/plugin/extrainfo&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;js-module name=&quot;ExtraInfo&quot; src=&quot;www/ExtraInfo.js&quot;&gt;</span><br><span class="line">            &lt;clobbers target=&quot;ExtraInfo&quot; /&gt;</span><br><span class="line">        &lt;/js-module&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;/platform&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建www目录<br>编写ExtraInfo.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var exec = require(&#x27;cordova/exec&#x27;);</span><br><span class="line"> </span><br><span class="line">exports.getExtra = function(success, error) &#123;</span><br><span class="line">    exec(success, error, &quot;ExtraInfo&quot;, &quot;getExtra&quot;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安装插件<br>cordova plugin add ExtraInfo</p>
<p>查看已安装插件：<br>cordova plugin list</p>
<p>移除插件：<br>cordova plugin remove com.icinfo.plugin.extrainfo</p>
<p>插件使用</p>
<p>在index.html中调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">    document.addEventListener(&#x27;deviceready&#x27;, function() &#123;</span><br><span class="line">        var extraInfo = cordova.require(&#x27;com.icinfo.plugin.extraInfo.ExtraInfo&#x27;);</span><br><span class="line"> </span><br><span class="line">        extraInfo.getExtra(function(message) &#123;</span><br><span class="line">             alert(message);</span><br><span class="line">        &#125;, function(message) &#123;</span><br><span class="line">             alert(message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Codova</tag>
      </tags>
  </entry>
  <entry>
    <title>Codova 插件开发2</title>
    <url>/2018/02/02/Codova%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%912/</url>
    <content><![CDATA[<p>本例要创建一个Native插件，它向Cordova容器公开了一些native电话API.参考Android SDK文档找到一些简单有趣的可供公开的接口。<br>cordova.exec方法声明如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova.exec(successCallback, errorCallback, &#x27;Pluginobject&#x27;, &#x27;pluginMethod&#x27;, [arguments]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>successCallback和errorCallback参数是插件方法调用成功或失败时执行的函数名。<br>‘Pluginobject’参数是一个字符串用于识别包括被调用方法的native对象。<br>‘pluginMethod’参数是一个字符串，用来识别要执行的方法。<br>‘arguments’是一个可选的参数数组，用来传递给pluginMethod。</p>
</blockquote>
<p>步骤：<br>1、定义用于Android插件的Java代码（CarrierPlugin.java）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.plugin.carrier;</span><br><span class="line"> </span><br><span class="line">import org.apache.cordova.CallbackContext;</span><br><span class="line">import org.apache.cordova.CordovaInterface;</span><br><span class="line">import org.apache.cordova.CordovaPlugin;</span><br><span class="line">import org.apache.cordova.CordovaWebView;</span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONException;</span><br><span class="line"> </span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.telephony.TelephonyManager;</span><br><span class="line"> </span><br><span class="line">public class CarrierPlugin extends CordovaPlugin &#123;</span><br><span class="line"> </span><br><span class="line">    public static final String ACTION_GET_CARRIER_NAME = &quot;getCarrierName&quot;;</span><br><span class="line">    public static final String ACTION_GET_COUNTRY_CODE = &quot;getCountryCode&quot;;</span><br><span class="line"> </span><br><span class="line">    public TelephonyManager tm;</span><br><span class="line"> </span><br><span class="line">    public void initialize(CordovaInterface cordova, CordovaWebView webView) &#123;</span><br><span class="line">        super.initialize(cordova, webView);</span><br><span class="line"> </span><br><span class="line">        Context context = this.cordova.getActivity().getApplicationContext();</span><br><span class="line">        tm = (TelephonyManager) context</span><br><span class="line">                .getSystemService(Context.TELEPHONY_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(String action, JSONArray args,</span><br><span class="line">            CallbackContext callbackContext) throws JSONException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (ACTION_GET_CARRIER_NAME.equals(action)) &#123;</span><br><span class="line">                callbackContext.success(tm.getSimOperatorName());</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (ACTION_GET_COUNTRY_CODE.equals(action)) &#123;</span><br><span class="line">                    callbackContext.success(tm.getSimCountryIso());</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            callbackContext.error(&quot;Invalid Action&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.err.println(&quot;Exception: &quot; + e.getMessage());</span><br><span class="line">            callbackContext.error(e.getMessage());</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：这个类定义了两个常量ACTION_GET_CARRIER和ACTION_GET_COUNTRY_CODE，用来确定Cordova应用调用哪个方法。这样做在以后更改方法名时更容易。<br>接下来类定义了一个tm对象，它首先调用了super.initialize，这个方法让cordova对象适当的初始化。没有这个方法Java代码就不知道Cordova容器。接下来代码获得了一个当前应用上下文的句柄，用它把tm对象传递给由Telephony API公开的服务。<br> 接下来Java代码重载了exec方法并实现了直接处理来自Cordova应用的调用的代码。在这里实现了一个单独的操作，它确定了调用了哪个动作(能过比较由调用cordova.exec传递的动作名和开始定义的常触发相应的动作)。<br>如果exec方法确定请求的是getCarrierName动作，之后它调用了Android的getSimOperatorName方法，并通过调用callbackContext.success()方法把结果传回Cordova应用。如果请求的是getCountryCode动作，之后调用Android的getSimCountryIso()方法并通过callbackContext.success()方法把结果传回Cordova应用。<br>如果过程中某处失败了，代码执行callbackContext.error并把适当的错误消息或错误对象传回用来指出出了什么错。</p>
<p>2、carrier.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var cordova = require(&#x27;cordova&#x27;);</span><br><span class="line"> </span><br><span class="line">var carrier = &#123;</span><br><span class="line">    getCarrierName : function(successCallback, errorCallback) &#123;</span><br><span class="line">        cordova.exec(successCallback, errorCallback, &#x27;CarrierPlugin&#x27;, &#x27;getCarrierName&#x27;, []);</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    getCountryCode : function(successCallback, errorCallback) &#123;</span><br><span class="line">        cordova.exec(successCallback, errorCallback, &#x27;CarrierPlugin&#x27;, &#x27;getCountryCode&#x27;, []);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">module.exports = carrier; </span><br></pre></td></tr></table></figure>
<p>说明：arrier.js是插件的js接口。它开始用声明了一个cordova对象，指向加载的公开exec方法的cordova js库。接下来创建carrier对象，定义两个方法。每个方法都调用了cordova.exec并传入了cordova对象必要的函数名、对象和方法名，用来定位正确的完成功能的native对象和方法。文件最后是module.exports赋值，让carrier对象向Cordova应用公开</p>
<p>3、plugin.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;plugin xmlns=&quot;http://apache.org/cordova/ns/plugins/1.0&quot; </span><br><span class="line">		id=&quot;com.icinfo.plugin.carrier&quot; version=&quot;1.0.0&quot;&gt;</span><br><span class="line">    &lt;name&gt;Carrier&lt;/name&gt;</span><br><span class="line">    &lt;author&gt;xiao ma&lt;/author&gt;</span><br><span class="line">    &lt;description&gt;Expose mobile carrier related values to Cordova application.&lt;/description&gt;</span><br><span class="line">    &lt;keywords&gt;carrier&lt;/keywords&gt;</span><br><span class="line">    &lt;license&gt;Apache 2.0 License&lt;/license&gt;</span><br><span class="line">    &lt;engines&gt;</span><br><span class="line">        &lt;engine name=&quot;cordova&quot; version=&quot;&gt;=4.0.0&quot; /&gt;</span><br><span class="line">    &lt;/engines&gt;</span><br><span class="line">&lt;!-- 文件中js-module元素定义了js的名字，它将在应用开始时自动加载。它定义了向Cordova公开的js接口。clobbers元素指明了js对象赋值给加载的js对象。本例中，Carrier插件通过一个carrier对象向Cordova应用公开。--&gt;</span><br><span class="line">    &lt;js-module src=&quot;www/carrier.js&quot; name=&quot;carrier&quot;&gt;</span><br><span class="line">        &lt;clobbers target=&quot;carrier&quot; /&gt;</span><br><span class="line">    &lt;/js-module&gt;</span><br><span class="line">    &lt;platform name=&quot;android&quot;&gt;</span><br><span class="line">        &lt;source-file src=&quot;src/android/CarrierPlugin.java&quot; target-dir=&quot;src/com/icinfo/plugin/carrier&quot; /&gt;</span><br><span class="line">        &lt;config-file target=&quot;res/xml/config.xml&quot; parent=&quot;/*&quot;&gt;</span><br><span class="line">            &lt;feature name=&quot;CarrierPlugin&quot;&gt;</span><br><span class="line">                    &lt;param name=&quot;android-package&quot; value=&quot;com.icinfo.plugin.carrier.CarrierPlugin&quot;/&gt;</span><br><span class="line">            &lt;/feature&gt;</span><br><span class="line">        &lt;/config-file&gt;</span><br><span class="line">        &lt;config-file target=&quot;AndroidManifest.xml&quot;&gt;</span><br><span class="line">            &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;  </span><br><span class="line">        &lt;/config-file&gt;</span><br><span class="line">    &lt;/platform&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>4、调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27; data: gap: https://ssl.gstatic.com  &#x27;unsafe-eval&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; media-src *&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width&quot;&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/index.css&quot;&gt;</span><br><span class="line">        &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">            function onBodyLoad() &#123;</span><br><span class="line">                document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            function onDeviceReady() &#123;</span><br><span class="line">                //carrier = cordova.require(&#x27;com.icinfo.plugin.carrier.carrier&#x27;);</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            function doSomething1() &#123;</span><br><span class="line">                //alert();</span><br><span class="line">                carrier.getCarrierName(onSuccess, onFailure);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            function doSomething2() &#123;</span><br><span class="line">                carrier.getCountryCode(onSuccess, onFailure);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            function onSuccess(result) &#123;</span><br><span class="line">                var resStr = &quot;Result: &quot; + result;</span><br><span class="line">                alert(resStr);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            function onFailure(err) &#123;</span><br><span class="line">                console.log(&quot;onFailure: &quot; + JSON.stringify(err));</span><br><span class="line">                alert(&quot;Failure: &quot; + err);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">            &lt;/head&gt;</span><br><span class="line">      &lt;body onload=&quot;onBodyLoad()&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Carrier Demo&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            Cordova 测试用例.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;button onclick=&quot;doSomething1();&quot;&gt;GetCarrierName&lt;/button&gt;</span><br><span class="line">        &lt;button onclick=&quot;doSomething2();&quot;&gt;GetCountryCode&lt;/button&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Codova</tag>
      </tags>
  </entry>
  <entry>
    <title>Cordova+Ionic 项目创建</title>
    <url>/2018/02/02/Cordova+Ionic%20%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p>一、创建项目步骤：</p>
<ol>
<li><p>下载并安装Node.js、JDK(Android Studio、Eclipse运行环境)、Android SDK（android编译）</p>
</li>
<li><p>安装cordova、ionic等（以管理员身份运行命令行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 运行：npm install -g cordova</span><br><span class="line">b. 运行：npm install -g ionic </span><br><span class="line">或者运行：npm install -g cordova ionic</span><br><span class="line">注意：由于GFW，很多插件下载不下来，可以使用淘宝镜像来解决。</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br><span class="line">cnpm install -g cordova ionic</span><br><span class="line">检查是否安装成功</span><br><span class="line">运行 ionic -v 和cordova -v</span><br><span class="line">若能看到版本信息基本成功</span><br></pre></td></tr></table></figure></li>
<li><p>创建项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a. 进入要创建项目的路径</span><br><span class="line">b. 创建一个名为myApp的还有tabs的项目（ionic start &lt;project-name&gt; &lt;optional-template&gt;） 可选模板为sidemenu 侧滑、tabs 底部tab切换、blank 空白）:</span><br><span class="line">运行：ionic cordova start myApp tabs</span><br><span class="line">或者指定包：ionic cordova start -a MyApp -i com.icinfo.myapp myApp tabs</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">-a 应用名称(MyApp)</span><br><span class="line">-i 包名(com.icinfo.myapp) </span><br><span class="line">项目名（myApp）</span><br><span class="line">ionic server</span><br><span class="line"></span><br><span class="line">c. 添加Android平台</span><br><span class="line"></span><br><span class="line">进入项目文件夹myApp,</span><br><span class="line">运行：ionic cordova platform add android 或者ionic platform add android@版本号</span><br></pre></td></tr></table></figure></li>
<li><p>生成并运行APK</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">运行：</span><br><span class="line">ionic cordova build android</span><br><span class="line">ionic cordova emulate android</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">ionic cordova run android</span><br><span class="line"></span><br><span class="line">另外：</span><br><span class="line">a. 更新cordova及ionic包：</span><br><span class="line">npm update -g cordova ionic</span><br><span class="line">b. 更新已建ionic项目中的js类库，命令行中先进入项目所在目录，然后运行：</span><br><span class="line">ionic lib update </span><br><span class="line">c. 展现ionic项目结果（显示在iOS和Android上的样式）：</span><br><span class="line">ionic serve --lab </span><br><span class="line">d. 查看ionic版本：</span><br><span class="line">ionic -v </span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>二、插件开发与应用</p>
<ol>
<li>动态创建与显示列表</li>
</ol>
<blockquote>
<p>① 在www/js/ 创建了一个 controllers.js 文件和定义了一个叫做 ToDoListCtrl 新的控制器。</p>
</blockquote>
<p>controllers.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">angular.module(&#x27;starter.controllers&#x27;, [])</span><br><span class="line">    .controller(&#x27;ToDoListCtrl&#x27;, function ($scope) &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面的代码中，定义了一个新的模块 starter.controller 和一个新的控制器 ToDoListCtrl 。</p>
</blockquote>
<blockquote>
<p>② 将这个模块添加到已经存在的应用中。打开 www/js/app.js 然后将这个模块添加进去。添加了新的 starter.controller 模块之后的app.js代码：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">angular.module(&#x27;starter&#x27;, [&#x27;ionic&#x27;,&#x27;starter.controllers&#x27;])</span><br><span class="line">.run(function($ionicPlatform) &#123;</span><br><span class="line">  $ionicPlatform.ready(function() &#123;</span><br><span class="line">    if(window.cordova &amp;&amp; window.cordova.plugins.Keyboard) &#123;</span><br><span class="line">      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);</span><br><span class="line">      cordova.plugins.Keyboard.disableScroll(true);</span><br><span class="line">    &#125;</span><br><span class="line">    if(window.StatusBar) &#123;</span><br><span class="line">      StatusBar.styleDefault();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>③ 定义一个 $scope 来支撑任务列表项目， ToDoListCtrl 声明了一个新的 $scope 变量 toDoListItems，此时controllers.js如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建一个控制器</span><br><span class="line">angular.module(&#x27;starter.controllers&#x27;, [])</span><br><span class="line">    .controller(&#x27;ToDoListCtrl&#x27;, function ($scope) &#123;</span><br><span class="line">    $scope.toDoListItems = [&#123;</span><br><span class="line">        task: &#x27;任务一&#x27;,</span><br><span class="line">        status: &#x27;not done&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        task: &#x27;任务二&#x27;,</span><br><span class="line">        status: &#x27;not done&#x27;</span><br><span class="line">      &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>④ 在 index.html 中包含 app.js和controllers.js，将上述的控制器逻辑添加到我们 index.html 里的 ion-list 中，index.html代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ion-list ng-controller=&quot;ToDoListCtrl&quot;&gt;</span><br><span class="line">  &lt;ion-item ng-repeat=&quot;item in toDoListItems&quot;&gt;</span><br><span class="line">    &#123;&#123;item.task&#125;&#125;</span><br><span class="line">  &lt;/ion-item&gt;</span><br><span class="line">&lt;/ion-list&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述代码中，使用 ng-controller 指令来将控制器添加到 ion-list 中。使用 ng-repeat 指令在 $scope 的变量中反复定义了 toDoListItems 将它展示在列表中。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;link href=&quot;lib/ionic/css/ionic.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- IF using Sass (run gulp sass first), then uncomment below and remove the CSS includes above</span><br><span class="line">    &lt;link href=&quot;css/ionic.app.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- ionic/angularjs js --&gt;</span><br><span class="line">    &lt;script src=&quot;lib/ionic/js/ionic.bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- cordova script (this will be a 404 during development) --&gt;</span><br><span class="line">    &lt;script src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- your app&#x27;s js --&gt;</span><br><span class="line">    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/controllers.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body ng-app=&quot;starter&quot; class=&quot;platform-android platform-cordova platform-webview&quot;&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;ion-pane&gt;</span><br><span class="line">        &lt;ion-header-bar align-title=&quot;left&quot; class=&quot;bar-positive&quot;&gt;</span><br><span class="line">          &lt;h1 class=&quot;title&quot;&gt;任务列表&lt;/h1&gt;</span><br><span class="line">          &lt;div class=&quot;buttons&quot;&gt;</span><br><span class="line">            &lt;button class=&quot;button&quot; ng-click=&quot;openModal()&quot;&gt;Add&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/ion-header-bar&gt;</span><br><span class="line">      &lt;ion-content&gt;</span><br><span class="line">        &lt;!--&lt;ion-list&gt;</span><br><span class="line">          &lt;ion-item&gt;任务1&lt;/ion-item&gt;</span><br><span class="line">          &lt;ion-item&gt;任务2&lt;/ion-item&gt;</span><br><span class="line">        &lt;/ion-list&gt;--&gt;</span><br><span class="line">        &lt;ion-list ng-controller=&quot;ToDoListCtrl&quot;&gt;</span><br><span class="line">          &lt;ion-item ng-repeat=&quot;item in toDoListItems&quot;&gt;</span><br><span class="line">            &#123;&#123;item.task&#125;&#125;</span><br><span class="line">          &lt;/ion-item&gt;</span><br><span class="line">        &lt;/ion-list&gt;</span><br><span class="line">      &lt;/ion-content&gt;</span><br><span class="line">    &lt;/ion-pane&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>插件<blockquote>
<p>插件编写与cordova相同。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装：`ionic plugin add 插件路径`</span><br><span class="line">查看已安装插件：`ionic plugin list`</span><br><span class="line">卸载插件：`ionic plugin remove 插件id`</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Cordova-常用命令"><a href="#Cordova-常用命令" class="headerlink" title="Cordova 常用命令"></a>Cordova 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 cordova（需nodejs）：</span></span><br><span class="line">npm install -g cordova</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建应用程序</span></span><br><span class="line">cordova create 项目名 应用ID 应用名称</span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">cordova create hello com.example.hello HelloWorld</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加平台</span></span><br><span class="line"><span class="comment"># Android平台：</span></span><br><span class="line">cordova platform add android</span><br><span class="line"><span class="comment"># IOS平台：</span></span><br><span class="line">cordova platform add ios</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看平台：</span></span><br><span class="line">cordova platfrom list</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 移除Android平台支持</span></span><br><span class="line">cordova platform <span class="built_in">rm</span> android</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编译应用程序：</span></span><br><span class="line">cordova build</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">cordova build android  <span class="comment"># 只针对Andorid平台编译</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># build命令相当于以下两个命令：</span></span><br><span class="line">cordova prepare android</span><br><span class="line">cordova compile android</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动模拟器：</span></span><br><span class="line">cordova <span class="built_in">emulate</span> android</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加插件：</span></span><br><span class="line"><span class="comment"># 可以用CLI搜索可用的插件：</span></span><br><span class="line">cordova plugin search bar code</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装插件：</span></span><br><span class="line">cordova plugin add cordova-plugin-device //设备API</span><br><span class="line">cordova plugin add cordova-plugin-network-information  //网络（事件）</span><br><span class="line">cordova plugin add cordova-plugin-battery-status      //电池（事件）</span><br><span class="line">cordova plugin add cordova-plugin-device-motion     //加速器</span><br><span class="line">cordova plugin add cordova-plugin-device-orientation     //罗盘</span><br><span class="line">cordova plugin add cordova-plugin-geolocation         //定位</span><br><span class="line">cordova plugin add cordova-plugin-camera                 //摄像头</span><br><span class="line">cordova plugin add cordova-plugin-media-capture     //媒体文件处理</span><br><span class="line">cordova plugin add cordova-plugin-media                   //媒体文件处理</span><br><span class="line">cordova plugin add cordova-plugin-file                        //文件访问</span><br><span class="line">cordova plugin add cordova-plugin-file-transfer          //文件传输</span><br><span class="line">cordova plugin add cordova-plugin-dialogs                 //对话框</span><br><span class="line">cordova plugin add cordova-plugin-vibration              //震动</span><br><span class="line">cordova plugin add cordova-plugin-contacts               //联系人</span><br><span class="line">cordova plugin add cordova-plugin-globalization       //全球化</span><br><span class="line">cordova plugin add cordova-plugin-splashscreen       //闪屏</span><br><span class="line">cordova plugin add cordova-plugin-inappbrowser   //打开新的浏览器窗口</span><br><span class="line">cordova plugin add cordova-plugin-console                //调试控制台</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以用以下命令查看所有已经安装的插件</span></span><br><span class="line">cordova plugin <span class="built_in">ls</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用以下命令删除插件：</span></span><br><span class="line">cordova plugin <span class="built_in">rm</span> org.apache.cordova.console   </span><br><span class="line"><span class="comment"># 或者通过地址来添加插件：</span></span><br><span class="line">cordova plugin add https://github.com/apache/cordova-plugin-console.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新cordova：</span></span><br><span class="line">npm update -g cordova</span><br><span class="line"> </span><br><span class="line"><span class="comment"># cordova更新完成后，还需要更新项目：</span></span><br><span class="line">cordova platform update android</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Codova</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>Cordova插件总结</title>
    <url>/2018/02/02/Cordova%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/z4QkslqCYMVRho7.png"></p>
<p>1、cordova-plugin-splashscreen插件<br>\assets\www\cordova_plugins.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;file&quot;: &quot;plugins/org.apache.cordova.splashscreen/www/splashscreen.js&quot;,</span><br><span class="line">    &quot;id&quot;: &quot;org.apache.cordova.splashscreen.SplashScreen&quot;,</span><br><span class="line">    &quot;clobbers&quot;: [</span><br><span class="line">        &quot;navigator.splashscreen&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>\android\assets\www\plugins\org.apache.cordova.splashscreen\www\splashscreen.js<br>\Android\res\xml\config.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;preference name=&quot;Splashscreen&quot; value=&quot;screen&quot; /&gt;</span><br><span class="line">&lt;preference name=&quot;SplashScreenDelay&quot; value=&quot;10000&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>screen代表引用的图片，格式为png，存放到res/drawable和相应的文件夹下<br>splashscreendelay表示显示多长时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;feature name=&quot;SplashScreen&quot;&gt;</span><br><span class="line">    &lt;param name=&quot;android-package&quot; value=&quot;org.apache.cordova.splashscreen.SplashScreen&quot; /&gt;</span><br><span class="line">&lt;/feature&gt;</span><br></pre></td></tr></table></figure>
<p>\android\src\org\apache\cordova\splashscreen\SplashScreen.java<br>此时phonegap可以自动调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">navigator.splashscreen.show()</span><br></pre></td></tr></table></figure>
<p>但是当应用加载完毕后，启动画面还会顽强的坚持完配置的显示时间，需要在首页的页面加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);</span><br><span class="line">function onDeviceReady() &#123;</span><br><span class="line">    navigator.splashscreen.hide();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>确保应用启动完毕后，将启动画面隐藏</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Codova</tag>
      </tags>
  </entry>
  <entry>
    <title>DOS命令</title>
    <url>/2020/06/02/DOS%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li><p>定时关机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at 22:00 shutdown -s</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消关机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1、IP地址查出对应的MAC："><a href="#1、IP地址查出对应的MAC：" class="headerlink" title="1、IP地址查出对应的MAC："></a>1、IP地址查出对应的MAC：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd命令：nbtstat -a IP</span><br></pre></td></tr></table></figure>

<h5 id="2、①在命令窗口ping下需要查看的IP地址，看是否连通"><a href="#2、①在命令窗口ping下需要查看的IP地址，看是否连通" class="headerlink" title="2、①在命令窗口ping下需要查看的IP地址，看是否连通"></a>2、①在命令窗口ping下需要查看的IP地址，看是否连通</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">②输入 arp -a命令，回车，查询到之前ping的IP的mac地址</span><br></pre></td></tr></table></figure>

<h5 id="3、判断某端口是否被使用"><a href="#3、判断某端口是否被使用" class="headerlink" title="3、判断某端口是否被使用"></a>3、判断某端口是否被使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet IP port</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -no ：查看所有端口，带端口的pid</span><br><span class="line">netstat -aon|findstr &quot;9050&quot;  确定谁占用了9050端口，找到是pid=2016的进程，继续查</span><br><span class="line">tasklist|findstr &quot;2016&quot;  找到使用2016进程的应用程序</span><br><span class="line">tasklist  ：查看所有的进程，带端口的pid</span><br><span class="line">taskkill -f -pid 3824 ：强制杀死进程，f代表强制，3824是pid号，在任务管理器里也可以查看pid</span><br><span class="line"></span><br><span class="line">dir 列出当前的目录下的文件及其文件夹</span><br><span class="line">md 创建目录</span><br><span class="line">rd 删除目录</span><br><span class="line">cd 进入指定目录</span><br><span class="line">cd\ 退回到根目录</span><br><span class="line">del 删除文件</span><br><span class="line">exit 退出</span><br><span class="line">cls 清屏</span><br><span class="line">set 用于查看本机的所有环境变量的值</span><br><span class="line">set 变量名 查看具体环境变量的值</span><br><span class="line">set 变量名= 清空一个环境变量的值</span><br><span class="line">set 变量名=具体值 给指定变量指定具体的值</span><br><span class="line">set path = 新值；%path% 在原有环境变量的基础上添加新值</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Dos</tag>
      </tags>
  </entry>
  <entry>
    <title>DWR框架简单实例</title>
    <url>/2018/01/01/DWR%E6%A1%86%E6%9E%B6%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<blockquote>
<p>采用DWR（Direct Web Remoting） 框架， 它的实现是基于ajax的，可以实现无刷新效果。整理了一个最简单的DWR实用配置。包括页面，后台，配置文件源码。</p>
</blockquote>
<h4 id="1-从DWR官网下载最新版本的jar包"><a href="#1-从DWR官网下载最新版本的jar包" class="headerlink" title="1. 从DWR官网下载最新版本的jar包"></a>1. 从DWR官网下载最新版本的jar包</h4><p>地址：<a href="http://directwebremoting.org/dwr/downloads/index.html">http://directwebremoting.org/dwr/downloads/index.html</a></p>
<h4 id="2-将jar包放入WEB-INF的lib文件夹下。同时，dwr依赖于commons-logging-jar这个包，所以必须将这个jar包也放入到WEB-INF的lib文件夹下。"><a href="#2-将jar包放入WEB-INF的lib文件夹下。同时，dwr依赖于commons-logging-jar这个包，所以必须将这个jar包也放入到WEB-INF的lib文件夹下。" class="headerlink" title="2. 将jar包放入WEB-INF的lib文件夹下。同时，dwr依赖于commons-logging.jar这个包，所以必须将这个jar包也放入到WEB-INF的lib文件夹下。"></a>2. 将jar包放入WEB-INF的lib文件夹下。同时，dwr依赖于commons-logging.jar这个包，所以必须将这个jar包也放入到WEB-INF的lib文件夹下。</h4><h4 id="3-配置dwr的环境："><a href="#3-配置dwr的环境：" class="headerlink" title="3. 配置dwr的环境："></a>3. 配置dwr的环境：</h4><p><strong>a) 配置web.xml文件</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;uk.ltd.getahead.dwr.DWRServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"> </span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/dwr/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">web.xml中其他配置不影响，正常配置即可</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>b)配置dwr，配置文件dwr.xml</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE dwr PUBLIC &quot;-//GetAhead Limited//DTD Direct Web Remoting 2.0//EN&quot;</span><br><span class="line">        &quot;http://www.getahead.ltd.uk/dwr/dwr20.dtd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 关键配置 --&gt;      </span><br><span class="line">&lt;dwr&gt;</span><br><span class="line">    &lt;allow&gt;</span><br><span class="line">        &lt;create creator=&quot;new&quot; javascript=&quot;Chat&quot;&gt;</span><br><span class="line">            &lt;param name=&quot;class&quot; value=&quot;com.epri.xts.wxqyh.app.chatroom.module.Chat&quot;/&gt;</span><br><span class="line">        &lt;/create&gt;</span><br><span class="line">        &lt;convert converter=&quot;bean&quot; match=&quot;com.epri.xts.wxqyh.app.chatroom.bean.Message&quot;/&gt;</span><br><span class="line">    &lt;/allow&gt;</span><br><span class="line">&lt;/dwr&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>dwr.xml是dwr的核心配置文件，主要的标签有：<converter>、<convert>、<create>这三个标签。</p>
</blockquote>
<blockquote>
<p><create>标签是dwr中重要的标签，用来描述 java（服务器端） 与 javascript （客户端）的交互方式。其基本格式如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;allow&gt;</span><br><span class="line">  &lt;create creator=&quot;...&quot; javascript=&quot;...&quot; scope=&quot;...&quot;&gt;</span><br><span class="line">    &lt;param name=&quot;...&quot; value=&quot;...&quot;/&gt;</span><br><span class="line">    &lt;auth method=&quot;...&quot; role=&quot;...&quot;/&gt;</span><br><span class="line">    &lt;exclude method=&quot;...&quot;/&gt;</span><br><span class="line">    &lt;include method=&quot;...&quot;/&gt;</span><br><span class="line">  &lt;/create&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/allow&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中，creator和javascript是必须属性，其他可以忽略。</span><br><span class="line">creator包含有以下几个值：</span><br><span class="line">  new：Java用&quot;new&quot;关键字创造对象</span><br><span class="line">  none：它不创建对象  (v1.1+)</span><br><span class="line">  scripted：通过BSF使用脚本语言创建对象，例如BeanShell或Groovy</span><br><span class="line">  spring：通过Spring框架访问Bean</span><br><span class="line">     struts：使用Struts的FormBean  (v1.1+)</span><br><span class="line">  jsf：使用JSF的Bean  (v1.1+)</span><br><span class="line">  pageflow：访问Weblogic或Beehive的PageFlow  (v1.1+)</span><br><span class="line">     ejb3：使用EJB3 session bean  (v2.0+)</span><br><span class="line"> </span><br><span class="line">这里初学，实用java new创建对象。 </span><br></pre></td></tr></table></figure>
<h4 id="4-页面配置"><a href="#4-页面配置" class="headerlink" title="4. 页面配置"></a>4. 页面配置</h4><blockquote>
<p>页面需要引入3个JS</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/dwr/interface/Chat.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/dwr/engine.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/dwr/util.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中engine.js必须要，如果需要用到dwr提供的一些方便的工具要引用util.js ，然后是dwr自动生成的js文件，名字必须和dwr.xml中create标签的javascript属性值一样，且必须是dwr/interface开头的目录</p>
</blockquote>
<h4 id="5-javascript代码："><a href="#5-javascript代码：" class="headerlink" title="5. javascript代码："></a>5. javascript代码：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 发送消息</span><br><span class="line">function sendMessage() &#123;</span><br><span class="line">    var text = DWRUtil.getValue(&quot;message&quot;);</span><br><span class="line">    if(&quot;&quot; != text)&#123;</span><br><span class="line">        DWRUtil.setValue(&quot;message&quot;, &quot;&quot;);</span><br><span class="line">        Chat.addMessage(text, name, taskId, gotMessages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function gotMessages(messages) &#123;</span><br><span class="line">    var chatlog = &quot;&quot;;</span><br><span class="line">    for ( var data in messages) &#123;</span><br><span class="line">        chatlog = &quot;&lt;div&gt; &lt;li class=&#x27;even&#x27;&gt;&quot; + messages[data].text + &quot;&lt;/li&gt;&lt;/div</span><br><span class="line">    &#125;</span><br><span class="line">    DWRUtil.setValue(&quot;chatlog&quot;, chatlog);</span><br><span class="line">    setTimeout(&quot;queryMessage()&quot;, 2000);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function queryMessage() &#123;</span><br><span class="line">    Chat.getMessages(taskId, gotMessages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>html代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String ctxPath = request.getContextPath();</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;聊天组&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/jquery.mobile-1.4.5.min.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/add.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;../js/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../js/jquery.mobile-1.4.5.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body class=&quot;bgc&quot; onload=&quot;queryMessage()&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;div data-role=&quot;page&quot; id=&quot;pageone&quot;&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!-- 聊天内容显示区域 --&gt;</span><br><span class="line">        &lt;div data-role=&quot;content&quot; class=&quot;container&quot; role=&quot;main&quot;&gt;</span><br><span class="line">            &lt;ul class=&quot;content-reply-box mg10&quot; id=&quot;chatlog&quot;&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!-- 下方输入框 --&gt;</span><br><span class="line">        &lt;div data-position=&quot;fixed&quot; data-role=&quot;footer&quot;&gt;</span><br><span class="line">            &lt;ul class=&quot;footer&quot;&gt;</span><br><span class="line">                &lt;li class=&quot;col-xs-3&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;b_pic&quot;&gt;</span><br><span class="line">                        &lt;form action=&quot;&lt;%=request.getContextPath()%&gt;/chat&quot; method=&quot;post&quot;</span><br><span class="line">                            enctype=&quot;multipart/form-data&quot; data-ajax=&quot;false&quot; name=&quot;form&quot;</span><br><span class="line">                            id=&quot;form&quot;  target=&quot;relnews&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;hidden&quot; name=&quot;name&quot; id=&quot;name&quot; value=&quot;&quot; /&gt;</span><br><span class="line">                            &lt;input type=&quot;hidden&quot; name=&quot;taskId&quot; id=&quot;taskId&quot; value=&quot;&quot; /&gt;</span><br><span class="line">                            &lt;input type=&quot;file&quot; name=&quot;image&quot; id=&quot;image&quot; class=&quot;photo&quot; onchange=&quot;sendImage(this)&quot; /&gt;</span><br><span class="line">                        &lt;/form&gt;</span><br><span class="line">                    &lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;col-xs-6&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;message&quot;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;col-xs-4&quot;&gt;&lt;a href=&quot;&quot; data-role=&quot;button&quot;</span><br><span class="line">                    class=&quot;b_submit&quot; id=&quot;submitInfo&quot; onclick=&#x27;sendMessage();&#x27;&gt;发送&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 隐藏域作为表单提交后页面不跳转使用 --&gt;</span><br><span class="line">    &lt;iframe align=&quot;center&quot; frameborder=&quot;0&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot;</span><br><span class="line">        name=&quot;relnews&quot; id=&quot;hiddenIframe&quot; scrolling=&quot;no&quot;</span><br><span class="line">        style=&quot;width: 100%; height: 100%; display: none&quot;&gt; &lt;/iframe&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/dwr/interface/Chat.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/dwr/engine.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/dwr/util.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/chat.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h4><blockquote>
<p>dwr可以设置是否采用异步方式访问java代码：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dwr.engine.setAsync(false);  //false为同步，true（默认）为异步以及dwr对于异常的处理,这里标注一个简单的全局异常</span><br><span class="line"> </span><br><span class="line">dwr.engine.setErrorHandler(errh);</span><br><span class="line">function errh(errorString, exception) &#123;</span><br><span class="line">    errorFlag = true;</span><br><span class="line">    alert(&quot;操作失败！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DWR提供的注解类型"><a href="#DWR提供的注解类型" class="headerlink" title="DWR提供的注解类型"></a>DWR提供的注解类型</h3><blockquote>
<p>DWR提供的注解类型 @RemoteProxy、@RemoteMethod、@DataTransferObject和@RemoteProperty。</p>
</blockquote>
<h4 id="1-RemoteProxy和-RemoteMethod"><a href="#1-RemoteProxy和-RemoteMethod" class="headerlink" title="1. @RemoteProxy和@RemoteMethod"></a>1. @RemoteProxy和@RemoteMethod</h4><blockquote>
<p>@RemoteMethod对应于原来dwr.xml文件中的create标签，用于创建DWR所提供的远程方法；而@RemoteMethod对应于create标签中的 <include method=""/>，用来指定所要暴露的方法名称。</p>
</blockquote>
<blockquote>
<p>举例来说明：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RemoteProxy(name=&quot;bankFunctions&quot;)</span><br><span class="line">public class Bank &#123;</span><br><span class="line">    @RemoteMethod</span><br><span class="line">    public void buy() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从上面可以看出，@RemoteProxy表示这个类将用于远程方法，而使用@RemoteMethod指定所要暴露的方法，没有使用@RemoteMethod的方法将不会显示在客户端。</p>
</blockquote>
<blockquote>
<p>上面的注释使用dwr.xml表示如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE dwr PUBLIC</span><br><span class="line">    &quot;-//GetAhead Limited//DTD Direct Web Remoting 2.0//EN&quot;</span><br><span class="line">    &quot;http://getahead.ltd.uk/dwr/dwr20.dtd&quot;&gt;</span><br><span class="line">&lt;dwr&gt;</span><br><span class="line">    &lt;allow&gt;</span><br><span class="line">        &lt;create creator=&quot;new&quot; javascript=&quot;bankFunctions&quot;&gt;</span><br><span class="line">            &lt;include method=&quot;buy&quot; /&gt;</span><br><span class="line">        &lt;/create&gt;</span><br><span class="line">    &lt;/allow&gt;</span><br><span class="line">&lt;/dwr&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果使用Spring中的DAO活逻辑层则需要进行如下的设置：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// BookDao</span><br><span class="line">@RemoteProxy(creator = SpringCreator.class,</span><br><span class="line">    creatorParams = @Param(name = &quot;beanName&quot;, value = &quot;bookDao&quot;),</span><br><span class="line">    name=&quot;bookFunctions&quot;)</span><br><span class="line">public class BookDao &#123;</span><br><span class="line"> </span><br><span class="line">    @RemoteMethod</span><br><span class="line">    public void addBook(Book book) &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过指定@RemoteProxy中的creator类型为SpringCreator，然后在creatorParams指定对应的beanName名称。对应的dwr.xml文件如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE dwr PUBLIC</span><br><span class="line">    &quot;-//GetAhead Limited//DTD Direct Web Remoting 2.0//EN&quot;</span><br><span class="line">    &quot;http://getahead.ltd.uk/dwr/dwr20.dtd&quot;&gt;</span><br><span class="line">&lt;dwr&gt;</span><br><span class="line">    &lt;allow&gt;</span><br><span class="line">        &lt;create creator=&quot;spring&quot; javascript=&quot;bookFunctions&quot;&gt;</span><br><span class="line">            &lt;param name=&quot;beanName&quot; value=&quot;bookDao&quot; /&gt;</span><br><span class="line">            &lt;include method=&quot;addBook&quot; /&gt;</span><br><span class="line">        &lt;/create&gt;</span><br><span class="line">    &lt;/allow&gt;</span><br><span class="line">&lt;/dwr&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-DataTransferObject和-RemoteProperty"><a href="#2-DataTransferObject和-RemoteProperty" class="headerlink" title="2. @DataTransferObject和@RemoteProperty"></a>2. @DataTransferObject和@RemoteProperty</h4><blockquote>
<p>@DataTransferObject对应于原来dwr.xml文件中的convert标签，用于转换Java对象；@RemoteProperty则对应于convert标签中的 <param name="include" value="" />。</p>
</blockquote>
<blockquote>
<p>举例说明一下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@DataTransferObject</span><br><span class="line">public class Book &#123;</span><br><span class="line">    @RemoteProperty</span><br><span class="line">    private int id;</span><br><span class="line"> </span><br><span class="line">    @RemoteProperty</span><br><span class="line">    private String name;</span><br><span class="line"> </span><br><span class="line">    public Book() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@RemoteProperty可以放在JavaBean中的私有变量上面，也可以放在getXXX方法上面。另外如果想将JavaBean中所有的属性都暴露出来的话，不需要在任何属性上面添加@RemoteProperty注释就可以了。</p>
</blockquote>
<blockquote>
<p>上面的注释对应的dwr.xml文件如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE dwr PUBLIC</span><br><span class="line">    &quot;-//GetAhead Limited//DTD Direct Web Remoting 2.0//EN&quot;</span><br><span class="line">    &quot;http://getahead.ltd.uk/dwr/dwr20.dtd&quot;&gt;</span><br><span class="line">&lt;dwr&gt;</span><br><span class="line">    &lt;allow&gt;</span><br><span class="line">        &lt;convert converter=&quot;bean&quot;</span><br><span class="line">            match=&quot;com.javatang.domain.Book&quot;&gt;</span><br><span class="line">            &lt;param name=&quot;include&quot; value=&quot;id, name&quot; /&gt;</span><br><span class="line">        &lt;/convert&gt;</span><br><span class="line">        &lt;!-- 或者用下面的方式也可以</span><br><span class="line">        &lt;convert converter=&quot;bean&quot; match=&quot;com.javatang.domain.Book&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;/allow&gt;</span><br><span class="line">&lt;/dwr&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于具体每个注释使用的方法已经所包含的参数可以参考Java Doc。使用DWR2.0的注解极大的简化了原来dwr.xml的配置，非常的方便。 </p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>DWR</tag>
      </tags>
  </entry>
  <entry>
    <title>DataX使用方法</title>
    <url>/2017/12/23/DataX%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><a href="https://github.com/alibaba/DataX">DataX3.0介绍</a></p>
<p><a href="https://yq.aliyun.com/articles/216355">参考</a></p>
<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><ol>
<li><a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz">DataX下载</a></li>
<li><a href="https://github.com/alibaba/DataX/blob/master/introduction.md">DataX 简介</a> </li>
<li><a href="https://github.com/alibaba/DataX/blob/master/userGuid.md">DataX Quick Start</a></li>
<li>测试实例<ul>
<li>生成配置文件模板(如：mysql 到 mysql)  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [datax_home]</span><br><span class="line">python datax.py -r mysqlreader -w mysqlwriter</span><br></pre></td></tr></table></figure>
  生成如下：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DataX (DATAX-OPENSOURCE-3.0), From Alibaba !</span><br><span class="line">Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please refer to the mysqlreader document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md </span><br><span class="line"></span><br><span class="line">Please refer to the mysqlwriter document:</span><br><span class="line">     https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md </span><br><span class="line"> </span><br><span class="line">Please save the following configuration as a json file and  use</span><br><span class="line">     python &#123;DATAX_HOME&#125;/bin/datax.py &#123;JSON_FILE_NAME&#125;.json </span><br><span class="line">to run the job.</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlreader&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: [], </span><br><span class="line">                                &quot;table&quot;: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        &quot;password&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;username&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;where&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, </span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlwriter&quot;, </span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [], </span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;: &quot;&quot;, </span><br><span class="line">                                &quot;table&quot;: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ], </span><br><span class="line">                        &quot;password&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;preSql&quot;: [], </span><br><span class="line">                        &quot;session&quot;: [], </span><br><span class="line">                        &quot;username&quot;: &quot;&quot;, </span><br><span class="line">                        &quot;writeMode&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>配置生成的代码（拷贝上面生成的代码到xxx.json中）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;job&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;reader&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlreader&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [&quot;id&quot;,&quot;name&quot;,&quot;age&quot;],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;:[&quot;jdbc:mysql://192.168.31.242:3306/gongdiyun?useUnicode=true&amp;characterEncoding=utf8&quot;],</span><br><span class="line">                                &quot;table&quot;: [&quot;Person&quot;]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;password&quot;: &quot;mhiwyf&quot;,</span><br><span class="line">                        &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">                        &quot;where&quot;: &quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;writer&quot;: &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;mysqlwriter&quot;,</span><br><span class="line">                    &quot;parameter&quot;: &#123;</span><br><span class="line">                        &quot;column&quot;: [&quot;id&quot;,&quot;name&quot;,&quot;age&quot;],</span><br><span class="line">                        &quot;connection&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;jdbcUrl&quot;:&quot;jdbc:mysql://192.168.31.84:3306/gongdiyun_test?useUnicode=true&amp;characterEncoding=utf8&quot;,</span><br><span class="line">                                &quot;table&quot;: [&quot;Person&quot;]</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;password&quot;: &quot;mhiwyf&quot;,</span><br><span class="line">                        &quot;preSql&quot;: [&quot;delete from Person&quot;],</span><br><span class="line">                        &quot;session&quot;: [],</span><br><span class="line">                        &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">                        &quot;writeMode&quot;: &quot;insert&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;setting&quot;: &#123;</span><br><span class="line">            &quot;speed&quot;: &#123;</span><br><span class="line">                &quot;channel&quot;: &quot;1&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Aliyun</tag>
        <tag>DataX</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 生成详细的操作日志</title>
    <url>/2021/04/01/Django%20%E7%94%9F%E6%88%90%E8%AF%A6%E7%BB%86%E7%9A%84%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h3 id="Django-生成详细的操作日志"><a href="#Django-生成详细的操作日志" class="headerlink" title="Django 生成详细的操作日志"></a>Django 生成详细的操作日志</h3><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当用户登录系统，修改表单中的值后，要生成详细的操作日志：</span><br><span class="line">1. 联系人由&quot;张三&quot;变为&quot;李四&quot;，联系电话由&quot;AAA&quot;变为&quot;BBB&quot; </span><br><span class="line">2. 联系地址由&quot;某区某街道&quot;变为&quot;D区B街道&quot;，联系电话由&quot;AAA&quot;变为&quot;BBB&quot;</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.像 联系人、联系电话、联系地址… 这些数据可以从django model的verbose_name 属性获取(需要在设置了此属性值的情况下)。 </span><br><span class="line">2.由&quot;旧数据&quot;变为&quot;新数据&quot;,需要做新旧数据的对比，即遍历旧的model实例对象与新的model实例对象中的各字段一一对比。</span><br></pre></td></tr></table></figure>

<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="1-建立model"><a href="#1-建立model" class="headerlink" title="1. 建立model"></a>1. 建立model</h5><blockquote>
<p>在models.py 文件中创建以下两个model</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from __future__ import unicode_literals</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Test(models.Model):</span><br><span class="line">    &quot;&quot;&quot;测试model&quot;&quot;&quot;</span><br><span class="line">    province = models.CharField(max_length=32, null=True, blank=True, verbose_name=&quot;省&quot;)</span><br><span class="line">    city = models.CharField(max_length=32, null=True, blank=True, verbose_name=&quot;市&quot;)</span><br><span class="line">    address = models.CharField(max_length=100, null=True, blank=True, verbose_name=&quot;详细地址&quot;)</span><br><span class="line">    name = models.CharField(max_length=150, null=True, blank=True, verbose_name=&quot;名称&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.ktv_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OperationLogs(models.Model):</span><br><span class="line">    &quot;&quot;&quot;操作日志&quot;&quot;&quot;</span><br><span class="line">    type = models.CharField(default=&quot;ktv&quot;, max_length=64, verbose_name=&quot;类型&quot;)  # 可根据model名称等...根据各自的需求做此字段的取舍</span><br><span class="line">    content = models.TextField(verbose_name=&quot;修改详情&quot;, null=True)</span><br></pre></td></tr></table></figure>

<h5 id="2-编写日志生成函数"><a href="#2-编写日志生成函数" class="headerlink" title="2. 编写日志生成函数"></a>2. 编写日志生成函数</h5><blockquote>
<p>在views下创建operationlogs.py文件：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from myapp.models import OperationLogs</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def operationlogs(object_old_model, dict_update_fields, type, msg=None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    操作日志</span><br><span class="line">    :param object_old_model: 旧的model对象实例</span><br><span class="line">    :param dict_update_fields: 更新的字段键值对--字典格式</span><br><span class="line">    :param type: 类型 (自己定义)</span><br><span class="line">    :param msg: 自定义日志内容 (如果日志格式非&#x27;A由aa变为bb&#x27;，可使用此参数)</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    content = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    if object_old_model is not None and dict_update_fields is not None:</span><br><span class="line">        fielddic = getmodelfield(object_old_model)</span><br><span class="line">        for key, val in dict_update_fields.items():</span><br><span class="line">            if isinstance(val, dict):  # 获取外键表的字段值</span><br><span class="line">                _model = getattr(object_old_model, key)</span><br><span class="line">                for _key, _val in val.items():  # key-&gt;外键名</span><br><span class="line">                    if _key == &quot;id&quot;:  # 主键id不参与对比</span><br><span class="line">                        pass</span><br><span class="line">                    else:</span><br><span class="line">                        if not _model:  # 如果原值为null，做单独处理</span><br><span class="line">                            _rtn = &#x27;&quot;%s&quot;由&quot;&quot;变为&quot;%s&quot;;&#x27; % (fielddic[key], _val)</span><br><span class="line">                        else:  # 如果原值不为null，调用对比函数处理</span><br><span class="line">                            _rtn = compare(getattr(_model, _key), _val, fielddic[key], msg)</span><br><span class="line">                        content = content + _rtn</span><br><span class="line">            else:</span><br><span class="line">                _rtn = compare(getattr(object_old_model, key), val, fielddic[key], msg)</span><br><span class="line">                content = content + _rtn</span><br><span class="line">    else:</span><br><span class="line">        content = msg</span><br><span class="line"></span><br><span class="line">    #  存储日志</span><br><span class="line">    if content == &#x27;&#x27;:</span><br><span class="line">        pass</span><br><span class="line">    else:</span><br><span class="line">        obj_operationlogs = OperationLogs()</span><br><span class="line">        obj_operationlogs.content = content</span><br><span class="line">        obj_operationlogs.type = type</span><br><span class="line">        obj_operationlogs.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getmodelfield(modelname):</span><br><span class="line">    &quot;&quot;&quot;获取model 指定字段的 verbose_name属性值&quot;&quot;&quot;</span><br><span class="line">    fielddic=&#123;&#125;</span><br><span class="line">    for field in modelname._meta.fields:</span><br><span class="line">        fielddic[field.name] = field.verbose_name</span><br><span class="line">    return (fielddic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def compare(oldstr, newstr, field, msg):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成操作日志详细记录</span><br><span class="line">    :param oldstr: 原值</span><br><span class="line">    :param newstr: 新值</span><br><span class="line">    :param field: 目标字段</span><br><span class="line">    :return: content</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    content = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    if isinstance(newstr, list):  # 将list转为str类型，list对象存储到数据库后，为str类型</span><br><span class="line">        newstr = str(newstr)</span><br><span class="line"></span><br><span class="line">    if oldstr == newstr:  # 值未变化，不做处理</span><br><span class="line">        pass</span><br><span class="line">    else:</span><br><span class="line">        if not msg:</span><br><span class="line">            content = (&#x27;&quot;%s&quot;由&quot;%s&quot;变为&quot;%s&quot;;&#x27; % (field, oldstr, newstr))</span><br><span class="line">        else:</span><br><span class="line">            content = (&#x27;%s&quot;%s&quot;由&quot;%s&quot;变为&quot;%s&quot;;&#x27; % (msg, field, oldstr, newstr))</span><br><span class="line">    return content</span><br></pre></td></tr></table></figure>

<h5 id="3-调用生成日志函数，产生日志"><a href="#3-调用生成日志函数，产生日志" class="headerlink" title="3. 调用生成日志函数，产生日志"></a>3. 调用生成日志函数，产生日志</h5><blockquote>
<p>在需要生成日志的view方法中添加：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from myapp.models import Test</span><br><span class="line">import copy </span><br><span class="line"></span><br><span class="line">def mypatch(request):</span><br><span class="line">    ...</span><br><span class="line">    datas = request.PATCH</span><br><span class="line">    test = Test.objects.filter(id=datas[&quot;id&quot;]).first()</span><br><span class="line">    if test is not None:</span><br><span class="line">        obj_old_test = copy.deepcopy(test)  # 生成操作日志使用</span><br><span class="line">        update_fields = &#123;&quot;name&quot;: datas[&quot;name&quot;]...&#125;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        operationlogs(obj_old_test, update_fields, &quot;testlogs&quot;)  # 操作日志</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 缓存 cache</title>
    <url>/2021/04/01/Django%20%E7%BC%93%E5%AD%98%20cache/</url>
    <content><![CDATA[<h3 id="Django中提供了6种缓存方式"><a href="#Django中提供了6种缓存方式" class="headerlink" title="Django中提供了6种缓存方式"></a>Django中提供了6种缓存方式</h3><ul>
<li>开发调试</li>
<li>内存</li>
<li>文件</li>
<li>数据库</li>
<li>Memcache缓存（python-memcached模块）</li>
<li>Memcache缓存（pylibmc模块）</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-开发调试"><a href="#1-开发调试" class="headerlink" title="1. 开发调试"></a>1. 开发调试</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此为开始调试用，实际内部不做任何操作</span><br><span class="line"># 配置</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.dummy.DummyCache&#x27;,     # 引擎</span><br><span class="line">        &#x27;TIMEOUT&#x27;: 300,                                               # 缓存超时时间（默认300，None表示永不过期，0表示立即过期）</span><br><span class="line">        &#x27;OPTIONS&#x27;:&#123;</span><br><span class="line">            &#x27;MAX_ENTRIES&#x27;: 300,                                       # 最大缓存个数（默认300）</span><br><span class="line">            &#x27;CULL_FREQUENCY&#x27;: 3,                                      # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x27;KEY_PREFIX&#x27;: &#x27;&#x27;,                                             # 缓存key的前缀（默认空）</span><br><span class="line">        &#x27;VERSION&#x27;: 1,                                                 # 缓存key的版本（默认1）</span><br><span class="line">        &#x27;KEY_FUNCTION&#x27; 函数名                                          # 生成key的函数（默认函数会生成为：【前缀:版本:key】）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自定义key</span><br><span class="line">def default_key_func(key, key_prefix, version):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Default function to generate keys.</span><br><span class="line"></span><br><span class="line">    Constructs the key used by all other methods. By default it prepends</span><br><span class="line">    the `key_prefix&#x27;. KEY_FUNCTION can be used to specify an alternate</span><br><span class="line">    function with custom key making behavior.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return &#x27;%s:%s:%s&#x27; % (key_prefix, version, key)</span><br><span class="line"></span><br><span class="line">def get_key_func(key_func):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Function to decide which key function to use.</span><br><span class="line"></span><br><span class="line">    Defaults to ``default_key_func``.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if key_func is not None:</span><br><span class="line">        if callable(key_func):</span><br><span class="line">            return key_func</span><br><span class="line">        else:</span><br><span class="line">            return import_string(key_func)</span><br><span class="line">    return default_key_func</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="2-内存"><a href="#2-内存" class="headerlink" title="2. 内存"></a>2. 内存</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此缓存将内容保存至内存的变量中</span><br><span class="line"># 配置</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.locmem.LocMemCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;unique-snowflake&#x27;,#给缓存放置的内存区设置一个名字</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 注：其他配置同开发调试版本</span><br></pre></td></tr></table></figure>

<h4 id="3-文件"><a href="#3-文件" class="headerlink" title="3. 文件"></a>3. 文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此缓存将内容保存至文件</span><br><span class="line"># 配置</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.filebased.FileBasedCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;/var/tmp/django_cache&#x27;,#配置缓存存放的目录</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 注：其他配置同开发调试版本</span><br></pre></td></tr></table></figure>

<h4 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此缓存将内容保存至数据库</span><br><span class="line"># 配置：</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.db.DatabaseCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;my_cache_table&#x27;, # 数据库表</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 注：需要执行创建表命令 python manage.py createcachetable， 这样会额外创建一张表来存放缓存数据</span><br></pre></td></tr></table></figure>

<h4 id="5-Memcache缓存（python-memcached模块）"><a href="#5-Memcache缓存（python-memcached模块）" class="headerlink" title="5. Memcache缓存（python-memcached模块）"></a>5. Memcache缓存（python-memcached模块）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此缓存使用python-memcached模块连接memcache</span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;127.0.0.1:11211&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;unix:/tmp/memcached.sock&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: [</span><br><span class="line">            &#x27;172.19.26.240:11211&#x27;,</span><br><span class="line">            &#x27;172.19.26.242:11211&#x27;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-Memcache缓存（pylibmc模块）"><a href="#6-Memcache缓存（pylibmc模块）" class="headerlink" title="6. Memcache缓存（pylibmc模块）"></a>6. Memcache缓存（pylibmc模块）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此缓存使用pylibmc模块连接memcache</span><br><span class="line">     </span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;127.0.0.1:11211&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: &#x27;/tmp/memcached.sock&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.PyLibMCCache&#x27;,</span><br><span class="line">        &#x27;LOCATION&#x27;: [</span><br><span class="line">            &#x27;172.19.26.240:11211&#x27;,</span><br><span class="line">            &#x27;172.19.26.242:11211&#x27;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="1-全站使用缓存"><a href="#1-全站使用缓存" class="headerlink" title="1. 全站使用缓存"></a>1. 全站使用缓存</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用中间件，经过一系列的认证等操作，如果内容在缓存中存在，</span><br><span class="line"># 则使用FetchFromCacheMiddleware获取内容并返回给用户，</span><br><span class="line"># 当返回给用户之前，判断缓存中是否已经存在，</span><br><span class="line"># 如果不存在则UpdateCacheMiddleware会将缓存保存至缓存，从而实现全站缓存</span><br><span class="line"> </span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    &#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;, # 放到第一个中间件位置</span><br><span class="line">    # 其他中间件...</span><br><span class="line">    &#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;, #放到最后一个</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">CACHE_MIDDLEWARE_ALIAS = &quot;&quot;</span><br><span class="line">CACHE_MIDDLEWARE_SECONDS = &quot;&quot;</span><br><span class="line">CACHE_MIDDLEWARE_KEY_PREFIX = &quot;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="2-单独视图缓存"><a href="#2-单独视图缓存" class="headerlink" title="2. 单独视图缓存"></a>2. 单独视图缓存</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 方式一：装饰器</span><br><span class="line">from django.views.decorators.cache import cache_page</span><br><span class="line"></span><br><span class="line">@cache_page(60 * 15)</span><br><span class="line">def my_view(request):</span><br><span class="line">    ...</span><br><span class="line"># 方式二：装饰器的另外一种写法</span><br><span class="line">from django.views.decorators.cache import cache_page</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&#x27;^foo/([0-9]&#123;1,2&#125;)/$&#x27;, cache_page(60 * 15)(my_view)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="3-局部视图缓存"><a href="#3-局部视图缓存" class="headerlink" title="3. 局部视图缓存"></a>3. 局部视图缓存</h4><ul>
<li>引入TemplateTag<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% load cache %&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用缓存<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% cache 5000 缓存key %&#125; #这里是缓存5秒</span><br><span class="line">    缓存内容</span><br><span class="line">&#123;% endcache %&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 配置 Celery</title>
    <url>/2021/04/01/Django%20%E9%85%8D%E7%BD%AE%20Celery/</url>
    <content><![CDATA[<h3 id="在Django中使用有两种方式："><a href="#在Django中使用有两种方式：" class="headerlink" title="在Django中使用有两种方式："></a>在Django中使用有两种方式：</h3><ul>
<li>使用django-celery应用</li>
<li>直接使用Celery</li>
</ul>
<h3 id="使用django-celery应用"><a href="#使用django-celery应用" class="headerlink" title="使用django-celery应用"></a>使用django-celery应用</h3><blockquote>
<p>django-celery方式就是通过manage.py启动celery。用pip安装django-celery，在settings引用djcelery应用，再更新数据库。</p>
</blockquote>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install -i https://pypi.douban.com/simple -r requirements.txt</span></span><br><span class="line">django-celery==3.2.2</span><br></pre></td></tr></table></figure>

<h4 id="在settings引用djcelery应用"><a href="#在settings引用djcelery应用" class="headerlink" title="在settings引用djcelery应用"></a>在settings引用djcelery应用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加djcelery到INSTALLED_APPS</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;djcelery&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置redis中间人信息</span></span><br><span class="line"><span class="keyword">import</span> djcelery</span><br><span class="line"></span><br><span class="line">djcelery.setup_loader()  <span class="comment"># 加载djcelery</span></span><br><span class="line">BROKER_URL = <span class="string">&#x27;redis://&#123;&#125;:&#123;&#125;/0&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    os.environ.get(<span class="string">&#x27;REDIS_HOST&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>),</span><br><span class="line">    <span class="built_in">int</span>(os.environ.get(<span class="string">&#x27;REDIS_PORT&#x27;</span>, <span class="number">6379</span>))),</span><br><span class="line">CELERY_TIMEZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">CELERYBEAT_SCHEDULER = <span class="string">&#x27;djcelery.schedulers.DatabaseScheduler&#x27;</span></span><br><span class="line">CELERY_IMPORTS = (<span class="string">&#x27;myapp.tasks&#x27;</span>,)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations djcelery</span><br><span class="line">python manage.py migrate djcelery</span><br></pre></td></tr></table></figure>


<h3 id="直接使用Celery"><a href="#直接使用Celery" class="headerlink" title="直接使用Celery"></a>直接使用Celery</h3><h4 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install -i https://pypi.douban.com/simple -r requirements.txt</span></span><br><span class="line">celery-with-redis==3.1.25</span><br></pre></td></tr></table></figure>

<h4 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h4><blockquote>
<p>selery.py(与settings.py同目录)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件夹名，即为该Django的项目名.</span></span><br><span class="line"><span class="comment"># project_name = os.path.split(os.path.abspath(&#x27;.&#x27;)[-1])</span></span><br><span class="line">project_name = os.path.basename(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">project_settings = <span class="string">&#x27;&#123;&#125;.settings&#x27;</span>.<span class="built_in">format</span>(project_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, project_settings)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化Celery</span></span><br><span class="line">app = Celery(project_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用django的settings文件配置celery。这里定义了namespace=&#x27;CELERY&#x27;，在settings里所有跟celery有关的设置都有加上&#x27;CELERY_&#x27;前缀</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery加载所有注册的应用.</span></span><br><span class="line"><span class="comment"># 自动搜索所有注册的app下的tasks.py，所有celery处理的任务，都写在app下的tasks.py里</span></span><br><span class="line">app.autodiscover_tasks(<span class="keyword">lambda</span>: settings.INSTALLED_APPS)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug_task</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Request: &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(self.request))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="django-setting-py-配置"><a href="#django-setting-py-配置" class="headerlink" title="django setting.py 配置"></a>django setting.py 配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># celery settings</span><br><span class="line"># celery中间人 redis://redis服务所在的ip地址:端口/数据库号</span><br><span class="line">BROKER_URL = &#x27;redis://localhost:6379/0&#x27;</span><br><span class="line"># celery结果返回，可用于跟踪结果</span><br><span class="line">CELERY_RESULT_BACKEND = &#x27;redis://localhost:6379/0&#x27;</span><br><span class="line"></span><br><span class="line"># celery内容等消息的格式设置</span><br><span class="line">CELERY_ACCEPT_CONTENT = [&#x27;application/json&#x27;, ]</span><br><span class="line">CELERY_TASK_SERIALIZER = &#x27;json&#x27;</span><br><span class="line">CELERY_RESULT_SERIALIZER = &#x27;json&#x27;</span><br><span class="line"></span><br><span class="line"># celery时区设置，使用settings中TIME_ZONE同样的时区</span><br><span class="line">CELERY_TIMEZONE = TIME_ZONE</span><br></pre></td></tr></table></figure>

<h4 id="使用celery"><a href="#使用celery" class="headerlink" title="使用celery"></a>使用celery</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># tasks/tasks.py:</span><br><span class="line">from celery.schedules import crontab</span><br><span class="line">from celery.task import periodic_task</span><br><span class="line">from myproject import celery_app</span><br><span class="line"></span><br><span class="line">@celery_app.task</span><br><span class="line">def sendmail1(email):</span><br><span class="line">    pass</span><br><span class="line">    </span><br><span class="line">@periodic_task(run_every=crontab(minute=&#x27;*/3&#x27;))</span><br><span class="line">def send_email2():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># tasks/__init__.py:</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from myproject.tasks.tasks import *</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  启动celery之前，确保已经安装redis和启动redis服务，本地开发环境运行redis-cli看是否可以正常连接，若不行，再手工执行redis-server命令并保持窗口即可。</span></span><br><span class="line"><span class="comment"># 接着，启动celery worker。</span></span><br><span class="line"><span class="comment"># celery worker是用于异步执行任务的&quot;工作者&quot;</span></span><br><span class="line"><span class="comment"># 进入manage.py文件所在的目录，执行如下命令：</span></span><br><span class="line">celery -A myproject worker -l info</span><br><span class="line"></span><br><span class="line"><span class="comment"># celery worker会扫描django项目中有哪些task任务，并加入进来。</span></span><br><span class="line"><span class="comment"># 最后，再启动django服务器</span></span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="celery-定时任务"><a href="#celery-定时任务" class="headerlink" title="celery 定时任务"></a>celery 定时任务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># celery 除了可以异步执行任务之外，还可以定时执行任务。</span><br><span class="line"># 如：</span><br><span class="line"># -*- coding:utf-8 -*- </span><br><span class="line">from celery.task.schedules import crontab  </span><br><span class="line">from celery.decorators import periodic_task</span><br><span class="line"> </span><br><span class="line">@periodic_task(run_every=crontab())</span><br><span class="line">def some_task():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 启动celery是使用worker，但worker不能启动定时任务。</span><br><span class="line"># ① 先确保中间人是否打开，这里使用redis作为中间人</span><br><span class="line"># ② 进入django项目的根目录执行如下代码启动celery的worker：</span><br><span class="line">celery -A myproject worker -l info</span><br><span class="line"># ③ 同样在django项目的根目录下再打开一个命令行界面，执行如下代码：</span><br><span class="line">celery -A myproject beat -l info</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django配置mongodb</title>
    <url>/2021/04/01/Django%E9%85%8D%E7%BD%AEmongodb/</url>
    <content><![CDATA[<h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongoengine==0.18.2</span><br><span class="line">pymongo==3.8.0</span><br></pre></td></tr></table></figure>

<h3 id="settings-py配置"><a href="#settings-py配置" class="headerlink" title="settings.py配置"></a>settings.py配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置mongo</span></span><br><span class="line">MONGO_DATABASE = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:  &#123;</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: os.environ.get(<span class="string">&#x27;MONGO_DATABASE&#x27;</span>, <span class="string">&quot;test&quot;</span>),</span><br><span class="line">        <span class="string">&quot;authentication_source&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: os.environ.get(<span class="string">&#x27;MONGO_USERNAME&#x27;</span>, <span class="string">&quot;root&quot;</span>),</span><br><span class="line">        <span class="string">&quot;password&quot;</span>:  os.environ.get(<span class="string">&#x27;MONGO_PASSWORD&#x27;</span>, <span class="string">&quot;1q2w3e&quot;</span>),</span><br><span class="line">        <span class="string">&quot;host&quot;</span>: os.environ.get(<span class="string">&#x27;MONGO_HOST&#x27;</span>, <span class="string">&quot;127.0.0.1&quot;</span>),</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="built_in">int</span>(os.environ.get(<span class="string">&#x27;MONGO_PORT&#x27;</span>, <span class="number">27017</span>)),</span><br><span class="line">        <span class="string">&quot;tz_aware&quot;</span>: <span class="literal">True</span>,  <span class="comment"># 设置时区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> mongoengine <span class="keyword">import</span> register_connection</span><br><span class="line">register_connection(<span class="string">&quot;default&quot;</span>, ** MONGO_DATABASE[<span class="string">&#x27;default&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models</span></span><br><span class="line"><span class="keyword">import</span> mongoengine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentModel</span>(mongoengine.Document):</span><br><span class="line">    name = mongoengine.StringField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = mongoengine.IntField()</span><br><span class="line">    password = mongoengine.StringField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># views</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstMongoView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        name = request.data[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        age = request.data[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">        password = request.data[<span class="string">&quot;password&quot;</span>]</span><br><span class="line">        StudentModel.objects.create(name=name, age=age, password=password)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="built_in">dict</span>(msg=<span class="string">&quot;OK&quot;</span>, code=<span class="number">10000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># url</span></span><br><span class="line">re_path(<span class="string">r&#x27;mongo/first/&#x27;</span>, FirstMongoView.as_view()),</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装配置 Oracle 镜像</title>
    <url>/2019/01/01/Docker%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20Oracle%20%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h3 id="Docker-安装配置-oracle-11g镜像"><a href="#Docker-安装配置-oracle-11g镜像" class="headerlink" title="Docker 安装配置 oracle 11g镜像"></a>Docker 安装配置 oracle 11g镜像</h3><h4 id="1-拉取Docker镜像"><a href="#1-拉取Docker镜像" class="headerlink" title="1. 拉取Docker镜像"></a>1. 拉取Docker镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br><span class="line"><span class="comment"># 镜像比较大，下载的过程稍长！</span></span><br></pre></td></tr></table></figure>

<h4 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2. 创建容器"></a>2. 创建容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure>

<h4 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3. 启动容器"></a>3. 启动容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start oracle11g</span><br></pre></td></tr></table></figure>

<h4 id="4-进入镜像进行配置"><a href="#4-进入镜像进行配置" class="headerlink" title="4. 进入镜像进行配置"></a>4. 进入镜像进行配置</h4><ul>
<li><p>进入镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle11g bash</span><br></pre></td></tr></table></figure></li>
<li><p>进行软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line"><span class="comment"># bash: sqlplus: command not found</span></span><br><span class="line"><span class="comment"># 提示没有这个命令</span></span><br></pre></td></tr></table></figure></li>
<li><p>切换到root用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root <span class="comment"># password: helowin </span></span><br></pre></td></tr></table></figure></li>
<li><p>编辑profile文件配置ORACLE环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 文末追加</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=helowin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ORACLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s <span class="variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到oracle 用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-登录sqlplus并修改sys、system用户密码"><a href="#5-登录sqlplus并修改sys、system用户密码" class="headerlink" title="5. 登录sqlplus并修改sys、system用户密码"></a>5. 登录sqlplus并修改sys、system用户密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接oracle</span></span><br><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着执行下面命令</span></span><br><span class="line">alter user system identified by system;</span><br><span class="line">alter user sys identified by sys;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以创建用户</span></span><br><span class="line">create user <span class="built_in">test</span> identified by <span class="built_in">test</span>;</span><br><span class="line"><span class="comment"># 并给用户赋予权限</span></span><br><span class="line">grant connect,resource,dba to <span class="built_in">test</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-查看oracle的lsnrctl服务"><a href="#6-查看oracle的lsnrctl服务" class="headerlink" title="6. 查看oracle的lsnrctl服务"></a>6. 查看oracle的lsnrctl服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsnrctl status</span><br><span class="line"># 可以查看service的名称</span><br></pre></td></tr></table></figure>

<h4 id="配置Navicat"><a href="#配置Navicat" class="headerlink" title="配置Navicat"></a>配置Navicat</h4><ul>
<li>下载Instant Client, 并解压<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oracle官网地址：https://www.oracle.com/database/technologies/instant-client/downloads.html</span><br></pre></td></tr></table></figure></li>
<li>配置OCI【工具-&gt;选项…】, 选择对应版本OCI</li>
<li>配置Navicat</li>
</ul>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/oracle_navicat_setting.png" alt="oracle_navicat_setting"></p>
<h2 id="python-连接oracle"><a href="#python-连接oracle" class="headerlink" title="python 连接oracle"></a>python 连接oracle</h2><h4 id="1-根据python版本下载对应的cx-Oracle版本"><a href="#1-根据python版本下载对应的cx-Oracle版本" class="headerlink" title="1. 根据python版本下载对应的cx_Oracle版本"></a>1. 根据python版本下载对应的cx_Oracle版本</h4><ul>
<li>cx_Oracle下载： <a href="https://pypi.org/project/cx-Oracle/">https://pypi.org/project/cx-Oracle/</a></li>
<li>pip install cx-Oracle</li>
</ul>
<h4 id="2-cx-Oracle和instantclient版本对应"><a href="#2-cx-Oracle和instantclient版本对应" class="headerlink" title="2. cx_Oracle和instantclient版本对应"></a>2. cx_Oracle和instantclient版本对应</h4><ul>
<li>instantclient下载： <a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">https://www.oracle.com/database/technologies/instant-client/downloads.html</a></li>
<li>添加instantclient到环境变量（路径下包括oci.dll、oraocci11.dll、oraociei11.dll等）</li>
<li>复制oci、oraocci11、oraociei11的3个DLL粘贴到PY目录的Libs/site-packages文件夹下面。</li>
</ul>
<h4 id="3-python示例-cx-oracle-7-2-2"><a href="#3-python示例-cx-oracle-7-2-2" class="headerlink" title="3. python示例(cx-oracle==7.2.2)"></a>3. python示例(cx-oracle==7.2.2)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created By Murray(m18527) on 2019/9/10 11:21</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import cx_Oracle as cx</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">ORACLE_HOST = os.getenv(&#x27;ORACLE_HOST&#x27;, &#x27;192.168.124.100&#x27;)</span><br><span class="line">ORACLE_PORT = int(os.getenv(&#x27;ORACLE_PORT&#x27;, 1521))</span><br><span class="line">ORACLE_SERVICE_NAME = os.getenv(&#x27;ORACLE_SERVICE_NAME&#x27;, &#x27;orcl&#x27;)</span><br><span class="line">ORACLE_USER = os.getenv(&#x27;ORACLE_USER&#x27;, &#x27;SCOTT&#x27;)</span><br><span class="line">ORACLE_PWD = os.getenv(&#x27;ORACLE_PWD&#x27;, &#x27;scott&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 方式1</span><br><span class="line"># conn = cx_Oracle.connect(ORACLE_USER, ORACLE_PWD, &#x27;&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;.format(ORACLE_HOST, ORACLE_PORT, ORACLE_SERVICE_NAME))</span><br><span class="line"></span><br><span class="line"># 方式2</span><br><span class="line"># dsn = cx.makedsn(ORACLE_HOST, ORACLE_PORT, ORACLE_SERVICE_NAME)</span><br><span class="line"># conn = cx.connect(ORACLE_USER, ORACLE_PWD, dsn)</span><br><span class="line"></span><br><span class="line"># 方式3</span><br><span class="line"># conn = cx.connect(&#x27;&#123;&#125;/&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;.format(ORACLE_USER, ORACLE_PWD, ORACLE_HOST, ORACLE_PORT, ORACLE_SERVICE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_oracle_connection():</span><br><span class="line">    conn = cx.connect(&#x27;&#123;&#125;/&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;.format(ORACLE_USER, ORACLE_PWD, ORACLE_HOST, ORACLE_PORT, ORACLE_SERVICE_NAME))</span><br><span class="line">    return conn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def query_demo():</span><br><span class="line">    conn = get_oracle_connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(&quot;SELECT * FROM EMP&quot;)</span><br><span class="line">    rows = cursor.fetchall()  # 得到所有数据集</span><br><span class="line">    for row in rows:</span><br><span class="line">        print(&quot;%d, %s, %s, %s&quot; % (row[0], row[1], row[2], row[3]))</span><br><span class="line">    print(&quot;Number of rows returned: %d&quot; % cursor.rowcount)</span><br><span class="line"></span><br><span class="line">    cursor.execute(&quot;SELECT * FROM EMP&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        row = cursor.fetchone()  # 逐行得到数据集</span><br><span class="line">        if row is None:</span><br><span class="line">            break</span><br><span class="line">        print(&quot;%d, %s, %s, %s&quot; % (row[0], row[1], row[2], row[3]))</span><br><span class="line">    print(&quot;Number of rows returned: %d&quot; % cursor.rowcount)</span><br><span class="line"></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def insert_demo():</span><br><span class="line">    conn = get_oracle_connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    cursor.execute(&quot;CREATE TABLE DEMO(ID INT, C1 VARCHAR(50), C2 VARCHAR(50), C3 VARCHAR(50))&quot;)</span><br><span class="line">    cursor.execute(&quot;INSERT INTO DEMO (ID, C1, C2, C3)VALUES(111, &#x27;a&#x27;, &#x27;aa&#x27;, &#x27;aaa&#x27;)&quot;)</span><br><span class="line">    cursor.execute(&quot;INSERT INTO DEMO (ID, C1, C2, C3)VALUES(222, &#x27;b&#x27;, &#x27;bb&#x27;, &#x27;bbb&#x27;)&quot;)</span><br><span class="line">    cursor.execute(&quot;INSERT INTO DEMO (ID, C1, C2, C3)VALUES(333, &#x27;c&#x27;, &#x27;cc&#x27;, &#x27;ccc&#x27;)&quot;)</span><br><span class="line"></span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    query_demo()</span><br><span class="line">    insert_demo()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="oracle-12c"><a href="#oracle-12c" class="headerlink" title="oracle 12c"></a>oracle 12c</h4><ul>
<li><p>拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull sath89/oracle-12c</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1521:1521 --name oracle12c -v /data/oracle/mnt:/mnt -v /data/oracle/data:/u01/app/oracle/oradata/xe/ext sath89/oracle-12c</span><br></pre></td></tr></table></figure>
</li>
<li><p>Oracle 使用的实例名(用户名、密码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname: localhost</span><br><span class="line">port: 1521</span><br><span class="line">sid: xe</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></table></figure></li>
<li><p>操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it oracle12c bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换Oracle用户</span></span><br><span class="line">su oracle</span><br><span class="line"></span><br><span class="line"><span class="comment"># sysdba登录</span></span><br><span class="line"><span class="variable">$ORACLE_HOME</span>/bin/sqlplus / as sysdba</span><br><span class="line"></span><br><span class="line"><span class="comment"># create tablespace 表空间名称 datafile 表空间路劲 size 1000m;</span></span><br><span class="line">SQL&gt;create tablespace demodb datafile <span class="string">&#x27;/u01/app/oracle/oradata/xe/demodb.dbf&#x27;</span> size 1000m;</span><br><span class="line"></span><br><span class="line"><span class="comment">#create user 用户名 identified by 密码 default tablespace 用户默认使用哪一个表空间;</span></span><br><span class="line">SQL&gt;create user demodb identified by 123456 default tablespace demodb;</span><br><span class="line"></span><br><span class="line"><span class="comment"># grant 角色1,角色2 to 用户名;</span></span><br><span class="line">SQL&gt;grant dba, connect to demodb;</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Database</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用部署</title>
    <url>/2020/01/01/Docker%20%E5%B8%B8%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h4 id="Mysql部署"><a href="#Mysql部署" class="headerlink" title="Mysql部署"></a>Mysql部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/mysql &amp;&amp; <span class="built_in">cd</span> /opt/mysql </span><br><span class="line">docker run -p 3306:3306 --name mysql-57 \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d \</span><br><span class="line">-v <span class="variable">$PWD</span>/logs:/logs \</span><br><span class="line">-v <span class="variable">$PWD</span>/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=1q2w3e \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql-57 \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /data/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/mysql/logs:/logs \</span><br><span class="line">-v /data/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=1q2w3e \</span><br><span class="line">-e MYSQL_DATABASE=zeus \</span><br><span class="line">-e MYSQL_USER=zeus \</span><br><span class="line">-e MYSQL_PASSWORD=1q2w3e \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-d redis:latest \</span><br><span class="line">--requirepass 1q2w3e</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /home/docker/redis/&#123;conf,data&#125; -p</span><br><span class="line"><span class="built_in">cd</span> /home/docker/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载配置文件</span></span><br><span class="line">sudo wget https://raw.githubusercontent.com/antirez/redis/5.0.7/redis.conf -O conf/redis.conf</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">sudo wget http://download.redis.io/redis-stable/redis.conf -O conf/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换编辑</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s/logfile &quot;&quot;/logfile &quot;access.log&quot;/&#x27;</span> conf/redis.conf</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27;</span> conf/redis.conf</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/appendonly no/appendonly yes/&#x27;</span> conf/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis</span></span><br><span class="line">docker run \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-p 26379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">-v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /home/docker/redis/data:/data \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly <span class="built_in">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Postgres"><a href="#Postgres" class="headerlink" title="Postgres"></a>Postgres</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 5432:5432 --name postgres-latest \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /data/postgres/data:/var/lib/postgresql/data \</span><br><span class="line">-e POSTGRES_USER=postgres \</span><br><span class="line">-e POSTGRES_DB=postgres \</span><br><span class="line">-e POSTGRES_PASSWORD=1q2w3e \</span><br><span class="line">-d postgres:latest</span><br></pre></td></tr></table></figure>


<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v /data/nginx/conf.d/:/etc/nginx/conf.d/ \</span><br><span class="line">-v /data/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /data/www/:/var/www/ \</span><br><span class="line">-d nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Openresty"><a href="#Openresty" class="headerlink" title="Openresty"></a>Openresty</h4><blockquote>
<p>Docker Store 地址:<a href="https://store.docker.com/community/images/openresty/openresty">https://store.docker.com/community/images/openresty/openresty</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name openresty \ </span><br><span class="line">-p 80:80 \</span><br><span class="line">-v /opt/local/openresty/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro \</span><br><span class="line">-v /opt/local/openresty/logs:/usr/local/openresty/nginx/logs \</span><br><span class="line">-v /opt/local/openresty/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /opt/local/openresty/html:/etc/nginx/html \</span><br><span class="line">-d openresty/openresty</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx-demo.conf 见文末</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="EMQ-X"><a href="#EMQ-X" class="headerlink" title="EMQ X"></a>EMQ X</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文档</span></span><br><span class="line"><span class="comment"># http://docs.emqtt.cn/zh_CN/latest/getstarted.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像下载（http://emqtt.com/downloads/latest/docker）</span></span><br><span class="line">wget https://www.emqx.io/downloads/enterprise/v3.2.1/emqx-ee-docker-v3.2.1-amd64.zip -O emqx-ee-docker-v3.2.1-amd64.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压 emqx-docker 镜像包:</span></span><br><span class="line">unzip -o emqx-ee-docker-v3.2.1-amd64.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载镜像:</span></span><br><span class="line">docker load &lt; emqx-ee-docker-v3.2.1-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器:</span></span><br><span class="line">docker run -tid --name emq321 -p 1883:1883 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083  emqx/emqx-ee:v3.2.1-amd64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="mattermost"><a href="#mattermost" class="headerlink" title="mattermost"></a>mattermost</h4><blockquote>
<p>Mattermost 是一个开源的团队协作通讯工具</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># doc文档：https://docs.mattermost.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并启动容器</span></span><br><span class="line">docker run --name mattermost-preview -d --publish 8065:8065 mattermost/mattermost-preview</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------- docker部署 -----------</span></span><br><span class="line"><span class="comment"># 参考：https://docs.mattermost.com/install/prod-docker.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker-compose</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/<span class="variable">$dockerComposeVersion</span>/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署Mattermost</span></span><br><span class="line">sudo apt-get install git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mattermost/mattermost-docker.git</span><br><span class="line"><span class="built_in">cd</span> mattermost-docker</span><br><span class="line">docker-compose build</span><br><span class="line"><span class="built_in">mkdir</span> -pv ./volumes/app/mattermost/&#123;data,logs,config,plugins,client-plugins&#125;</span><br><span class="line"><span class="built_in">chown</span> -R 2000:2000 ./volumes/app/mattermost/</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h4><blockquote>
<p>Minio 是开源的对象存储服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像构建</span></span><br><span class="line">docker pull minio/minio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker run -p 9000:9000 --name minio \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ACCESS_KEY=admin&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_SECRET_KEY=bPxRfiCYEXAMPLEKEY&quot;</span> \</span><br><span class="line">  -v /data/minio/data:/data \</span><br><span class="line">  -v /data/minio/config:/root/.minio \</span><br><span class="line">  minio/minio server /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考</span></span><br><span class="line"><span class="comment"># https://docs.minio.io/docs/minio-docker-quickstart-guide</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="nginx-demo-conf"><a href="#nginx-demo-conf" class="headerlink" title="nginx-demo.conf"></a>nginx-demo.conf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 3010;</span><br><span class="line">    #listen 3010 ssl;</span><br><span class="line">    #ssl_certificate /etc/nginx/alikey/214624595710549.pem;</span><br><span class="line">    #ssl_certificate_key /etc/nginx/alikey/214624595710549.key;</span><br><span class="line">    #ssl_session_timeout 5m;</span><br><span class="line">    #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    #ssl_prefer_server_ciphers on;</span><br><span class="line">    #server_name class.h3c.com;</span><br><span class="line">    server_name _;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 40M;</span><br><span class="line">    uwsgi_read_timeout 300;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /data/file &#123;</span><br><span class="line">        root /;</span><br><span class="line">        etag on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /lvz/ &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;Content-Type,Authorization&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Methods &#x27;GET,POST,PUT,DELETE,OPTIONS&#x27;;</span><br><span class="line">        proxy_set_header apikey b10882beb8704abea62596c85ce5d271;</span><br><span class="line">        proxy_pass https://lvzhouapi.h3c.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /open/uc/ &#123;</span><br><span class="line">        lua_code_cache off;</span><br><span class="line">        resolver 114.114.114.114;</span><br><span class="line">        access_by_lua_file /etc/nginx/conf.d/access1.lua;</span><br><span class="line">        #proxy_set_header &#x27;Authorization&#x27; &#x27;Token 37a89ca74c58f4b190796eaf876861658ad2c9dc&#x27;;</span><br><span class="line">        #proxy_pass http://edtech-test.h3c.com:12363/api/v1/;</span><br><span class="line">        proxy_set_header &#x27;Authorization&#x27; &#x27;Token 6c5a192e3e161342489971b10d36dee5250e64dd&#x27;;</span><br><span class="line">        proxy_pass http://edtech.h3c.com:12363/api/v1/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /open/nva/ &#123;</span><br><span class="line">        lua_code_cache off;</span><br><span class="line">        resolver 114.114.114.114;</span><br><span class="line">        access_by_lua_file /etc/nginx/conf.d/access1.lua;</span><br><span class="line">        #proxy_set_header &#x27;Authorization&#x27;  &#x27;Skeleton gjtxsjtyjsxqsl Z2p0eHNqdHlqc3hxc2w=&#x27;;</span><br><span class="line">        #proxy_pass http://edtech-test.h3c.com:14001/api/;</span><br><span class="line">        proxy_set_header &#x27;Authorization&#x27; &#x27;Skeleton gjtxsjtyjsxqsl Z2p0eHNqdHlqc3hxc2w=&#x27;;</span><br><span class="line">        proxy_pass http://edtech.h3c.com:14001/api/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="oracle-12c"><a href="#oracle-12c" class="headerlink" title="oracle 12c"></a>oracle 12c</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name oracle12c -d -p 1521:1521 \</span><br><span class="line">-v /data/oracle/:/mnt \</span><br><span class="line">sath89/oracle-12c</span><br></pre></td></tr></table></figure>


<h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name es \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-e HOSTNAME=es-single \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms256m -Xmx512m&quot; \</span><br><span class="line">-v /root/data/esdata:/usr/share/elasticsearch/data \</span><br><span class="line">elasticsearch:7.4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装ik(版本要对应，之后重启容器)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it xxx /bin/bash</span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.0/elasticsearch-analysis-ik-7.4.0.zip</span><br></pre></td></tr></table></figure>

<h5 id="mobz-elasticsearch-head"><a href="#mobz-elasticsearch-head" class="headerlink" title="mobz/elasticsearch-head"></a>mobz/elasticsearch-head</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name es_ui \</span><br><span class="line">-p 9100:9100 \</span><br><span class="line">mobz/elasticsearch-head:5-alpine</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="在线预览服务-keking-kkfileview"><a href="#在线预览服务-keking-kkfileview" class="headerlink" title="在线预览服务 keking/kkfileview"></a>在线预览服务 keking/kkfileview</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker 安装</span><br><span class="line">docker pull keking/kkfileview</span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">docker run --name kkfileview  -p 8012:8012 keking/kkfileview</span><br><span class="line"># 或</span><br><span class="line">docker run -it -p 8012:8012 keking/kkfileview</span><br><span class="line"></span><br><span class="line"># 项目接入使用</span><br><span class="line">var url = &#x27;http://127.0.0.1:8080/file/test.txt&#x27;; //要预览文件的访问地址</span><br><span class="line">window.open(&#x27;http://127.0.0.1:8012/onlinePreview?url=&#x27;+encodeURIComponent(previewUrl));</span><br><span class="line"></span><br><span class="line"># 说明：https://gitee.com/kekingcn/file-online-preview/wikis/pages</span><br></pre></td></tr></table></figure>


<h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull nacos/nacos-server</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--privileged=true \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_HOST=118.25.6.156 \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_PASSWORD=1q2w3e \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_DB_NAME=nacos \</span><br><span class="line">-e MYSQL_SLAVE_SERVICE_HOST=118.25.6.156 \</span><br><span class="line">-e MYSQL_SLAVE_SERVICE_PORT=3306 \</span><br><span class="line">-v /home/dockerdata/nacos/logs:/home/nacos/logs \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker之创建镜像（Dockerfile、Commit）</title>
    <url>/2020/01/01/Docker%E4%B9%8B%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F%EF%BC%88Dockerfile%E3%80%81Commit%EF%BC%89/</url>
    <content><![CDATA[<h3 id="查看镜像详情信息"><a href="#查看镜像详情信息" class="headerlink" title="查看镜像详情信息"></a>查看镜像详情信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 镜像名 命令来查看新创建的镜像的详细信息</span><br></pre></td></tr></table></figure>

<h3 id="commit命令创建镜像"><a href="#commit命令创建镜像" class="headerlink" title="commit命令创建镜像"></a>commit命令创建镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式： docker commit [-m=&quot;提交备注信息&quot; ] [--author=&quot;作者&quot;]  容器ID 新镜像名:标签 </span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:18.04 /bin/bash</span><br><span class="line">docker commit -m=&quot;A new image&quot; --author=&quot;Murray&quot; b437ffe4d630 test/ubuntu:v1</span><br></pre></td></tr></table></figure>

<h4 id="Dockerfile创建镜像"><a href="#Dockerfile创建镜像" class="headerlink" title="Dockerfile创建镜像"></a>Dockerfile创建镜像</h4><blockquote>
<p>执行docker build命令时，Dockerfile中的所有指令都会被执行并且提交，并且在该命令成功结束后返回一个新镜像。</p>
</blockquote>
<blockquote>
<p>格式：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build [ --no-cache] -t=&quot;仓库/镜像名&quot; .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用docker history命令看到新构建的test/ubuntu:v1镜像的每一层，以及创建这些层的Dockerfile指令。Dockerfile由一行行命令语句组成，并且支持用”#”开头作为注释，一般的，Dockerfile分为四部分：基础镜像信息，维护者信息，镜像操作指令和容器启动时执行的指令。</p>
</blockquote>
<blockquote>
<p>Dockerfile指令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、FROM</span><br><span class="line">格式：FROM &lt;image&gt;或 FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">第一条指令必须为FROM指令，并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）</span><br><span class="line"></span><br><span class="line">2、MAINTAINET</span><br><span class="line">格式：MAINTAINET &lt;name&gt;</span><br><span class="line">指定维护者的信息</span><br><span class="line"></span><br><span class="line">3、RUN</span><br><span class="line">格式：RUN &lt;command&gt; 或 RUN [&quot;&quot;, &quot;&quot;, &quot;&quot;]</span><br><span class="line">每条指令将在当前镜像基础上执行，并提交为新的镜像。（可以用&quot;\&quot;换行）</span><br><span class="line"></span><br><span class="line">4、CMD</span><br><span class="line">格式：CMD [&quot;&quot;,&quot;&quot;,&quot;&quot;]</span><br><span class="line">指定启动容器时执行的命令，每个Dockerfile只能有一条CMD指令，如果指定了多条指令，则最后一条执行。（会被启动时指定的命令覆盖）</span><br><span class="line"></span><br><span class="line">5、EXPOSE</span><br><span class="line">格式：EXPOSE &lt;port&gt;  [ &lt;port&gt; ...]</span><br><span class="line">告诉Docker服务端暴露端口，在容器启动时需要通过 -p 做端口映射</span><br><span class="line"></span><br><span class="line">6、ENV</span><br><span class="line">格式：ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">指定环境变量，会被RUN指令使用，并在容器运行时保存</span><br><span class="line"></span><br><span class="line">7、ADD</span><br><span class="line">格式：ADD  &lt;src&gt;  &lt;dest&gt;</span><br><span class="line">复制指定的&lt;src&gt;到容器的&lt;dest&gt;中，&lt;src&gt;可以是Dockerfile所在的目录的一个相对路径；可以是URL，也可以是tar.gz（自动解压）</span><br><span class="line">格式：COPY &lt;src&gt;  &lt;dest&gt;</span><br><span class="line">复制本地主机的 &lt;src&gt; （ 为 Dockerfile 所在目录的相对路径）到容器中的 &lt;dest&gt; （当使用本地目录为源目录时，推荐使用 COPY）</span><br><span class="line"></span><br><span class="line">9、ENTRYPOINT</span><br><span class="line">格式：ENTRYPOINT [&quot;&quot;,&quot;&quot;,&quot;&quot;]</span><br><span class="line">配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。（每个 Dockerfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效）</span><br><span class="line"></span><br><span class="line">10、VOLUME</span><br><span class="line">格式：VOLUME [&quot;/mnt&quot;] </span><br><span class="line">创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等</span><br><span class="line"></span><br><span class="line">11、USER</span><br><span class="line">格式：USER daemon</span><br><span class="line">指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。</span><br><span class="line"></span><br><span class="line">12、WORKDIR</span><br><span class="line">格式：WORKDIR /path/to/workdir</span><br><span class="line">为后续的 RUN 、 CMD 、 ENTRYPOINT 指令配置工作目录。（可以使用多个 WORKDIR	指令，后续命令如果参数是相对路径， 则会基于之前命令指定的路径）</span><br><span class="line"></span><br><span class="line">13、ONBUILD</span><br><span class="line">格式：ONBUILD [INSTRUCTION]</span><br><span class="line">配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令</span><br></pre></td></tr></table></figure>

<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p><strong>vim Dockerfile</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">MAINTAINER Murray &quot;murray@qq.com&quot;</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line">RUN echo &#x27;Hi, I am in your container&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure>

<h3 id="从新镜像启动容器"><a href="#从新镜像启动容器" class="headerlink" title="从新镜像启动容器"></a>从新镜像启动容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80 --name static_web test/ubuntu:v1 nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-d 选项，告诉Docker以分离（detached）的方式在后台运行。<br><code>nginx -g &quot;daemon off;&quot;</code> 在容器中运行的命令，这将以前台运行的方式启动Nginx，来作为我们的Web服务器。</p>
</blockquote>
<blockquote>
<p>-p 选项，控制Docker在运行时应该公开哪些网络端口给外部（宿主机）</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker之踩坑笔记</title>
    <url>/2020/01/01/Docker%E4%B9%8B%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="自定义容器脚本（docker-entrypoint）报错"><a href="#自定义容器脚本（docker-entrypoint）报错" class="headerlink" title="自定义容器脚本（docker-entrypoint）报错"></a>自定义容器脚本（docker-entrypoint）报错</h3><ul>
<li>错误信息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">standard_init_linux.go:211: exec user process caused &quot;no such file or directory&quot;</span><br></pre></td></tr></table></figure></li>
<li>解决<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原因是镜像的entrypoint设置的启动脚本格式是dos，在linux系统上需要修改成unix格式。</span></span><br><span class="line">vim docker-entrypoint</span><br><span class="line"><span class="comment"># 查看当前文件的fileformat格式</span></span><br><span class="line">:<span class="built_in">set</span> ff</span><br><span class="line"><span class="comment"># 若为dos，则需改为unix, 保存即可</span></span><br><span class="line">:<span class="built_in">set</span> ff=unix</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ECS Linux增加或删除虚拟内存swap</title>
    <url>/2020/10/01/ECS%20Linux%E5%A2%9E%E5%8A%A0%E6%88%96%E5%88%A0%E9%99%A4%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98swap/</url>
    <content><![CDATA[<h4 id="ECS-Linux增加或删除虚拟内存swap"><a href="#ECS-Linux增加或删除虚拟内存swap" class="headerlink" title="ECS Linux增加或删除虚拟内存swap"></a>ECS Linux增加或删除虚拟内存swap</h4><p><strong>一、增加swap</strong></p>
<ol>
<li><p>使用如下命令，创建1G的swap空间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/tmp/swap bs=1MB count=1024</span><br></pre></td></tr></table></figure>
</li>
<li><p>制作一个swap文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkswap /tmp/swap</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动swap分区。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapon /tmp/swap</span><br></pre></td></tr></table></figure>
</li>
<li><p>此操作只对当前有效，重启服务器后失效。如果想持续保持。可以编辑/etc/fstab文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure>
<p>并在其添加以下内容，保存后即可确保增加的虚拟内存swap永久生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp/swap swap swap defaults 0 0</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>二、删除swap</strong></p>
<p>如你不再需要虚拟内存swap，删除<code>/etc/fstab</code>文件中的<code>/tmp/swap swap swap defaults 0 0</code>内容。并回收swap空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapoff /tmp/swap</span><br><span class="line">rm /tmp/swap</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 之 Docker部署</title>
    <url>/2020/01/01/ELK%20%E4%B9%8B%20docker%20%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="ELK-之-docker-部署"><a href="#ELK-之-docker-部署" class="headerlink" title="ELK 之 docker 部署"></a>ELK 之 docker 部署</h3><blockquote>
<p>基于docker部署使用ELK+FileBeat日志管理平台, ELK+Filebeat的集中式日志解决方案也是大热。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/elk%E6%B5%81%E7%A8%8B.png" alt="ELK流程"></p>
<h3 id="elk镜像"><a href="#elk镜像" class="headerlink" title="elk镜像"></a>elk镜像</h3><ul>
<li><p>拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull sebp/elk</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<blockquote>
<p>运行elk容器的时候，需将宿主机的端口转发到该容器，其中ES端口为9200，kibana端口为5601，logstash为5044（注：可进入容器自行修改，再自由分配）；建议将配置文件和数据存放在宿主机，便于后期维护，因此还需要将宿主机目录挂载在容器/data当中。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name elk \</span><br><span class="line">--ulimit nofile=65536:65536 \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 5044:5044 \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /opt/elk/data:/data \</span><br><span class="line">sebp/elk</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>ELK服务端简单配置</p>
<blockquote>
<p>这里是将ELK作为服务端，而sebp/elk镜像默认生成有ssl证书，将证书拷贝至客户端即可，容器中logstash的相关配置位于/etc/logstash/conf.d，输入默认配置如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    ssl =&gt; false</span><br><span class="line">    ssl_certificate =&gt; &quot;/etc/pki/tls/certs/logstash-beats.crt&quot;</span><br><span class="line">    ssl_key =&gt; &quot;/etc/pki/tls/private/logstash-beats.key&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：产生的数据文件及相关配置文件，可统一至于 之前挂载的 /data目录下</p>
</blockquote>
</li>
<li><p>简单测试</p>
<blockquote>
<p>访问：<a href="http://127.0.0.1:5601/">http://127.0.0.1:5601</a></p>
</blockquote>
</li>
</ul>
<p><strong>Elasticsearch 无法启动</strong></p>
<ul>
<li>报错<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2019-09-20T20:41:54,798][ERROR][o.e.b.Bootstrap] [elk] node validation exception</span><br><span class="line">[1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></li>
<li>解决<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/sysctl.conf 文件最后添加一行</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line"># 加载设置好的系统参数</span><br><span class="line">sudo sysctl -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="ELK客户端配置"><a href="#ELK客户端配置" class="headerlink" title="ELK客户端配置"></a>ELK客户端配置</h3><blockquote>
<p>ELK客户端配置核心在于Filebeat的相关配置</p>
</blockquote>
<h4 id="1-添加elastic-key至客户端"><a href="#1-添加elastic-key至客户端" class="headerlink" title="1. 添加elastic key至客户端"></a>1. 添加elastic key至客户端</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<h4 id="2-安装apt-transport-https"><a href="#2-安装apt-transport-https" class="headerlink" title="2. 安装apt-transport-https"></a>2. 安装apt-transport-https</h4><blockquote>
<p>由于将使用https传输的elastic数据，需安装apt-transport-https</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y apt-transport-https</span><br></pre></td></tr></table></figure>

<h4 id="3-添加elastic库并更新apt-get库"><a href="#3-添加elastic库并更新apt-get库" class="headerlink" title="3. 添加elastic库并更新apt-get库"></a>3. 添加elastic库并更新apt-get库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<h4 id="4-安装Filebeat及相关配置"><a href="#4-安装Filebeat及相关配置" class="headerlink" title="4. 安装Filebeat及相关配置"></a>4. 安装Filebeat及相关配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y filebeat</span><br><span class="line">sudo vi /etc/filebeat/filebeat.yml</span><br></pre></td></tr></table></figure>

<p><strong>相关配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /var/log/simple-flask.log</span><br><span class="line">    #- c:\programdata\elasticsearch\logs\*</span><br><span class="line"></span><br><span class="line">  fields:</span><br><span class="line">    region: Beijing</span><br><span class="line">    type: log</span><br><span class="line"></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;&lt;logstash_ip&gt;:5044&quot;]</span><br><span class="line">  bulk_max_size: 2048</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-启动Filebeat"><a href="#5-启动Filebeat" class="headerlink" title="5. 启动Filebeat"></a>5. 启动Filebeat</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start filebeat  // 启动  </span><br><span class="line">sudo systemctl <span class="built_in">enable</span> filebeat // 设置为开机启动</span><br><span class="line">sudo systemctl status filebeat // 检查服务状态</span><br></pre></td></tr></table></figure>

<h4 id="6-kibana-配置"><a href="#6-kibana-配置" class="headerlink" title="6. kibana 配置"></a>6. kibana 配置</h4><ul>
<li><ol>
<li>点击左侧management，选择Kibana菜单中的”Index Patterns”，创建”Index Pattern”。</li>
</ol>
</li>
<li><ol start="2">
<li>在”Create index pattern” 的 Step1 中输入”filebeat-*”，点击”Next step”。</li>
</ol>
</li>
<li><ol start="3">
<li>在”Create index pattern” 的 Step2 中选择”@timestamp”, 点击”Create indx pattern” 完成创建。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>EL与OGNL表达式区别</title>
    <url>/2018/01/01/EL%E4%B8%8EOGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单纯在jsp页面中出现，是在四个作用域中取值,page,request,session,application.  </span><br><span class="line">如果在struts环境中，它除了有在上面的四个作用域的取值功能外，还能从值栈(valuestack)中取值.  </span><br><span class="line">特点1：$&#123;name&#125;，name在值栈中的查找顺序是：先从对象栈中取，取到终止，否则,向map中取。  </span><br><span class="line">特点2：在对象栈的查找顺序是，先从model中找是否有name这个属性，找到终止，否则，找action中是否有name这个全局变量。 </span><br><span class="line">特点3：$&#123;#name&#125;，这是错误的写法，里面不能带#号。  </span><br><span class="line">特点4：如果放在对象栈中的是一个自定义的对象，那么$&#123;property&#125;里面可以直接去该对象的属性值，不用这样$&#123;object.property&#125;   </span><br></pre></td></tr></table></figure>

<h3 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 读取从后台传递的值  </span><br><span class="line">%&#123;#name&#125;: 表示从值栈的map中取值 </span><br><span class="line">%&#123;name&#125;: 表示从值栈的对象栈中取值 </span><br><span class="line">%&#123;#request.name&#125;: 表示从request域中取值 </span><br><span class="line"></span><br><span class="line">2. 自己构建数据    </span><br><span class="line">a，构建Map&lt;s:iterator var=&quot;map&quot; value=&quot;#&#123;&#x27;key1&#x27;:&#x27;value1&#x27;,&#x27;key2&#x27;:&#x27;value2&#x27;&#125;&quot;/&gt;  </span><br><span class="line">b，构建List&lt;s:iterator var=&quot;list&quot; value=&quot;&#123;&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;&#125;&quot;&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><blockquote>
<p>JSTL一般要配合EL表达式一起使用,来实现在jsp中不出现java代码段。</p>
</blockquote>
<h3 id="JSTL与EL详解"><a href="#JSTL与EL详解" class="headerlink" title="JSTL与EL详解"></a>JSTL与EL详解</h3><blockquote>
<p>EL主要用于查找作用域中的数据,然后对它们执行简单操作；它不是编程语言，甚至不是脚本编制语言。</p>
</blockquote>
<blockquote>
<p>通常与 JSTL 标记一起作用，能用简单而又方便的符号来表示复杂的行为。</p>
</blockquote>
<h4 id="EL基本格式"><a href="#EL基本格式" class="headerlink" title="EL基本格式"></a>EL基本格式</h4><blockquote>
<p>EL表达式的格式：<br>用美元符号（$）定界,内容包括在花括号（{}）中, 如: <code>$&#123;loginInfoBean.suser&#125;</code></p>
</blockquote>
<blockquote>
<p>此外，您可以将多个表达式与静态文本组合在一起以通过字符串并置来构造动态属性值; 如:<code>Hello &#123;loginInfoBean.suser&#125; $&#123;loginInfoBean.spwd&#125;</code></p>
</blockquote>
<h4 id="EL语法组成-标识符"><a href="#EL语法组成-标识符" class="headerlink" title="EL语法组成-标识符"></a>EL语法组成-标识符</h4><blockquote>
<p>EL表达式由标识符、存取器、文字和运算符组成。</p>
</blockquote>
<blockquote>
<p>标识符用来标识存储在作用域中的数据对象。EL 有 11 个保留标识符，对应于 11个EL隐式对象。除了11隐式对象外,假定所有其它标识符都用来标识作用域的变量。</p>
</blockquote>
<blockquote>
<p>标识符</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">$&#123;abc&#125; 相当于&lt;%=pageContext.findAttribute(&quot;abc&quot;)%&gt;</span><br><span class="line">$&#123;og_1&#125; &lt;%=pageContext.findAttribute(&quot;og_1&quot;)%&gt; 就是说&#123;&#125;内的标识符除了11个保留字之外都表示作用域中的数据对应的名.</span><br><span class="line"></span><br><span class="line">$&#123;requestScope&#125;中的requestScope是11个EL隐式对象之一,它不再表示作用域中数据,而是表示request作用域;</span><br><span class="line"></span><br><span class="line">EL隐藏对象</span><br><span class="line">pageContext  PageContext 实例对应于当前页面的处理</span><br><span class="line">pageScope  与页面作用域属性的名称和值相关联的Map类</span><br><span class="line">requestScope 与请求作用域属性的名称和值相关联的Map类</span><br><span class="line">sessionScope 与会话作用域属性的名称和值相关联的Map类</span><br><span class="line">applicationScope 与应用程序作用域属性的名称和值相关联的Map类</span><br><span class="line">param  按名称存储请求参数的主要值的 Map 类</span><br><span class="line">paramValues 将请求参数的所有值作为 String 数组存储的 Map 类</span><br><span class="line">Header  按名称存储请求头主要值的 Map 类</span><br><span class="line">headerValues 将请求头的所有值作为 String 数组存储的 Map 类</span><br><span class="line">cookie  按名称存储请求附带的 cookie 的 Map 类</span><br><span class="line">initParam  按名称存储 Web 应用程序上下文初始化参数的Map类</span><br></pre></td></tr></table></figure>
<blockquote>
<p>EL存取器: 存取器用来检索对象的特性或集合的元素。</p>
</blockquote>
<blockquote>
<p>存取器: 通过 “[]” 或 “.” 符号获取相关数据</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例:</span><br><span class="line">$&#123;userBean.suser&#125;  或  $&#123;userBean[&quot;suser&quot;]&#125; //获取输出bean中的suser属性值;</span><br><span class="line">$&#123;mcType[&quot;id&quot;]&#125; //获取map中key为id对应的值;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>EL运算符: 运算符允许对数据和文字进行组合以及比较。</p>
</blockquote>
<blockquote>
<p>EL运算符:</p>
</blockquote>
<table>
<thead>
<tr>
<th>类别</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>+、-、*、/（或 div）和 %（或 mod）</td>
</tr>
<tr>
<td>关系运算符</td>
<td>==(或eq)、!=(或ne)、&lt;(或lt)、&gt;(或gt)、&lt;=(或le)  和  &gt;=(或ge)</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>&amp;&amp;(或 and)、||(或or)和 !(或 not)</td>
</tr>
<tr>
<td>验证运算符</td>
<td>empty</td>
</tr>
</tbody></table>
<blockquote>
<p>验证运算符(empty):对于验证数据特别有用。</p>
</blockquote>
<blockquote>
<p>empty 运算符采用单个表达式作为其变量（也即，${empty input}）, 并返回一个布尔值，该布尔值表示对表达式求值的结果是不是”空”值。求值结果为 null 的表达式被认为是空，即无元素的集合或数组。</p>
</blockquote>
<blockquote>
<p>如果参数是对长度为零的 String 求值所得的结果，则 empty 运算符也将返回 true。</p>
</blockquote>
<blockquote>
<p>EL文字</p>
</blockquote>
<blockquote>
<p>文字表示固定的值 — 数字、字符、字符串、布尔型或空值。</p>
</blockquote>
<blockquote>
<p>在 EL 表达式中，数字、字符串、布尔值和 null 都可以被指定为文字值。字符串可以用单引号或双引号定界。布尔值被指定为 true 和 false</p>
</blockquote>
<h3 id="JSTL是什么"><a href="#JSTL是什么" class="headerlink" title="JSTL是什么"></a>JSTL是什么</h3><blockquote>
<p>JSTL(JSP Standard Tag  Library, JSP标准标签库)是一个不断完善的开放源代码的JSP标签库，是由apache的jakarta小组来维护的。JSTL1.0 由四个定制标记库(core、format、xml 和 sql) 和一对通用标记库验证器组成。<br>core 标记库提供了定制操作，通过限制了作用域的变量管理数据，以及执行页面内容的迭代和条件操作。它还提供了用来生成和操作 URL 的标记。format 标记库定义了用来格式化数据(尤其是数字和日期)的操作。它还支持使用本地化资源束进行JSP页面的国际化。<br>xml 库包含一些标记，这些标记用来操作通过XML表示的数据，而 sql 库定义了用来查询关系数据库的操作。 两个 JSTL 标记库验证器允许开发人员在其 JSP 应用程序中强制使用编码标准。</p>
</blockquote>
<blockquote>
<p>如果要使用JSTL，则必须引用jstl.jar和 standard.jar两个包。</p>
</blockquote>
<blockquote>
<p>为什么要用JSTL</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们JSP用于开发信息展现页非常方便;也可以嵌入java代码(scriptlet、表达式和声明)代码用来实现相关逻辑控制。</span><br><span class="line">看下面程序。但这样做会带来如下问题:</span><br><span class="line">jsp维护难度增加;</span><br><span class="line">出错提示不明确，不容易调试;</span><br><span class="line">分工不明确;(即jsp开发者是美工,也是程序员);</span><br><span class="line">最终增加程序的开发成本;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决上面的问题可以使用定制标记库，JSTL使JSP开发者可以减少对脚本元素的需求，甚至可以不需要它们，从而避免了相关的维护成本。使分工更明确。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% if (session.getAttribute(&quot;user&quot;).equals(&quot;member&quot;)) &#123; %&gt;</span><br><span class="line">    &lt;p&gt;Welcome, member!&lt;/p&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;p&gt;Welcome, guest!&lt;/p&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JSTL一般配合EL一起使用,因此先看看EL.</p>
</blockquote>
<blockquote>
<p>JSTL部署</p>
</blockquote>
<blockquote>
<p>在EE应用程序中部署JSTL有两种方式:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已存在的工程上部署</span><br><span class="line">将jstl.jar和standard.jar两个包考到现有工程</span><br><span class="line">WebRoot / WEB-INF / lib 目录下</span><br><span class="line">将相关的 .tld文件考到现有工程 WebRoot / WEB-INF 目录下;</span><br><span class="line"> </span><br><span class="line">也可通过eclipse在已存在</span><br><span class="line">工程上部署</span><br><span class="line">新建工程的时候直接部署</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在JSP使用JSTL-core标签库</p>
</blockquote>
<blockquote>
<p>core在jsp中的使用:<br>在 web.xml 中添加</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;jsp-config&gt;</span><br><span class="line">  &lt;taglib&gt;</span><br><span class="line">      &lt;taglib-uri&gt;http://java.sun.com/jsp/jstl/core&lt;/taglib-uri&gt;</span><br><span class="line">      &lt;taglib-location&gt;/WEB-INF/c.tld&lt;/taglib-location&gt;</span><br><span class="line">  &lt;/taglib&gt;</span><br><span class="line">&lt;/jsp-config&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在jsp文件中添加</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;或&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;/WEB-INF/c.tld&quot; %&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 <code>&lt;c:out value=&quot;HelloWorld&quot; /&gt;</code></p>
</blockquote>
<blockquote>
<p>Core的操作作用域变量标签</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取输出作用域中变量.</span><br><span class="line">&lt;c:out &gt; 属性: value [default] [escapeXml]</span><br><span class="line"></span><br><span class="line">定义作用域中变量</span><br><span class="line">&lt;c:set &gt; 属性: value var [scope]</span><br><span class="line"></span><br><span class="line">删除作用域中变量</span><br><span class="line">&lt;c:remove &gt; 属性: var [scope]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Core的条件控制标签</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单分支条件</span><br><span class="line">&lt;c:if &gt;  属性:test [var] [scope]</span><br><span class="line"></span><br><span class="line">多分支条件</span><br><span class="line"> &lt;c:choose &gt; </span><br><span class="line">   &lt;c:when &gt; 属性: test</span><br><span class="line">   &lt;c:otherwise &gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Core的其它标签</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出转换成的URL:</span><br><span class="line">&lt;c:url &gt; 属性:value [context] [var] [scope]</span><br><span class="line">和&lt;jsp:include &gt;相似用于包含其它页面的内容:</span><br><span class="line">&lt;c:import &gt;属性:url [context] [charEncoding] [var] [scope]</span><br><span class="line"></span><br><span class="line">重定向</span><br><span class="line">&lt;c:redirect &gt;属性: url [context]</span><br><span class="line">与&lt;c:url&gt;&lt;c:import&gt;&lt;c:redirect&gt;配合使用,用于传参</span><br><span class="line">&lt;c:param &gt;属性: name value</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Core的循环控制标签</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现简单循环</span><br><span class="line">&lt;c:forEach &gt;  var=&#x27;item&#x27; begin=&#x27;5&#x27; end=&#x27;10&#x27; step=&#x27;2&#x27; varStatus=&#x27;&#x27;</span><br><span class="line">实现迭代(遍历)</span><br><span class="line">&lt;c:forEach &gt; items=&#x27;&#x27; var=&#x27;item&#x27; varStatus=&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">属性varStatus和var相似设置一个作用域变量;只是varStatus作用域变量中存的是包括运行状态的对象;此对象包含如下属性:</span><br><span class="line">current  index  count  first  last  begin  end  step</span><br></pre></td></tr></table></figure>

<blockquote>
<p>简单循环</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GBK&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;/WEB-INF/c.tld&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</span><br><span class="line">&lt;title&gt;testjstl1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:forEach var=&quot;i&quot; step=&quot;1&quot; begin=&quot;1&quot; end=&quot;100&quot;&gt;</span><br><span class="line">$&#123;i&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>循环迭代</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GBK&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;/WEB-INF/c.tld&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</span><br><span class="line">&lt;title&gt;testjstl1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:forEach var=&quot;mcBean&quot; items=&quot;$&#123;mcList&#125;&quot; varStatus=&quot;mcStatus&quot;&gt;</span><br><span class="line">当前遍历索引:$&#123;mcStatus.index&#125; ;  商品名:$&#123;mcBean.sname&#125; ; .... &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在JSP使用JSTL-format标签库</p>
</blockquote>
<blockquote>
<p>format在jsp中的使用:<br>在 web.xml 中添加</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;jsp-config&gt;</span><br><span class="line">  &lt;taglib&gt;</span><br><span class="line">      &lt;taglib-uri&gt;http://java.sun.com/jstl/fmt&lt;/taglib-uri&gt;</span><br><span class="line">      &lt;taglib-location&gt;/WEB-INF/fmt.tld&lt;/taglib-location&gt;</span><br><span class="line">  &lt;/taglib&gt;</span><br><span class="line">&lt;/jsp-config&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在jsp文件中添加</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jstl/fmt&quot; %&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;fmt:formatDate value=&quot;&quot; pattern=&quot;yyyy-MM-dd&quot; /&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Format常用标签</p>
</blockquote>
<blockquote>
<p>格式化输出日期:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;fmt:formatDate &gt; value type var pattern</span><br></pre></td></tr></table></figure>

<blockquote>
<p>type取值:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">short: 10/19/00 6:07 PM</span><br><span class="line">medium: Oct 19, 2000 6:07:01 PM</span><br><span class="line">long: October 19, 2000 6:07:01 PM MDT</span><br><span class="line">full: Thursday, October 19, 2000 6:07:01 PM MDT</span><br><span class="line">例: &lt;fmt:formatDate value=&quot;&quot; pattern=&quot;yyyy/MM/dd&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>格式化输出数字:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;fmt:formatNumber&gt; value var pattern</span><br><span class="line">例:&lt;fmt:formatNumber value=&quot;&quot; pattern=&quot;###.##&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>format实例</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GBK&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;/WEB-INF/fmt.tld&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</span><br><span class="line">&lt;title&gt;testjstl1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:useBean id=&quot;curDate&quot; class=&quot;java.util.Date&quot; scope=&quot;page&quot;/&gt;</span><br><span class="line">&lt;fmt:formatDate value=&quot;$&#123;curDate&#125;&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&gt;&lt;br&gt;</span><br><span class="line"> </span><br><span class="line">&lt;fmt:formatNumber value=&quot;10.32898432&quot; pattern=&quot;#.##&quot;/&gt;&lt;br&gt;</span><br><span class="line">&lt;% request.setAttribute(&quot;var1&quot;,3.1415926); %&gt;</span><br><span class="line">&lt;fmt:formatNumber value=&quot;$&#123;var1&#125;&quot; pattern=&quot;#.##&quot;/&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>EMQ 安装部署</title>
    <url>/2021/02/01/EMQ%20%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="EMQ-Docker-部署"><a href="#EMQ-Docker-部署" class="headerlink" title="EMQ Docker 部署"></a>EMQ Docker 部署</h3><h4 id="emqx下载（docker）"><a href="#emqx下载（docker）" class="headerlink" title="emqx下载（docker）"></a>emqx下载（docker）</h4><blockquote>
<p>EMQ X R3.0 消息服务器每个版本会发布 Ubuntu、CentOS、FreeBSD、Mac OS X、Windows 平台程序包与 Docker 镜像。</p>
</blockquote>
<p>下载地址：<a href="http://www.emqtt.com/downloads">http://www.emqtt.com/downloads</a></p>
<h4 id="解压并加载docker包emqx-docker-v3-1-beta-1-zip"><a href="#解压并加载docker包emqx-docker-v3-1-beta-1-zip" class="headerlink" title="解压并加载docker包emqx-docker-v3.1-beta.1.zip"></a>解压并加载docker包<code>emqx-docker-v3.1-beta.1.zip</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip -o emqx-docker-v3.1-beta.1.zip</span><br><span class="line">docker load &lt; emqx-docker-v3.1-beta.1-amd64</span><br></pre></td></tr></table></figure>

<h4 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -tid --name emq31 \</span><br><span class="line">-p 1883:1883 -p 8083:8083 -p 8883:8883 \</span><br><span class="line">-p 8084:8084 -p 18083:18083 -p 8080:8080\</span><br><span class="line">emqx/emqx:v3.1-beta.1-amd64</span><br></pre></td></tr></table></figure>

<h4 id="docker操作"><a href="#docker操作" class="headerlink" title="docker操作"></a>docker操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停止容器</span><br><span class="line">docker stop emq31</span><br><span class="line"></span><br><span class="line"># 开启容器</span><br><span class="line">docker start emq31</span><br><span class="line"></span><br><span class="line"># docker 控制台</span><br><span class="line">docker exec -it emq31 ash</span><br></pre></td></tr></table></figure>

<h3 id="EMQ-说明"><a href="#EMQ-说明" class="headerlink" title="EMQ 说明"></a>EMQ 说明</h3><h4 id="EMQ-X-R3-1-消息服务器默认占用的TCP端口"><a href="#EMQ-X-R3-1-消息服务器默认占用的TCP端口" class="headerlink" title="EMQ X R3.1 消息服务器默认占用的TCP端口"></a>EMQ X R3.1 消息服务器默认占用的TCP端口</h4><table>
<thead>
<tr>
<th>端口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1883</td>
<td>MQTT 协议端口</td>
</tr>
<tr>
<td>8883</td>
<td>MQTT/SSL 端口</td>
</tr>
<tr>
<td>8083</td>
<td>MQTT/WebSocket 端口</td>
</tr>
<tr>
<td>8080</td>
<td>HTTP API 端口</td>
</tr>
<tr>
<td>18083</td>
<td>Dashboard 管理控制台端口</td>
</tr>
</tbody></table>
<blockquote>
<p>18083端口是 Web 管理控制占用，该端口由 emq_dashboard 插件启用。<br>控制台 URL: http:://localhost:18083/ ，默认登录用户名: admin, 密码: public</p>
</blockquote>
<h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><ol>
<li>EMQ X 安装：<a href="http://docs.emqtt.cn/zh_CN/latest/install.html">http://docs.emqtt.cn/zh_CN/latest/install.html</a></li>
<li>EMQ 文档: <a href="http://www.emqtt.com/docs/v2/index.html">http://www.emqtt.com/docs/v2/index.html</a></li>
</ol>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI扩展校验规则</title>
    <url>/2018/06/02/EasyUI%E6%89%A9%E5%B1%95%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h3 id="身份证校验"><a href="#身份证校验" class="headerlink" title="身份证校验"></a>身份证校验</h3><p>validcardid.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var idCardNoUtil = &#123;</span><br><span class="line">        provinceAndCitys : &#123;</span><br><span class="line">            11 : &quot;北京&quot;,</span><br><span class="line">            12 : &quot;天津&quot;,</span><br><span class="line">            13 : &quot;河北&quot;,</span><br><span class="line">            14 : &quot;山西&quot;,</span><br><span class="line">            15 : &quot;内蒙古&quot;,</span><br><span class="line">            21 : &quot;辽宁&quot;,</span><br><span class="line">            22 : &quot;吉林&quot;,</span><br><span class="line">            23 : &quot;黑龙江&quot;,</span><br><span class="line">            31 : &quot;上海&quot;,</span><br><span class="line">            32 : &quot;江苏&quot;,</span><br><span class="line">            33 : &quot;浙江&quot;,</span><br><span class="line">            34 : &quot;安徽&quot;,</span><br><span class="line">            35 : &quot;福建&quot;,</span><br><span class="line">            36 : &quot;江西&quot;,</span><br><span class="line">            37 : &quot;山东&quot;,</span><br><span class="line">            41 : &quot;河南&quot;,</span><br><span class="line">            42 : &quot;湖北&quot;,</span><br><span class="line">            43 : &quot;湖南&quot;,</span><br><span class="line">            44 : &quot;广东&quot;,</span><br><span class="line">            45 : &quot;广西&quot;,</span><br><span class="line">            46 : &quot;海南&quot;,</span><br><span class="line">            50 : &quot;重庆&quot;,</span><br><span class="line">            51 : &quot;四川&quot;,</span><br><span class="line">            52 : &quot;贵州&quot;,</span><br><span class="line">            53 : &quot;云南&quot;,</span><br><span class="line">            54 : &quot;西藏&quot;,</span><br><span class="line">            61 : &quot;陕西&quot;,</span><br><span class="line">            62 : &quot;甘肃&quot;,</span><br><span class="line">            63 : &quot;青海&quot;,</span><br><span class="line">            64 : &quot;宁夏&quot;,</span><br><span class="line">            65 : &quot;新疆&quot;,</span><br><span class="line">            71 : &quot;台湾&quot;,</span><br><span class="line">            81 : &quot;香港&quot;,</span><br><span class="line">            82 : &quot;澳门&quot;,</span><br><span class="line">            91 : &quot;国外&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        powers : [ &quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot;, &quot;1&quot;, &quot;6&quot;, &quot;3&quot;, &quot;7&quot;, &quot;9&quot;,</span><br><span class="line">                &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot; ],</span><br><span class="line">        parityBit : [ &quot;1&quot;, &quot;0&quot;, &quot;X&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot; ],</span><br><span class="line">        genders : &#123;</span><br><span class="line">            male : &quot;男&quot;,</span><br><span class="line">            female : &quot;女&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        checkAddressCode : function(addressCode) &#123;</span><br><span class="line">            var check = /^[1-9]\d&#123;5&#125;$/.test(addressCode);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            if (idCardNoUtil.provinceAndCitys[parseInt(addressCode.substring(0, 2))]) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        checkBirthDayCode : function(birDayCode) &#123;</span><br><span class="line">            var check = /^[1-9]\d&#123;3&#125;((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))$/</span><br><span class="line">                    .test(birDayCode);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            var yyyy = parseInt(birDayCode.substring(0, 4), 10);</span><br><span class="line">            var mm = parseInt(birDayCode.substring(4, 6), 10);</span><br><span class="line">            var dd = parseInt(birDayCode.substring(6), 10);</span><br><span class="line">            var xdata = new Date(yyyy, mm - 1, dd);</span><br><span class="line">            if (xdata &gt; new Date()) &#123;</span><br><span class="line">                return false;// 生日不能大于当前日期</span><br><span class="line">            &#125; else if ((xdata.getFullYear() == yyyy)</span><br><span class="line">                    &amp;&amp; (xdata.getMonth() == mm - 1) &amp;&amp; (xdata.getDate() == dd)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        getParityBit : function(idCardNo) &#123;</span><br><span class="line">            var id17 = idCardNo.substring(0, 17);</span><br><span class="line">            var power = 0;</span><br><span class="line">            for (var i = 0; i &lt; 17; i++) &#123;</span><br><span class="line">                power += parseInt(id17.charAt(i), 10)</span><br><span class="line">                        * parseInt(idCardNoUtil.powers[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            var mod = power % 11;</span><br><span class="line">            return idCardNoUtil.parityBit[mod];</span><br><span class="line">        &#125;,</span><br><span class="line">        checkParityBit : function(idCardNo) &#123;</span><br><span class="line">            var parityBit = idCardNo.charAt(17).toUpperCase();</span><br><span class="line">            if (idCardNoUtil.getParityBit(idCardNo) == parityBit) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        checkIdCardNo : function(idCardNo) &#123;</span><br><span class="line">            // 15位和18位身份证号码的基本校验</span><br><span class="line">            var check = /^\d&#123;15&#125;|(\d&#123;17&#125;(\d|x|X))$/.test(idCardNo);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            // 判断长度为15位或18位</span><br><span class="line">            if (idCardNo.length == 15) &#123;</span><br><span class="line">                return idCardNoUtil.check15IdCardNo(idCardNo);</span><br><span class="line">            &#125; else if (idCardNo.length == 18) &#123;</span><br><span class="line">                return idCardNoUtil.check18IdCardNo(idCardNo);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 校验15位的身份证号码</span><br><span class="line">        check15IdCardNo : function(idCardNo) &#123;</span><br><span class="line">            // 15位身份证号码的基本校验</span><br><span class="line">            var check = /^[1-9]\d&#123;7&#125;((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d&#123;3&#125;$/</span><br><span class="line">                    .test(idCardNo);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            // 校验地址码</span><br><span class="line">            var addressCode = idCardNo.substring(0, 6);</span><br><span class="line">            check = idCardNoUtil.checkAddressCode(addressCode);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            var birDayCode = &#x27;19&#x27; + idCardNo.substring(6, 12);</span><br><span class="line">            // 校验日期码</span><br><span class="line">            return idCardNoUtil.checkBirthDayCode(birDayCode);</span><br><span class="line">        &#125;,</span><br><span class="line">        // 校验18位的身份证号码</span><br><span class="line">        check18IdCardNo : function(idCardNo) &#123;</span><br><span class="line">            // 18位身份证号码的基本格式校验</span><br><span class="line">            var check = /^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d&#123;3&#125;(\d|x|X)$/</span><br><span class="line">                    .test(idCardNo);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            // 校验地址码</span><br><span class="line">            var addressCode = idCardNo.substring(0, 6);</span><br><span class="line">            check = idCardNoUtil.checkAddressCode(addressCode);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            // 校验日期码</span><br><span class="line">            var birDayCode = idCardNo.substring(6, 14);</span><br><span class="line">            check = idCardNoUtil.checkBirthDayCode(birDayCode);</span><br><span class="line">            if (!check)</span><br><span class="line">                return false;</span><br><span class="line">            // 验证校检码</span><br><span class="line">            return idCardNoUtil.checkParityBit(idCardNo);</span><br><span class="line">        &#125;,</span><br><span class="line">        formateDateCN : function(day) &#123;</span><br><span class="line">            var yyyy = day.substring(0, 4);</span><br><span class="line">            var mm = day.substring(4, 6);</span><br><span class="line">            var dd = day.substring(6);</span><br><span class="line">            return yyyy + &#x27;-&#x27; + mm + &#x27;-&#x27; + dd;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 获取信息</span><br><span class="line">        getIdCardInfo : function(idCardNo) &#123;</span><br><span class="line">            var idCardInfo = &#123;</span><br><span class="line">                gender : &quot;&quot;, // 性别</span><br><span class="line">                birthday : &quot;&quot; // 出生日期(yyyy-mm-dd)</span><br><span class="line">            &#125;;</span><br><span class="line">            if (idCardNo.length == 15) &#123;</span><br><span class="line">                var aday = &#x27;19&#x27; + idCardNo.substring(6, 12);</span><br><span class="line">                idCardInfo.birthday = idCardNoUtil.formateDateCN(aday);</span><br><span class="line">                if (parseInt(idCardNo.charAt(14)) % 2 == 0) &#123;</span><br><span class="line">                    idCardInfo.gender = idCardNoUtil.genders.female;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    idCardInfo.gender = idCardNoUtil.genders.male;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (idCardNo.length == 18) &#123;</span><br><span class="line">                var aday = idCardNo.substring(6, 14);</span><br><span class="line">                idCardInfo.birthday = idCardNoUtil.formateDateCN(aday);</span><br><span class="line">                if (parseInt(idCardNo.charAt(16)) % 2 == 0) &#123;</span><br><span class="line">                    idCardInfo.gender = idCardNoUtil.genders.female;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    idCardInfo.gender = idCardNoUtil.genders.male;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return idCardInfo;</span><br><span class="line">        &#125;,</span><br><span class="line">        getId15 : function(idCardNo) &#123;</span><br><span class="line">            if (idCardNo.length == 15) &#123;</span><br><span class="line">                return idCardNo;</span><br><span class="line">            &#125; else if (idCardNo.length == 18) &#123;</span><br><span class="line">                return idCardNo.substring(0, 6) + idCardNo.substring(8, 17);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        getId18 : function(idCardNo) &#123;</span><br><span class="line">            if (idCardNo.length == 15) &#123;</span><br><span class="line">                var id17 = idCardNo.substring(0, 6) + &#x27;19&#x27; + idCardNo.substring(6);</span><br><span class="line">                var parityBit = idCardNoUtil.getParityBit(id17);</span><br><span class="line">                return id17 + parityBit;</span><br><span class="line">            &#125; else if (idCardNo.length == 18) &#123;</span><br><span class="line">                return idCardNo;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    $.extend($.fn.validatebox.defaults.rules, &#123;</span><br><span class="line">        idcard : &#123;</span><br><span class="line">            validator : function(value, param) &#123;</span><br><span class="line">                var flag = idCardNoUtil.checkIdCardNo(value);</span><br><span class="line">                return flag == true ? true : false;</span><br><span class="line">            &#125;,</span><br><span class="line">            message : &#x27;不是有效的身份证号码&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI的option取值</title>
    <url>/2018/06/02/EasyUI%E7%9A%84option%E5%8F%96%E5%80%BC/</url>
    <content><![CDATA[<h3 id="EasyUI的option取值方法"><a href="#EasyUI的option取值方法" class="headerlink" title="EasyUI的option取值方法"></a>EasyUI的option取值方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var value= $(&#x27;#otype&#x27;).combobox(&#x27;getValue&#x27;);//获取easyui的option值</span><br><span class="line">var  test = $(&#x27;#otype&#x27;).combobox(&#x27;getValue&#x27;);//获取easyui的option对应的文本节点</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts代码分享</title>
    <url>/2019/06/02/Echarts%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h4 id="一、Echarts官网"><a href="#一、Echarts官网" class="headerlink" title="一、Echarts官网"></a>一、Echarts官网</h4><p>Echarts官网（echarts3.0）：<a href="http://echarts.baidu.com/">http://echarts.baidu.com/</a><br>Echarts官网（echarts2.0）：<a href="http://echarts.baidu.com/echarts2/">http://echarts.baidu.com/echarts2/</a></p>
<h4 id="二、Echarts介绍"><a href="#二、Echarts介绍" class="headerlink" title="二、Echarts介绍"></a>二、Echarts介绍</h4><blockquote>
<p>缩写来自Enterprise Charts，商业级数据图表，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。</p>
</blockquote>
<blockquote>
<p>支持折线图line（区域图）、柱状图bar（条状图）、散点图（气泡图）、K线图、饼图（环形图）、雷达图（填充雷达图）、和弦图、力导向布局图、地图、仪表盘、漏斗图、事件河流图等12类图表，同时提供标题，详情气泡、图例、值域、数据区域、时间轴、工具箱等7个可交互组件，支持多图表、组件的联动和混搭展现。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/UQRMgX2s17tVCLz.png"></p>
<h4 id="三、Echarts使用"><a href="#三、Echarts使用" class="headerlink" title="三、Echarts使用"></a>三、Echarts使用</h4><p>Echats的引入方式：</p>
<p>①模块化包引入</p>
<blockquote>
<p>符合AMD规范，只需要配置好packages路径指向src即可，这样就可以发挥图表的按需加载等最大的灵活性，由于echarts依赖底层zrender，需要同时下载zrender到本地。<br>需要注意的是，包引入提供了开发阶段最大的灵活性，但并不适合直接上线，减少请求的文件数量是前端性能优化中最基本但很重要的规则，务必在上线时做文件的连接压缩。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">    packages: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#x27;echarts&#x27;,</span><br><span class="line">            location: &#x27;../../src&#x27;,</span><br><span class="line">            main: &#x27;echarts&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#x27;zrender&#x27;,</span><br><span class="line">            location: &#x27;../../../zrender/src&#x27;, // zrender与echarts在同一级目录</span><br><span class="line">            main: &#x27;zrender&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>②模块化单文件引入（推荐）<br>先引入主文件：</p>
<blockquote>
<p>echarts.js : 这是包含AMD加载器的echarts主文件，需要通过script最先引入</p>
</blockquote>
<p>按需引入模块文件：</p>
<blockquote>
<p>chart（文件夹） : echarts-optimizer通过依赖关系分析同时去除与echarts.js的重复模块后为echarts的每一个图表类型单独打包生成一个独立文件，根据应用需求可实现图表类型按需加载<br>line.js : 折线图（如需折柱动态类型切换，require时还需要echarts/chart/bar）<br>bar.js : 柱形图（如需折柱动态类型切换，require时还需要echarts/chart/line）<br>scatter.js : 散点图<br>k.js : K线图<br>pie.js : 饼图（如需饼漏斗图动态类型切换，require时还需要echarts/chart/funnel）<br>radar.js : 雷达图<br>map.js : 地图<br>force.js : 力导向布局图（如需力导和弦动态类型切换，require时还需要echarts/chart/chord）<br>chord.js : 和弦图（如需力导和弦动态类型切换，require时还需要echarts/chart/force）<br>funnel.js : 漏斗图（如需饼漏斗图动态类型切换，require时还需要echarts/chart/pie）<br>gauge.js : 仪表盘<br>eventRiver.js : 事件河流图<br>treemap.js : 矩阵树图<br>venn.js : 韦恩图</p>
</blockquote>
<p>③标签式单文件引入</p>
<p>自1.3.5开始，ECharts提供标签式引入。采用srcipt标签式引入，不需要require。Srcipt标签引入echarts后将可以直接使用两个全局的命名空间：echarts，zrender。</p>
<p>直接用script标签引入echarts-all.js（经过压缩，全图表，包含world，china以及34个省市级地图数据）</p>
<p>1、引入echarts.js 和 jQuery.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;c:url value=&#x27;/js/base/jquery-2.14.min.js&#x27;/&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;c:url value=&#x27;/js/echarts/echarts.js&#x27;/&gt;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>2、定义容器DOM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span><br><span class="line">    &lt;div id=&quot;main&quot; style=&quot;height:400px&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>3、配置echart的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">//路径配置</span><br><span class="line">require.config(&#123;</span><br><span class="line">    paths : &#123;</span><br><span class="line">        echarts : &quot;&lt;c:url value=&#x27;/js/echarts&#x27;/&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">//使用</span><br><span class="line">require(</span><br><span class="line">    [</span><br><span class="line">        &#x27;echarts&#x27;,</span><br><span class="line">        &#x27;echarts/chart/bar&#x27; ,// 使用柱状图就加载bar模块，按需加载</span><br><span class="line">        &#x27;echarts/chart/line&#x27;</span><br><span class="line">    ],</span><br><span class="line">    function(ec)&#123;</span><br><span class="line">        //初始化图表</span><br><span class="line">        var myChart = ec.init(document.getElementById(&#x27;main&#x27;));</span><br><span class="line">        //设定option </span><br><span class="line">        var option =&#123;</span><br><span class="line">                ....</span><br><span class="line">        &#125;; </span><br><span class="line">        myChart.setOption(option);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="引入Echars步骤总结："><a href="#引入Echars步骤总结：" class="headerlink" title="引入Echars步骤总结："></a>引入Echars步骤总结：</h4><blockquote>
<p>①为ECharts准备一个具备大小（宽高）的Dom（可以动态生成）<br>②通过script标签引入echarts主文件<br>③为模块加载器配置echarts的路径，从当前页面链接到echarts.js所在目录<br>④动态加载echarts及所需图表然后在回调函数中开始使用</p>
</blockquote>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote>
<p>①setOption(option)与setOption(option,true)的区别：noMerge参数为true阻止与上次option的合并，如多次setOption间数据改变、长度不一致等的场景。<br>②多个option应该放在option中的options数组中，用于带时间轴timeliness的图表</p>
</blockquote>
<h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><p>1、折线图（line）<br>①修改加载数据时的展示页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myChart.showLoading(&#123;</span><br><span class="line">            text : &#x27;数据加载中，请稍后...&#x27;,//修改文本</span><br><span class="line">            textStyle : &#123;fontSize : 15&#125;,//设置文本大小</span><br><span class="line">            effect:&#x27;dynamicLine&#x27;    //&#x27;spin&#x27; | &#x27;bar&#x27; | &#x27;ring&#x27; | &#x27;whirling&#x27; | &#x27;dynamicLine&#x27; | &#x27;bubble&#x27;，支持外部装载</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>还有其他属性如color、align、fontStyle等等进行设置。</p>
<p>②格式化函数formatter：<br>一般formatter用在axisLabel或者tooltip中，对纵横坐标或者提示进行自定义显示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//方式一：</span><br><span class="line">formatter:&#x27;&#123;b&#125;&lt;br&gt;&#123;a0&#125;:&#123;c0&#125;&lt;br&gt;&#123;a1&#125;:&#123;c1&#125;&#x27;</span><br><span class="line">//方式二：</span><br><span class="line">formatter:function(params)&#123;</span><br><span class="line">      return params[0].name+&#x27;&lt;br/&gt;&#x27;+</span><br><span class="line">      params[0].seriesName + &#x27; : &#x27; + params[0].value+&#x27;&lt;br/&gt;&#x27;+</span><br><span class="line">      params[1].seriesName + &#x27; : &#x27; + params[1].value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：方式一容易出现bug</p>
<p>③转换为堆积图<br>在series中添加stack属性，属性值相同的就会呈现堆积效果。</p>
<p>④markLine 和 markPoint应用<br>markLine（）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">markLine : &#123;</span><br><span class="line">                            symbol:[&#x27;circle&#x27;, &quot;arrow&quot;],</span><br><span class="line">                            symbolSize:[6,8],//符号设置大小</span><br><span class="line">                            symbolRotate:0,//旋转角度正数顺时针旋转，负数逆时针，0好像相当于90？</span><br><span class="line">                            data : [</span><br><span class="line">                                &#123;type : &#x27;average&#x27;, name: &#x27;平均值&#x27;&#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>
<p>symbol可选：’circle’ | ‘rectangle’ | ‘triangle’ | ‘diamond’ |’emptyCircle’ | ‘emptyRectangle’ | ‘emptyTriangle’ | ‘emptyDiamond’|’heart’（心形）|’droplet’（水滴）|’pin’（标注）|’arrow’（箭头）|’star’（五角星）</p>
<p>⑤平滑曲线<br>设置series属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smooth:true</span><br></pre></td></tr></table></figure>
<p>⑥区域填充<br>设置series属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">itemStyle: &#123;normal: &#123;areaStyle: &#123;type: &#x27;default&#x27;&#125;&#125;&#125;,</span><br></pre></td></tr></table></figure>

<p>⑦缩放<br>option设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataZoom : &#123;</span><br><span class="line">    show : true,</span><br><span class="line">    realtime : true,</span><br><span class="line">    start : 0,</span><br><span class="line">    end : 100</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>⑧添加事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//添加事件</span><br><span class="line">var ecConfig = require(&#x27;echarts/config&#x27;);</span><br><span class="line">function eConsole(param) &#123;</span><br><span class="line">    var mes = &#x27;【&#x27; + param.type + &#x27;】&#x27;;</span><br><span class="line">    if (typeof param.seriesIndex != &#x27;undefined&#x27;) &#123;</span><br><span class="line">        mes += &#x27;  seriesIndex : &#x27; + param.seriesIndex;</span><br><span class="line">        mes += &#x27;  dataIndex : &#x27; + param.dataIndex;</span><br><span class="line">        mes += &#x27;  data : &#x27; + param.data;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(param);</span><br><span class="line">    alert(mes);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">// -------全局通用</span><br><span class="line">REFRESH: &#x27;refresh&#x27;,</span><br><span class="line">RESTORE: &#x27;restore&#x27;,</span><br><span class="line">RESIZE: &#x27;resize&#x27;,</span><br><span class="line">CLICK: &#x27;click&#x27;,</span><br><span class="line">DBLCLICK: &#x27;dblclick&#x27;,</span><br><span class="line">HOVER: &#x27;hover&#x27;,</span><br><span class="line">MOUSEOUT: &#x27;mouseout&#x27;,</span><br><span class="line">// -------业务交互逻辑</span><br><span class="line">DATA_CHANGED: &#x27;dataChanged&#x27;,</span><br><span class="line">DATA_ZOOM: &#x27;dataZoom&#x27;,</span><br><span class="line">DATA_RANGE: &#x27;dataRange&#x27;,</span><br><span class="line">DATA_RANGE_HOVERLINK: &#x27;dataRangeHoverLink&#x27;,</span><br><span class="line">LEGEND_SELECTED: &#x27;legendSelected&#x27;,</span><br><span class="line">LEGEND_HOVERLINK: &#x27;legendHoverLink&#x27;,</span><br><span class="line">MAP_SELECTED: &#x27;mapSelected&#x27;,</span><br><span class="line">PIE_SELECTED: &#x27;pieSelected&#x27;,</span><br><span class="line">MAGIC_TYPE_CHANGED: &#x27;magicTypeChanged&#x27;,</span><br><span class="line">DATA_VIEW_CHANGED: &#x27;dataViewChanged&#x27;,</span><br><span class="line">TIMELINE_CHANGED: &#x27;timelineChanged&#x27;,</span><br><span class="line">MAP_ROAM: &#x27;mapRoam&#x27;,</span><br><span class="line">*/</span><br><span class="line">myChart.on(ecConfig.EVENT.CLICK, eConsole);</span><br><span class="line">myChart.on(ecConfig.EVENT.DBLCLICK, eConsole);</span><br><span class="line">//myChart.on(ecConfig.EVENT.HOVER, eConsole);</span><br><span class="line">myChart.on(ecConfig.EVENT.DATA_ZOOM, eConsole);</span><br><span class="line">myChart.on(ecConfig.EVENT.LEGEND_SELECTED, eConsole);</span><br><span class="line">myChart.on(ecConfig.EVENT.MAGIC_TYPE_CHANGED, eConsole);</span><br><span class="line">myChart.on(ecConfig.EVENT.DATA_VIEW_CHANGED, eConsole);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h4 id="2、散点图"><a href="#2、散点图" class="headerlink" title="2、散点图"></a>2、散点图</h4><p>散点图与折线图相似，series中data结构不同。</p>
<h4 id="3、饼图"><a href="#3、饼图" class="headerlink" title="3、饼图"></a>3、饼图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">center    [&#x27;50%&#x27;, &#x27;50%&#x27;]    圆心坐标，支持绝对值（px）和百分比，百分比计算min(width, height) * 50%</span><br><span class="line">radius    [0, &#x27;75%&#x27;]    半径，支持绝对值（px）和百分比，百分比计算比，min(width, height) / 2 * 75%， 传数组实现环形图，[内半径，外半径]</span><br><span class="line">startAngle    90    开始角度, 饼图（90）、仪表盘（225），有效输入范围：[-360,360]</span><br><span class="line">minAngle    0    最小角度，可用于防止某item的值过小而影响交互</span><br><span class="line">clockWise    true    显示是否顺时针</span><br><span class="line">roseType    null    南丁格尔玫瑰图模式，&#x27;radius&#x27;（半径） | &#x27;area&#x27;（面积）</span><br><span class="line">selectedOffset    10    选中是扇区偏移量</span><br><span class="line">selectedMode    null    选中模式，默认关闭，可选single，multiple</span><br><span class="line">legendHoverLink    true    是否启用图例（legend）hover时的联动响应（高亮显示）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="名词说明："><a href="#名词说明：" class="headerlink" title="名词说明："></a>名词说明：</h4><blockquote>
<p>axis    直角坐标系中的一个坐标轴，坐标轴可分为类目型、数值型或时间型<br>xAxis    直角坐标系中的横轴，通常并默认为类目型<br>yAxis    直角坐标系中的纵轴，通常并默认为数值型<br>grid    直角坐标系中除坐标轴外的绘图网格，用于定义直角系整体布局<br>legend    图例，表述数据和图形的关联<br>dataRange    值域选择，常用于展现地域数据时选择值域范围<br>dataZoom    数据区域缩放，常用于展现大量数据时选择可视范围<br>roamController    缩放漫游组件，搭配地图使用<br>toolbox    辅助工具箱，辅助功能，如添加标线，框选缩放等<br>tooltip    气泡提示框，常用于展现更详细的数据<br>timeline    时间轴，常用于展现同一系列数据在时间维度上的多份数据<br>series    数据系列，一个图表可能包含多个系列，每一个系列可能包含多个数据</p>
</blockquote>
<h4 id="图标名词："><a href="#图标名词：" class="headerlink" title="图标名词："></a>图标名词：</h4><blockquote>
<p>line    折线图，堆积折线图，区域图，堆积区域图。<br>bar    柱形图（纵向），堆积柱形图，条形图（横向），堆积条形图。<br>scatter    散点图，气泡图。散点图至少需要横纵两个数据，更高维度数据加入时可以映射为颜色或大小，当映射到大小时则为气泡图<br>k    K线图，蜡烛图。常用于展现股票交易数据。<br>pie    饼图，圆环图。饼图支持两种（半径、面积）南丁格尔玫瑰图模式。<br>radar    雷达图，填充雷达图。高维度数据展现的常用图表。<br>chord    和弦图。常用于展现关系数据，外层为圆环图，可体现数据占比关系，内层为各个扇形间相互连接的弦，可体现关系数据<br>force    力导布局图。常用于展现复杂关系网络聚类布局。<br>map    地图。内置世界地图、中国及中国34个省市自治区地图数据、可通过标准GeoJson扩展地图类型。支持svg扩展类地图应用，如室内地图、运动场、物件构造等。<br>heatmap    热力图。用于展现密度分布信息，支持与地图、百度地图插件联合使用。<br>gauge    仪表盘。用于展现关键指标数据，常见于BI类系统。<br>funnel    漏斗图。用于展现数据经过筛选、过滤等流程处理后发生的数据变化，常见于BI类系统。<br>evnetRiver    事件河流图。常用于展示具有时间属性的多个事件，以及事件随时间的演化。<br>treemap    矩形式树状结构图，简称：矩形树图。用于展示树形数据结构，优势是能最大限度展示节点的尺寸特征。<br>venn    韦恩图。用于展示集合以及它们的交集。<br>tree    树图。用于展示树形数据结构各节点的层级关系<br>wordCloud    词云。词云是关键词的视觉化描述，用于汇总用户生成的标签或一个网站的文字内容</p>
</blockquote>
<h4 id="自定义地图："><a href="#自定义地图：" class="headerlink" title="自定义地图："></a>自定义地图：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1: 准备目标地区的geoJson数据文件</span><br><span class="line">//2: 在require(&#x27;echarts/util/mapData/params&#x27;).params中命名你的地图类型</span><br><span class="line">// 3: 命名赋值为对象&#123;&#125;, 实现接口方法getGeoJson，通过callback返回目标地区geoJson数据文件</span><br><span class="line">require(&#x27;echarts/util/mapData/params&#x27;).params.shangyu = &#123;</span><br><span class="line">    getGeoJson: function (callback) &#123;</span><br><span class="line">        $.getJSON(&#x27;geoJson/mapshangyu.json&#x27;,callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//3 : 在option中使用</span><br><span class="line">option.series = [</span><br><span class="line">        &#123;</span><br><span class="line">            type: &#x27;map&#x27;,</span><br><span class="line">            mapType: &#x27;shangyu&#x27;, // 自定义扩展图表类型</span><br><span class="line">            ...</span><br><span class="line">         &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 图表清空-------------------</span><br><span class="line">myChart.clear();</span><br><span class="line"> </span><br><span class="line">// 图表释放-------------------</span><br><span class="line">myChart.dispose();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 之 Docker部署</title>
    <url>/2020/01/01/Elasticsearch%20%E4%B9%8B%20Docker%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><p><a href="https://blog.csdn.net/u011761393/article/details/89354498">https://blog.csdn.net/u011761393/article/details/89354498</a><br><a href="https://www.jianshu.com/p/7894415849c0">https://www.jianshu.com/p/7894415849c0</a></p>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p><a href="https://blog.51cto.com/zero01/2285604">https://blog.51cto.com/zero01/2285604</a><br><a href="https://cloud.tencent.com/developer/article/1098820">https://cloud.tencent.com/developer/article/1098820</a></p>
<h3 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h3><ul>
<li><p>拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.4.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name es \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; \</span><br><span class="line">-e HOSTNAME=es-single \</span><br><span class="line">elasticsearch:7.4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 日志提示如下错误：</span><br><span class="line">vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line"></span><br><span class="line"># 查看max_map_count的值</span><br><span class="line">cat /proc/sys/vm/max_map_count</span><br><span class="line"></span><br><span class="line"># 重新设置max_map_count的值</span><br><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>docker安装head插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 拉取镜像</span><br><span class="line">docker pull mobz/elasticsearch-head:5-alpine</span><br><span class="line"># 运行容器</span><br><span class="line">docker run -d -p 9100:9100 --name es-head mobz/elasticsearch-head:5-alpine</span><br></pre></td></tr></table></figure>
<blockquote>
<p>访问 <a href="http://server:9100，健康值为未连接？">http://server:9100，健康值为未连接？</a></p>
</blockquote>
</li>
<li><p>配置es跨域设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入es容器</span><br><span class="line">docker exec -it es /bin/bash</span><br><span class="line"></span><br><span class="line"># 编辑elasticsearch.yml</span><br><span class="line">vi /usr/share/elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line"># head插件设置，添加如下代码</span><br><span class="line"># head plugin settings</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line"># 重启es</span><br><span class="line">docker restart es</span><br></pre></td></tr></table></figure>
<blockquote>
<p>elasticsearch.yml内容</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster.name: <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># head plugin settings</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>再次访问 <a href="http://server:9100，健康值为green。">http://server:9100，健康值为green。</a></p>
</blockquote>
<h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><ul>
<li><p>数据目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建数据/日志目录 这里我们部署3个节点</span><br><span class="line">mkdir /opt/es/data/&#123;node0,node1,node2&#125; -p</span><br><span class="line">mkdir /opt/es/logs/&#123;node0,node1,node2&#125; -p</span><br><span class="line"></span><br><span class="line"># 权限有点懵， 设置 privileged 也不行， 索性0777</span><br><span class="line">cd /opt/es</span><br><span class="line">chmod 0777 data/* -R &amp;&amp; chmod 0777 logs/* -R</span><br><span class="line"></span><br><span class="line"># 防止JVM报错</span><br><span class="line">echo vm.max_map_count=262144 &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器编排 docker-compose.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es-node0:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:6.8.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es-node0</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-es-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es-node0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.master=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.data=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.ingest=true</span></span><br><span class="line"><span class="comment">#      - network.host=0.0.0.0</span></span><br><span class="line"><span class="comment">#      - network.publish_host=192.168.31.200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.port=9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">transport.tcp.port=9300</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.ping.unicast.hosts=es-node0:9300,es-node1:9301,es-node2:9302</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.minimum_master_nodes=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - ./data/node0:/usr/share/elasticsearch/data:ro</span></span><br><span class="line"><span class="comment">#      - ./logs/node0:/usr/share/elasticsearch/logs:r0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">es-node1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:6.8.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es-node1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-es-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es-node1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.master=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.data=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.ingest=true</span></span><br><span class="line"><span class="comment">#      - network.host=0.0.0.0</span></span><br><span class="line"><span class="comment">#      - network.publish_host=192.168.31.200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.port=9201</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">transport.tcp.port=9301</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.ping.unicast.hosts=es-node0:9300,es-node1:9301,es-node2:9302</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.minimum_master_nodes=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - ./data/node1:/usr/share/elasticsearch/data:ro</span></span><br><span class="line"><span class="comment">#      - ./logs/node1:/usr/share/elasticsearch/logs:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9301</span><span class="string">:9301</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9201</span><span class="string">:9201</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">es-node2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:6.8.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es-node2</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-es-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es-node2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.master=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.data=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.ingest=true</span></span><br><span class="line"><span class="comment">#      - network.host=0.0.0.0</span></span><br><span class="line"><span class="comment">#      - network.publish_host=192.168.31.200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.port=9202</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">transport.tcp.port=9302</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.ping.unicast.hosts=es-node0:9300,es-node1:9301,es-node2:9302</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.zen.minimum_master_nodes=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line"><span class="comment">#    volumes:</span></span><br><span class="line"><span class="comment">#      - ./data/node2:/usr/share/elasticsearch/data:ro</span></span><br><span class="line"><span class="comment">#      - ./logs/node2:/usr/share/elasticsearch/logs:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9302</span><span class="string">:9302</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9202</span><span class="string">:9202</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">es-net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数说明</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">cluster.name=elasticsearch-cluster</span>  <span class="comment"># 集群名称</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">node.name=node0</span>  <span class="comment"># 节点名称</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">node.master=true</span>  <span class="comment"># 是否可作为主节</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">node.data=true</span>  <span class="comment"># 是否存储数据</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span>  <span class="comment">#锁定进程的物理内存地址避免交换（swapped）来提高性能</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">http.cors.enabled=true</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span>  <span class="comment"># 开启cors以便使用Head插件</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span>  <span class="comment"># JVM内存大小配置</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;discovery.zen.ping.unicast.hosts=es_n0,es_n1,es_n2&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;discovery.zen.minimum_master_nodes=2&quot;</span>  <span class="comment"># 由于5.2.1后的版本是不支持多播的，所以需要手动指定集群各节点的tcp数据交互地址，用于集群的节点发现和failover，默认缺省9300端口，如设定了其它端口需另行指定，这里直接借助容器通信，也可以将各节点的9300映射至宿主机，通过网络端口通信。</span></span><br><span class="line"><span class="string">设定failover选取的quorum</span> <span class="string">=</span> <span class="string">nodes/2</span> <span class="string">+</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">path/to/local/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro</span>  <span class="comment"># 挂载自己的配置文件，ES镜像的配置文件是/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建并查看服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建服务</span><br><span class="line">docker-compose up -d</span><br><span class="line"># 查看服务</span><br><span class="line">docker-compose ps</span><br><span class="line"># 查看日志</span><br><span class="line">docker-compose logs -f</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看集群状态</p>
<blockquote>
<p>访问 <code>http://server_ip:9200/_cat/nodes?v</code> 即可查看集群状态</p>
</blockquote>
</li>
<li><p>安装IK分词器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在集群每一个节点上执行安装</span><br><span class="line">docker exec -it es-node0 bash</span><br><span class="line"></span><br><span class="line">elasticsearch-plugin install \</span><br><span class="line">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.3/elasticsearch-analysis-ik-6.8.3.zip</span><br><span class="line"></span><br><span class="line"># 重启服务</span><br><span class="line">docker-compose restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="ES-Head-问题"><a href="#ES-Head-问题" class="headerlink" title="ES-Head 问题"></a>ES-Head 问题</h3><ul>
<li>Content-Type header请求头错误<blockquote>
<p>{ error:”Content-Type header [application/x-www-form-urlencoded] is not supported”，status:406 }</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入es-head容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it es-head ash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 _site/vendor.js</span></span><br><span class="line">vi _site/vendor.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6886 行</span></span><br><span class="line">contentType: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span> --&gt; contentType: <span class="string">&quot;application/json;charset=UTF-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7574 行</span></span><br><span class="line">var inspectData = s.contentType === <span class="string">&quot;application/x-www-form-urlencoded&quot;</span> &amp;&amp; --&gt; </span><br><span class="line">var inspectData = s.contentType === <span class="string">&quot;application/json;charset=UTF-8&quot;</span> &amp;&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">docker-compose restart ed-head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除浏览器缓存</span></span><br></pre></td></tr></table></figure>


























]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Erlang安装</title>
    <url>/2021/02/01/Erlang%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="安装Erlang-OTP"><a href="#安装Erlang-OTP" class="headerlink" title="安装Erlang/OTP"></a>安装Erlang/OTP</h3><p><strong>方式一：源码安装</strong></p>
<ol>
<li><p> <a href="http://www.erlang.org/downloads">Erlang下载地址</a></p>
</li>
<li><p>选择相应的源码包OTP 20.3 Source File</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_20.3.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xf otp_src_20.3.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装需要的相关依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel libtool libtool-ltdl-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后依次执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd otp_src_20.3</span><br><span class="line">./otp_build autoconf</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量</p>
<blockquote>
<p>Erlang 默认安装路径为  /usr/local/lib/erlang</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"># 添加环境</span><br><span class="line">export ERLANG_HOME=/usr/local/lib/erlang</span><br><span class="line">export PATH=$PATH:$ERLANG_HOME/bin</span><br><span class="line"></span><br><span class="line"># 应用</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>方式二：从Erlang Solution安装</strong></p>
<blockquote>
<p>参考：<a href="https://packages.erlang-solutions.com/erlang/">Erlang源</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加erlang solutions源</span><br><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm </span><br><span class="line"></span><br><span class="line">rpm -Uvh erlang-solutions-1.0-1.noarch.rpm  </span><br><span class="line"> </span><br><span class="line">$ sudo yum install -y erlang erlang-wx</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p><strong>方式三：从EPEL源安装</strong></p>
<blockquote>
<p>该方式Erlang版本可能不是最新的，可能不能满足RabbitMQ所需的最低版本要求</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动EPEL源</span><br><span class="line">$ sudo yum install -y epel-release </span><br><span class="line"># 安装erlang</span><br><span class="line">$ sudo yum install -y erlang </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>方式四：指定erlang软件源安装（指定版本）</strong></p>
<blockquote>
<p>指定版本(需要指定源)：<a href="https://github.com/rabbitmq/erlang-rpm">参考</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># In /etc/yum.repos.d/rabbitmq-erlang.repo</span><br><span class="line">[rabbitmq-erlang]</span><br><span class="line">name=rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/erlang/20/el/7</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install -y erlang</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel操作</title>
    <url>/2018/01/01/Excel%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="创建Excel"><a href="#创建Excel" class="headerlink" title="创建Excel"></a>创建Excel</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Map&lt;String, Object&gt; doExportBatch(String giftExchangeIds,final String claimUser) throws Exception &#123;</span><br><span class="line">    final String[] giftExchangeIdArr = giftExchangeIds.split(&quot;,&quot;);</span><br><span class="line">    Map&lt;String, Object&gt; exportResult = transactionTemplate.execute(new TransactionCallback&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">        @SuppressWarnings(&quot;deprecation&quot;)</span><br><span class="line">        public Map&lt;String, Object&gt; doInTransaction(TransactionStatus status) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; rlt = new HashMap&lt;String, Object&gt;();</span><br><span class="line">            rlt.put(&quot;success&quot;,&quot;true&quot;);</span><br><span class="line"> </span><br><span class="line">            // 创建一个webbook，对应一个Excel文件 </span><br><span class="line">            HSSFWorkbook wb = new HSSFWorkbook();</span><br><span class="line">            // 在webbook中添加一个sheet,对应Excel文件中的sheet </span><br><span class="line">            HSSFSheet sheet = wb.createSheet(&quot;礼品兑换订单&quot;); </span><br><span class="line">            // 在sheet中添加表头第0行</span><br><span class="line">            HSSFRow row = sheet.createRow(0);</span><br><span class="line">            // 创建单元格，并设置值表头 设置表头居中 </span><br><span class="line">            HSSFCellStyle style = wb.createCellStyle();</span><br><span class="line">            style.setAlignment(HSSFCellStyle.ALIGN_CENTER);// 创建一个居中格式</span><br><span class="line">            HSSFFont font = wb.createFont(); //设置字体</span><br><span class="line">            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//字体加粗         </span><br><span class="line">            style.setFont(font);</span><br><span class="line"> </span><br><span class="line">            HSSFCell cell = row.createCell((short) 0);//设置单元格的标题</span><br><span class="line">            cell.setCellValue(&quot;订单号&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 1); </span><br><span class="line">            cell.setCellValue(&quot;兑换日期&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 2); </span><br><span class="line">            cell.setCellValue(&quot;礼品类目&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 3); </span><br><span class="line">            cell.setCellValue(&quot;礼品名称&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 4); </span><br><span class="line">            cell.setCellValue(&quot;兑换积分&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 5);</span><br><span class="line">            cell.setCellValue(&quot;联连帐号&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 6);</span><br><span class="line">            cell.setCellValue(&quot;收货人&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 7);</span><br><span class="line">            cell.setCellValue(&quot;手机号码&quot;);               </span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 8); </span><br><span class="line">            cell.setCellValue(&quot;收货地址&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 9); </span><br><span class="line">            cell.setCellValue(&quot;物流公司&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 10); </span><br><span class="line">            cell.setCellValue(&quot;物流单号&quot;);</span><br><span class="line">            cell.setCellStyle(style);               </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell((short) 11); </span><br><span class="line">            cell.setCellValue(&quot;备注&quot;);</span><br><span class="line">            cell.setCellStyle(style);</span><br><span class="line"> </span><br><span class="line">            for (int i = 0; i &lt;= 11; i++) &#123;//设置单元格的宽度</span><br><span class="line">                    sheet.setColumnWidth(i, (short) (100 * 45));</span><br><span class="line">            &#125;</span><br><span class="line">            //写入实体数据</span><br><span class="line">            Map&lt;String, Object&gt; qryMap=new HashMap&lt;String, Object&gt;();</span><br><span class="line">            for (int j = 0; j &lt; giftExchangeIdArr.length; j++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    qryMap.clear();</span><br><span class="line">                    qryMap.put(&quot;id&quot;, giftExchangeIdArr[j]);</span><br><span class="line">                    PointGiftExchange giftExchange = doGetGiftGrantList(qryMap).get(0);</span><br><span class="line">                        row = sheet.createRow( j + 1);</span><br><span class="line">                        // 创建单元格，并设置值                        </span><br><span class="line">                        row.createCell((short) 0).setCellValue(giftExchange.getOrderNo()); </span><br><span class="line">                        row.createCell((short) 1).setCellValue(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(giftExchange.getObatianTime())); </span><br><span class="line">                        row.createCell((short) 2).setCellValue(giftExchange.getName());</span><br><span class="line">                        row.createCell((short) 3).setCellValue(giftExchange.getGiftName());</span><br><span class="line">                        row.createCell((short) 4).setCellValue(giftExchange.getPointVal().intValue());</span><br><span class="line">                        row.createCell((short) 5).setCellValue(giftExchange.getUserName());</span><br><span class="line">                        row.createCell((short) 6).setCellValue(giftExchange.getConsigneeName());</span><br><span class="line">                        row.createCell((short) 7).setCellValue(giftExchange.getConsigneeTel());</span><br><span class="line">                        row.createCell((short) 8).setCellValue(giftExchange.getConsigneeAddr());</span><br><span class="line">                        row.createCell((short) 9).setCellValue(giftExchange.getLogisticsCom());</span><br><span class="line">                        row.createCell((short) 10).setCellValue(giftExchange.getLogisticsNo());</span><br><span class="line">                        row.createCell((short) 11).setCellValue(giftExchange.getComment());</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    rlt.put(&quot;success&quot;,&quot;false&quot;);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    status.setRollbackOnly();</span><br><span class="line">                    break;</span><br><span class="line">                &#125;                   </span><br><span class="line">            &#125;</span><br><span class="line">            row = sheet.createRow( giftExchangeIdArr.length + 1);</span><br><span class="line">            row.createCell((short) 0).setCellValue(&quot;end&quot;);</span><br><span class="line">            try </span><br><span class="line">            &#123;  </span><br><span class="line">                String excelDir=ServletActionContext.getServletContext().getRealPath(&quot;upexcel&quot;);</span><br><span class="line">                String fileName=StringUtil.getRandomFileName(claimUser+&quot;.xls&quot;);</span><br><span class="line">                FileOutputStream fout = new FileOutputStream(excelDir+File.separator+fileName);</span><br><span class="line">                wb.write(fout);</span><br><span class="line">                fout.close();</span><br><span class="line">                rlt.put(&quot;fileName&quot;, fileName);</span><br><span class="line">            &#125; </span><br><span class="line">            catch (Exception e) </span><br><span class="line">            &#123;</span><br><span class="line">                rlt.put(&quot;success&quot;,&quot;false&quot;);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                status.setRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">            return rlt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return exportResult;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="解析Excel"><a href="#解析Excel" class="headerlink" title="解析Excel"></a>解析Excel</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 描述：解析Excel文件</span><br><span class="line"> * @param paramfile</span><br><span class="line"> * @return list</span><br><span class="line"> * @throws IOException</span><br><span class="line"> * @throws FileNotFoundException</span><br><span class="line"> */</span><br><span class="line">private static List&lt;String&gt; parseExcelToList(File paramfile) throws FileNotFoundException, IOException&#123;</span><br><span class="line"> </span><br><span class="line">    if(paramfile==null)return null;</span><br><span class="line">    //结果集</span><br><span class="line">    List&lt;String&gt; resultList = new ArrayList&lt;String&gt;();//存放数据</span><br><span class="line">    List&lt;String&gt; checkList =new ArrayList&lt;String&gt;();//存储连连用户，用于检查重复</span><br><span class="line">    Workbook book = null ;</span><br><span class="line">    try&#123;</span><br><span class="line">        book = new XSSFWorkbook(new FileInputStream(paramfile));</span><br><span class="line">    &#125;catch(Exception ex)&#123;</span><br><span class="line">        book = new HSSFWorkbook(new FileInputStream(paramfile));</span><br><span class="line">    &#125;</span><br><span class="line">    // 读取表格的第一个sheet页</span><br><span class="line">    Sheet sheet = book.getSheetAt(0);</span><br><span class="line">    //获取行与列</span><br><span class="line">    Row row;</span><br><span class="line">    String cell;</span><br><span class="line">    //获得行数,从0开始</span><br><span class="line">    int totalRows = sheet.getLastRowNum();</span><br><span class="line">    //获取内容 --循环输出表格中的内容,首先循环取出行,再根据行循环取出列</span><br><span class="line">    for(int i=sheet.getFirstRowNum();i&lt;=totalRows;i++)&#123;</span><br><span class="line">        StringBuffer tempRow = new StringBuffer();</span><br><span class="line">        row = sheet.getRow(i);//获得一行</span><br><span class="line">        //判断空行</span><br><span class="line">        if(row==null)continue;</span><br><span class="line">        //获得列数</span><br><span class="line">        int totalCells = row.getFirstCellNum()+3;//共三列</span><br><span class="line">        //获取列的内容</span><br><span class="line">        for(int j=row.getFirstCellNum();j&lt;totalCells;j++)&#123;</span><br><span class="line">            if(row.getCell(j)==null) &#123;</span><br><span class="line">                tempRow.append(&quot; ,&quot;);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            row.getCell(j).setCellType(Cell.CELL_TYPE_STRING);//设置文本格式</span><br><span class="line">            cell=row.getCell(j).toString();</span><br><span class="line">            if(j&lt;totalCells-1)&#123;</span><br><span class="line">                tempRow.append(cell+&quot;,&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                tempRow.append(cell);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        String firstCell = row.getCell(row.getFirstCellNum()).toString();//每行第一列</span><br><span class="line">        //检查重复</span><br><span class="line">        if(!checkList.contains(firstCell))&#123;</span><br><span class="line">            checkList.add(firstCell);</span><br><span class="line">            resultList.add(tempRow.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return resultList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="下载Excel"><a href="#下载Excel" class="headerlink" title="下载Excel"></a>下载Excel</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 描述：下载模板</span><br><span class="line">* @param filePath</span><br><span class="line">* @param response</span><br><span class="line">* @param isOnLine 是否在线打开</span><br><span class="line">* @throws Exception</span><br><span class="line">*/</span><br><span class="line">private String downLoadTemplate(String filePath, HttpServletResponse response, String dateStr,</span><br><span class="line">boolean isOnLine) throws Exception &#123;</span><br><span class="line">String dateStr0 = dateStr.replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">        File file = new File(filePath);</span><br><span class="line">        String[] urlSplit = file.getName().split(&quot;\\.&quot;);</span><br><span class="line">        String filename = urlSplit[0]+dateStr0+&quot;.&quot;+urlSplit[1];</span><br><span class="line"> </span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            response.sendError(404, &quot;File not found!&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedInputStream br = new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">        byte[] buf = new byte[1024];</span><br><span class="line">        int len = 0;</span><br><span class="line"></span><br><span class="line">        response.reset();</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        if (isOnLine) &#123; // 在线打开方式</span><br><span class="line">            URL u = new URL(&quot;file:///&quot; + filePath);</span><br><span class="line">            response.setContentType(u.openConnection().getContentType());</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;inline; filename=&quot; + URLEncoder.encode(filename,&quot;utf-8&quot;));</span><br><span class="line">        &#125; else &#123; //下载方式</span><br><span class="line">            response.setContentType(&quot;application/msexcel;charset=utf-8&quot;);</span><br><span class="line">            //response.setContentType(&quot;application/x-msdownload&quot;);</span><br><span class="line">        //response.setContentType(ServletActionContext.getServletContext().getMimeType(f.getName()));</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + URLEncoder.encode(filename,&quot;utf-8&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        OutputStream out = response.getOutputStream();</span><br><span class="line">        while ((len = br.read(buf)) &gt; 0)</span><br><span class="line">            out.write(buf, 0, len);</span><br><span class="line">        br.close();</span><br><span class="line">        out.close();</span><br><span class="line">        return filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 描述：合并单元格补全处理</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return HSSFSheet</span><br><span class="line"> */</span><br><span class="line">public static HSSFSheet getFullCellSheet(HSSFSheet sheet) &#123;</span><br><span class="line">    // 获得 sheet中合并单元格的数量</span><br><span class="line">    int sheetmergerCount = sheet.getNumMergedRegions();</span><br><span class="line">    // 遍历合并单元格</span><br><span class="line">    for (int i = 0; i &lt; sheetmergerCount; i++) &#123;</span><br><span class="line">        //合并单元格补全处理</span><br><span class="line">        CellRangeAddress cra = sheet.getMergedRegion(i);</span><br><span class="line">        int rowFirst = cra.getFirstRow();</span><br><span class="line">        int rowLast = cra.getLastRow();</span><br><span class="line">        int colFirst = cra.getFirstColumn();</span><br><span class="line">        int colLast = cra.getLastColumn();</span><br><span class="line">        for (int j = colFirst; j &lt;= colLast; j++) &#123;</span><br><span class="line">            for (int k = rowFirst; k &lt;= rowLast; k++) &#123;</span><br><span class="line">                HSSFCell cell = sheet.getRow(rowFirst).getCell(colFirst);</span><br><span class="line">                if(cell.getCellType()==0)&#123;</span><br><span class="line">                    sheet.getRow(k).getCell(j).setCellValue(cell.getNumericCellValue());</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    sheet.getRow(k).getCell(j).setCellValue(cell.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    return sheet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-Struts2-POI创建Excel文件并实现文件下载"><a href="#Java-Struts2-POI创建Excel文件并实现文件下载" class="headerlink" title="Java Struts2 POI创建Excel文件并实现文件下载"></a>Java Struts2 POI创建Excel文件并实现文件下载</h3><h4 id="Java-Struts2-POI创建Excel文件并实现文件下载-1"><a href="#Java-Struts2-POI创建Excel文件并实现文件下载-1" class="headerlink" title="Java Struts2 POI创建Excel文件并实现文件下载"></a>Java Struts2 POI创建Excel文件并实现文件下载</h4><blockquote>
<p>在做管理系统的时候，经常会用到文件的下载，特别是Excel报表的创建与下载，下面就来简单演示一下，Struts2实现的Excel文件的下载功能。</p>
</blockquote>
<blockquote>
<p>由于本实验是要动态创建Excel文件，因此需要一些jar：<br><br>Java读写Excel的包是Apache POI（项目地址：<a href="http://poi.apache.org/%EF%BC%89%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E5%85%88%E8%8E%B7%E5%8F%96POI%E7%9A%84jar%E5%8C%85%EF%BC%8C%E6%9C%AC%E5%AE%9E%E9%AA%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFPOI">http://poi.apache.org/），因此需要先获取POI的jar包，本实验使用的是POI</a> 3.9稳定版。<br><br>Apache POI 代码例子地址：<a href="http://poi.apache.org/spreadsheet/quick-guide.html">http://poi.apache.org/spreadsheet/quick-guide.html</a></p>
</blockquote>
<ol>
<li><p>配置struts.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;struts&gt; </span><br><span class="line">    &lt;package name=&quot;export&quot; namespace=&quot;/export&quot; extends=&quot;struts-default&quot;&gt; </span><br><span class="line">        &lt;action name=&quot;*&quot; class=&quot;excelExportAction&quot; method=&quot;&#123;1&#125;&quot;/&gt; </span><br><span class="line">        &lt;!--测试Excel下载--&gt; </span><br><span class="line">        &lt;action name=&quot;exportExcel&quot; class=&quot;excelExportAction&quot; method=&quot;exportExcel&quot;&gt; </span><br><span class="line">            &lt;result name=&quot;success&quot; type=&quot;stream&quot;&gt; </span><br><span class="line">                &lt;!-- 下载文件的类型，如果你不知道是什么格式，可以去 tomcat\conf\web.xml下找 --&gt; </span><br><span class="line">                &lt;param name=&quot;contentType&quot;&gt;application/vnd.ms-excel&lt;/param&gt; </span><br><span class="line">                &lt;!-- 返回流 excelStream为action中的流变量名称 --&gt; </span><br><span class="line">                &lt;param name=&quot;inputName&quot;&gt;excelStream&lt;/param&gt; </span><br><span class="line">                &lt;!-- attachment 这个位置的参数挺特殊的，可以设置成下载时，是否出现个下载提示框，或者直接下载之类的。 </span><br><span class="line">                fileName指定生成的文件名字(适合动态生成文件名，比如做报表时，一般都要说是几月的统计数据之类)为action中变量--&gt; </span><br><span class="line">                &lt;param name=&quot;contentDisposition&quot;&gt; </span><br><span class="line">                    attachment;filename=$&#123;excelFileName&#125; </span><br><span class="line">                &lt;/param&gt; </span><br><span class="line">                &lt;param name=&quot;bufferSize&quot;&gt;1024&lt;/param&gt; </span><br><span class="line">            &lt;/result&gt; </span><br><span class="line">        &lt;/action&gt; </span><br><span class="line">    &lt;/package&gt; </span><br><span class="line">&lt;/struts&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Action类</p>
</li>
</ol>
<blockquote>
<p>POI的Maven配置如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt; </span><br><span class="line">     &lt;groupId&gt;org.apache.poi&lt;/groupId&gt; </span><br><span class="line">     &lt;artifactId&gt;poi&lt;/artifactId&gt; </span><br><span class="line">     &lt;version&gt;3.9&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>Action类如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.poi.hssf.usermodel.*; </span><br><span class="line">import java.io.ByteArrayInputStream; </span><br><span class="line">import java.io.ByteArrayOutputStream; </span><br><span class="line">import java.io.InputStream; </span><br><span class="line">import java.text.SimpleDateFormat; </span><br><span class="line">import java.util.Date; </span><br><span class="line"> </span><br><span class="line">public class ExcelExportAction extends ActionSupport &#123; </span><br><span class="line"> </span><br><span class="line">    /** 导出Excel测试 */ </span><br><span class="line">    public String exportExcel() &#123; </span><br><span class="line">        try &#123; </span><br><span class="line">            //第一步，创建一个webbook，对应一个Excel文件 </span><br><span class="line">            HSSFWorkbook wb = new HSSFWorkbook(); </span><br><span class="line">            //第二步，在webbook中添加一个sheet，对应Excel文件中的 sheet </span><br><span class="line">            HSSFSheet sheet = wb.createSheet(&quot;测试表格1&quot;); </span><br><span class="line">            //第三步，在sheet中添加表头第0行，注意老版本poi对Excel的行数列数有限制 </span><br><span class="line">            HSSFRow row = sheet.createRow(0); </span><br><span class="line">            //第四步，创建单元格样式：居中 </span><br><span class="line">            HSSFCellStyle style = wb.createCellStyle(); </span><br><span class="line">            style.setAlignment(HSSFCellStyle.ALIGN_CENTER); </span><br><span class="line">            //第五步，创建表头单元格，并设置样式 </span><br><span class="line">            HSSFCell cell; </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell(0); </span><br><span class="line">            cell.setCellValue(&quot;员工工号&quot;); </span><br><span class="line">            cell.setCellStyle(style); </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell(1); </span><br><span class="line">            cell.setCellValue(&quot;员工姓名&quot;); </span><br><span class="line">            cell.setCellStyle(style); </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell(2); </span><br><span class="line">            cell.setCellValue(&quot;所属部门&quot;); </span><br><span class="line">            cell.setCellStyle(style); </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell(3); </span><br><span class="line">            cell.setCellValue(&quot;职位&quot;); </span><br><span class="line">            cell.setCellStyle(style); </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell(4); </span><br><span class="line">            cell.setCellValue(&quot;入职日期&quot;); </span><br><span class="line">            cell.setCellStyle(style); </span><br><span class="line"> </span><br><span class="line">            cell = row.createCell(5); </span><br><span class="line">            cell.setCellValue(&quot;备注&quot;); </span><br><span class="line">            cell.setCellStyle(style); </span><br><span class="line"> </span><br><span class="line">            //第六步，写入实体数据，实际应用中这些数据从数据库得到 </span><br><span class="line">            Date today = new Date(); </span><br><span class="line">            long aDay = 1000L*60*60*24; </span><br><span class="line">            SimpleDateFormat fmt = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); </span><br><span class="line">            for (int i = 1; i &lt;= 10; i++) &#123; </span><br><span class="line">                row = sheet.createRow(i); </span><br><span class="line">                row.createCell(0).setCellValue(i); </span><br><span class="line">                row.createCell(1).setCellValue(&quot;员工&quot; + i); </span><br><span class="line">                row.createCell(2).setCellValue(&quot;总公司&quot;); </span><br><span class="line">                row.createCell(3).setCellValue(&quot;普通员工&quot;); </span><br><span class="line">                row.createCell(4).setCellValue(fmt.format(new Date(today.getTime() + i * aDay))); </span><br><span class="line">                row.createCell(5).setCellValue(&quot;员工备注&quot;); </span><br><span class="line">            &#125; </span><br><span class="line"> </span><br><span class="line">            //第七步，将文件存到流中 </span><br><span class="line">            ByteArrayOutputStream os = new ByteArrayOutputStream(); </span><br><span class="line">            wb.write(os); </span><br><span class="line">            byte[] fileContent = os.toByteArray(); </span><br><span class="line">            ByteArrayInputStream is = new ByteArrayInputStream(fileContent); </span><br><span class="line"> </span><br><span class="line">            excelStream = is;             //文件流 </span><br><span class="line">            excelFileName = &quot;report.xls&quot;; //设置下载的文件名 </span><br><span class="line">        &#125; </span><br><span class="line">        catch(Exception e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        return &quot;success&quot;; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    //------------------------------------------------------------- </span><br><span class="line">    private InputStream excelStream;  //输出流变量 </span><br><span class="line">    private String excelFileName; //下载文件名 </span><br><span class="line"> </span><br><span class="line">    public InputStream getExcelStream() &#123; </span><br><span class="line">        return excelStream; </span><br><span class="line">    &#125; </span><br><span class="line">    public void setExcelStream(InputStream excelStream) &#123; </span><br><span class="line">        this.excelStream = excelStream; </span><br><span class="line">    &#125; </span><br><span class="line">    public String getExcelFileName() &#123; </span><br><span class="line">        return excelFileName; </span><br><span class="line">    &#125; </span><br><span class="line">    public void setExcelFileName(String excelFileName) &#123; </span><br><span class="line">        this.excelFileName = excelFileName; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>FRP 笔记</title>
    <url>/2021/10/02/FRP%20%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="FRP-一款很好用的内网穿透工具"><a href="#FRP-一款很好用的内网穿透工具" class="headerlink" title="FRP: 一款很好用的内网穿透工具"></a>FRP: 一款很好用的内网穿透工具</h3><ul>
<li>对于没有公网 IP 的内网用户来说，远程管理或在外网访问内网机器上的服务是一个问题。</li>
<li>FRP（Fast Reverse Proxy）是一款好用内网穿透工具。FRP 是一个使用 Go 语言开发的高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务。</li>
<li>FRP 支持 TCP、UDP、HTTP、HTTPS等协议类型，并且支持 Web 服务根据域名进行路由转发。</li>
<li>FRP 项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></li>
</ul>
<h4 id="FRP-的作用"><a href="#FRP-的作用" class="headerlink" title="FRP 的作用"></a>FRP 的作用</h4><ul>
<li>利用处于内网或防火墙后的机器，对外网环境提供 HTTP 或 HTTPS 服务。</li>
<li>对于 HTTP, HTTPS 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口。</li>
<li>利用处于内网或防火墙后的机器，对外网环境提供 TCP 和 UDP 服务，例如在家里通过 SSH 访问处于公司内网环境内的主机。</li>
</ul>
<h4 id="FRP-安装"><a href="#FRP-安装" class="headerlink" title="FRP 安装"></a>FRP 安装</h4><blockquote>
<p>FRP 采用 Go 语言开发，支持 Windows、Linux、MacOS、ARM等多平台部署。FRP 安装非常容易，只需下载对应系统平台的软件包，并解压就可用。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例Linux 下安装，为了方便管理把解压后的目录重命名为frp</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.27.1/frp_0.27.1_linux_amd64.tar.gz</span><br><span class="line">tar xzvf frp_0.27.1_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> frp_0.27.1_linux_amd64 frp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>软件包下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p>
</blockquote>
<h4 id="FRP-服务端配置"><a href="#FRP-服务端配置" class="headerlink" title="FRP 服务端配置"></a>FRP 服务端配置</h4><blockquote>
<p>配置 FRP 服务端的前提条件是需要一台具有 <strong>公网IP</strong> 的设备，得益于 FRP 是 Go 语言开发的，具有良好的跨平台特性。可以在 Windows、Linux、MacOS、ARM 等几乎任何可联网设备上部署。<br>FRP 默认给出两个服务端配置文件，一个是简版的 frps.ini，另一个是完整版本 frps_full.ini。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 FRP 服务端</span></span><br><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>

<h4 id="FRP-客户端配置"><a href="#FRP-客户端配置" class="headerlink" title="FRP 客户端配置"></a>FRP 客户端配置</h4><blockquote>
<p>和 FRP 服务端类似，FRP 默认也给出两个客户端配置文件，一个是简版的 frpc.ini，另一个是完整版本 frpc_full.ini。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line"><span class="comment"># FRP 服务端的公网 IP</span></span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line"><span class="comment"># FRP 服务端监听的端口</span></span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line"><span class="comment"># 本机IP</span></span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 FRP 客户端</span></span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">ssh 4.3.2.1 6000</span><br></pre></td></tr></table></figure>

<h4 id="FRP-使用实例"><a href="#FRP-使用实例" class="headerlink" title="FRP 使用实例"></a>FRP 使用实例</h4><p><strong>通过 TCP 访问内网机器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改 FRP 客户端配置文件 frpc.ini 文件</span><br><span class="line">cat frpc.ini</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line"># 启动 FRP 客户端</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>通过自定义域名访问部署于内网的 Web 服务</strong></p>
<blockquote>
<p>有时需要在公有网络通过域名访问我们在本地环境搭建的 Web 服务，但是由于本地环境机器并没有公网 IP，无法将域名直接解析到本地的机器。<br>通过 FRP 就可以很容易实现这一功能。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先修改 FRP 服务端配置文件，通过 vhost_http_port 参数来设置 HTTP 访问端口，这里将 HTTP 访问端口设为 8080。</span><br><span class="line">vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line"></span><br><span class="line"># 启动 FRP 服务端</span><br><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line"># 其次修改 FRP 客户端配置文件并增加如下内容</span><br><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = **.***.com</span><br><span class="line"># 通过 local_port 和 custom_domains 参数来设置本地机器上 Web 服务对应的端口和自定义的域名，这里我们分别设置端口为 80，对应域名为 **.***.com。</span><br><span class="line"></span><br><span class="line"># 启动 FRP 客户端</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 最后将 ..com 的域名 A 记录解析到 FRP 服务器的公网 IP 上，可以通过 http://.*.com:8080 这个 URL 访问到处于内网机器上对应的 Web 服务。</span><br><span class="line"></span><br><span class="line"># HTTPS 服务配置方法类似，只需将 vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</span><br></pre></td></tr></table></figure>

<p><strong>通过密码保护你的 Web 服务</strong></p>
<blockquote>
<p>由于所有客户端共用一个 FRP 服务端的 HTTP 服务端口，任何知道你的域名和 URL 的人都能访问到你部署在内网的 Web 服务，但是在某些场景下需要确保只有限定的用户才能访问。</p>
</blockquote>
<blockquote>
<p>FRP 支持通过 HTTP Basic Auth 来保护你的 Web 服务，使用户需要通过用户名和密码才能访问到你的服务。需要实现此功能主要需要在 FRP 客户端的配置文件中添加用户名和密码的设置。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = **.***.com</span><br><span class="line"></span><br><span class="line"># 设置认证的用户名</span><br><span class="line">http_user = abc</span><br><span class="line"></span><br><span class="line"># 设置认证的密码</span><br><span class="line">http_pwd = abc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这时访问 http://.*.com:8080 这个 URL 时就需要输入配置的用户名和密码才能访问。<br>该功能目前仅限于 HTTP 类型的代理。</p>
</blockquote>
<p><strong>给 Web 服务增加自定义二级域名</strong></p>
<blockquote>
<p>在多人同时使用一个 FRP 服务端实现 Web 服务时，通过自定义二级域名的方式来使用会更加方便。</p>
</blockquote>
<blockquote>
<p>通过在 FRP 服务端的配置文件中配置 subdomain_host参数就可以启用该特性。之后在 FRP 客户端的 http、https 类型的代理中可以不配置 custom_domains，而是配置一个 subdomain 参数。<br>然后只需要将 *.{subdomain_host} 解析到 FRP 服务端所在服务器。之后用户可以通过 subdomain 自行指定自己的 Web 服务所需要使用的二级域名，并通过 {subdomain}.{subdomain_host} 来访问自己的 Web 服务。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先在 FRP 服务端配置 subdomain_host 参数</span><br><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">subdomain_host = ***.com</span><br><span class="line"></span><br><span class="line"># 其次在 FRP 客户端配置文件配置 subdomain 参数</span><br><span class="line">vim frpc.ini</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">subdomain = test</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后将泛域名 .com 解析到 FRP 服务端所在服务器的公网 IP 地址。FRP 服务端 和 FRP 客户端都启动成功后，通过 test.**.com 就可以访问到内网的 Web 服务。<br>同一个 HTTP 或 HTTPS 类型的代理中 custom_domains 和 subdomain 可以同时配置。</p>
</blockquote>
<blockquote>
<p>需要注意的是如果 FPR 服务端配置了 subdomain_host，则 custom_domains 中不能是属于 subdomain_host 的子域名或者泛域名。</p>
</blockquote>
<p><strong>修改 Host Header</strong></p>
<blockquote>
<p>通常情况下 FRP 不会修改转发的任何数据。但有一些后端服务会根据 HTTP 请求 header 中的 host 字段来展现不同的网站，例如 Nginx 的虚拟主机服务，启用 host-header 的修改功能可以动态修改 HTTP 请求中的 host 字段。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 实现此功能只需要在 FRP 客户端配置文件中定义 host_header_rewrite 参数。</span><br><span class="line">vim frpc.ini</span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = test.***.com</span><br><span class="line">host_header_rewrite = dev.***.com</span><br><span class="line"></span><br><span class="line"># 原来 HTTP 请求中的 host 字段 test.***.com 转发到后端服务时会被替换为 dev.***.com。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该功能仅限于 HTTP 类型的代理。</p>
</blockquote>
<p><strong>URL 路由</strong></p>
<blockquote>
<p>FRP 支持根据请求的 URL 路径路由转发到不同的后端服务。要实现这个功能可通过 FRP 客户端配置文件中的 locations 字段来指定。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim frpc.ini</span><br><span class="line"></span><br><span class="line">[web01]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = web.***.com</span><br><span class="line">locations = /</span><br><span class="line"></span><br><span class="line">[web02]</span><br><span class="line">type = http</span><br><span class="line">local_port = 81</span><br><span class="line">custom_domains = web.***.com</span><br><span class="line">locations = /news,/about</span><br></pre></td></tr></table></figure>

<blockquote>
<p>按照上述的示例配置后，web.***.com 这个域名下所有以 /news 以及 /about 作为前缀的 URL 请求都会被转发到后端 web02 所在的后端服务，其余的请求会被转发到 web01 所在的后端服务。</p>
</blockquote>
<blockquote>
<p>目前仅支持最大前缀匹配，之后会考虑支持正则匹配。</p>
</blockquote>
<p><strong>通过 UDP 访问内网机器</strong></p>
<blockquote>
<p>DNS 查询请求通常使用 UDP 协议，FRP 支持对内网 UDP 服务的穿透，配置方式和 TCP 基本一致。这里以转发到 Google 的 DNS 查询服务器 8.8.8.8 的 UDP 端口为例。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先修改 FRP 客户端配置文件，并增加如下内容：</span><br><span class="line">vim frpc.ini</span><br><span class="line">[dns]</span><br><span class="line">type = udp</span><br><span class="line">local_ip = 8.8.8.8</span><br><span class="line">local_port = 53</span><br><span class="line">remote_port = 6001</span><br><span class="line"></span><br><span class="line"># 要转发到内网 DNS 服务器只需把 local_ip 改成对应 IP 即可。</span><br><span class="line"># 其次重新启动 FRP 客户端：</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 最后通过 dig 命令测试 UDP 包转发是否成功，预期会返回 www.google.com 域名的解析结果</span><br><span class="line">dig @4.3.2.1 -p 6001 www.google.com</span><br></pre></td></tr></table></figure>

<p><strong>转发 Unix 域套接字</strong></p>
<blockquote>
<p>通过 TCP 端口访问内网的 Unix 域套接字，这里以和本地机器上的 Docker Daemon 通信为例。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先修改 FRP 客户端配置文件，并增加如下内容：</span><br><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[unix_domain_socket]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 6002</span><br><span class="line">plugin = unix_domain_socket</span><br><span class="line">plugin_unix_path = /var/run/docker.sock</span><br><span class="line"></span><br><span class="line"># 这里主要是使用 plugin 和 plugin_unix_path 两个参数启用了 unix_domain_socket 插件和配置对应的套接字路径。</span><br><span class="line"></span><br><span class="line"># 其次重新启动 FRP 客户端：</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 最后通过 curl 命令查看 Docker 版本信息进行测试：</span><br><span class="line">curl http://4.3.2.1:6002/version</span><br></pre></td></tr></table></figure>

<blockquote>
<p>FRP 从 1.5 版本开始支持客户端热加载配置文件，并不用每次都重启客户端程序。</p>
</blockquote>
<h3 id="FRP-高级进阶"><a href="#FRP-高级进阶" class="headerlink" title="FRP 高级进阶"></a>FRP 高级进阶</h3><p><strong>给 FRP 服务端增加一个 Dashboard</strong></p>
<blockquote>
<p>通过 Dashboard 可以方便的查看 FRP 的状态以及代理统计信息展示，要使用这个功能首先需要在 FRP 服务端配置文件中指定 Dashboard 服务使用的端口</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line"># 指定 Dashboard 的监听的 IP 地址</span><br><span class="line">dashboard_addr = 0.0.0.0</span><br><span class="line"># 指定 Dashboard 的监听的端口</span><br><span class="line">dashboard_port = 7500</span><br><span class="line"># 指定访问 Dashboard 的用户名</span><br><span class="line">dashboard_user = admin</span><br><span class="line"># 指定访问 Dashboard 的端口</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"></span><br><span class="line"># 其次重新启动 FRP 服务端：</span><br><span class="line">./frps -c ./frps.ini</span><br><span class="line"></span><br><span class="line"># 最后通过 http://[server_addr]:7500 访问 Dashboard 界面，用户名密码默认都为 admin。</span><br></pre></td></tr></table></figure>

<p><strong>给 FRP 服务端加上身份验证</strong></p>
<blockquote>
<p>默认情况下只要知道 FRP 服务端开放的端口，任意 FRP 客户端都可以随意在服务端上注册端口映射，这样对于在公网上的 FRP 服务来说显然不太安全。FRP 提供了身份验证机制来提高 FRP 服务端的安全性。要启用这一特性也很简单，只需在 FRP 服务端和 FRP 客户端的 common 配置中启用 privilege_token 参数就行。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">privilege_token = 12345678</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启用这一特性后，只有 FRP 服务端和 FRP 客户端的 common 配置中的 privilege_token 参数一致身份验证才会通过，FRP 客户端才能成功在 FRP 服务端注册端口映射。否则就会注册失败，出现类似下面的错误：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:284] proxy removed: []</span><br><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:294] proxy added: [ssh web dns unix_domain_socket]</span><br><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:317] visitor removed: []</span><br><span class="line">2018/01/25 17:29:27 [I] [proxy_manager.go:326] visitor added: []</span><br><span class="line">2018/01/25 17:29:27 [E] [control.go:230] authorization failed</span><br><span class="line">2018/01/25 17:29:27 [W] [control.go:109] login to server failed: authorization failed</span><br><span class="line">authorization failed</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是 FRP 客户端所在机器和 FRP 服务端所在机器的时间相差不能超过 15 分钟，因为时间戳会被用于加密验证中，防止报文被劫持后被其他人利用。这个超时时间可以在配置文件中通过 authentication_timeout 这个参数来修改，单位为秒，默认值为 900，即 15 分钟。如果修改为 0，则 FRP 服务端将不对身份验证报文的时间戳进行超时校验。</p>
</blockquote>
<p><strong>FRP 客户端热加载配置文件</strong></p>
<blockquote>
<p>当修改了 FRP 客户端中的配置文件，从 0.15 版本开始可以通过 frpc reload 命令来动态加载配置文件，通常会在 10 秒内完成代理的更新。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启用此功能需要在 FRP 客户端配置文件中启用 admin 端口，用于提供 API 服务。配置如下：</span><br><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">admin_addr = 127.0.0.1</span><br><span class="line">admin_port = 7400</span><br><span class="line"># 重启 FRP 客户端，以后就可通过热加载方式进行 FRP 客户端配置变更了。</span><br><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br><span class="line"># 重新加载配置</span><br><span class="line">./frpc reload -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<blockquote>
<p>等待一段时间后客户端会根据新的配置文件创建、更新、删除代理。<br>需要注意的是 [common] 中的参数除了 start 外目前无法被修改。</p>
</blockquote>
<blockquote>
<p>启用 admin_addr 后，还可以通过 frpc status -c ./frpc.ini 命令在 FRP 客户端很方便的查看当前代理状态信息。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frpc status -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<p><strong>给 FRP 服务端增加端口白名单</strong></p>
<blockquote>
<p>为了防止 FRP 端口被滥用，FRP 提供了指定允许哪些端口被分配的功能。可通过 FRP 服务端的配置文件中 privilege_allow_ports 参数来指定：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">privilege_allow_ports = 2000-3000,3001,3003,4000-5000</span><br><span class="line"></span><br><span class="line">privilege_allow_ports </span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以配置允许使用的某个指定端口或者是一个范围内的所有端口，以 , 分隔，指定的范围以 - 分隔。</p>
</blockquote>
<blockquote>
<p>当使用不允许的端口注册时，就会注册失败。出现类似以下错误：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frpc status -c ./frpc.ini</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proxy Status...</span><br><span class="line">TCP</span><br><span class="line">Name Status LocalAddr Plugin RemoteAddr Error</span><br><span class="line">ssh start error 127.0.0.1:22 4.3.2.1:60000 port not allowed</span><br><span class="line">unix_domain_socket start error unix_domain_socket 4.3.2.1:60002 port not allowed</span><br></pre></td></tr></table></figure>


<p><strong>启用 TCP 多路复用</strong></p>
<blockquote>
<p>从 v0.10.0 版本开始，客户端和服务器端之间的连接支持多路复用，不再需要为每一个用户请求创建一个连接，使连接建立的延迟降低，并且避免了大量文件描述符的占用，使 FRP 可以承载更高的并发数。</p>
</blockquote>
<blockquote>
<p>该功能默认启用，如需关闭可以在 FRP 服务端配置文件和 FRP 客户端配置文件中配置，该配置项在服务端和客户端必须一致：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># frps.ini 和 frpc.ini 中</span><br><span class="line">[common]</span><br><span class="line">tcp_mux = falseFRP </span><br></pre></td></tr></table></figure>


<p><strong>底层通信启用 KCP 协议</strong></p>
<blockquote>
<p>FRP 从 v0.12.0 版本开始，底层通信协议支持选择 KCP 协议，在弱网络环境下传输效率会提升明显，但是会有一些额外的流量消耗。</p>
</blockquote>
<blockquote>
<p>要开启 KCP 协议支持，首先要在 FRP 服务端配置文件中启用 KCP 协议支持：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line"># 指定一个 UDP 端口用于接收客户端请求 KCP 绑定的是 UDP 端口，可以和 bind_port 一样</span><br><span class="line">kcp_bind_port = 7000</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次是在 FRP 客户端配置文件指定需要使用的协议类型，目前只支持 TCP 和 KCP。其它代理配置不需要变更：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line"># server_port 指定为 FRP 服务端里 kcp_bind_port 指定的端口</span><br><span class="line">server_port = 7000</span><br><span class="line"># 指定需要使用的协议类型，默认类型为 TCP</span><br><span class="line">protocol = kcp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意开放相关机器上的 UDP 端口的访问权限。</p>
</blockquote>
<p><strong>给 FRP 服务端配置连接池</strong></p>
<blockquote>
<p>默认情况下，当用户请求建立连接后，FRP 服务端才会请求 FRP 客户端主动与后端服务建立一个连接。</p>
</blockquote>
<blockquote>
<p>当为指定的 FRP 服务端启用连接池功能后，FRP 会预先和后端服务建立起指定数量的连接，每次接收到用户请求后，会从连接池中取出一个连接和用户连接关联起来，避免了等待与后端服务建立连接以及 FRP 客户端 和 FRP 服务端之间传递控制信息的时间。</p>
</blockquote>
<blockquote>
<p>首先需要在 FRP 服务端配置文件中设置每个代理可以创建的连接池上限，避免大量资源占用，客户端设置超过此配置后会被调整到当前值：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">[common]</span><br><span class="line">max_pool_count = 5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次在 FRP 客户端配置文件中为客户端启用连接池，指定预创建连接的数量：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">pool_count = 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此功能比较适合有大量短连接请求时开启。</p>
</blockquote>
<p><strong>加密与压缩</strong></p>
<blockquote>
<p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 SSH 协议等，可通过设置 use_encryption = true，将 FRP 客户端 与 FRP 服务端之间的通信内容加密传输，将会有效防止流量被拦截。</p>
</blockquote>
<blockquote>
<p>如果传输的报文长度较长，通过设置 use_compression = true 对传输内容进行压缩，可以有效减小 FRP 客户端 与 FRP 服务端之间的网络流量，来加快流量转发速度，但是会额外消耗一些 CPU 资源。<br>这两个功能默认是不开启的，需要在 FRP 客户端配置文件中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用的是 snappy。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br></pre></td></tr></table></figure>

<p><strong>通过 FRP 客户端代理其它内网机器访问外网</strong></p>
<blockquote>
<p>FRP 客户端内置了 http_proxy 和 socks5 插件，通过这两个插件可以使其它内网机器通过 FPR 客户端的的网络访问互联网。</p>
</blockquote>
<blockquote>
<p>要启用此功能，首先需要在 FRP 客户端配置文件中启用相关插件，这里以 http_proxy 插件为例：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[http_proxy]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 6000</span><br><span class="line">plugin = http_proxy</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次将需要通过这个代理访问外网的内部机器的代理地址设置为 4.3.2.1:6000，这样就可以通过 FRP 客户端机器的网络访问互联网了。<br>http_proxy 插件也支持认证机制，如果需要启用认证可通过配置参数 plugin_http_user 和 plugin_http_passwd 启用。</p>
</blockquote>
<blockquote>
<p>如需启用 Socks5 代理，只需将 plugin 的值更换为 socks5 即可。</p>
</blockquote>
<blockquote>
<p>通过代理连接 FRP 服务端<br>在只能通过代理访问外网的环境内，FRP 客户端支持通过 HTTP_PROXY 参数来配置代理和 FRP 服务端进行通信。要使用此功能可以通过设置系统环境变量 HTTP_PROXY 或者通过在 FRP 客户端的配置文件中设置 http_proxy 参数来使用此功能。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line">protocol = tcp</span><br><span class="line">http_proxy = http://user:pwd@4.3.2.2:8080</span><br></pre></td></tr></table></figure>
<blockquote>
<p>仅在 protocol = tcp 时生效，暂时不支持 kcp 协议。</p>
</blockquote>
<p><strong>安全地暴露内网服务</strong></p>
<blockquote>
<p>对于一些比较敏感的服务如果直接暴露于公网上将会存在安全隐患，FRP 也提供了一种安全的转发方式 STCP。使用 STCP (secret tcp) 类型的代理可以避免让任何人都能访问到穿透到公网的内网服务，要使用 STCP 模式访问者需要单独运行另外一个 FRP 客户端。</p>
</blockquote>
<blockquote>
<p>下面就以创建一个只有自己能访问到的 SSH 服务代理为例，FRP 服务端和其它的部署步骤相同，主要区别是在 FRP 客户端上。</p>
</blockquote>
<blockquote>
<p>首先配置 FRP 客户端，和常规 TCP 转发不同的是这里不需要指定远程端口。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[secret_ssh]</span><br><span class="line">type = stcp</span><br><span class="line"></span><br><span class="line"># 只有 sk 一致的用户才能访问到此服务</span><br><span class="line">sk = abcdefg</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次在要访问这个服务的机器上启动另外一个 FRP 客户端，配置如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[secret_ssh_visitor]</span><br><span class="line">type = stcp</span><br><span class="line"># STCP 的访问者</span><br><span class="line">role = visitor</span><br><span class="line"># 要访问的 STCP 代理的名字，和前面定义的相同。</span><br><span class="line">server_name = secret_ssh</span><br><span class="line"># 和前面定义的要一致</span><br><span class="line">sk = abcdefg</span><br><span class="line"># 绑定本地端口用于访问 ssh 服务</span><br><span class="line">bind_addr = 127.0.0.1</span><br><span class="line">bind_port = 6005</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后在本机启动一个 FRP 客户端，这样就可以通过本机 6005 端口对内网机器 SSH 服务进行访问，假设用户名为 mike：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>点对点内网穿透</strong></p>
<blockquote>
<p>在传输大量数据时如果都经过服务器中转的话，这样会对服务器端带宽压力比较大。FRP 提供了一种新的代理类型 XTCP 来解决这个问题，XTCP 模式下可以在传输大量数据时让流量不经过服务器中转。<br>使用方式同 STCP 类似，需要在传输数据的两端都部署上 FRP 客户端上用于建立直接的连接。</p>
</blockquote>
<blockquote>
<p>首先在 FRP 服务端配置上增加一个 UDP 端口用于支持该类型的客户端:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">bind_udp_port = 7001</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其次配置 FRP 客户端，和常规 TCP 转发不同的是这里不需要指定远程端口。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[p2p_ssh]</span><br><span class="line">type = xtcp</span><br><span class="line"></span><br><span class="line"># 只有 sk 一致的用户才能访问到此服务</span><br><span class="line">sk = abcdefg</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后在要访问这个服务的机器上启动另外一个 FRP 客户端，配置如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 4.3.2.1</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[p2p_ssh_visitor]</span><br><span class="line">type = xtcp</span><br><span class="line"># XTCP 的访问者</span><br><span class="line">role = visitor</span><br><span class="line"># 要访问的 XTCP 代理的名字</span><br><span class="line">server_name = p2p_ssh</span><br><span class="line">sk = abcdefg</span><br><span class="line"># 绑定本地端口用于访问 ssh 服务</span><br><span class="line">bind_addr = 127.0.0.1</span><br><span class="line">bind_port = 6006</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最后在本机启动一个 FRP 客户端，这样就可以通过本机 6006 端口对内网机器 SSH 服务进行访问，假设用户名为 mike：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<h3 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h3><blockquote>
<p>项目地址：<a href="https://github.com/clangcn/onekey-install-shell/%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC">https://github.com/clangcn/onekey-install-shell/下载一键部署脚本</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh</span><br><span class="line"><span class="built_in">chmod</span> 700 ./install-frps.sh  </span><br><span class="line"><span class="comment"># 安装 FRP 服务端</span></span><br><span class="line">./install-frps.sh install </span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置 FRP</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./install-frps.sh # config更新 FRP 服务端</span><br><span class="line">./install-frps.sh # update卸载 FRP 服务端</span><br><span class="line">./install-frps.sh # uninstallFRP 服务端日常管理</span><br></pre></td></tr></table></figure>


<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p><strong>自定义服务frpc.service</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim /lib/systemd/system/frpc.service</span><br><span class="line">[Unit]</span><br><span class="line">Description= frpc start service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/root/code/frp/frpc -c /root/code/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">TimeoutStopSec=10</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注册服务</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable frpc.service</span><br><span class="line">systemctl start frpc.service</span><br><span class="line">systemctl status frpc.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric 笔记</title>
    <url>/2021/04/01/Fabric%20%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Python-远程部署利器-Fabric-模块详解"><a href="#Python-远程部署利器-Fabric-模块详解" class="headerlink" title="Python 远程部署利器 Fabric 模块详解"></a>Python 远程部署利器 Fabric 模块详解</h3><blockquote>
<p>参考： <a href="https://blog.csdn.net/freeking101/article/details/81103945">https://blog.csdn.net/freeking101/article/details/81103945</a></p>
</blockquote>
<ul>
<li>Fabric（Python3）：<a href="https://www.cnblogs.com/xiao-apple36/p/9124292.html">https://www.cnblogs.com/xiao-apple36/p/9124292.html</a></li>
<li>fabric 官网英文文档：<a href="http://www.fabfile.org/">http://www.fabfile.org/</a></li>
<li>fabric 中文站点：<a href="http://fabric-chs.readthedocs.io/zh_CN/chs/">http://fabric-chs.readthedocs.io/zh_CN/chs/</a></li>
<li>python三大神器之一fabric使用：<a href="https://www.cnblogs.com/rufus-hua/p/5144210.html">https://www.cnblogs.com/rufus-hua/p/5144210.html</a></li>
<li>如何用Fabric实现无密码输入提示的远程自动部署：<a href="https://blog.csdn.net/slvher/article/details/50414675">https://blog.csdn.net/slvher/article/details/50414675</a></li>
<li>自动化运维管理 fabric：<a href="http://www.ttlsa.com/python/automation-operation-and-maintenance-tool-fabric/">http://www.ttlsa.com/python/automation-operation-and-maintenance-tool-fabric/</a></li>
<li>Python3自动化运维之Fabric模版详解：<a href="https://www.imooc.com/article/38448">https://www.imooc.com/article/38448</a></li>
</ul>
<h3 id="fab常用参数"><a href="#fab常用参数" class="headerlink" title="fab常用参数"></a>fab常用参数</h3><blockquote>
<p>官方文档：<a href="http://docs.fabfile.org/">http://docs.fabfile.org/</a></p>
</blockquote>
<blockquote>
<p>fab作为Fabric程序的命令行入口，提供了丰富的参数调用，命令格式如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fab [options] &lt;command&gt;[:arg1,arg2-val2,host=foo,host=&#x27;h1;h2&#x27;...]...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用参数介绍（注：更多参数可使用fab –help查看）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u: 主机用户名</span><br><span class="line">-p: 主机用户密码</span><br><span class="line">-l：显示定义好的任务函数名;</span><br><span class="line">-f：指定fab入口文件，默认入口文件名为fabfile.py;</span><br><span class="line">-g：指定网关(中转)设备，比如堡垒机环境，填写堡垒机IP即可；</span><br><span class="line">-H：指定目标主机，多态主机用&quot;,&quot;号分隔；</span><br><span class="line">-P：以异步并行方式运行多主机任务，默认为串行运行；</span><br><span class="line">-R：指定role(角色)，以角色名区分不同业务组设备；</span><br><span class="line">-t：设置设备连接超时时间(秒)；</span><br><span class="line">-T：设置远程主机命令执行超时时间(秒)；</span><br><span class="line">-w：当命令执行失败，发出警告，而非默认中止任务。</span><br></pre></td></tr></table></figure>


<h4 id="Fabric-示例"><a href="#Fabric-示例" class="headerlink" title="Fabric 示例"></a>Fabric 示例</h4><ul>
<li>简单示例 host_type.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># from fabric.api import run</span></span><br><span class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">host_type</span>():</span><br><span class="line">    run(<span class="string">&#x27;uname -a&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fab -H localhost -u root -f host_type.py host_type</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="fabfile的编写"><a href="#fabfile的编写" class="headerlink" title="fabfile的编写"></a>fabfile的编写</h4><p><strong>全局属性设定</strong></p>
<blockquote>
<p>env对象的作用是定义fabfile的全局设定，支持多个属性，包含目标主机、用户名、密码、等角色，各属性说明如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evn.host：定义目标主机，可以用IP或主机名表示，以Python的列表形式定义，如evn.hosts[&#x27;192.168.56.133&#x27;,&#x27;192.168.56.134&#x27;]。</span><br><span class="line">env.exclude_hosts：排除指定主机，如env.exclude_hosts=[&#x27;192.168.56.133&#x27;]。</span><br><span class="line">env.user：定义用户名，如env.user=&quot;root&quot;。</span><br><span class="line">env.port：定义目标主机端口，默认为22，如env.port=&quot;22&quot;。</span><br><span class="line">env.password：定义密码，如env.password=&#x27;1234567&#x27;。</span><br><span class="line">env.passwords：与password功能一样，区别在于不同主机不同密码的应用场景，需要注意的是，配置passwords是需配置用户、主机、端口等信息，如：</span><br><span class="line">env.passwords = &#123;    </span><br><span class="line">    &#x27;root@192.168.56.131:22&#x27;:&#x27;1234567&#x27;,</span><br><span class="line">    &#x27;root@192.168.56.132:22&#x27;:&#x27;1234567&#x27;</span><br><span class="line">&#125;</span><br><span class="line">env.gateway：定义网关(中转、堡垒机)IP，如env.gateway = &#x27;192.168.56.1&#x27;。</span><br><span class="line">env.deploy_release_dir：自定义全局变量，格式：env.+&quot;变量名称&quot;，如env.deploy_release_dir、env.age、env.sex等。</span><br><span class="line">env.roledefs：定义角色分组，比如web组与db组主机区分开来，定义如下：</span><br><span class="line">env.roledefs = &#123;</span><br><span class="line">    &#x27;webservers&#x27;:[</span><br><span class="line">        &#x27;192.168.56.131&#x27;,</span><br><span class="line">        &#x27;192.168.56.132&#x27;</span><br><span class="line">    ],    </span><br><span class="line">    &#x27;dbserver&#x27;:[</span><br><span class="line">        &#x27;192.168.56.134&#x27;,</span><br><span class="line">        &#x27;192.168.56.135&#x27;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><blockquote>
<p>Fabric提供了一组简单但功能强大的fabric.api命令集，简单地调用这些API就能完成大部分应用场景需求。</p>
</blockquote>
<blockquote>
<p>Fabric常用方法及说明如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local：执行本地命令，如：local(&#x27;uname -s&#x27;);</span><br><span class="line">run：执行远程命令，如：run(&#x27;free -m&#x27;);</span><br><span class="line">sudo：以sudo权限执行远程命令，如：sudo(&#x27;/etc/init.d/httpd start&#x27;);</span><br><span class="line">get: 从远程主机 copy file 到本地,功能跟scp一样。可以从远程主机下载</span><br><span class="line">备份，或者日志文件等等。</span><br><span class="line">put：上传本地文件到远程主机，如：put(&#x27;/home/user.info&#x27;,&#x27;/data/user.info&#x27;);</span><br><span class="line">prompt：获得用户输入信息，如：prompt(&#x27;please input user password:&#x27;);</span><br><span class="line">reboot：重启远程主机，如：reboot();</span><br><span class="line">confirm：获得提示信息确认，如：confirm(&quot;Tests failed. Continue[Y/N]?&quot;);</span><br><span class="line">task：函数修饰符，标识的函数为fab可调用的，非标记对fab不可见，纯业务逻辑;</span><br><span class="line">runs_once：函数修饰符，标识的函数只会执行一次，不受多台主机影响。</span><br><span class="line">lcd：切换本地目录，如：lcd(&#x27;/home&#x27;);</span><br><span class="line">cd：切换远程目录，如：cd(&#x27;/data/logs&#x27;);</span><br><span class="line">path: 添加远程机的PATH路径</span><br><span class="line">settings: 设置Fabric环境变量参数</span><br><span class="line">prefix: 设置命令执行前缀</span><br><span class="line">env：保存用户配置的字典, 定义全局信息，如主机、密码等</span><br><span class="line">shell_env:  设置Shell环境变量</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>run()</p>
<blockquote>
<p>run()：在远程服务器上执行 Linux命令，还有一个重要的参数 pty，如果我们执行命令以后需要有一个常驻的服务进程，那么就需要设置 pty=False，避免因为 Fabric 退出导致进程的退出。如：<code>run(&#39;service mysqld start&#39;,pty=False)</code></p>
</blockquote>
</li>
<li><p>sudo()</p>
<blockquote>
<p>sudo()：功能与 run() 方法类似，只是是使用管理员权限在远程服务器上执行shell命令，区别是它相当于在 Shell 命令前加上了”sudo”，所以拥有超级用户的权限。使用此功能前，需要将用户设为sudoer，而且无需输密码。</p>
</blockquote>
</li>
<li><p>local()</p>
<blockquote>
<p>local()：用来执行本地 Shell 命令，返回要执行的命令，local 是对 Python 的 Subprocess 模块的封装，更负载的功能可以直接使用 Subprocess 模块，包含 capture 参数，默认为 False，表示 subprocess 输出的信息进行显示，如果不想显示，那么指定capture=True 即可</p>
</blockquote>
</li>
<li><p>get()</p>
<blockquote>
<p>get()：从远程服务器上获取文件，通过remote_path参数声明从何处下载，通过local_path表示下载到何处。remote_path支持通配符。</p>
</blockquote>
</li>
<li><p>put()</p>
<blockquote>
<p>put()：将本地的文件上传到远程服务器，参数与get相似，此外，还可以通过mode参数执行远程文件的权限配置。</p>
</blockquote>
</li>
<li><p>reboot()</p>
<blockquote>
<p>reboot()：重启远程服务器，可以通过wait参数设置等待几秒钟重启,没有此参数则代表立即重启。</p>
</blockquote>
</li>
<li><p>path()</p>
<blockquote>
<p>path()：配置远程服务器PATH环境变量，只对当前会话有效，不会影响远程服务器的其他操作，path的修改支持多种模式。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">append：默认行为，将给定的路径添加到PATH后面。</span><br><span class="line">prepend：将给定的路径添加到PATH的前面。</span><br><span class="line">replace：替换当前环境的PATH变量。</span><br></pre></td></tr></table></figure>
</li>
<li><p>prefix()</p>
<blockquote>
<p>prefix() 前缀，它接受一个命令作为参数，表示在其内部执行的代码块，都要先执行prefix的命令参数。</p>
</blockquote>
</li>
<li><p>shell_env()</p>
<blockquote>
<p>shell_env()：设置 shell 脚本的环境变量。可以用来临时设置远程和本地机上Shell的环境变量。</p>
</blockquote>
</li>
<li><p>settings()</p>
<blockquote>
<p>settings()：通用配置，设置Fabric环境变量参数，用于临时覆盖env变量。</p>
</blockquote>
</li>
</ul>
<p><strong>注意：</strong></p>
<blockquote>
<p>在windows服务器执行命令，首先windows机器需要安装ssh服务，注意ssh服务所用的账户需要设置能够运行exec的权限，否则无法启动windwos程序。<br>其次由于fabric默认使用bash，因此需要设置变量 env.shell=”cmd /c”，否则会报错。</p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="1-查看本地与远程主机信息"><a href="#1-查看本地与远程主机信息" class="headerlink" title="1. 查看本地与远程主机信息"></a>1. 查看本地与远程主机信息</h3><ul>
<li><p>查看本地信息(local_test.py)</p>
<blockquote>
<p>调用local()方法执行本地(主控端)命令，添加”@runs_once”修饰符保证该任务函数只执行一次。调用run()方法执行远程命令。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, local, runs_once</span><br><span class="line"></span><br><span class="line">env.user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">env.hosts = [<span class="string">&#x27;localhost&#x27;</span>]</span><br><span class="line">env.password = <span class="string">&#x27;1q2w3e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@runs_once</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local_task</span>():</span><br><span class="line">    local(<span class="string">&quot;uname -a&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行：<code>fab -f local_test.py local_task</code></p>
</blockquote>
</li>
<li><p>查看远程主机信息(remote_test.py)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from fabric.api import cd, run, env, runs_once</span><br><span class="line"></span><br><span class="line">env.user = &#x27;root&#x27;</span><br><span class="line">env.hosts = [&#x27;192.168.56.200&#x27;]</span><br><span class="line">env.password = &#x27;1q2w3e&#x27;</span><br><span class="line"></span><br><span class="line">@runs_once</span><br><span class="line">def remote_task():</span><br><span class="line">    with cd(&quot;/root/code/&quot;):</span><br><span class="line">        run(&quot;pwd&quot;)</span><br><span class="line">        run(&quot;ls -l&quot;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行：<code>fab -f remote_test.py remote_task</code></p>
</blockquote>
</li>
</ul>
<h3 id="2-动态获取远程目录列表"><a href="#2-动态获取远程目录列表" class="headerlink" title="2. 动态获取远程目录列表"></a>2. 动态获取远程目录列表</h3><blockquote>
<p>使用”@task’修复符标志入口函数go()对外部可见，配合”@runs_once”修饰符接受用户输入，最后调用worktask()任务函数实现远程命令执行。</p>
</blockquote>
<ul>
<li>动态获取远程目录(dynamic_test.py)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, prompt, run, task</span><br><span class="line"></span><br><span class="line">env.user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">env.hosts = [<span class="string">&quot;192.168.56.200&quot;</span>]</span><br><span class="line">env.password = <span class="string">&#x27;1q2w3e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_raw</span>():</span><br><span class="line">    <span class="keyword">return</span> prompt(<span class="string">&quot;Please input directory name: &quot;</span>, default=<span class="string">&quot;~/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work_task</span>(<span class="params">dir_name</span>):</span><br><span class="line">    run(<span class="string">&quot;ls -l &#123;&#125;&quot;</span>.<span class="built_in">format</span>(dir_name))</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>():</span><br><span class="line">    dir_name = input_raw()</span><br><span class="line">    work_task(dir_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行：<code>fab -f dynamic_test.py go</code></p>
</blockquote>
</li>
</ul>
<h3 id="3-网关模式文件上传与执行"><a href="#3-网关模式文件上传与执行" class="headerlink" title="3. 网关模式文件上传与执行"></a>3. 网关模式文件上传与执行</h3><blockquote>
<p>通过Fabric的env对象定义网关模式，即俗称的中转、堡垒机环境。定义格式为”env.gateway=’192.168.56.11’”,其中IP”192.168.56.11”为堡垒机IP，再结合任务函数实现目标主机文件上传与执行的操作。</p>
</blockquote>
<ul>
<li>上传与执行(upload_run_test.py)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, task, run, settings, put, cd</span><br><span class="line"><span class="keyword">from</span> fabric.contrib.console <span class="keyword">import</span> confirm</span><br><span class="line"><span class="keyword">from</span> fabric.utils <span class="keyword">import</span> abort</span><br><span class="line"></span><br><span class="line">env.user = <span class="string">&quot;root&quot;</span></span><br><span class="line">env.gateway = <span class="string">&#x27;192.168.56.11&#x27;</span>  <span class="comment"># 定义堡垒机IP，作为文件上传、执行的中转设备</span></span><br><span class="line">env.hosts = [<span class="string">&quot;192.168.56.12&quot;</span>, <span class="string">&quot;192.168.56.13&quot;</span>]</span><br><span class="line">env.passwords = &#123;</span><br><span class="line">    <span class="string">&quot;root@192.168.56.11:22&quot;</span>: <span class="string">&#x27;1q2w3e&#x27;</span>,  <span class="comment"># 堡垒机账号信息</span></span><br><span class="line">    <span class="string">&#x27;root@192.168.56.12:22&#x27;</span>: <span class="string">&#x27;1q2w3e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;root@192.168.56.13:22&#x27;</span>: <span class="string">&#x27;1q2w3e&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l_pack_path = <span class="string">&quot;/home/install/nginx-1.10.1.tar.gz&quot;</span>  <span class="comment"># 本地安装包路径</span></span><br><span class="line">r_pack_path = <span class="string">&quot;/tmp/install&quot;</span>  <span class="comment"># 远程安装包路径</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_task</span>():</span><br><span class="line">    run(<span class="string">&quot;mkdir -p /tmp/install&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):</span><br><span class="line">        result = put(l_pack_path, r_pack_path)  <span class="comment"># 上传安装包</span></span><br><span class="line">        <span class="keyword">if</span> result.failed <span class="keyword">and</span> <span class="keyword">not</span> confirm(<span class="string">&quot;put file failed, Continue[Y/N]?&quot;</span>):</span><br><span class="line">            abort(<span class="string">&quot;Abort file put task!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_task</span>():  <span class="comment"># 执行远程命令，安装nginx</span></span><br><span class="line">    <span class="keyword">with</span> cd(r_pack_path):</span><br><span class="line">        run(<span class="string">&quot;tar -xvf nginx-1.10.1.tar.gz&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> cd(<span class="string">&quot;nginx-1.10.1/&quot;</span>):</span><br><span class="line">            run(<span class="string">&quot;./nginx_install.sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>():</span><br><span class="line">    put_task()</span><br><span class="line">    run_task()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>串行运行：<code>fab -f upload_run_test.py go</code></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>异步并行: <code>fab -Pf upload_run_test.py go</code></p>
</blockquote>
<h3 id="4-文件打包、上传与校验"><a href="#4-文件打包、上传与校验" class="headerlink" title="4. 文件打包、上传与校验"></a>4. 文件打包、上传与校验</h3><blockquote>
<p>时常做一些文件包分发的工作，实施步骤一般是先压缩打包，在批量上传至目标服务器，最后做一致性校验。</p>
</blockquote>
<blockquote>
<p>示例通过put()方法实现文件的上传，通过对比本地与远程主机文件的md5，最终实现文件一致性校验。</p>
</blockquote>
<ul>
<li>文件打包、上传与校验(pack_tar_teat.py)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from fabric.api import env, runs_once, lcd, local, task, settings, run, prompt, cd, put</span><br><span class="line">from fabric.contrib.console import confirm</span><br><span class="line">from fabric.utils import abort</span><br><span class="line"></span><br><span class="line">env.user = &#x27;root&#x27;</span><br><span class="line">env.hosts = [&#x27;192.168.56.12&#x27;, &#x27;192.168.56.13&#x27;]</span><br><span class="line">env.passwords = &#123;</span><br><span class="line">    &#x27;root@192.168.56.12:22&#x27;: &#x27;1q2w3e&#x27;,</span><br><span class="line">    &#x27;root@192.168.56.13:22&#x27;: &#x27;1q2w3e&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@runs_once</span><br><span class="line">def tar_task():  # 本地打包任务函数，只执行一次</span><br><span class="line">    with lcd(&quot;/home/mayw/devops&quot;):</span><br><span class="line">        local(&quot;tar -zcf devops.tar.gz *&quot;)</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def put_task():  # 上传文件任务函数</span><br><span class="line">    run(&quot;mkdir -p /root/devops&quot;)</span><br><span class="line">    with cd(&quot;/root/devops&quot;):</span><br><span class="line">        with settings(warn_only=True):  # put(上传)出现异常时继续执行，非终止</span><br><span class="line">            result = put(&quot;/home/mayw/devops/devops.tar.gz&quot;, &quot;/root/devops/devops.tar.gz&quot;)</span><br><span class="line">            if result.failed and not confirm(&quot;put file failed.Continue[Y/N]?&quot;):</span><br><span class="line">                abort(&quot;Aborting file put task!&quot;)  # 出现异常时，确认用户是否继续，(Y继续)</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def check_task():</span><br><span class="line">    with settings(warn_only=True):</span><br><span class="line">        lmd5 = local(&quot;md5sum /home/mayw/devops/devops.tar.gz&quot;, capture=True).split(&#x27; &#x27;)[0]</span><br><span class="line">        rmd5 = run(&quot;md5sum /root/devops/devops.tar.gz&quot;).split(&#x27; &#x27;)[0]</span><br><span class="line">        if lmd5 == rmd5:  # 对比本地及远程文件md5信息</span><br><span class="line">            prompt(&quot;OK&quot;)</span><br><span class="line">        else:</span><br><span class="line">            prompt(&quot;ERROR&quot;)</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">def go():</span><br><span class="line">    tar_task()</span><br><span class="line">    put_task()</span><br><span class="line">    check_task()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行：<code>fab -f pack_tar_teat.py go</code></p>
</blockquote>
</li>
</ul>
<h3 id="5-部署LNMP业务服务环境"><a href="#5-部署LNMP业务服务环境" class="headerlink" title="5. 部署LNMP业务服务环境"></a>5. 部署LNMP业务服务环境</h3><blockquote>
<p>通过env.roledefs定义不同主机角色，在使用”@roles(‘webservers’)”修复符绑定到对应的任务函数，实现不同角色主机的部署差异。</p>
</blockquote>
<ul>
<li>部署LNMP业务服务环境(lnmp_test.py)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from fabric.api import env, roles, settings, run, execute</span><br><span class="line">from fabric.colors import yellow</span><br><span class="line"></span><br><span class="line">env.user = &#x27;root&#x27;</span><br><span class="line">env.roledefs = &#123;</span><br><span class="line">    &#x27;webservers&#x27;: [&#x27;192.168.56.11&#x27;, &#x27;192.168.56.12&#x27;],</span><br><span class="line">    &#x27;dbservers&#x27;: [&#x27;192.168.56.13&#x27;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">env.passwords = &#123;</span><br><span class="line">    &#x27;root@192.168.56.11:22&#x27;: &#x27;1q2w3e&#x27;,</span><br><span class="line">    &#x27;root@192.168.56.12:22&#x27;: &#x27;1q2w3e&#x27;,</span><br><span class="line">    &#x27;root@192.168.56.13:22&#x27;: &#x27;1q2w3e&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@roles(&#x27;webservers&#x27;)  # 使用webtask任务函数引用&#x27;webservers&#x27;角色修复符</span><br><span class="line">def web_task():</span><br><span class="line">    print(yellow(&#x27;Install nginx php php-fpm...&#x27;))</span><br><span class="line">    with settings(warn_only=True):</span><br><span class="line">        run(&quot;yum -y install nginx&quot;)</span><br><span class="line">        run(&quot;yum -y install php-fpm php-mysql php-mbstring php-xml php-mcrypt php-gd&quot;)</span><br><span class="line">        run(&quot;chkconfig --levels 235 php-fpm on&quot;)</span><br><span class="line">        run(&quot;chkconfig --levels 235 nginx on&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@roles(&#x27;dbservers&#x27;)  # dbtask任务函数引用&#x27;dbservers&#x27;角色修复符</span><br><span class="line">def db_task():</span><br><span class="line">    print(yellow(&quot;Install Mysql...&quot;))</span><br><span class="line">    with settings(warn_only=True):</span><br><span class="line">        run(&quot;yum -y install mysql mysql-server&quot;)</span><br><span class="line">        run(&quot;chkconfig --levels 235 mysqld on&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@roles(&#x27;webservers&#x27;, &#x27;dbservers&#x27;)  # publictask任务函数同时引用两个角色修复符</span><br><span class="line">def public_task():  # 部署公共类环境，如epel、ntp等</span><br><span class="line">    print(yellow(&quot;Install epel ntp....&quot;))</span><br><span class="line">    with settings(warn_only=True):</span><br><span class="line">        run(&quot;wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo&quot;)</span><br><span class="line">        run(&quot;yum -y install ntp&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def deploy():</span><br><span class="line">    execute(public_task)</span><br><span class="line">    execute(web_task)</span><br><span class="line">    execute(db_task)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>执行：<code>fab -Pf lnmp_test.py go</code></p>
</blockquote>
<h3 id="6-生产环境代码包发布管理"><a href="#6-生产环境代码包发布管理" class="headerlink" title="6. 生产环境代码包发布管理"></a>6. 生产环境代码包发布管理</h3><blockquote>
<p>程序生产环境的发布是业务上线的最后一个环境，要求具备源码打包、发布、切换、回滚、版本管理等功能。</p>
</blockquote>
<blockquote>
<p>本示例实现了这一套流程功能，其中版本切换与回滚使用了Linux下的软链接实现。</p>
</blockquote>
<ul>
<li>生产环境代码包发布管理(package_mgt.py)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> env, runs_once, run, task, prompt, settings, cd, abort, lcd, local, put</span><br><span class="line"><span class="keyword">from</span> fabric.colors <span class="keyword">import</span> yellow, green</span><br><span class="line"><span class="keyword">from</span> fabric.contrib.console <span class="keyword">import</span> confirm</span><br><span class="line"></span><br><span class="line">env.user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">env.host = [<span class="string">&#x27;192.168.56.12&#x27;</span>, <span class="string">&#x27;192.168.56.13&#x27;</span>]</span><br><span class="line">env.passwords = &#123;</span><br><span class="line">    <span class="string">&#x27;root@192.168.56.12:22&#x27;</span>: <span class="string">&#x27;1q2w3e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;root@192.168.56.13:22&#x27;</span>: <span class="string">&#x27;1q2w3e&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">env.project_dev_source = <span class="string">&#x27;/data/dev/Lwebadmin/&#x27;</span>  <span class="comment"># 开发服务器项目主目录</span></span><br><span class="line">env.project_tar_source = <span class="string">&#x27;/data/dev/releases/&#x27;</span>  <span class="comment"># 开发服务器项目压缩包存储目录</span></span><br><span class="line">env.project_pack_name = <span class="string">&#x27;release&#x27;</span>  <span class="comment"># 项目压缩包前缀，文件名为release.tar.gz</span></span><br><span class="line"></span><br><span class="line">env.deploy_project_root = <span class="string">&#x27;/data/www/Lwebadmin/&#x27;</span>  <span class="comment"># 项目生产环境主目录</span></span><br><span class="line">env.deploy_release_dir = <span class="string">&#x27;releases&#x27;</span>  <span class="comment"># 项目发布目录，位于主目录下面</span></span><br><span class="line">env.deploy_current_dir = <span class="string">&#x27;current&#x27;</span>  <span class="comment"># 对外服务的当前版本软链接</span></span><br><span class="line">env.deploy_version = time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>) + <span class="string">&quot;v2&quot;</span>  <span class="comment"># 版本号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@runs_once</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_version_id</span>():  <span class="comment"># 获得用户输入的版本号，以便做版本回滚操作</span></span><br><span class="line">    <span class="keyword">return</span> prompt(<span class="string">&quot;Please input project rollback version ID:&quot;</span>, default=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="meta">@runs_once</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tar_source</span>():  <span class="comment"># 打包本地项目主目录，并将压缩包存储到本地压缩包目录</span></span><br><span class="line">    prompt(yellow(<span class="string">&quot;Creating source package....&quot;</span>))</span><br><span class="line">    <span class="keyword">with</span> lcd(env.project_dev_source):</span><br><span class="line">        local(<span class="string">&quot;tar -zcf %s.tar.gz .&quot;</span> % (env.project_tar_source + env.project_pack_name))</span><br><span class="line">    prompt(green(<span class="string">&quot;Creating source package success!&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put_package</span>():  <span class="comment"># 上传任务函数</span></span><br><span class="line">    prompt(yellow(<span class="string">&quot;Start put package....&quot;</span>))</span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">with</span> cd(env.deploy_project_root + env.deploy_release_dir):</span><br><span class="line">            run(<span class="string">&quot;mkdir %s&quot;</span> % env.deploy_version)  <span class="comment"># 创建版本目录</span></span><br><span class="line">    env.deploy_full_path = env.deploy_project_root + env.deploy_release_dir + <span class="string">&quot;/&quot;</span> + env.deploy_version</span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):  <span class="comment"># 上传项目压缩包至此目录</span></span><br><span class="line">        result = put(env.project_tar_source + env.project_pack_name + <span class="string">&quot;.tar.gz&quot;</span>, env.deploy_full_path)</span><br><span class="line">        <span class="keyword">if</span> result.failed <span class="keyword">and</span> <span class="keyword">not</span> confirm(<span class="string">&quot;put file failed,Continue[Y/N]?&quot;</span>):</span><br><span class="line">            abort(<span class="string">&quot;Aborting file put task!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> cd(env.deploy_full_path):  <span class="comment"># 成功解压后删除压缩包</span></span><br><span class="line">        run(<span class="string">&quot;tar -zxvf %s.tar.gz&quot;</span> % env.project_pack_name)</span><br><span class="line">        run(<span class="string">&quot;rm -rf %s.tar.gz&quot;</span> % env.project_pack_name)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(green(<span class="string">&quot;Put &amp; untar package success!&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_symlink</span>():  <span class="comment"># 为当前版本目录做软链接</span></span><br><span class="line">    <span class="built_in">print</span>(yellow(<span class="string">&quot;update current symlink&quot;</span>))</span><br><span class="line">    env.deploy_full_path = env.deploy_project_root + env.deploy_release_dir + <span class="string">&quot;/&quot;</span> + env.deploy_version</span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="literal">True</span>):  <span class="comment"># 删除软链接，重新创建并指定软链接源目录，新版本生效</span></span><br><span class="line">        run(<span class="string">&quot;rm -rf %s&quot;</span> % (env.deploy_project_root + env.deploy_current_dir))</span><br><span class="line">        run(<span class="string">&quot;ln -s %s %s&quot;</span> % (env.deploy_full_path, env.deploy_project_root + env.deploy_current_dir))</span><br><span class="line">    <span class="built_in">print</span>(green(<span class="string">&quot;make symlink success!&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rollback</span>():  <span class="comment"># 版本回滚任务函数</span></span><br><span class="line">    <span class="built_in">print</span>(yellow(<span class="string">&quot;rollback project version&quot;</span>))</span><br><span class="line">    version_id = input_version_id()  <span class="comment"># 获取用户输入的回滚版本号</span></span><br><span class="line">    <span class="keyword">if</span> version_id == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        abort(<span class="string">&quot;Project version ID error,abort!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    env.deploy_full_path = env.deploy_project_root + env.deploy_release_dir + <span class="string">&quot;/&quot;</span> + version_id</span><br><span class="line">    run(<span class="string">&quot;rm -r %s&quot;</span> % (env.deploy_project_root + env.deploy_current_dir))</span><br><span class="line">    <span class="comment"># 删除软链接，重新创建并指定软链接源目录，新版本生效</span></span><br><span class="line">    run(<span class="string">&quot;ln -s %s %s&quot;</span> % (env.deploy_full_path, env.deploy_project_root + env.deploy_current_dir))</span><br><span class="line">    <span class="built_in">print</span>(green(<span class="string">&quot;rollback success!&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>():  <span class="comment"># 自动化程序版本发布入口函数</span></span><br><span class="line">    tar_source()</span><br><span class="line">    put_package()</span><br><span class="line">    make_symlink()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>执行：<code>fab -Pf package_mgt.py go</code></p>
</blockquote>
<blockquote>
<p>在生产环境中将站点的根目录指向”/data/www/Lwebadmin/current”,由于使用Linux软链接做切换，管理员的版本发布、回滚操作用户无感知。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask Excel 操作</title>
    <url>/2021/04/01/Flask%20Excel%20%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tablib==0.13.0</span><br><span class="line">xlrd==1.2.0</span><br><span class="line">xlwt==1.3.0</span><br></pre></td></tr></table></figure>

<h3 id="Excel下载"><a href="#Excel下载" class="headerlink" title="Excel下载"></a>Excel下载</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tablib  </span><br><span class="line">headers = (<span class="string">u&quot;姓名&quot;</span>, <span class="string">u&quot;性别&quot;</span>, <span class="string">u&quot;年龄&quot;</span>)</span><br><span class="line">info = [</span><br><span class="line">    (<span class="string">u&quot;李磊&quot;</span>, <span class="string">u&quot;男&quot;</span>, <span class="string">u&quot;20&quot;</span>),</span><br><span class="line">    (<span class="string">u&quot;王艳&quot;</span>, <span class="string">u&quot;女&quot;</span>, <span class="string">u&quot;18&quot;</span>),</span><br><span class="line">]</span><br><span class="line">data = tablib.Dataset(*info, headers=headers)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#然后就可以通过下面这种方式得到各种格式的数据了。  </span></span><br><span class="line">data.xlsx  </span><br><span class="line">data.xls  </span><br><span class="line">data.ods  </span><br><span class="line">data.json  </span><br><span class="line">data.yaml  </span><br><span class="line">data.csv  </span><br><span class="line">data.tsv  </span><br><span class="line">data.html  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#增加行  </span></span><br><span class="line">data.append([<span class="string">u&#x27;小明&#x27;</span>, <span class="string">u&#x27;男&#x27;</span>,<span class="number">18</span>])  </span><br><span class="line"><span class="comment">#增加列  </span></span><br><span class="line">data.append_col([<span class="number">22</span>, <span class="number">20</span>,<span class="number">13</span>], header=<span class="string">u&#x27;年龄&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span> data.csv  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#删除行  </span></span><br><span class="line"><span class="keyword">del</span> data[<span class="number">1</span>:<span class="number">3</span>]  </span><br><span class="line"><span class="comment">#删除列  </span></span><br><span class="line"><span class="keyword">del</span> data[<span class="string">u&#x27;年龄&#x27;</span>]  </span><br><span class="line"><span class="built_in">print</span> data.csv </span><br><span class="line"><span class="comment">#导出excel表</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;xxx.xls&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(data.xls)</span><br><span class="line"><span class="comment">#多个sheet的excel表</span></span><br><span class="line">book = tablib.Databook((data1, data2, data3))</span><br><span class="line">book.xls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应设置</span></span><br><span class="line">resp = make_response(data.xls)</span><br><span class="line">resp.headers[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&quot;attachment; filename=&#123;&#125;.xls&quot;</span>.<span class="built_in">format</span>(<span class="string">u&#x27;教室巡检模板&#x27;</span>).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-xls&#x27;</span>  <span class="comment"># &#x27;application/x-xlsx&#x27;</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Excel解析"><a href="#Excel解析" class="headerlink" title="Excel解析"></a>Excel解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    data = xlrd.open_workbook(file_contents=file.read())</span><br><span class="line">    sheet = data.sheets()[<span class="number">0</span>]</span><br><span class="line">    names = data.sheet_names()</span><br><span class="line">    status = data.sheet_loaded(names[<span class="number">0</span>])</span><br><span class="line">    logger.info(<span class="string">&quot;&#123;&#125; 载入 &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(file.filename, <span class="string">&#x27;完毕&#x27;</span> <span class="keyword">if</span> status <span class="keyword">else</span> <span class="string">&quot;失败&quot;</span>))</span><br><span class="line">    nrows = sheet.nrows</span><br><span class="line">    first_row = sheet.row_values(<span class="number">0</span>)</span><br><span class="line">    titles = [i <span class="keyword">for</span> i <span class="keyword">in</span> first_row]</span><br><span class="line">    records = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(nrows - <span class="number">1</span>):</span><br><span class="line">        row = sheet.row_values(c + <span class="number">1</span>)</span><br><span class="line">        row = [i <span class="keyword">for</span> i <span class="keyword">in</span> row]</span><br><span class="line">        records.append(row)</span><br><span class="line">    <span class="built_in">print</span>(titles)</span><br><span class="line">    <span class="built_in">print</span>(records)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读列</span></span><br><span class="line">    col_vals = sheet.col_values()</span><br><span class="line">    <span class="comment"># 读行</span></span><br><span class="line">    row_values = sheet.row_values()</span><br></pre></td></tr></table></figure>

<h3 id="生成复杂表头"><a href="#生成复杂表头" class="headerlink" title="生成复杂表头"></a>生成复杂表头</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created By Murray(m18527) on 2019/5/27 17:03</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_json_data</span>():</span><br><span class="line">    json_str = <span class="string">&#x27;&#123;&quot;uid&quot;: &quot;0eb0ad61-d7c8-4e17-9c78-24d98a30a113&quot;, &quot;name&quot;: &quot;\u5fb7\u80b2\u6807\u5175&quot;, &quot;score&quot;: 75, &quot;start_at&quot;: &quot;2019-05-01T00:00:00&quot;, &quot;end_at&quot;: &quot;2019-05-31T23:59:59&quot;, &quot;remarks&quot;: null, &quot;operator&quot;: null, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;98ca8ccc-e898-4aa2-b16b-683f42ecd2bc&quot;, &quot;name&quot;: &quot;\u5fb7&quot;, &quot;score&quot;: 20, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;d34b4b4c-ad80-4b11-ac1f-06b7a1c1af37&quot;, &quot;name&quot;: &quot;\u601d\u60f3\u54c1\u5fb7&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;a53a3c69-0e36-4a95-a6f1-b99bffe07521&quot;, &quot;name&quot;: &quot;\u601d\u60f3\u54c1\u5fb7&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;]&#125;, &#123;&quot;uid&quot;: &quot;3492992a-6cca-49d2-aad3-243659dce175&quot;, &quot;name&quot;: &quot;\u8bfe\u5802\u7eaa\u5f8b&quot;, &quot;score&quot;: 15, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;774fc2c4-58d9-4173-a538-d52dc8590204&quot;, &quot;name&quot;: &quot;\u8fdf\u65e9\u4e86\u5417&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;, &#123;&quot;uid&quot;: &quot;ea59e5ed-5550-4459-8697-632c581b8698&quot;, &quot;name&quot;: &quot;\u65e9\u9000\u4e86\u5417&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;, &#123;&quot;uid&quot;: &quot;41fb9d0a-80af-4f86-8c51-be03a90eb535&quot;, &quot;name&quot;: &quot;\u7761\u89c9\u4e86\u5417&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;]&#125;]&#125;, &#123;&quot;uid&quot;: &quot;f068cb17-6c60-47f9-b1fb-374d20e77126&quot;, &quot;name&quot;: &quot;\u667a&quot;, &quot;score&quot;: 20, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;ad38ccaf-5db0-465b-895d-115a81e0af8d&quot;, &quot;name&quot;: &quot;\u671f\u4e2d\u8003\u8bd5&quot;, &quot;score&quot;: 10, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;9ee29bfe-f8a4-4cd0-9b91-99f77a9620d7&quot;, &quot;name&quot;: &quot;\u8003\u4e86\u51e0\u5206&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;, &#123;&quot;uid&quot;: &quot;9dcb922a-cbda-45e0-a2ee-d2374165da4e&quot;, &quot;name&quot;: &quot;\u6ee1\u610f\u5417&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;]&#125;, &#123;&quot;uid&quot;: &quot;ca0385c6-8400-4209-99c0-b290926bebab&quot;, &quot;name&quot;: &quot;\u671f\u672b\u8003\u8bd5&quot;, &quot;score&quot;: 10, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;effe9d41-9aa6-469d-b5c4-cc7e14aa1dae&quot;, &quot;name&quot;: &quot;\u54c8\u54c8\u54c8\u54c8&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;, &#123;&quot;uid&quot;: &quot;cb927b4a-077c-4eb2-87a9-4cb68f7de184&quot;, &quot;name&quot;: &quot;\u54c7\u54c7\u54c7\u54c7&quot;, &quot;score&quot;: 5, &quot;level&quot;: 3, &quot;remarks&quot;: &quot;&quot;&#125;]&#125;]&#125;, &#123;&quot;uid&quot;: &quot;9974d8d6-ffab-4730-ae80-050459f3349e&quot;, &quot;name&quot;: &quot;\u4f53&quot;, &quot;score&quot;: 10, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;0eff22cb-2508-477b-b8d3-86f372d9f8f0&quot;, &quot;name&quot;: &quot;\u8dd1\u6b65&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;, &#123;&quot;uid&quot;: &quot;239983a8-b322-425e-a9bf-d3abf0b4f0ac&quot;, &quot;name&quot;: &quot;\u4f53\u64cd&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;, &#123;&quot;uid&quot;: &quot;712f5153-7963-47c3-95a3-638d1c1449bf&quot;, &quot;name&quot;: &quot;\u7f8e&quot;, &quot;score&quot;: 10, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;f7a0553c-e210-4d17-85b6-42fd85bea296&quot;, &quot;name&quot;: &quot;\u7d20\u63cf&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;, &#123;&quot;uid&quot;: &quot;fad8b870-fe6a-4c1b-8d4e-ec75c66aed5b&quot;, &quot;name&quot;: &quot;\u6cb9\u753b&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;, &#123;&quot;uid&quot;: &quot;3d545957-4675-4ef6-b798-c30f442d81d2&quot;, &quot;name&quot;: &quot;\u52b3&quot;, &quot;score&quot;: 15, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;507ee9d1-e817-47ca-88b4-096659e16bbb&quot;, &quot;name&quot;: &quot;\u503c\u65e5&quot;, &quot;score&quot;: 10, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;, &#123;&quot;uid&quot;: &quot;0c552d5a-65bb-4c36-92bf-d1dc07f59d10&quot;, &quot;name&quot;: &quot;\u5012\u5783\u573e&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;]&#125;&#x27;</span></span><br><span class="line">    <span class="comment"># json_str = &#x27;&#123;&quot;uid&quot;: &quot;0eb0ad61-d7c8-4e17-9c78-24d98a30a113&quot;, &quot;name&quot;: &quot;\u5fb7\u80b2\u6807\u5175&quot;, &quot;score&quot;: 75, &quot;start_at&quot;: &quot;2019-05-01T00:00:00&quot;, &quot;end_at&quot;: &quot;2019-05-31T23:59:59&quot;, &quot;remarks&quot;: null, &quot;operator&quot;: null, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;9974d8d6-ffab-4730-ae80-050459f3349e&quot;, &quot;name&quot;: &quot;\u4f53&quot;, &quot;score&quot;: 10, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;0eff22cb-2508-477b-b8d3-86f372d9f8f0&quot;, &quot;name&quot;: &quot;\u8dd1\u6b65&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;, &#123;&quot;uid&quot;: &quot;239983a8-b322-425e-a9bf-d3abf0b4f0ac&quot;, &quot;name&quot;: &quot;\u4f53\u64cd&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;, &#123;&quot;uid&quot;: &quot;712f5153-7963-47c3-95a3-638d1c1449bf&quot;, &quot;name&quot;: &quot;\u7f8e&quot;, &quot;score&quot;: 10, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;f7a0553c-e210-4d17-85b6-42fd85bea296&quot;, &quot;name&quot;: &quot;\u7d20\u63cf&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;, &#123;&quot;uid&quot;: &quot;fad8b870-fe6a-4c1b-8d4e-ec75c66aed5b&quot;, &quot;name&quot;: &quot;\u6cb9\u753b&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;, &#123;&quot;uid&quot;: &quot;3d545957-4675-4ef6-b798-c30f442d81d2&quot;, &quot;name&quot;: &quot;\u52b3&quot;, &quot;score&quot;: 15, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;507ee9d1-e817-47ca-88b4-096659e16bbb&quot;, &quot;name&quot;: &quot;\u503c\u65e5&quot;, &quot;score&quot;: 10, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;, &#123;&quot;uid&quot;: &quot;0c552d5a-65bb-4c36-92bf-d1dc07f59d10&quot;, &quot;name&quot;: &quot;\u5012\u5783\u573e&quot;, &quot;score&quot;: 5, &quot;level&quot;: 2, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;]&#125;&#x27;</span></span><br><span class="line">    <span class="comment"># json_str = &#x27;&#123;&quot;uid&quot;: &quot;0eb0ad61-d7c8-4e17-9c78-24d98a30a113&quot;, &quot;name&quot;: &quot;\u5fb7\u80b2\u6807\u5175&quot;, &quot;score&quot;: 75, &quot;start_at&quot;: &quot;2019-05-01T00:00:00&quot;, &quot;end_at&quot;: &quot;2019-05-31T23:59:59&quot;, &quot;remarks&quot;: null, &quot;operator&quot;: null, &quot;items&quot;: [&#123;&quot;uid&quot;: &quot;98ca8ccc-e898-4aa2-b16b-683f42ecd2bc&quot;, &quot;name&quot;: &quot;\u5fb7&quot;, &quot;score&quot;: 20, &quot;level&quot;: 1, &quot;remarks&quot;: &quot;&quot;, &quot;items&quot;: []&#125;]&#125;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(json_str)</span><br><span class="line">    data = json.loads(json_str)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_leave_count</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取叶子节点数量&quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        sub_items = i.get(<span class="string">&#x27;items&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sub_items:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count += get_leave_count(sub_items)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_max_levels</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取节点层级&quot;&quot;&quot;</span></span><br><span class="line">    dep = <span class="number">1</span></span><br><span class="line">    next_items = []</span><br><span class="line">    <span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">        sub_items = i.get(<span class="string">&quot;items&quot;</span>, [])</span><br><span class="line">        <span class="keyword">if</span> sub_items:</span><br><span class="line">            next_items += sub_items</span><br><span class="line">    <span class="keyword">if</span> next_items:</span><br><span class="line">        dep += get_max_levels(items=next_items)</span><br><span class="line">    <span class="keyword">return</span> dep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_title</span>(<span class="params">items, x, y, m=-<span class="number">1</span></span>):</span><br><span class="line">    tmp_start_y = <span class="number">0</span></span><br><span class="line">    item_spans = []</span><br><span class="line">    level = get_max_levels(items)</span><br><span class="line">    <span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">        next_items = i.get(<span class="string">&quot;items&quot;</span>, [])</span><br><span class="line">        leave_n = get_leave_count(items=next_items)</span><br><span class="line">        level_n = get_max_levels(items=next_items)</span><br><span class="line">        n_x, n_m = x + m + <span class="number">1</span>, level - level_n - <span class="number">1</span> <span class="keyword">if</span> leave_n <span class="keyword">else</span> level - <span class="number">1</span></span><br><span class="line">        n_y, n_n = y + tmp_start_y, leave_n - <span class="number">1</span> <span class="keyword">if</span> leave_n <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        tmp_start_y += leave_n <span class="keyword">if</span> leave_n <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        tmp = &#123;<span class="string">&quot;name&quot;</span>: i.get(<span class="string">&quot;name&quot;</span>), <span class="string">&quot;score&quot;</span>: i.get(<span class="string">&quot;score&quot;</span>), <span class="string">&#x27;x&#x27;</span>: n_x, <span class="string">&#x27;m&#x27;</span>: n_m, <span class="string">&#x27;y&#x27;</span>: n_y, <span class="string">&#x27;n&#x27;</span>: n_n&#125;</span><br><span class="line">        item_spans.append(tmp)</span><br><span class="line">        <span class="keyword">if</span> next_items:</span><br><span class="line">            item_spans += build_title(items=next_items, x=n_x, m=n_m, y=n_y)</span><br><span class="line">    <span class="keyword">return</span> item_spans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_excel</span>():</span><br><span class="line">    f = xlwt.Workbook()  <span class="comment"># 设置表格样式</span></span><br><span class="line">    style_left = xlwt.easyxf(<span class="string">&#x27;font: name Arial Black, colour_index black, bold on; &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;align: wrap on, vert centre, horiz left;&#x27;</span></span><br><span class="line">                             <span class="string">&#x27;border:left thin, right thin, top thin, bottom thin&#x27;</span>)</span><br><span class="line">    style_right = xlwt.easyxf(<span class="string">&#x27;font: name Arial Black, colour_index black, bold on; &#x27;</span></span><br><span class="line">                              <span class="string">&#x27;align: wrap on, vert centre, horiz right;&#x27;</span></span><br><span class="line">                              <span class="string">&#x27;border:left thin, right thin, top thin, bottom thin&#x27;</span>)</span><br><span class="line">    style_center = xlwt.easyxf(<span class="string">&#x27;font: name Arial Black, colour_index black, bold on; &#x27;</span></span><br><span class="line">                               <span class="string">&#x27;align: wrap on, vert centre, horiz center;&#x27;</span></span><br><span class="line">                               <span class="string">&#x27;border:left thin, right thin, top thin, bottom thin&#x27;</span>)</span><br><span class="line">    style_normal = xlwt.easyxf(<span class="string">&#x27;font: name Arial, colour_index black;&#x27;</span></span><br><span class="line">                               <span class="string">&#x27;align: wrap on, vert centre, horiz center;&#x27;</span></span><br><span class="line">                               <span class="string">&#x27;border:left thin, right thin, top thin, bottom thin&#x27;</span>)</span><br><span class="line">    data = get_json_data()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建sheet1</span></span><br><span class="line">    sheet1 = f.add_sheet(<span class="string">u&#x27;德育评分&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">    创建复杂表头:</span></span><br><span class="line"><span class="string">    write_merge(x, x + m, y, y + n, string, sytle) </span></span><br><span class="line"><span class="string">    x表示行，y表示列，</span></span><br><span class="line"><span class="string">    m表示跨行个数，n表示跨列个数，</span></span><br><span class="line"><span class="string">    string表示要写入的单元格内容，</span></span><br><span class="line"><span class="string">    style表示单元格样式。 </span></span><br><span class="line"><span class="string">    其中，x, y, m, n，都是以0开始计算的。 </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    name = data.get(<span class="string">&quot;name&quot;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    sheet1.write_merge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">u&#x27;德育评比&#x27;</span>, style_right)</span><br><span class="line">    sheet1.write_merge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">u&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name), style_center)</span><br><span class="line">    sheet1.write_merge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">u&quot;*勿修改&quot;</span>, style_left)</span><br><span class="line">    sheet1.write_merge(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">u&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    sheet1.write_merge(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">u&#x27;班级&#x27;</span>, style_right)</span><br><span class="line">    sheet1.write_merge(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">u&#x27;&#x27;</span>, style_center)</span><br><span class="line">    sheet1.write_merge(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">u&#x27;*必填&#x27;</span>, style_left)</span><br><span class="line">    sheet1.write_merge(<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">u&#x27;班级编号&#x27;</span>, style_right)</span><br><span class="line">    sheet1.write_merge(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">u&#x27;&#x27;</span>, style_center)</span><br><span class="line">    sheet1.write_merge(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">u&#x27;&#x27;</span>, style_left)</span><br><span class="line">    sheet1.write_merge(<span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">u&#x27;评分人&#x27;</span>, style_right)</span><br><span class="line">    sheet1.write_merge(<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">u&#x27;&#x27;</span>, style_center)</span><br><span class="line">    sheet1.write_merge(<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">u&#x27;*必填（老师）&#x27;</span>, style_left)</span><br><span class="line">    sheet1.write_merge(<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">u&#x27;评分人工号&#x27;</span>, style_right)</span><br><span class="line">    sheet1.write_merge(<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">u&#x27;&#x27;</span>, style_center)</span><br><span class="line">    sheet1.write_merge(<span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">u&#x27;&#x27;</span>, style_left)</span><br><span class="line">    sheet1.write_merge(<span class="number">6</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">u&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    start_x = <span class="number">7</span>  <span class="comment"># start_x &gt; 6</span></span><br><span class="line">    start_y = <span class="number">2</span>  <span class="comment"># start_y &gt; 1</span></span><br><span class="line">    items = data.get(<span class="string">&#x27;items&#x27;</span>, [])</span><br><span class="line">    max_dep = get_max_levels(items)</span><br><span class="line">    <span class="keyword">if</span> max_dep &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    fixed_start_x = start_x</span><br><span class="line">    fixed_start_y = start_y - <span class="number">2</span></span><br><span class="line">    fixed_start_m = start_x + max_dep - <span class="number">1</span></span><br><span class="line">    sheet1.write_merge(fixed_start_x, fixed_start_m, fixed_start_y, fixed_start_y, <span class="string">u&#x27;学生姓名&#x27;</span>, style_center)</span><br><span class="line">    sheet1.write_merge(fixed_start_x, fixed_start_m, fixed_start_y + <span class="number">1</span>, fixed_start_y + <span class="number">1</span>, <span class="string">u&#x27;学生学号(*必填)&#x27;</span>, style_center)</span><br><span class="line"></span><br><span class="line">    leave = get_leave_count(items=items)</span><br><span class="line">    item_spans = build_title(items=items, x=start_x, y=start_y)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(json.dumps(item_spans))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_spans:</span><br><span class="line">        sheet1.write_merge(i.get(<span class="string">&quot;x&quot;</span>), i.get(<span class="string">&quot;x&quot;</span>) + i.get(<span class="string">&quot;m&quot;</span>), i.get(<span class="string">&quot;y&quot;</span>), i.get(<span class="string">&quot;y&quot;</span>) + i.get(<span class="string">&quot;n&quot;</span>),</span><br><span class="line">                           <span class="string">u&#x27;&#123;&#125;(&#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(i.get(<span class="string">&quot;name&quot;</span>), i.get(<span class="string">&quot;score&quot;</span>, <span class="number">0</span>)), style_center)</span><br><span class="line"></span><br><span class="line">    blank_rows = <span class="number">15</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(blank_rows):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(leave + start_y):</span><br><span class="line">            x = start_x + max_dep + n</span><br><span class="line">            sheet1.write_merge(x, x, i, i, <span class="string">u&#x27;&#x27;</span>, style_normal)</span><br><span class="line"></span><br><span class="line">    char_num = <span class="number">18</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_y + leave):</span><br><span class="line">        sheet1.col(i).width = <span class="number">256</span> * <span class="built_in">int</span>(char_num)</span><br><span class="line"></span><br><span class="line">    f.save(<span class="string">&#x27;demo2.xls&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt; end &lt;&lt;&lt;&lt;&lt;&lt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rm_dot</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = <span class="built_in">str</span>(s).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_active_title</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    r = re.<span class="built_in">compile</span>(<span class="string">r&quot;(.*)\(.*\)$&quot;</span>, re.M)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        groups = r.findall(s)</span><br><span class="line">        <span class="keyword">return</span> groups[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">import_excel</span>():</span><br><span class="line">    workbook = xlrd.open_workbook(<span class="string">r&#x27;demo2.xls&#x27;</span>)</span><br><span class="line">    sheet1 = workbook.sheet_by_index(<span class="number">0</span>)  <span class="comment"># 根据sheet索引获取sheet内容, sheet索引从0开始</span></span><br><span class="line">    <span class="comment"># sheet1_name = workbook.sheet_names()[0]</span></span><br><span class="line">    <span class="comment"># sheet1 = workbook.sheet_by_name(sheet1_name) # 根据sheet索引或者名称获取sheet内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sheet的名称，行数，列数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sheet：&#123;&#125;\n行数：&#123;&#125;\n列数：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(sheet1.name, sheet1.nrows, sheet1.ncols))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取整行和整列的值（数组）</span></span><br><span class="line">    <span class="comment"># print(sheet1.row_values(0))  # 获取第一行内容</span></span><br><span class="line">    <span class="comment"># print(sheet1.col_values(0))  # 获取第一列内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取单元格内容</span></span><br><span class="line">    <span class="comment"># print(sheet1.cell(0, 0).value)</span></span><br><span class="line">    <span class="comment"># print(sheet1.cell(0, 0).value.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment"># print(sheet1.cell_value(0, 0).encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment"># print(sheet1.row(0)[0].value.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取单元格内容的数据类型</span></span><br><span class="line">    <span class="comment"># print(sheet1.cell(0, 0).ctype)</span></span><br><span class="line"></span><br><span class="line">    moral_name = sheet1.row_values(<span class="number">0</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;德育名称：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(moral_name))</span><br><span class="line"></span><br><span class="line">    section_name = sheet1.row_values(<span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">    section_num = rm_dot(sheet1.row_values(<span class="number">3</span>)[<span class="number">1</span>])</span><br><span class="line">    score_name = sheet1.row_values(<span class="number">4</span>)[<span class="number">1</span>]</span><br><span class="line">    score_num = rm_dot(sheet1.row_values(<span class="number">5</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;班级：&#123;&#125;\n班级编号：&#123;&#125;\n评分人：&#123;&#125;\n评分人工号：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(section_name, section_num, score_name, score_num))</span><br><span class="line"></span><br><span class="line">    data = get_json_data()</span><br><span class="line">    items = data.get(<span class="string">&#x27;items&#x27;</span>, [])</span><br><span class="line">    max_dep = get_max_levels(items)</span><br><span class="line">    title_col_count = <span class="built_in">len</span>(sheet1.row_values(<span class="number">7</span>))</span><br><span class="line">    title_start_index = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(sheet1.row_values(title_start_index))</span><br><span class="line">    <span class="built_in">print</span>(sheet1.row_values(title_start_index + <span class="number">1</span>) <span class="keyword">if</span> max_dep &gt; <span class="number">1</span> <span class="keyword">else</span> [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(title_col_count)])</span><br><span class="line">    <span class="built_in">print</span>(sheet1.row_values(title_start_index + <span class="number">2</span>) <span class="keyword">if</span> max_dep &gt; <span class="number">2</span> <span class="keyword">else</span> [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(title_col_count)])</span><br><span class="line">    title1 = sheet1.row_values(title_start_index)</span><br><span class="line">    title2 = sheet1.row_values(title_start_index + <span class="number">1</span>) <span class="keyword">if</span> max_dep &gt; <span class="number">1</span> <span class="keyword">else</span> [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(title_col_count)]</span><br><span class="line">    title3 = sheet1.row_values(title_start_index + <span class="number">2</span>) <span class="keyword">if</span> max_dep &gt; <span class="number">2</span> <span class="keyword">else</span> [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(title_col_count)]</span><br><span class="line">    title = [title3[i] <span class="keyword">if</span> title3[i] <span class="keyword">else</span> (title2[i] <span class="keyword">or</span> title1[i]) <span class="keyword">for</span> i, t <span class="keyword">in</span> <span class="built_in">enumerate</span>(title3)]</span><br><span class="line">    title = [get_active_title(t) <span class="keyword">for</span> t <span class="keyword">in</span> title <span class="keyword">if</span> t]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有效表头：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(title))</span><br><span class="line"></span><br><span class="line">    data_start_index = title_start_index + max_dep</span><br><span class="line">    data_row_count = sheet1.nrows - data_start_index</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据行数：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data_row_count))</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data_row_count):</span><br><span class="line">        data = sheet1.row_values(data_start_index + i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数据：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">        datas.append(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据集合：&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(datas))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    export_excel()</span><br><span class="line">    import_excel()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应设置</span></span><br><span class="line"></span><br><span class="line">bio = BytesIO()</span><br><span class="line">wb.save(bio)</span><br><span class="line">bio.seek(<span class="number">0</span>)</span><br><span class="line">file_name = <span class="string">u&quot;&#123;&#125;&#123;&#125;(&#123;&#125; to &#123;&#125;).xls&quot;</span>.<span class="built_in">format</span>(moral.get(<span class="string">&quot;name&quot;</span>, <span class="string">&#x27;&#x27;</span>), <span class="string">&quot;评分表&quot;</span>, start_at, end_at)</span><br><span class="line">resp = make_response(bio.getvalue())</span><br><span class="line">file_name = quote(file_name)</span><br><span class="line">resp.headers[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&quot;attachment; filename*=utf-8&#x27;&#x27;&#123;&#125;;&quot;</span>.<span class="built_in">format</span>(file_name).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-xls; charset=utf8&#x27;</span>  <span class="comment"># &#x27;application/x-xlsx&#x27;</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask apidoc</title>
    <url>/2021/04/01/Flask%20apidoc/</url>
    <content><![CDATA[<h3 id="apidoc管理RESTful风格Flask项目接口文档"><a href="#apidoc管理RESTful风格Flask项目接口文档" class="headerlink" title="apidoc管理RESTful风格Flask项目接口文档"></a>apidoc管理RESTful风格Flask项目接口文档</h3><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apidoc项目地址: https://github.com/apidoc/apidoc</span><br><span class="line">flask扩展包地址: https://github.com/viniciuschiele/flask-apidoc</span><br><span class="line">文档示例地址: http://apidocjs.com/</span><br></pre></td></tr></table></figure>

<h4 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1. 安装nodejs"></a>1. 安装nodejs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure>
<h4 id="2-安装apidoc"><a href="#2-安装apidoc" class="headerlink" title="2. 安装apidoc"></a>2. 安装apidoc</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install apidoc -g</span><br></pre></td></tr></table></figure>

<h4 id="3-Flask扩展包安装"><a href="#3-Flask扩展包安装" class="headerlink" title="3. Flask扩展包安装"></a>3. Flask扩展包安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install flask-apidoc</span><br></pre></td></tr></table></figure>

<h4 id="4-添加扩展包到Flask项目"><a href="#4-添加扩展包到Flask项目" class="headerlink" title="4. 添加扩展包到Flask项目"></a>4. 添加扩展包到Flask项目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖环境</span></span><br><span class="line">flask&gt;=<span class="number">0.10</span><span class="number">.1</span></span><br><span class="line">flask_script&gt;=<span class="number">2.0</span><span class="number">.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># manage.py项目启动脚本配置</span></span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> flask_apidoc.commands <span class="keyword">import</span> GenerateApiDoc</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">manager = Manager(app)</span><br><span class="line">manager.add_command(<span class="string">&#x27;apidoc&#x27;</span>, GenerateApiDoc())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    manager.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># apidoc.json配置</span></span><br><span class="line"><span class="comment"># 必须在项目根目录下建立apidoc.json配置文件</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Flask REST API&quot;</span>,</span><br><span class="line"> <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"> <span class="string">&quot;description&quot;</span>: <span class="string">&quot;A Flask REST API example&quot;</span>,</span><br><span class="line"> <span class="string">&quot;title&quot;</span>: <span class="string">&quot;A Flask REST API example&quot;</span>,</span><br><span class="line"> <span class="string">&quot;url&quot;</span> : <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="视图函数文档注释说明示例"><a href="#视图函数文档注释说明示例" class="headerlink" title="视图函数文档注释说明示例"></a>视图函数文档注释说明示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_apidoc <span class="keyword">import</span> ApiDoc</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">doc = ApiDoc(app=app)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line"> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> @api &#123;post&#125; /api/v1.0/users 注册</span></span><br><span class="line"><span class="string"> @apiVersion 1.0.0</span></span><br><span class="line"><span class="string"> @apiName register_user</span></span><br><span class="line"><span class="string"> @apiGroup Users</span></span><br><span class="line"><span class="string"> @apiParam &#123;String&#125; mobile  (必须) 用户手机号</span></span><br><span class="line"><span class="string"> @apiParam &#123;String&#125; password (必须) 用户密码</span></span><br><span class="line"><span class="string"> @apiParam &#123;String&#125; sms_code (必须) 用户短信验证码</span></span><br><span class="line"><span class="string"> @apiParamExample &#123;json&#125; Request-Example:</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">   mobile: &quot;13970512239&quot;,</span></span><br><span class="line"><span class="string">   password: &quot;123456&quot;,</span></span><br><span class="line"><span class="string">   sms_code: &quot;907896&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> @apiSuccess (回参) &#123;int&#125; user_id 用户注册id</span></span><br><span class="line"><span class="string"> @apiSuccess (回参) &#123;String&#125; name 用户昵称</span></span><br><span class="line"><span class="string"> @apiSuccess (回参) &#123;String&#125; mobile 用户注册手机号</span></span><br><span class="line"><span class="string"> @apiSuccess (回参) &#123;String&#125; avatar 用户头像地址</span></span><br><span class="line"><span class="string"> @apiSuccess (回参) &#123;String&#125; create_time 用户创建时间</span></span><br><span class="line"><span class="string"> @apiSuccessExample &#123;json&#125; Success-Response:</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">   &quot;errno&quot;:0,</span></span><br><span class="line"><span class="string">   &quot;errmsg&quot;:&quot;注册成功！&quot;,</span></span><br><span class="line"><span class="string">   &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;user_id&quot;: 1,</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;lynnyq&quot;,</span></span><br><span class="line"><span class="string">    &quot;mobile&quot;: &quot;13813888888&quot;,</span></span><br><span class="line"><span class="string">    &quot;avatar&quot;: &quot;http://p3ifu3dwc.bkt.clouddn.com/FjuAwxmcCtiud_nOZ&quot;,</span></span><br><span class="line"><span class="string">    &quot;create_time&quot;: &quot;2010-1-1 12:12:12&quot;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> @apiErrorExample &#123;json&#125; Error-Response:</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">   &quot;errno&quot;:4001,</span></span><br><span class="line"><span class="string">   &quot;errmsg&quot;:&quot;数据库查询错误！&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br><span class="line"> <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="5-生成RESTful风格接口文档"><a href="#5-生成RESTful风格接口文档" class="headerlink" title="5. 生成RESTful风格接口文档"></a>5. 生成RESTful风格接口文档</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py apidoc</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask i18n 国际化和本地化</title>
    <url>/2021/04/01/Flask%20i18n%20%E5%9B%BD%E9%99%85%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/</url>
    <content><![CDATA[<h3 id="国际化和本地化"><a href="#国际化和本地化" class="headerlink" title="国际化和本地化"></a>国际化和本地化</h3><blockquote>
<p>国际化和本地化，通常简称 I18n 和 L10n。</p>
</blockquote>
<blockquote>
<p>Flask-Babel，它提供了一种简单使用的框架用来把应用程序翻译成不用的应用。</p>
</blockquote>
<h4 id="安装-Flask-Babel："><a href="#安装-Flask-Babel：" class="headerlink" title="安装 Flask-Babel："></a>安装 Flask-Babel：</h4><blockquote>
<p>Linux 和 Mac 用户:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask/bin/pip install flask-babel</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Windows 用户:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask\Scripts\pip install flask-babel</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote>
<p>Flask-Babel 可以简单地通过创建 Babel 类的一个实例并且传入 Flask 应用对象给它来初始化(文件 app/<strong>init</strong>.py):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask.ext.babel import Babel</span><br><span class="line">babel = Babel(app)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将支持语言的列表被添加到配置文件中(文件 config.py):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># ...</span><br><span class="line"># available languages</span><br><span class="line">LANGUAGES = &#123;</span><br><span class="line">    &#x27;en&#x27;: &#x27;English&#x27;,</span><br><span class="line">    &#x27;zh_Hans&#x27;: &#x27;Chinese&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：可以通过命令查询所支持的语音：pybabel –list-locales<br>LANGUAGES 字典有可用语言代码的键，以及可打印的语言名称作为值。我们使用短的语言代码，但是要指明语言和地域的话，也可能使用长代码。</p>
</blockquote>
<blockquote>
<p>配置一个 Babel 用于决定使用哪种语言的函数(文件 app/views.py):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from app import babel</span><br><span class="line">from config import LANGUAGES</span><br><span class="line"></span><br><span class="line">@babel.localeselector</span><br><span class="line">def get_locale():</span><br><span class="line">    # return &#x27;zh_Hans&#x27;</span><br><span class="line">    return request.accept_languages.best_match(LANGUAGES.keys())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>localeselector 装饰器 它被调用在请求之前为了当产生响应的时候给我们机会选择使用的语言。</p>
</blockquote>
<blockquote>
<p>现在为止我们做的是简单的，我们只要读取浏览器发送的 HTTP 请求中的 Accept-Languages 头并且从我们支持的语言列表中选择最匹配的语言。<br>Accept-Languages 头在大多数浏览器上被默认配置成操作系统层的所选择的语言，但是所有的浏览器给我们机会选择其它的语言。用户可以提供语言列表，每一个都有权重。</p>
</blockquote>
<blockquote>
<p>最后一项配置是Babel 配置文件，指定 Babel 要翻译的 代码和模板中的文本(文件 babel.cfg):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[python: **.py]</span><br><span class="line">[jinja2: **/templates/**.html]</span><br><span class="line">extensions=jinja2.ext.autoescape,jinja2.ext.with_</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：最前面的两行告诉 Babel 我们的 Python 代码以及模版的文件名模式。<br>第三行是告诉 Babel 启用一些扩展使得它能够在 Jinja2 模版中寻找翻译的文本。</p>
</blockquote>
<h4 id="标记翻译文本"><a href="#标记翻译文本" class="headerlink" title="标记翻译文本"></a>标记翻译文本</h4><blockquote>
<p>现在到了这个任务最繁琐的地方。需要检查所有的代码和模版标记所有需要翻译的英文文本以便 Babel 能够找到它们。</p>
</blockquote>
<blockquote>
<p>例如，有一个闪现消息需要翻译。为了使得 Babel 知道这个文本，只要把这个字符串传入到 gettext 函数:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask.ext.babel import gettext</span><br><span class="line">if resp.email is None or resp.email == &quot;&quot;:</span><br><span class="line">    flash(gettext(&#x27;Invalid login. Please try again.&#x27;))</span><br><span class="line">    redirect(url_for(&#x27;login&#x27;))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在模板中我们必须做一些类似的工作，但是我们使用 _() 来简化 gettext()。<br>比如，在我们基础模版中的链接的文本 Home:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p>能够被标记翻译如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(&#x27;index&#x27;) &#125;&#125;&quot;&gt;&#123;&#123; _(&#x27;Home&#x27;) &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>gettext 函数是支持使用 %(name)s 语法占位符，如下占位符的例子:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gettext(&#x27;Hello, %(name)s&#x27;, name = user.nickname)</span><br></pre></td></tr></table></figure>

<h4 id="提取文本翻译"><a href="#提取文本翻译" class="headerlink" title="提取文本翻译"></a>提取文本翻译</h4><blockquote>
<p>运行 pybabel 提取文本到单独的文件（生成.pot文件）:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pybabel extract -F babel.cfg -o APP_NAME/transltions/messages.pot APP_NAME</span><br><span class="line"># 或</span><br><span class="line">pybabel extract -F babel.cfg -k lazy_gettext -o APP_NAME/translations/messages.pot APP_NAME</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pybabel extract 命令会读取给定的配置文件，接着扫描在给定参数目录下的所有的代码和模版，当它发现标记翻译的文本就会把它拷贝到 messages.pot 文件。</p>
</blockquote>
<blockquote>
<p>messages.pot 文件是一个模板文件，其中包含所有需要翻译的文本。这个文件是用来作为一种生成语言文件的模型。</p>
</blockquote>
<h4 id="生成一个语言目录"><a href="#生成一个语言目录" class="headerlink" title="生成一个语言目录"></a>生成一个语言目录</h4><blockquote>
<p>这个过程的下一步就是为一个新语言创建翻译。添加汉语语到我们应用程序的命令:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pybabel init -i APP_NAME/translations/messages.pot -d APP_NAME/translations -l zh_Hans</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pybabel init 命令把 .pot 文件作为输入，生成一个新语言目录，以 -d 选项指定的目录为新语言的目录，以 -l 指定的语言为想要翻译成的语言类型。默认情况下，Babel 希望翻译的语言在与模版相同目录级别的 translations文件夹中。在运行上述命令后，一个目录 app/translations/es 是创建了。在它里面有另一个名为 LC_MESSAGES 的目录，在它里面有一个 messages.po 文件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pybabel compile -d APP_NAME/translations</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pybabel compile 这一步会读取 .po 文件的内容并且会在相同的目录下生成一个名为 .mo 的编译的版本。这个文件以一种优化的格式包含了翻译的文本，应用程序可以更高效地使用它。</p>
</blockquote>
<blockquote>
<p>翻译已经准备好被使用了。为了验证它你可以修改浏览器上的语言设置让汉语为最佳语言，或者你可以直接修改 get_locale 函数(文件 app/views.py):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@babel.localeselector</span><br><span class="line">def get_locale():</span><br><span class="line">    return &quot;zh_Hans&quot; #request.accept_languages.best_match(LANGUAGES.keys())</span><br></pre></td></tr></table></figure>


<h4 id="更新翻译"><a href="#更新翻译" class="headerlink" title="更新翻译"></a>更新翻译</h4><blockquote>
<p>运行如下命令可以升级翻译文件:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pybabel extract -F babel.cfg -k lazy_gettext -o APP_NAME/translations/messages.pot APP_NAME</span><br><span class="line">pybabel update -i APP_NAME/translations/messages.pot -d APP_NAME/translations </span><br></pre></td></tr></table></figure>
<blockquote>
<p>extract 命令与前面用过的是一样的，它只是生成一个更新的 messages.pot 文件，文件里添加了新的文本。update 调用会把更新的文件加入到所有翻译的语言中。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask下载中文名文件报错问题</title>
    <url>/2021/04/01/Flask%E4%B8%8B%E8%BD%BD%E4%B8%AD%E6%96%87%E5%90%8D%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="Flask下载中文名文件"><a href="#Flask下载中文名文件" class="headerlink" title="Flask下载中文名文件"></a>Flask下载中文名文件</h3><ul>
<li><p>错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/.virtualenvs/liteapp/lib/python3.6/site-packages/gunicorn/workers/sync.py&quot;, line 135, in handle</span><br><span class="line">    self.handle_request(listener, req, client, addr)</span><br><span class="line">  File &quot;/root/.virtualenvs/liteapp/lib/python3.6/site-packages/gunicorn/workers/sync.py&quot;, line 182, in handle_request</span><br><span class="line">    resp.write(item)</span><br><span class="line">  File &quot;/root/.virtualenvs/liteapp/lib/python3.6/site-packages/gunicorn/http/wsgi.py&quot;, line 333, in write</span><br><span class="line">    self.send_headers()</span><br><span class="line">  File &quot;/root/.virtualenvs/liteapp/lib/python3.6/site-packages/gunicorn/http/wsgi.py&quot;, line 329, in send_headers</span><br><span class="line">    util.write(self.sock, util.to_bytestring(header_str, &quot;ascii&quot;))</span><br><span class="line">  File &quot;/root/.virtualenvs/liteapp/lib/python3.6/site-packages/gunicorn/util.py&quot;, line 507, in to_bytestring</span><br><span class="line">    return value.encode(encoding)</span><br><span class="line">UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 218-238: ordinal not in range(128)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在header中设置Content-Disposition</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">    fp=io.BytesIO()</span><br><span class="line">    fp.seek(<span class="number">0</span>)</span><br><span class="line">    rv=send_file(fp,mimetype=self.mimetype,</span><br><span class="line">            as_attachment=<span class="literal">True</span>, attachment_filename=filename)</span><br><span class="line">    filename=quote(self.filename) <span class="comment"># 对文件名进行转码</span></span><br><span class="line">    <span class="keyword">if</span> filename!=self.filename: <span class="comment"># 支持中文名称</span></span><br><span class="line">        rv.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]+=<span class="string">&quot;; filename*=utf-8&#x27;&#x27;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename)</span><br><span class="line">    <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">bio = BytesIO()</span><br><span class="line">bio.seek(<span class="number">0</span>)</span><br><span class="line">resp = make_response(bio.getvalue())</span><br><span class="line">file_name = <span class="string">u&quot;&#123;&#125;.xls&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;评分表&quot;</span>)</span><br><span class="line">file_name = quote(file_name)</span><br><span class="line">resp.headers[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&quot;attachment; filename*=utf-8&#x27;&#x27;&#123;&#125;;&quot;</span>.<span class="built_in">format</span>(file_name).encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-xls; charset=utf8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考</span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/u011090495/article/details/18815777</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub上优秀的Go开源项目</title>
    <url>/2021/08/08/GitHub%E4%B8%8A%E4%BC%98%E7%A7%80%E7%9A%84Go%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="GitHub上优秀的Go开源项目"><a href="#GitHub上优秀的Go开源项目" class="headerlink" title="GitHub上优秀的Go开源项目"></a>GitHub上优秀的Go开源项目</h3><blockquote>
<p>近一年来，学习和研究Go语言，断断续续的收集了一些比较优秀的开源项目，这些项目都非常不错，可以供我们学习和研究Go用，从中可以学到很多关于Go的使用、技巧以及相关工具和方法。我把他们整理发出来，大家有兴趣可以根据自己的爱好选择一些进行研究和阅读，提升自己的能力，更好的使用Go语言，开发出更优秀的项目。</p>
</blockquote>
<h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a><a href="https://github.com/docker/docker">docker</a></h4><p>无人不知的虚拟华平台，开源的应用容器引擎,借助该引擎，开发者可以打包他们的应用，移植到任何平台上。<br><a href="https://github.com/docker/docker">https://github.com/docker/docker</a></p>
<h4 id="golang"><a href="#golang" class="headerlink" title="golang"></a><a href="https://github.com/golang/go">golang</a></h4><p>go本身，也是用go语言实现的，包括他的编译器，要研究go源代码的可以看此项目录<br><a href="https://github.com/golang/go">https://github.com/golang/go</a></p>
<h4 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a><a href="https://github.com/getlantern/lantern">lantern</a></h4><p>蓝灯，一款P2P的过墙软件，他和SS不一样的是，他是分布式的，P2P的，通过蓝灯，你可以和自由上网的用户共享网络，对方可以自由上网，你也就自由了。<br><a href="https://github.com/getlantern/lantern">https://github.com/getlantern/lantern</a></p>
<h4 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a><a href="https://github.com/kubernetes/kubernetes">kubernetes</a></h4><p>Google出品，用于调度和管理Docker的开源容器管理系统，利用他，可以方便的管理你的docker实例，哪怕非常多，也是目前最流行的docker管理系统。<br><a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a></p>
<h4 id="awesome-go"><a href="#awesome-go" class="headerlink" title="awesome-go"></a><a href="https://github.com/avelino/awesome-go">awesome-go</a></h4><p>这不是一个go项目，他是一个学习go的资料网站，属于著名的awesome系列，里面关于go的资源非常详细。<br><a href="https://github.com/avelino/awesome-go">https://github.com/avelino/awesome-go</a></p>
<h4 id="gogs"><a href="#gogs" class="headerlink" title="gogs"></a><a href="https://github.com/gogits/gogs">gogs</a></h4><p>一款基于Git的代码托管系统，类似于github和gitlab，不过其小巧易用，功能强大，部署方便，也有不少用户在使用。<br><a href="https://github.com/gogits/gogs">https://github.com/gogits/gogs</a></p>
<h4 id="syncthing"><a href="#syncthing" class="headerlink" title="syncthing"></a><a href="https://github.com/syncthing/syncthing">syncthing</a></h4><p>开源的文件同步系统,它使用了其独有的对等自由块交换协议,速度很快,据说可以替换BitTorrent Sync。<br><a href="https://github.com/syncthing/syncthing">https://github.com/syncthing/syncthing</a></p>
<h4 id="hugo"><a href="#hugo" class="headerlink" title="hugo"></a><a href="ttps://github.com/spf13/hugo">hugo</a></h4><p>一款极速的静态页面生成器，让你可以很快的搭建个人网站，提供了多套主题可供使用，并且可以自己定制，和NodeJS的Hexo是一样的。<br><a href="https://github.com/spf13/hugo">https://github.com/spf13/hugo</a></p>
<h4 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a><a href="https://github.com/grafana/grafana">grafana</a></h4><p>一款开源监控度量的看板系统，可以接Graphite,Elasticsearch,InfluxDB等数据源，定制化很高。<br><a href="https://github.com/grafana/grafana">https://github.com/grafana/grafana</a></p>
<h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a><a href="https://github.com/coreos/etcd">etcd</a></h4><p>一款分布式的，可靠的K-V存储系统，使用简单，速度快，又安全。<br><a href="https://github.com/coreos/etcd">https://github.com/coreos/etcd</a></p>
<h4 id="hub"><a href="#hub" class="headerlink" title="hub"></a><a href="https://github.com/github/hub">hub</a></h4><p>一款更便捷使用github的工具，包装并且扩展了git，提供了很多特性和功能，使用和git差不多。<br><a href="https://github.com/github/hub">https://github.com/github/hub</a></p>
<h4 id="influxdb"><a href="#influxdb" class="headerlink" title="influxdb"></a><a href="https://github.com/influxdata/influxdb">influxdb</a></h4><p>可伸缩的数据库，使用场景主要用来存储测量数据，事件点击以及其他等实时分析数据，用来做监控性能很不错。<br><a href="https://github.com/influxdata/influxdb">https://github.com/influxdata/influxdb</a></p>
<h4 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a><a href="https://github.com/mholt/caddy">caddy</a></h4><p>快速的，跨平台的HTTP/2 Web服务器。<br><a href="https://github.com/mholt/caddy">https://github.com/mholt/caddy</a></p>
<h4 id="beego"><a href="#beego" class="headerlink" title="beego"></a><a href="https://github.com/astaxie/beego">beego</a></h4><p>国产开源的高性能Web框架，让你快速的开发Go Web应用服务，谢大主笔。<br><a href="https://github.com/astaxie/beego">https://github.com/astaxie/beego</a></p>
<h4 id="martini"><a href="#martini" class="headerlink" title="martini"></a><a href="https://github.com/go-martini/martini">martini</a></h4><p>也是一款不错的Web框架。<br><a href="https://github.com/go-martini/martini">https://github.com/go-martini/martini</a></p>
<h4 id="cayley"><a href="#cayley" class="headerlink" title="cayley"></a><a href="https://github.com/cayleygraph/cayley">cayley</a></h4><p>Google开源的图数据库，这是一个NoSql数据库，适合处理复杂的，但是结构化低的数据,适用于社交网络，推荐系统等。<br><a href="https://github.com/cayleygraph/cayley">https://github.com/cayleygraph/cayley</a></p>
<h4 id="nsq"><a href="#nsq" class="headerlink" title="nsq"></a><a href="https://github.com/nsqio/nsq">nsq</a></h4><p>一款开源的实时的，分布式的消息中间件系统。<br><a href="https://github.com/nsqio/nsq">https://github.com/nsqio/nsq</a></p>
<h4 id="codis"><a href="#codis" class="headerlink" title="codis"></a><a href="https://github.com/CodisLabs/codis">codis</a></h4><p>Codis是一个分布式Redis解决方案,其实就是一个数据库代理，让你在使用Redis集群的时候，就像使用单机版的Redis是一样的，对开发者透明。<br><a href="https://github.com/CodisLabs/codis">https://github.com/CodisLabs/codis</a></p>
<h4 id="delve"><a href="#delve" class="headerlink" title="delve"></a><a href="https://github.com/derekparker/delve">delve</a></h4><p>这个Go开发者都知道，一款go应用开发的调试工具。<br><a href="https://github.com/derekparker/delve">https://github.com/derekparker/delve</a></p>
<h4 id="cobra"><a href="#cobra" class="headerlink" title="cobra"></a><a href="https://github.com/spf13/cobra">cobra</a></h4><p>cobra是一个命令行go库，可以让你创建非常强大的，现代的CLI命令行应用。<br><a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra</a></p>
<h4 id="shadowsocks-go"><a href="#shadowsocks-go" class="headerlink" title="shadowsocks-go"></a><a href="https://github.com/shadowsocks/shadowsocks-go">shadowsocks-go</a></h4><p>go版本的shadowsocks，大家都懂的。<br><a href="https://github.com/shadowsocks/shadowsocks-go">https://github.com/shadowsocks/shadowsocks-go</a></p>
<h4 id="pholcus"><a href="#pholcus" class="headerlink" title="pholcus"></a><a href="https://github.com/henrylee2cn/pholcus">pholcus</a></h4><p>Pholcus（幽灵蛛）是一款纯Go语言编写的支持分布式的高并发、重量级爬虫软件，定位于互联网数据采集，为具备一定Go或JS编程基础的人提供一个只需关注规则定制的功能强大的爬虫工具。<br><a href="https://github.com/henrylee2cn/pholcus">https://github.com/henrylee2cn/pholcus</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Git多账号配置</title>
    <url>/2020/02/01/Git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="github-gitee-gitlab多账号配置"><a href="#github-gitee-gitlab多账号配置" class="headerlink" title="github/gitee/gitlab多账号配置"></a>github/gitee/gitlab多账号配置</h3><blockquote>
<p>示例1</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  IdentityFile C:\\Users\\m18527\\.ssh\\id_rsa_gitee</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User ma.yawei@h3c.com</span><br><span class="line">  </span><br><span class="line">Host gitlab.h3c.com</span><br><span class="line">  HostName gitlab.h3c.com</span><br><span class="line">  IdentityFile C:\\Users\\m18527\\.ssh\\id_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User ma.yawei@h3c.com</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile C:\\Users\\m18527\\.ssh\\id_rsa_github</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User 1063967330@h3c.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例2</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  IdentityFile C:\\Users\\\Murray\\.ssh\\id_rsa_gitee</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User 1063967330@qq.com</span><br><span class="line">  </span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  IdentityFile C:\\Users\\\Murray\\.ssh\\id_rsa_github</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  User 1063967330@qq.com</span><br></pre></td></tr></table></figure>

<h3 id="Windows环境下配置Git多账号（github和code-aliyun-com）"><a href="#Windows环境下配置Git多账号（github和code-aliyun-com）" class="headerlink" title="Windows环境下配置Git多账号（github和code.aliyun.com）"></a>Windows环境下配置Git多账号（github和code.aliyun.com）</h3><blockquote>
<p>注：所有执行命令的地方都是在管理员模式下进行，即打开cmd，Git Bash客户端用管理员身份运行程序。</p>
</blockquote>
<ol>
<li>生成github.com对应的私钥公钥（文件地址C:\Users\xxx.ssh）执行命令 <code>ssh-keygen -t rsa -C email</code><br>创建github对应的sshkey，命名为id_rsa_github<br><code>ssh-keygen -t rsa -C 1063967330@qq.com</code></li>
</ol>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181213172225-git-1.png"></p>
<ol start="2">
<li>同样的方式生产code.aliyun.com的私钥公钥（邮箱地址可以相同可以不同，本文相同）<br>执行命令<code>ssh-keygen -t rsa -C email</code> 创建github对应的sshkey，命名为id_rsa_aliyuncode<br><code>ssh-keygen -t rsa -C mayawei@detedt.com</code></li>
</ol>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181213172249-git-2.png"></p>
<ol start="3">
<li>把上面得到的文件拷贝到git默认访问的.ssh目录(win10在用户目录下，本文C:\Users\xxx.ssh)<br>除了秘钥文件之外，config文件是后面的步骤中手动生产的，known_hosts文件是后续自动生产的</li>
</ol>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181213172257-git-3.png"></p>
<ol start="4">
<li><p>把github对应的公钥和aliyunCode对应的公钥上传到服务器，即 在GitHub、aliyun添加SSH key。</p>
</li>
<li><p>在.ssh目录创建config文本文件并完成相关配置(最核心的地方)，每个账号单独配置一个Host，每个Host要取一个别名，每个Host主要配置HostName和IdentityFile两个属性即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host的名字可以取为自己喜欢的名字，不过这个会影响git相关命令，例如：</span><br><span class="line">Host mygithub 这样定义的话，命令如下，即git@后面紧跟的名字改为mygithub，</span><br><span class="line">git clone git@mygithub:PopFisher/AndroidRotateAnim.git</span><br><span class="line"></span><br><span class="line">HostName   真实域名地址</span><br><span class="line">IdentityFile  id_rsa的地址</span><br><span class="line">PreferredAuthentications   配置登录权限认证方式（publickey,password，publickey,keyboard-interactive等）</span><br><span class="line">User  配置使用用户名</span><br></pre></td></tr></table></figure>
</li>
<li><p>config文件配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置github.com</span><br><span class="line">Host github.com                 </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\\Users\\popfisher\\.ssh\\id_rsa_github</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User username1</span><br><span class="line">    # Port   ***  #公司的git端口</span><br><span class="line"></span><br><span class="line"># 配置code.aliyun.com</span><br><span class="line">Host code.aliyun.com </span><br><span class="line">    HostName code.aliyun.com</span><br><span class="line">    IdentityFile C:\\Users\\xxx\\.ssh\\id_rsa_codealiyun</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User username2</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Git Bash客户端（管理员身份运行）执行测试命令测试是否配置成功（会自动在.ssh目录生成known_hosts文件把私钥配置进去）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># github的地址</span><br><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"># 出现如下内容，表示成功链接github，***为你的github账户的用户名</span><br><span class="line"># Hi ***! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line"># 公司的git地址</span><br><span class="line">ssh -T git@git.***.com </span><br><span class="line"># 出现如下内容，表示成功链接github，***为公司git账户的用户名</span><br><span class="line"># Hi ***! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181213172308-git-4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@yourcompany.com&quot; -f ~/.ssh/id-rsa</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置和常用命令</title>
    <url>/2020/02/01/Git%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="常用Git指令："><a href="#常用Git指令：" class="headerlink" title="常用Git指令："></a>常用Git指令：</h4><p><strong>常用指令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash # 不指定名称</span><br><span class="line">git stash pop  # 取出最新的stash并删除</span><br><span class="line"></span><br><span class="line">git clone &lt;repo&gt;</span><br><span class="line"></span><br><span class="line">git diff –-staged</span><br><span class="line">git rm –-cached  # add后commit前的撤销</span><br><span class="line"></span><br><span class="line">git reset –-hard commit-id  # commit后的回滚,比如：git reset –hard HEAD</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD~1 撤回最近一次的commit(撤销commit，不撤销git add)</span><br><span class="line"></span><br><span class="line">git reset --mixed HEAD~1 撤回最近一次的commit(撤销commit，撤销git add)</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~1 撤回最近一次的commit(撤销commit，撤销git add,还原改动的代码)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="git本地分支和远程分支改名"><a href="#git本地分支和远程分支改名" class="headerlink" title="git本地分支和远程分支改名"></a>git本地分支和远程分支改名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1 将本地分支进行改名</span><br><span class="line">git branch -m old_branch new_branch</span><br><span class="line"> </span><br><span class="line">#2 将远程分支的老分支删除</span><br><span class="line">git push origin :old_branch</span><br><span class="line"> </span><br><span class="line">#3 将改名后的分支push到远程</span><br><span class="line">git push origin new_branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="git拉取远程分支到本地"><a href="#git拉取远程分支到本地" class="headerlink" title="git拉取远程分支到本地"></a>git拉取远程分支到本地</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 查看本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 若未看到远程分支</span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line"># 拉取远程分支</span><br><span class="line">git checkout -b local_branch origin/remote_branch</span><br><span class="line"></span><br><span class="line"># 拉取远程分支</span><br><span class="line">git pull origin remote_branch</span><br><span class="line"> </span><br><span class="line"># 建立分支</span><br><span class="line">git branch --set-upstream-to origin/remote_branch  local_branch</span><br><span class="line"> </span><br><span class="line"># 拉取分支</span><br><span class="line">git pull</span><br><span class="line"> </span><br><span class="line"># 遇到本地冲突，先删除本地分支，再重新拉取远程分支</span><br><span class="line">git branch -D local_branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用git生成公钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br><span class="line"></span><br><span class="line"># 配置用户信息 </span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot; </span><br><span class="line"></span><br><span class="line"># 配置别名</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.br branch</span><br><span class="line"></span><br><span class="line">$ git config --global credential.helper cache   #配置到缓存(默认15分钟) </span><br><span class="line">$ git config --global credential.helper &#x27;cache --timeout=3600&#x27;  #修改缓存时间</span><br><span class="line">$ git config --global color.ui true  #开启颜色显示  </span><br><span class="line">$ git config --global core.editor emacs   #设置默认使用的文本编辑器</span><br><span class="line"></span><br><span class="line">git config -l  # 列举所有配置</span><br><span class="line">git config –-list  # 列举所有配置</span><br></pre></td></tr></table></figure>

<p>用户的git配置文件在~/.gitconfig，如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">email = xxx@xxx.com</span><br><span class="line">name = xxx</span><br><span class="line">[color]</span><br><span class="line">ui = auto</span><br><span class="line">[color &quot;branch&quot;]</span><br><span class="line">current = yellow reverse</span><br><span class="line">local = yellow</span><br><span class="line">remote = green</span><br><span class="line">[color &quot;diff&quot;]</span><br><span class="line">meta = yellow bold</span><br><span class="line">frag = magenta bold</span><br><span class="line">old = red bold</span><br><span class="line">new = green bold</span><br><span class="line">[color &quot;status&quot;]</span><br><span class="line">added = yellow</span><br><span class="line">changed = green</span><br><span class="line">untracked = cyan</span><br><span class="line">[alias]</span><br><span class="line">st = &quot;status&quot;</span><br><span class="line">co = checkout</span><br><span class="line">ls = &quot;ls-files&quot;</span><br><span class="line">ci = commit</span><br><span class="line">br = branch</span><br><span class="line">rt = reset --hard</span><br><span class="line">unstage = reset HEAD</span><br><span class="line">uncommit = reset --soft HEAD^</span><br><span class="line">l = log --pretty=oneline --abbrev-commit --graph --decorate</span><br><span class="line">amend = commit --amend</span><br><span class="line">who = shortlog -n -s --no-merges</span><br><span class="line">g = grep -n --color -E</span><br><span class="line">cp = cherry-pick -x</span><br><span class="line">cb = checkout -b</span><br><span class="line">[core]</span><br><span class="line">filemode = true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h4><ul>
<li><p>查看、帮助命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help</span><br><span class="line">git show # 显示某次提交的内容</span><br><span class="line">git show $id</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看提交记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">git log &lt;file&gt;  # 查看该文件每次提交记录</span><br><span class="line">git log -p &lt;file&gt;  # 显示版本历史，以及版本间的内容差异</span><br><span class="line">git log -p -2  # 查看最近两次详细修改内容的diff</span><br><span class="line">git log --stat  # 查看提交统计信息</span><br><span class="line">git log --since=&quot;6 hours&quot;  # 显示最近6小时提交</span><br><span class="line">git log --before=&quot;2 days&quot;  # 显示2天前提交</span><br><span class="line">git log -1 HEAD~3 # 显示比HEAD早3个提交的那个提交</span><br><span class="line">git log -1 HEAD^^^</span><br><span class="line">git reflog # 查看操作记录</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加、提交、删除、找回，重置修改文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line">git checkout -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line">git checkout . # 抛弃工作区修改</span><br><span class="line">git checkout HEAD &lt;file&gt; # 抛弃工作目录区中文件的修改</span><br><span class="line">git checkout HEAD~3 # 回退三个版本</span><br><span class="line"></span><br><span class="line">git commit &lt;file&gt;</span><br><span class="line">git commit .</span><br><span class="line">git commit -a  # 把所有已经跟踪过的文件暂存,并提交</span><br><span class="line">git commit -c  # 打开编辑器在已有的提交基础上编辑修改 </span><br><span class="line">git commit -am &quot;something&quot;</span><br><span class="line">git commit -m &quot;something&quot; someFile # 提交指定文件  </span><br><span class="line">git commit --amend # 修改最后一次提交记录</span><br><span class="line">git commit -C HEAD -a —amend # 复用HEAD留言，增补提交(修改小错误，而不增加提交记录)</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line">git mv &lt;file1&gt; &lt;file2&gt; # 重命名文件</span><br><span class="line"></span><br><span class="line">git reset # 重置暂存区，工作区不会受到影响，引用也未改变，因为引用重置到HEAD相当于没有重置  </span><br><span class="line">git reset &lt;file&gt;   # 将文件的改动撤出暂存区，相当于命令git add &lt;file&gt;的反射操作 </span><br><span class="line">git reset --hard HEAD^ # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line">git reset --hard &lt;commit id&gt; # 恢复到某一次提交的状态</span><br><span class="line">git reset --soft HEAD^ # 工作区和暂存区不改变，但是引用向前回退一次，撤销最新的提交以便重新提交 </span><br><span class="line">git reset --soft &lt;commit&gt; # 更改引用的指向(复位版本库)，不改变暂存区和工作区  </span><br><span class="line">git reset --mixed &lt;commit&gt; # (默认)更改引用的指向及重置暂存区，但是不改变工作区 </span><br><span class="line">git reset HEAD &lt;file&gt; # 抛弃暂存区中文件的修改</span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看文件diff</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异</span><br><span class="line">git diff</span><br><span class="line">git diff &lt;$id1&gt; &lt;$id2&gt; # 比较两次提交之间的差异</span><br><span class="line">git diff &lt;branch1&gt; &lt;branch2&gt; # 在两个分支之间比较</span><br><span class="line">git diff --staged # 比较暂存区和版本库差异</span><br><span class="line">git diff --cached # 比较暂存区和版本库差异</span><br><span class="line">git diff --stat # 仅仅比较统计信息</span><br><span class="line">git diff &quot;@&#123;yesterday&#125;&quot; # 查看昨天的改变</span><br><span class="line">git diff 1b6d &quot;master~2&quot; # 查看一个特定版本与倒数第二个变更之间的改变</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="Git-push本地代码到新建远程仓库"><a href="#Git-push本地代码到新建远程仓库" class="headerlink" title="Git push本地代码到新建远程仓库"></a>Git push本地代码到新建远程仓库</h4><ul>
<li><p>初始化本地仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>关联本地仓库到远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/mhiwfy/godemo.git(或则 git:git的地址)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><em>若提示出错信息：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure>
<p><em>解决办法如下：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add </span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加要提交的文件到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add *</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交代码到文件控制仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;init commit&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将远程主机的更新，全部取回本地 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>
</li>
<li><p>拉取远程分支代码到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>若报错尝试下面指令：*</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交本地分支(master)代码到远程分支(master)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master:master</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a>Git 本地分支管理</h4><ul>
<li><p>查看、切换、创建和删除分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r # 查看远程分支</span><br><span class="line">git branch -v # 查看各个分支最后提交信息</span><br><span class="line">git branch -a # 列出所有分支</span><br><span class="line">git branch --merged # 查看已经被合并到当前分支的分支</span><br><span class="line">git branch --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line">git branch &lt;new_branch&gt; # 基于当前分支创建新的分支</span><br><span class="line">git branch &lt;new_branch&gt; &lt;start_point&gt; # 基于另一个起点（分支名称，提交名称或则标签名称），创建新的分支</span><br><span class="line">git branch -f &lt;existing_branch&gt; &lt;start_point&gt;	# 创建同名新分支，覆盖已有分支</span><br><span class="line">git branch -d &lt;branch&gt; # 删除某个分支</span><br><span class="line">git branch -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br><span class="line">git checkout &lt;branch&gt; # 切换到某个分支</span><br><span class="line">git checkout -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line">git checkout -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line">git checkout -m &lt;existing_branch&gt; &lt;new_branch&gt; # 移动或重命名分支，当新分支不存在时</span><br><span class="line">git checkout -M &lt;existing_branch&gt; &lt;new_branch&gt; # 移动或重命名分支，当新分支存在时就覆盖</span><br><span class="line">git checkout $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line">git checkout $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支分支合并和rebase</span><br><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line">git merge --no-commit &lt;branch&gt; # 合并但不提交</span><br><span class="line">git merge --squash &lt;branch&gt; # 把一条分支上的内容合并到另一个分支上的一个提交</span><br><span class="line">git checkout &lt;commit&gt; -- &lt;file&gt;  # 用&lt;commit&gt;所指向的提交中filename替换暂存区和工作区中相应的文件</span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于：</span><br><span class="line">git checkout &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br><span class="line">git branch brname master/cid/tag  # 基于某次提交、分支或标签创建新分支</span><br><span class="line">git checkout -- .  # 或者git checkout . 用暂存区的所有文件直接覆盖本地文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>Git补丁管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff &gt; ../sync.patch # 生成补丁</span><br><span class="line">git apply ../sync.patch # 打补丁</span><br><span class="line">git apply --check ../sync.patch # 测试补丁能否成功</span><br><span class="line">git format-patch -X # 根据提交的log生成patch，X为数字，表示最近的几个日志</span><br></pre></td></tr></table></figure>
</li>
<li><p>Git暂存管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash # 不指定名称</span><br><span class="line">git stash pop  # 取出最新的stash并删除</span><br><span class="line">git stash save &quot;stash名称&quot; # 指定名称</span><br><span class="line">git stash list  # 列出当前的Git栈信息（暂存stash信息）</span><br><span class="line">git stash apply stash@&#123;0&#125;  # 将指定版本号为stash@&#123;0&#125;的工作取出来,恢复暂存的内容</span><br><span class="line">git stash apply [--index] [&lt;stash&gt;] # 除了不删除恢复的进度之外，其余和git stash pop 命令一样 </span><br><span class="line">git stash drop stash@&#123;0&#125;  # 删除版本号为stash@&#123;0&#125;暂存区</span><br><span class="line">git stash drop [&lt;stash&gt;] #删除一个存储的进度，默认删除最新的进度</span><br><span class="line">git stash clear  # 将Git栈信息清空</span><br><span class="line">git stash branch &lt;branchname&gt; &lt;stash&gt; # 基于进度创建分支 </span><br><span class="line">git stash --help  # stash帮助信息</span><br><span class="line">git stash [save [--patch] [-k|--[no]keep-index] [-q|--quiet] [&lt;message&gt;]] # 是第一条git stash命令的完整版，使用参数--patch会显示工作区和HEAD的差异， 使用-k或者--keep-index参数，在保存进度后不会将暂存区重置，默认会将暂存区和工作区强制重置。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Git远程分支管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init  #初始化一个版本仓库    </span><br><span class="line">git clone git@git:xxx.git  #Clone远程版本库 </span><br><span class="line"></span><br><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line">git pull origin master --allow-unrelated-histories  # 合并无关联项目</span><br><span class="line"></span><br><span class="line">git fetch origin # 抓取远程仓库所有更新</span><br><span class="line">git fetch origin remote-branch:local-branch #抓取remote-branch分支的更新</span><br><span class="line">git fetch origin --tags # 抓取远程上的所有分支</span><br><span class="line"></span><br><span class="line">git checkout -b &lt;new-branch&gt; &lt;remote_tag&gt; # 抓取远程上的分支</span><br><span class="line">git checkout --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line">git checkout -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br><span class="line">git push # push所有分支</span><br><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br><span class="line"></span><br><span class="line">git merge &lt;branch&gt;               # 将branch分支合并到当前分支 </span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交    </span><br><span class="line">git rebase master &lt;branch&gt;  # 将master rebase到branch，相当于git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Git远程仓库管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init  #初始化一个版本仓库    </span><br><span class="line">git clone git@git:test.git  #Clone远程版本库  </span><br><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line">git remote add origin git@github:XXX/test.git # 添加远程仓库地址</span><br><span class="line">git remote set-url origin git@github.com:XXX/test.git # 设置远程仓库地址(用于修改远程仓库地址)</span><br><span class="line">git remote rm &lt;repository&gt; # 删除远程仓库</span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br><span class="line">git branch --set-upstream master origin/master 根据远程分支 新建本地分支 并关联相应的分支名</span><br><span class="line">git branch --set-upstream develop origin/develop</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>git clean清除未跟踪的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -dn  # 列出那些文件将被清除  </span><br><span class="line">git clean -f   # 清除未跟踪的文件  </span><br><span class="line">git clean -df  # 清除未跟踪的文件和目录  </span><br><span class="line">git clean -dfx # 清除包括.gitignore忽略的所有文件  </span><br><span class="line">git clean -X   # Remove only files ignored by git </span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go笔记</title>
    <url>/2021/08/08/Go%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="使用golang开发"><a href="#使用golang开发" class="headerlink" title="使用golang开发"></a>使用golang开发</h3><ul>
<li>直接设置代理  <a href="https://goproxy.io/">https://goproxy.io/</a></li>
<li>使用阿里云镜像代理：<a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></li>
</ul>
<h3 id="go能做什么？"><a href="#go能做什么？" class="headerlink" title="go能做什么？"></a>go能做什么？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、命令行程序。不分windows、linux、macos，扔进去就能用读写数据库、小爬虫、定时任务等等，个人目前主要是用来同步数据，定时备份和清理垃圾。</span><br><span class="line"></span><br><span class="line">2、图形化工具。还是全平台通用，官方虽然没有GUI库，但是第三方有的是。选个合适的库，c++能搞的，golang差不多都可以搞（GUI库的选择请参考https://www.zhihu.com/question/268536384/answer/1215107185）。</span><br><span class="line"></span><br><span class="line">3、私人服务器。这回不光不挑平台了，还能直接扔在路由器或者旧手机上了（旧安卓手机废物利用请参考https://zhuanlan.zhihu.com/p/92664273）。golang天生支持arm，私人服务，无非就是个网盘、博客之类的，完全没必要买云空间（家庭网络穿透定位部分不展开）。</span><br><span class="line"></span><br><span class="line">4、各种正牌服务。目前已经用caddy代替了nginx（证书自动展期方便），gin代替了tomcat（服务器内存太贵了）。剩下普通的API服务，自己写就完事了。目前最长的高吞吐量服务，已经跑了700多天还活蹦乱跳，上次停机还是停电的时候。</span><br><span class="line"></span><br><span class="line">5、用go写了文件同步工具，基于自带的sftp库以及到处都是的开源ssh库。</span><br><span class="line"></span><br><span class="line">6、处理日志、数据打包、虚拟机处理、文件系统、分布式系统、数据库代理等；网络编程方面，Go语言广泛应用于Web 应用、API应用、下载应用。Go语言还适用于内存数据库和云平台领域，目前国外很多云平台都是采用Go开发。</span><br></pre></td></tr></table></figure>
<h3 id="goProxy配置"><a href="#goProxy配置" class="headerlink" title="goProxy配置"></a>goProxy配置</h3><blockquote>
<p>GOPROXY<br>由于国内的网络环境，我们可以通过配置GOPROXY避免DNS污染导致的模块拉取缓慢或失败的问题，加速构建。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GOPROXY </span><br><span class="line">阿里云Go Module代理： https://mirrors.aliyun.com/goproxy/</span><br><span class="line">Goproxy 中国： https://github.com/goproxy/goproxy.cn</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line"># 1. 终端</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"># 2. macOS 或 Linux</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br><span class="line"># 或者</span><br><span class="line">echo &quot;export GOPROXY=https://goproxy.cn&quot; &gt;&gt; ~/.profile &amp;&amp; source ~/.profile</span><br><span class="line"># 3. windows</span><br><span class="line">C:\&gt; $env:GOPROXY = &quot;https://goproxy.cn&quot;</span><br><span class="line"># 或</span><br><span class="line">配置环境变量</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="go环境配置"><a href="#go环境配置" class="headerlink" title="go环境配置"></a>go环境配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局配置</span><br><span class="line">export GOROOT=/usr/lib/go</span><br><span class="line">export GOPATH=~/workspace/go</span><br><span class="line">#export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line">export GOPROXY=https://goproxy.cn,direct</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="dep构建"><a href="#dep构建" class="headerlink" title="dep构建"></a>dep构建</h3><p>参考：<a href="https://blog.csdn.net/chenguolinblog/article/details/90665116">https://blog.csdn.net/chenguolinblog/article/details/90665116</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置环境变量， 使用vendor目录</span><br><span class="line">GO15VENDOREXPERIMENT=1</span><br><span class="line">GO111MODULE=off</span><br><span class="line"></span><br><span class="line"># 安装dep</span><br><span class="line">go get -u github.com/golang/dep/cmd/dep</span><br><span class="line"></span><br><span class="line"># dep初始化</span><br><span class="line">dep init -v </span><br><span class="line"></span><br><span class="line"># 依赖管理</span><br><span class="line">dep help ensure  # 依赖管理帮助</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson  # 添加依赖</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson@=0.4.3  # @=指定依赖tag</span><br><span class="line">dep ensure # 安装项目依赖的代码</span><br><span class="line">dep ensure -update -v # 更新项目依赖</span><br><span class="line">dep ensure -v  # 建议使用</span><br><span class="line">dep prune -v  # 删除没有用到的package</span><br><span class="line">dep status # 查看依赖状态</span><br><span class="line"></span><br><span class="line"># 删除依赖</span><br><span class="line">修改Gopkg.toml文件相应内容，同时要保证代码中没有引用，</span><br><span class="line">再执行dep ensure 或dep ensure -update 均可</span><br><span class="line"></span><br><span class="line"># 说明文档</span><br><span class="line">https://golang.github.io/dep/docs/introduction.html</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"># 初始化dep项目</span><br><span class="line">mkdir $GOPATH/src/test</span><br><span class="line">cd  $GOPATH/src/test</span><br><span class="line">dep init</span><br><span class="line"># test目录生成如下文件</span><br><span class="line">├── Gopkg.lock</span><br><span class="line">├── Gopkg.toml</span><br><span class="line">└── vendor</span><br><span class="line"># 说明</span><br><span class="line">Gopkg.lock 是生成的文件，不要手工修改 Gopkg.lock 官方文档。</span><br><span class="line">Gopkg.toml 是依赖管理的核心文件，可以生成也可以手动修改，</span><br><span class="line">一般情况下Gopkg.toml里面只定义直接依赖项，而Gopkg.lock里面除了包含Gopkg.toml中的所有项之外，还包含传递依赖项。比如我们的项目依赖项目A， 而项目A又依赖B、C，那么只有A会包含在Gopkg.toml中，而A、B、C都会定义在Gopkg.lock中。所以Gopkg.lock定义了所有依赖的项目的详细信息（commit ID和packages），使得每次build我们自己的项目时，始终基于确定不变的依赖项。Gopkg.toml 官方文档。</span><br><span class="line">vendor目录是 golang1.5 以后依赖管理目录，这个目录的依赖代码是优先加载的，类似 node 的 node_module 目录。</span><br><span class="line"></span><br><span class="line"># 依赖管理</span><br><span class="line"># 依赖管理帮助</span><br><span class="line">dep help ensure</span><br><span class="line"># 添加一条依赖</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson</span><br><span class="line"># 这里 @= 参数指定的是 某个 tag</span><br><span class="line">dep ensure -add github.com/bitly/go-simplejson@=0.4.3</span><br><span class="line"># 添加后一定记住执行 确保 同步</span><br><span class="line">dep ensure</span><br><span class="line"># 建议使用</span><br><span class="line">dep ensure -v</span><br><span class="line"># 删除没有用到的 package</span><br><span class="line">dep prune -v</span><br><span class="line"># 依赖更新</span><br><span class="line">dep ensure -update -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="解决go-get问题"><a href="#解决go-get问题" class="headerlink" title="解决go get问题"></a>解决go get问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方案一：</span><br><span class="line"># 例如安装godoc</span><br><span class="line">go get -v golang.org/x/tools/cmd/godoc</span><br><span class="line"># 报错如： </span><br><span class="line">Fetching https://golang.org/x/net/context/ctxhttp?go-get=1</span><br><span class="line">https fetch failed: Get https://golang.org/x/net/context/ctxhttp?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</span><br><span class="line">...</span><br><span class="line"># 原因：</span><br><span class="line">部分网络资源在中国无法直接访问。</span><br><span class="line"># 解决：</span><br><span class="line">在$GOPATH/src路径下创建golang/x文件夹并下载想要的包。以Windows为例，下面的报错信息提示无法获取https://golang.org/x/net/context/ctxhttp，现在我们来手动获取。</span><br><span class="line">mkidr -p d:/workspace/go/src/golang.org/x</span><br><span class="line">cd d:/workspace/go/src/golang.org/x</span><br><span class="line">git clone https://github.com/golang/net.git</span><br><span class="line">go get -v golang.org/x/tools/cmd/godoc</span><br><span class="line"></span><br><span class="line">方案二：</span><br><span class="line">要求 go version: &gt;= 1.13</span><br><span class="line">通过增加go proxy ：</span><br><span class="line">export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="struct-类型channel"><a href="#struct-类型channel" class="headerlink" title="struct{}类型channel"></a>struct{}类型channel</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ch chan struct&#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>struct{}就是一种普通数据类型，只是没有具体的值而已。</li>
<li>通常struct{}类型channel的用法是使用同步，一般不需要往channel里面写数据，只有读等待，而读等待会在channel被关闭的时候返回。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var mapChan = make(chan map[string]int, 1)</span><br><span class="line">func main() &#123;</span><br><span class="line">	syncChan := make(chan struct&#123;&#125;, 2)</span><br><span class="line">	go func() &#123; // 用于演示接收操作。</span><br><span class="line">		for &#123;</span><br><span class="line">			if elem, ok := &lt;-mapChan; ok &#123;</span><br><span class="line">				elem[&quot;count&quot;]++</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				break</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(&quot;Stopped. [receiver]&quot;)</span><br><span class="line">		syncChan &lt;- struct&#123;&#125;&#123;&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	go func() &#123; // 用于演示发送操作。</span><br><span class="line">		countMap := make(map[string]int)</span><br><span class="line">		for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">			mapChan &lt;- countMap</span><br><span class="line">			time.Sleep(time.Millisecond)</span><br><span class="line">			fmt.Printf(&quot;The count map: %v. [sender]\n&quot;, countMap)</span><br><span class="line">		&#125;</span><br><span class="line">		close(mapChan)</span><br><span class="line">		syncChan &lt;- struct&#123;&#125;&#123;&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	&lt;-syncChan</span><br><span class="line">	&lt;-syncChan</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface{}"></a>interface{}</h3><blockquote>
<p>interface{}可用于向函数传递任意类型的变量，但对于函数内部，该变量仍然为interface{}类型（空接口类型）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func echoArray(a interface&#123;&#125;)&#123;</span><br><span class="line">    b,_:=a.([]int)//通过断言实现类型转换</span><br><span class="line">  for _,v:=range b&#123;</span><br><span class="line">    fmt.Print(v,&quot; &quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  fmt.Println()</span><br><span class="line">  return</span><br><span class="line">&#125;</span><br><span class="line">func main()&#123;</span><br><span class="line">  a:=[]int&#123;2,1,3,5,4&#125;</span><br><span class="line">  echoArray(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>interface{}使得我们可以向函数传递任意类型的变量；</li>
<li>断言解决在使用interface{}的情况下，空接口类型向普通类型转换的类型转换问题；</li>
<li>普通类型之间的转换最好使用显式的类型转换，否者很可能导致严重的错误。<h3 id="从-dep-迁移到-go-mod"><a href="#从-dep-迁移到-go-mod" class="headerlink" title="从 dep 迁移到 go mod"></a>从 dep 迁移到 go mod</h3></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># golang 依赖管理从 dep 迁移到 go modules</span><br><span class="line">1. 执行 go version 确保你的 go 版本在 11 或更高</span><br><span class="line">2. 将你的代码移动到 GOPATH 之外 并设置 export GO111MODULE=on</span><br><span class="line">3. go mod init [module path] 这个会从你的 Gopkg.lock 文件中读取依赖</span><br><span class="line">4. go mod tidy 这个会移除一些你不需要的依赖</span><br><span class="line">5. rm -rf vendor/ 你可以选择性的删除掉 vendor 目录</span><br><span class="line">6. go build 测试有一下是否成功</span><br><span class="line">7. rm -f Gopkg.lock Gopkg.toml 最后你可以删除掉你的 dep 依赖文件了</span><br><span class="line">8. go 读取了 Dep 的依赖文件 Gopkg.lock 然后创建了一个 go.mod 文件</span><br><span class="line"></span><br><span class="line"># 如果需要保留 vendor 目录，可以执行以下命令</span><br><span class="line">1. 执行 go mod vendor 拷贝你的依赖到 vendor 目录</span><br><span class="line">2. 执行 go build -mod=vendor 确保编译时使用 vendor 目录</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="go-Mod构建"><a href="#go-Mod构建" class="headerlink" title="go Mod构建"></a>go Mod构建</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">go mod download</td>
<td align="left">下载依赖包到本地（默认为 GOPATH/pkg/mod 目录）</td>
</tr>
<tr>
<td align="left">go mod edit</td>
<td align="left">编辑 go.mod 文件</td>
</tr>
<tr>
<td align="left">go mod graph</td>
<td align="left">打印模块依赖图</td>
</tr>
<tr>
<td align="left">go mod init</td>
<td align="left">初始化当前文件夹，创建 go.mod 文件</td>
</tr>
<tr>
<td align="left">go mod tidy</td>
<td align="left">增加缺少的包，删除无用的包</td>
</tr>
<tr>
<td align="left">go mod vendor</td>
<td align="left">将依赖复制到 vendor 目录下</td>
</tr>
<tr>
<td align="left">go mod verify</td>
<td align="left">校验依赖</td>
</tr>
<tr>
<td align="left">go mod why</td>
<td align="left">解释为什么需要依赖</td>
</tr>
</tbody></table>
<blockquote>
<p>下载官方包1.11(及其以上版本将会自动支持gomod)<br>默认GO111MODULE=auto(auto是指如果在gopath下不启用mod)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Golang 提供一个环境变量 GO111MODULE 来设置是否使用mod，它有3个可选值，分别是off, on, auto（默认值），具体含义如下：</span><br><span class="line">off: GOPATH mode，查找vendor和GOPATH目录</span><br><span class="line">on：module-aware mode，使用 go module，忽略GOPATH目录</span><br><span class="line">auto：如果当前目录不在$GOPATH 并且 当前目录（或者父目录）下有go.mod文件，则使用 GO111MODULE， 否则仍旧使用 GOPATH mode。</span><br><span class="line"></span><br><span class="line"># 修改 GO111MODULE 的值的语句是</span><br><span class="line">set GO111MODULE=on</span><br><span class="line"></span><br><span class="line"># 在使用模块的时候， GOPATH是无意义的，不过它还是会把下载的依赖储存在 GOPATH/src/mod中，也会把 go install的结果放在 GOPATH/bin（如果 GOBIN 不存在的话）</span><br><span class="line">go mod download 下载模块到本地缓存，缓存路径是 $GOPATH/pkg/mod/cache</span><br><span class="line">go mod edit 是提供了命令版编辑 go.mod 的功能，例如 go mod edit -fmt go.mod 会格式化 go.mod</span><br><span class="line">go mod graph 把模块之间的依赖图显示出来</span><br><span class="line">go mod init 初始化模块（例如把原本dep管理的依赖关系转换过来）</span><br><span class="line">go mod tidy 增加缺失的包，移除没用的包</span><br><span class="line">go mod vendor 把依赖拷贝到 vendor/ 目录下</span><br><span class="line">go mod verify 确认依赖关系</span><br><span class="line">go mod why 解释为什么需要包和模块</span><br><span class="line"></span><br><span class="line">#注意有几个坑的地方：</span><br><span class="line">go mod 命令在 $GOPATH 里默认是执行不了的，因为 GO111MODULE 的默认值是 auto。默认在$GOPATH 里是不会执行， 如果一定要强制执行，就设置环境变量为 on。</span><br><span class="line">go mod init 在没有接module名字的时候是执行不了的，会报错 go: cannot determine module path for source directory。可以这样执行：</span><br><span class="line">go mod init github.com/jiajunhuang/hello</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mod使用步骤</span><br><span class="line">1. 指定module的根目录并生成go.mod文件</span><br><span class="line">go mod init example.com/hello</span><br><span class="line">2. 下载并添加依赖到go.mod文件中</span><br><span class="line">go build</span><br><span class="line">go test</span><br><span class="line">3. 查看module下的所有依赖</span><br><span class="line">go list -mod= all</span><br><span class="line">go list -m -json all</span><br><span class="line">4. 更新稳定版依赖</span><br><span class="line">go get rsc.io/sampler</span><br><span class="line">5. 更新为指定版本依赖</span><br><span class="line">go list -mod=mod -m -versions rsc.io/sampler</span><br><span class="line">go get rsc.io/sampler@v1.3.1</span><br><span class="line">6. 清理无用的依赖</span><br><span class="line">go mod tidy</span><br><span class="line">7. 将依赖复制到项目路径的vendor文件夹中</span><br><span class="line">go mod vendor</span><br><span class="line">8. 忽略cache里的包，只使用vendor目录里的依赖进行编译</span><br><span class="line">go build -mod=vendor</span><br><span class="line">9. 校验依赖并查看是否有修改</span><br><span class="line">go mod verify</span><br><span class="line">10. 更替版本</span><br><span class="line">go mod edit -require=google.golang.org/grpc@v1.26.0</span><br><span class="line">go get -x google.golang.org/grpc@v1.26.0</span><br><span class="line">go mod vendor</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="go设置多个GOPATH"><a href="#go设置多个GOPATH" class="headerlink" title="go设置多个GOPATH"></a>go设置多个GOPATH</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置GOPATH</span><br><span class="line">export GOPATH=~/workspace/go:~/workspace/go/src/goprojects</span><br><span class="line">export GOROOT=/usr/lib/go</span><br><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line"># 配置PATH</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;GOROOT&#125;/bin:$&#123;GOPATH//://bin:&#125;/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Linux安装Go"><a href="#Linux安装Go" class="headerlink" title="Linux安装Go"></a>Linux安装Go</h3><p><a href="https://golang.google.cn/doc/install">https://golang.google.cn/doc/install</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># download: https://golang.google.cn/dl/</span><br><span class="line">wget https://golang.google.cn/dl/go1.16.7.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压安装</span><br><span class="line">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">vim ~/.profile</span><br><span class="line"></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=~/go</span><br><span class="line">#export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br><span class="line"></span><br><span class="line">source ~/.profile</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set GOARCH=amd64</span><br><span class="line">set GOOS=windows</span><br></pre></td></tr></table></figure>
<h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set GOARCH=amd64</span><br><span class="line">set GOOS=linux</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana笔记</title>
    <url>/2021/10/02/Grafana%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Grafana-安装笔记"><a href="#Grafana-安装笔记" class="headerlink" title="Grafana 安装笔记"></a>Grafana 安装笔记</h3><ul>
<li>Grafana+Prometheus打造全方位立体监控系统：<a href="https://yq.aliyun.com/articles/236395">https://yq.aliyun.com/articles/236395</a></li>
</ul>
<h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul>
<li>官网地址：<a href="https://grafana.com/">https://grafana.com/</a></li>
<li>官方文档: <a href="https://grafana.com/grafana">https://grafana.com/grafana</a></li>
<li>安装指南: <a href="http://docs.grafana.org/installation/rpm/">http://docs.grafana.org/installation/rpm/</a></li>
<li>下载地址: <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></li>
</ul>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。它主要有以下六大特点：</p>
</blockquote>
<ul>
<li>展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式；</li>
<li>数据源：Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB等；</li>
<li>通知提醒：以可视方式定义最重要指标的警报规则，Grafana将不断计算并发送通知，在数据达到阈值时通过Slack、PagerDuty等获得通知；</li>
<li>混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源；</li>
<li>注释：使用来自不同数据源的丰富事件注释图表，将鼠标悬停在事件上会显示完整的事件元数据和标记；</li>
<li>过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询。</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote>
<p>ubuntu 安装</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget https://dl.grafana.com/oss/release/grafana_6.3.3_amd64.deb </span><br><span class="line">sudo dpkg -i grafana_6.3.3_amd64.deb </span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">service grafana-server start</span><br><span class="line"></span><br><span class="line"># 访问</span><br><span class="line">http://server:3000 # 系统默认用户名和密码为admin/admin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker 安装</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=grafana -p 3000:3000 grafana/grafana</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h4><blockquote>
<p>BashBoard地址: <a href="https://grafana.com/dashboards?dataSource=influxdb">https://grafana.com/dashboards?dataSource=influxdb</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客基本用法</title>
    <url>/2020/09/08/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo基本操作流程</span><br><span class="line">date: 2018-08-05 12:12:57</span><br><span class="line">comments: false</span><br><span class="line">categories: </span><br><span class="line">  - Hexo</span><br><span class="line">tags:</span><br><span class="line">  - hexo</span><br><span class="line">  - 操作</span><br><span class="line">description: #的描述，可省略</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpsUtils.java</title>
    <url>/2020/06/02/HttpsUtils/</url>
    <content><![CDATA[<h3 id="Http工具类"><a href="#Http工具类" class="headerlink" title="Http工具类"></a>Http工具类</h3><p>HttpsUtils.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright© 2003-2016 浙江汇信科技有限公司, All Rights Reserved.</span><br><span class="line"> */</span><br><span class="line">package com.icinfo.support.util;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStreamWriter;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.HttpsURLConnection;</span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import javax.net.ssl.TrustManager;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">import com.icinfo.support.security.TrustAnyHostnameVerifier;</span><br><span class="line">import com.icinfo.support.security.TrustAnyTrustManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:  WEB工具类.&lt;br&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author xiajunwei</span><br><span class="line"> * @date 2016年05月31日</span><br><span class="line"> */</span><br><span class="line">public final class HttpUtils &#123;</span><br><span class="line">	static&#123;</span><br><span class="line">		System.setProperty(&quot;jsse.enableSNIExtension&quot;, &quot;false&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">    private final static Logger logger = Logger.getLogger(HttpUtils.class);</span><br><span class="line">    // 编码方式</span><br><span class="line">    private static final String CONTENT_CHARSET = &quot;UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">    // 连接超时时间</span><br><span class="line">    private static final int CONNECTION_TIMEOUT = 30000;</span><br><span class="line"></span><br><span class="line">    // 读数据超时时间</span><br><span class="line">    private static final int READ_DATA_TIMEOUT = 30000;</span><br><span class="line"></span><br><span class="line">    private static boolean isHttps(String url) &#123;</span><br><span class="line">        return url.substring(0, 5).equalsIgnoreCase(&quot;https&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：POST Stream提交</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param content</span><br><span class="line">     * @param charset</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postStream(String url, String content, String charset) &#123;</span><br><span class="line">        if (isHttps(url)) &#123;</span><br><span class="line">            return postHttpsStream(url, content, charset);</span><br><span class="line">        &#125;</span><br><span class="line">        return postHttpStream(url, content, charset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：POST HTTP Stream提交</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param content</span><br><span class="line">     * @param charset</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String postHttpStream(String url, String content, String charset) &#123;</span><br><span class="line">        HttpURLConnection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            connection = (HttpURLConnection) new URL(url).openConnection();</span><br><span class="line"></span><br><span class="line">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            connection.setConnectTimeout(CONNECTION_TIMEOUT);</span><br><span class="line">            connection.setReadTimeout(READ_DATA_TIMEOUT);</span><br><span class="line">            connection.setRequestProperty(&quot;content-type&quot;, &quot;application/octet-stream&quot;);</span><br><span class="line">            connection.setDoInput(true);</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">            connection.getOutputStream().write(content.getBytes(charset));</span><br><span class="line">            connection.getOutputStream().flush();</span><br><span class="line">            connection.getOutputStream().close();</span><br><span class="line"></span><br><span class="line">            int code = connection.getResponseCode();</span><br><span class="line">            /**</span><br><span class="line">             * 400：认证错误</span><br><span class="line">             */</span><br><span class="line">            if (code == 200) &#123;</span><br><span class="line">                /* 请求成功 */</span><br><span class="line">                return readInputStream(connection.getInputStream());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /*错误输出*/</span><br><span class="line">                return readInputStream(connection.getErrorStream());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                connection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：POST HTTPS Stream提交</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param content</span><br><span class="line">     * @param charset</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String postHttpsStream(String url, String content, String charset) &#123;</span><br><span class="line">        HttpsURLConnection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">        	</span><br><span class="line">            SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;);</span><br><span class="line">            sc.init(null, new TrustManager[]&#123;new TrustAnyTrustManager()&#125;,</span><br><span class="line">                    new java.security.SecureRandom());</span><br><span class="line"></span><br><span class="line">            @SuppressWarnings(&quot;restriction&quot;)</span><br><span class="line">            URL httpsUrl = new URL(null, url, new sun.net.www.protocol.https.Handler());</span><br><span class="line">            connection = (HttpsURLConnection) httpsUrl.openConnection();</span><br><span class="line">            connection.setSSLSocketFactory(sc.getSocketFactory());</span><br><span class="line">            connection.setHostnameVerifier(new TrustAnyHostnameVerifier());</span><br><span class="line"></span><br><span class="line">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            connection.setConnectTimeout(CONNECTION_TIMEOUT);</span><br><span class="line">            connection.setReadTimeout(READ_DATA_TIMEOUT);</span><br><span class="line">            connection.setRequestProperty(&quot;content-type&quot;, &quot;application/octet-stream&quot;);</span><br><span class="line">            connection.setDoInput(true);</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">            connection.getOutputStream().write(content.getBytes(charset));</span><br><span class="line">            connection.getOutputStream().flush();</span><br><span class="line">            connection.getOutputStream().close();</span><br><span class="line"></span><br><span class="line">            int code = connection.getResponseCode();</span><br><span class="line">            /**</span><br><span class="line">             * 400：认证错误</span><br><span class="line">             */</span><br><span class="line">            if (code == 200) &#123;</span><br><span class="line">                /* 请求成功 */</span><br><span class="line">                return readInputStream(connection.getInputStream());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /*错误输出*/</span><br><span class="line">                return readInputStream(connection.getErrorStream());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                connection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：发送HTTP请求，支持HTTP，HTTPS</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param params</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postRequest(String url, Map params) throws Exception &#123;</span><br><span class="line">        return postRequest(url, params, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：发送HTTP请求，支持HTTP，HTTPS</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param params</span><br><span class="line">     * @param cookies</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postRequest(String url, Map&lt;String, String&gt; params,</span><br><span class="line">                                     Map&lt;String, String&gt; cookies) throws Exception &#123;</span><br><span class="line">        if (isHttps(url)) &#123;</span><br><span class="line">            return postHttpsRequest(url, params, cookies);</span><br><span class="line">        &#125;</span><br><span class="line">        return postHttpRequest(url, params, cookies);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 模拟HTTPS POST请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param params</span><br><span class="line">     * @param cookies</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String postHttpsRequest(String url, Map&lt;String, String&gt; params,</span><br><span class="line">                                           Map&lt;String, String&gt; cookies) throws Exception &#123;</span><br><span class="line">        HttpsURLConnection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;);</span><br><span class="line">            sc.init(null, new TrustManager[]&#123;new TrustAnyTrustManager()&#125;,</span><br><span class="line">                    new java.security.SecureRandom());</span><br><span class="line"></span><br><span class="line">            @SuppressWarnings(&quot;restriction&quot;)</span><br><span class="line">            URL httpsUrl = new URL(null, url, new sun.net.www.protocol.https.Handler());</span><br><span class="line">            connection = (HttpsURLConnection) httpsUrl.openConnection();</span><br><span class="line">            connection.setSSLSocketFactory(sc.getSocketFactory());</span><br><span class="line">            connection.setHostnameVerifier(new TrustAnyHostnameVerifier());</span><br><span class="line">            connection.setDoInput(true);</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            connection.setConnectTimeout(CONNECTION_TIMEOUT);</span><br><span class="line">            connection.setReadTimeout(READ_DATA_TIMEOUT);</span><br><span class="line">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=&quot; + CONTENT_CHARSET);</span><br><span class="line">            connection.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class="line">            connection.setUseCaches(false);</span><br><span class="line">            connection.setInstanceFollowRedirects(true);</span><br><span class="line"></span><br><span class="line">            //请求cookie处理</span><br><span class="line">            writeCookie(connection, cookies);</span><br><span class="line"></span><br><span class="line">            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Icinfo framework&quot;);</span><br><span class="line"></span><br><span class="line">            //发送请求参数</span><br><span class="line">            writeRequestParams(connection, params);</span><br><span class="line"></span><br><span class="line">            int code = connection.getResponseCode();</span><br><span class="line">            /**</span><br><span class="line">             * 400：认证错误</span><br><span class="line">             */</span><br><span class="line">            if (code == 200) &#123;</span><br><span class="line">                /* 请求成功 */</span><br><span class="line">                return readInputStream(connection.getInputStream());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /*错误输出*/</span><br><span class="line">                return readInputStream(connection.getErrorStream());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 模拟HTTP POST请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param params</span><br><span class="line">     * @param cookies</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String postHttpRequest(String url, Map&lt;String, String&gt; params,</span><br><span class="line">                                          Map&lt;String, String&gt; cookies) throws Exception &#123;</span><br><span class="line">        HttpURLConnection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            URL httpUrl = new URL(url);</span><br><span class="line">            connection = (HttpURLConnection) httpUrl.openConnection();</span><br><span class="line">            connection.setDoInput(true);</span><br><span class="line">            connection.setDoOutput(true);</span><br><span class="line">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            connection.setConnectTimeout(CONNECTION_TIMEOUT);</span><br><span class="line">            connection.setReadTimeout(READ_DATA_TIMEOUT);</span><br><span class="line">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=&quot; + CONTENT_CHARSET);</span><br><span class="line">            connection.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class="line">            connection.setUseCaches(false);</span><br><span class="line">            connection.setInstanceFollowRedirects(true);</span><br><span class="line"></span><br><span class="line">            //请求cookie处理</span><br><span class="line">            writeCookie(connection, cookies);</span><br><span class="line"></span><br><span class="line">            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Icinfo framework&quot;);</span><br><span class="line"></span><br><span class="line">            //发送请求参数</span><br><span class="line">            writeRequestParams(connection, params);</span><br><span class="line"></span><br><span class="line">            int code = connection.getResponseCode();</span><br><span class="line">            /**</span><br><span class="line">             * 400：认证错误</span><br><span class="line">             */</span><br><span class="line">            if (code == 200) &#123;</span><br><span class="line">                /* 请求成功 */</span><br><span class="line">                return readInputStream(connection.getInputStream());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /*错误输出*/</span><br><span class="line">                return readInputStream(connection.getErrorStream());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：处理POST请求参数</span><br><span class="line">     *</span><br><span class="line">     * @param connection</span><br><span class="line">     * @param params</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    private static void writeRequestParams(URLConnection connection, Map&lt;String, String&gt; params) throws IOException &#123;</span><br><span class="line">        //请求参数处理</span><br><span class="line">        StringBuffer buffer = new StringBuffer();</span><br><span class="line"></span><br><span class="line">        if (params != null &amp;&amp; params.size() &gt; 0) &#123;</span><br><span class="line">            for (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                if (StringUtils.isEmpty(entry.getValue())) &#123;</span><br><span class="line">                    //参数值为空时忽略</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if (buffer.length() &gt; 0)</span><br><span class="line">                    buffer.append(&quot;&amp;&quot;);</span><br><span class="line">                buffer.append(URLEncoder.encode(entry.getKey(), CONTENT_CHARSET));</span><br><span class="line">                buffer.append(&quot;=&quot;);</span><br><span class="line">                buffer.append(URLEncoder.encode(entry.getValue(), CONTENT_CHARSET));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.setRequestProperty(&quot;Content-Length&quot;, String.valueOf(buffer.length()));</span><br><span class="line"></span><br><span class="line">        connection.connect();</span><br><span class="line"></span><br><span class="line">        OutputStreamWriter osw = new OutputStreamWriter(connection.getOutputStream(), CONTENT_CHARSET);</span><br><span class="line">        osw.write(buffer.toString());</span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：处理POST请求Cookie</span><br><span class="line">     *</span><br><span class="line">     * @param connection</span><br><span class="line">     * @param cookies</span><br><span class="line">     */</span><br><span class="line">    private static void writeCookie(URLConnection connection, Map&lt;String, String&gt; cookies) throws UnsupportedEncodingException &#123;</span><br><span class="line">        if (cookies != null &amp;&amp; cookies.size() &gt; 0) &#123;</span><br><span class="line">            StringBuffer cookieBuffer = new StringBuffer();</span><br><span class="line">            for (Map.Entry&lt;String, String&gt; cookie : cookies.entrySet()) &#123;</span><br><span class="line">                if (StringUtils.isEmpty(cookie.getValue())) &#123;</span><br><span class="line">                    //Cookie值为空时忽略</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if (cookieBuffer.length() &gt; 0)</span><br><span class="line">                    cookieBuffer.append(&quot;;&quot;);</span><br><span class="line">                cookieBuffer.append(URLEncoder.encode(cookie.getKey(), CONTENT_CHARSET));</span><br><span class="line">                cookieBuffer.append(&quot;=&quot;);</span><br><span class="line">                cookieBuffer.append(URLEncoder.encode(cookie.getValue(), CONTENT_CHARSET));</span><br><span class="line">            &#125;</span><br><span class="line">            connection.setRequestProperty(&quot;Cookie&quot;, cookieBuffer.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 读取流内容</span><br><span class="line">     *</span><br><span class="line">     * @param stream</span><br><span class="line">     * @return</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    private static String readInputStream(InputStream stream) throws IOException &#123;</span><br><span class="line">        BufferedReader in = new BufferedReader(new InputStreamReader(stream, CONTENT_CHARSET));</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        String line;</span><br><span class="line">        while ((line = in.readLine()) != null) &#123;</span><br><span class="line">            sb.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：获取IP地址</span><br><span class="line">     *</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getIpAddress(HttpServletRequest request) &#123;</span><br><span class="line">        if (request != null) &#123;</span><br><span class="line">            String ipAddress = request.getHeader(&quot;X-Forwarded-For&quot;);</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;Proxy-Client-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;X-Real-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">            &#125;</span><br><span class="line">            return ipAddress;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否为Ajax请求</span><br><span class="line">     *</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isAjax(HttpServletRequest request) &#123;</span><br><span class="line">        return request.getHeader(&quot;x-requested-with&quot;) != null &amp;&amp; &quot;XMLHttpRequest&quot;.equals(request.getHeader(&quot;X-Requested-With&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * http响应写回</span><br><span class="line">     *</span><br><span class="line">     * @param response   响应</span><br><span class="line">     * @param info  信息</span><br><span class="line">     * @param httpStatus 状态码</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void write(HttpServletResponse response, String info, int httpStatus) throws Exception &#123;</span><br><span class="line">        PrintWriter writer = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 设置响应字符集</span><br><span class="line">            response.setContentType(&quot;text/html; charset=utf-8&quot;);</span><br><span class="line">            // 设置HTTP响应状态码</span><br><span class="line">            response.setStatus(httpStatus);</span><br><span class="line">            writer = response.getWriter();</span><br><span class="line">            writer.write(info);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (writer != null) &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TrustAnyHostnameVerifier.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.support.security;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.HostnameVerifier;</span><br><span class="line">import javax.net.ssl.SSLSession;</span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 描述: 信任任意主机名  .&lt;br&gt;</span><br><span class="line"> * @author YuShunWei</span><br><span class="line"> * @date 2016年2月27日  </span><br><span class="line"> */</span><br><span class="line">public class TrustAnyHostnameVerifier implements HostnameVerifier &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public boolean verify(String hostname, SSLSession session) &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TrustAnyTrustManager.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.support.security;</span><br><span class="line">import java.security.cert.CertificateException;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 描述: 自定义签名证书管理类 (接受任意来源证书) .&lt;br&gt;</span><br><span class="line"> * @author YuShunWei</span><br><span class="line"> * @date 2016年2月27日  </span><br><span class="line"> */</span><br><span class="line">public class TrustAnyTrustManager implements X509TrustManager &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void checkClientTrusted(X509Certificate[] arg0, String arg1)</span><br><span class="line">			throws CertificateException &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void checkServerTrusted(X509Certificate[] arg0, String arg1)</span><br><span class="line">			throws CertificateException &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">		return new X509Certificate[]&#123;&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IaaS、PaaS、SaaS、CaaS、MaaS五者的区别（云计算概念）</title>
    <url>/2021/10/02/IaaS%E3%80%81PaaS%E3%80%81SaaS%E3%80%81CaaS%E3%80%81MaaS%E4%BA%94%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E4%BA%91%E8%AE%A1%E7%AE%97%E6%A6%82%E5%BF%B5%EF%BC%89/</url>
    <content><![CDATA[<h3 id="云计算构架图"><a href="#云计算构架图" class="headerlink" title="云计算构架图"></a>云计算构架图</h3><blockquote>
<p>很明显，这五者之间主要的区别在于第一个单词，而aaS都是as-a-service（即服务）的意思，这五个模式都是近年来兴起的，且这五者都是云计算的落地产品，所以我们先来了解一下云计算是什么。</p>
</blockquote>
<h4 id="架构图："><a href="#架构图：" class="headerlink" title="架构图："></a>架构图：</h4><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2020/xaasCloud20200911102822.png" alt="架构图"></p>
<h5 id="1、云计算是什么"><a href="#1、云计算是什么" class="headerlink" title="1、云计算是什么"></a>1、云计算是什么</h5><p>云计算（cloud computing）是基于互联网的相关服务的增加、使用和交付模式，通常涉及通过互联网来提供动态易扩展且经常是虚拟化的资源。云是网络、互联网的一种比喻说法。云计算甚至可以让你体验每秒10万亿次的运算能力，拥有这么强大的计算能力可以模拟核爆炸、预测气候变化和市场发展趋势。用户通过电脑、笔记本、手机等方式接入数据中心，按自己的需求进行运算。 </p>
<p>通俗的来说云计算就是以前的服务器计算的升级版，其主要有扩展性强、廉价、虚拟化、计算能力强这几个特点。</p>
<h5 id="2、IaaS是什么意思？"><a href="#2、IaaS是什么意思？" class="headerlink" title="2、IaaS是什么意思？"></a>2、IaaS是什么意思？</h5><p>IaaS: Infrastructure-as-a-Service（基础设施即服务） 第一层叫做IaaS，有时候也叫做Hardware-as-a-Service。<br>几年前如果你想在办公室或者公司的网站上运行一些企业应用，你需要去买服务器，或者别的高昂的硬件来控制本地应用，让你的业务运行起来。<br>但是现在有了IaaS，你可以将硬件外包到别的地方去。IaaS公司会提供场外服务器，存储和网络硬件，你可以租用。节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。</p>
<p>一些大的IaaS公司包括Amazon, Microsoft, VMWare, Rackspace和Red Hat.不过这些公司又都有自己的专长，比如Amazon和微软给你提供的不只是IaaS，他们还会将其计算能力出租给你来host你的网站。</p>
<h5 id="3、PaaS是什么意思？"><a href="#3、PaaS是什么意思？" class="headerlink" title="3、PaaS是什么意思？"></a>3、PaaS是什么意思？</h5><p>PaaS: Platform-as-a-Service（平台即服务） 第二层就是所谓的PaaS，某些时候也叫做中间件。你公司所有的开发都可以在这一层进行，节省了时间和资源。</p>
<p>PaaS公司在网上提供各种开发和分发应用的解决方案，比如虚拟服务器和操作系统。这节省了你在硬件上的费用，也让分散的工作室之间的合作变得更加容易。网页应用管理，应用设计，应用虚拟主机，存储，安全以及应用开发协作工具等。<br>一些大的PaaS提供者有Google App Engine,Microsoft Azure，Force.com,Heroku，Engine Yard。最近兴起的公司有AppFog, Mendix 和 Standing Cloud</p>
<h5 id="4、SaaS是什么意思？"><a href="#4、SaaS是什么意思？" class="headerlink" title="4、SaaS是什么意思？"></a>4、SaaS是什么意思？</h5><p>SaaS: Software-as-a-Service（软件即服务）<br>第三层也就是所谓SaaS。这一层是和你的生活每天接触的一层，大多是通过网页浏览器来接入。任何一个远程服务器上的应用都可以通过网络来运行，就是SaaS了。<br>你消费的服务完全是从网页如Netflix, MOG, Google Apps, Box.net, Dropbox或者苹果的iCloud那里进入这些分类。尽管这些网页服务是用作商务和娱乐或者两者都有，但这也算是云技术的一部分。<br>一些用作商务的SaaS应用包括Citrix的GoToMeeting，Cisco的WebEx，Salesforce的CRM，ADP，Workday和SuccessFactors。</p>
<p>目前三者的发展情况都不错，三者之间也有着较为密切的联系，其中IaaS是基础层、PaaS是平台层的，而SaaS是软件层的。<br>近年来随着团队协作的深入发展，CaaS、MaaS也不断的进入人们的视野，那CaaS、MaaS又是什么意思呢？</p>
<h5 id="5、CaaS是什么意思？"><a href="#5、CaaS是什么意思？" class="headerlink" title="5、CaaS是什么意思？"></a>5、CaaS是什么意思？</h5><p>CaaS是Communications-as-a-Service缩写，意思是通讯即服务(也可称为协作即服务)。CaaS是将传统电信的能力如消息、语音、视频、会议、通信协同等封装成API(Application Programming Interface，应用软件编程接口)或者SDK(Software Development Kit，软件开发工具包)通过互联网对外开放，提供给第三方（企业、SME、垂直行业、CP/SP以及个人开发者等等）使用，将电信能力真正作为服务对外提供。<br>也被称为云计算的第四种业务形式，目前国内华为已经在着手在建立CaaS的生态圈。 </p>
<h5 id="6、MaaS是什么意思？"><a href="#6、MaaS是什么意思？" class="headerlink" title="6、MaaS是什么意思？"></a>6、MaaS是什么意思？</h5><p>MaaS(Machine as a Service)物联网即服务，这个概念伴随着物联网产生，物联网常见的两种业务形式就是MAI与MaaS，因此MaaS属于物联网业务形式的一种。<br>随着物联网业务量的增加，对数据存储和计算量的需求将带来对”云计算”能力的要求：<br>云计算：从计算中心到数据中心在物联网的初级阶段，PoP即可满足需求<br>在物联网高级阶段，可能出现MVNO/MMO营运商（国外已存在多年），需要虚拟化云计算技术，SOA等技术的结合实现物联网的泛在服务： TaaS （everyTHING As A Service) 。</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Cloud</tag>
        <tag>Xaas</tag>
      </tags>
  </entry>
  <entry>
    <title>Ibatis相关</title>
    <url>/2018/01/01/Ibatis%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h4 id="1、禁用翻译"><a href="#1、禁用翻译" class="headerlink" title="1、禁用翻译"></a>1、禁用翻译</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">operator like  &#x27;%$operator$%&#x27;</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2、批量处理"><a href="#2、批量处理" class="headerlink" title="2、批量处理"></a>2、批量处理</h4><p><strong>更新</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 批量更新状态已服务 4为已评价5 --&gt;</span><br><span class="line">  &lt;update id=&quot;batchUpdate&quot; parameterClass=&quot;hashMap&quot;&gt;</span><br><span class="line">      update servorder set status=5 where</span><br><span class="line">     orderid in</span><br><span class="line">    &lt;iterate property=&quot;olist&quot; open=&quot;(&quot; close=&quot;)&quot; conjunction=&quot;,&quot; &gt;</span><br><span class="line">        #olist[].orderid#</span><br><span class="line">    &lt;/iterate&gt;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>
<p><strong>插入</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 向orderdetail批量插入odlist --&gt;</span><br><span class="line">  &lt;insert id=&quot;batchInsert&quot; parameterClass=&quot;hashMap&quot;&gt;</span><br><span class="line">      insert into orderdetail(userid,usertype,orderid,createdate,action,remark,score,sid,status)</span><br><span class="line">      values</span><br><span class="line">      &lt;iterate property=&quot;odlist&quot; conjunction=&quot;,&quot;&gt;</span><br><span class="line">          (#odlist[].userid#,#odlist[].usertype#,#odlist[].orderid#,#odlist[].createdate#,#odlist[].action#,#odlist[].remark#,#odlist[].score#,#odlist[].sid#,#odlist[].status#)</span><br><span class="line">      &lt;/iterate&gt;</span><br><span class="line">  &lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iterate </span><br><span class="line">    property=&quot;&quot; /*可选, 从传入的参数集合中使用属性名去获取值,这个必须是一个List类型, 否则会出现OutofRangeException,  通常是参数使用java.util.Map时才使用,如果传入的参数本身是一个java.util.List, 可以不用这个属性.*/ </span><br><span class="line">    conjunction=&quot;&quot; /*可选, iterate可以看作是一个循环,   这个属性指定每一次循环结束后添加的符号,   比如使每次循环是OR的, 则设置这个属性为OR*/ </span><br><span class="line">    open=&quot;&quot; /*可选, 循环的开始符号*/ </span><br><span class="line">    close=&quot;&quot; /*可选, 循环的结束符号*/ </span><br><span class="line">    prepend=&quot;&quot; /*可选, 加在open指定的符号之前的符号*/ </span><br><span class="line">&gt;&lt;/iterate&gt; </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;test_iterate&quot; parameterClass=&quot;java.util.List&quot;&gt; </span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">        selelct * from tb_name where id=123</span><br><span class="line">    ]]&gt; </span><br><span class="line">    &lt;iterate prepend=&quot;prepend&quot; conjunction=&quot;conn&quot; open=&quot;open&quot; colse=&quot;close&quot;&gt; </span><br><span class="line">        /*使用java.util.List作为参数不能设置property属性*/ </span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">            #v[]#</span><br><span class="line">        ]]&gt;</span><br><span class="line">        /*这里的&quot;[]&quot;是必须的, 要不然ibatis会把v直接解析为一个String*/ </span><br><span class="line">    &lt;/iterate&gt; </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;insert id=&quot;batchAddNewActiveCode&quot; parameterClass=&quot;java.util.List&quot;&gt; </span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">        insert into tb_active_code(code, create_user_id, create_time) values</span><br><span class="line">    ]]&gt; </span><br><span class="line">    &lt;iterate conjunction=&quot;,&quot;&gt; </span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">            (#codes[].code#, #codes[].createUserId#, #codes[].createTime#)</span><br><span class="line">        ]]&gt; </span><br><span class="line">    &lt;/iterate&gt; </span><br><span class="line">&lt;/insert&gt; </span><br></pre></td></tr></table></figure>

<h4 id="ibatis的list遍历"><a href="#ibatis的list遍历" class="headerlink" title="ibatis的list遍历"></a>ibatis的list遍历</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;selectWaitersByOrgList&quot; resultClass=&quot;com.chat.domain.zone.Waiter&quot; parameterClass=&quot;java.util.List&quot;&gt; </span><br><span class="line">    SELECT id, pin as userName </span><br><span class="line">    FROM waiter </span><br><span class="line">    WHERE org_id IN  </span><br><span class="line">        &lt;iterate open=&quot;(&quot; close=&quot;)&quot; conjunction=&quot;,&quot;&gt;   </span><br><span class="line">            #list[].id#   </span><br><span class="line">        &lt;/iterate&gt;    </span><br><span class="line">        AND yn = 1 </span><br><span class="line">&lt;/select&gt;  </span><br></pre></td></tr></table></figure>

<p><strong>mybatis返回主键</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;selectKey resultType=&quot;java.lang.String&quot; order=&quot;AFTER&quot; keyProperty=&quot;id&quot;&gt; </span><br><span class="line">    SELECT LAST_INSERT_ID() </span><br><span class="line">&lt;/selectKey&gt;  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ImageMagick之PDF转换成图片（image）</title>
    <url>/2021/04/01/ImageMagick%E4%B9%8BPDF%E8%BD%AC%E6%8D%A2%E6%88%90%E5%9B%BE%E7%89%87%EF%BC%88image%EF%BC%89/</url>
    <content><![CDATA[<h3 id="window报错"><a href="#window报错" class="headerlink" title="window报错"></a>window报错</h3><ul>
<li>错误<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert: FailedToExecuteCommand `&quot;gswin32c.exe&quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &quot;-sDEVICE=pngalpha&quot; -dTextAlphaBits=4 -dGraphicsAlphaBits=4 &quot;-r72x72&quot;  &quot;-sOutputFile=C:/Users/pc/AppData/Local/Temp/magick-93208IyLP_klqfgpM%d&quot; &quot;-fC:/Users/pc/AppData/Local/Temp/magick-93208rnBVeMlSCx90&quot; &quot;-fC:/Users/pc/AppData/Local/Temp/magick-93208pA1SIsPmWqDw&quot;&#x27; (系统找不到指定的文件。</span><br><span class="line">) @ error/delegate.c/ExternalDelegateCommand/460.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>原因<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有安装ghostscript</span><br><span class="line">下载地址：http://ghostscript.com/download/gsdnld.html</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install imagemagick </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>ImageMagick</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB 死锁日志</title>
    <url>/2019/01/01/InnoDB%20%E6%AD%BB%E9%94%81%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h3 id="1-查看死锁日志"><a href="#1-查看死锁日志" class="headerlink" title="1. 查看死锁日志"></a>1. 查看死锁日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 登录MySQL后，执行下面语句：</span><br><span class="line">show engine innodb status \G; </span><br><span class="line"></span><br><span class="line"># 注：若用可视化工具查看，去掉 \G</span><br></pre></td></tr></table></figure>

<h3 id="2-日志分析"><a href="#2-日志分析" class="headerlink" title="2. 日志分析"></a>2. 日志分析</h3><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206100336-Innodb-deathlock.png" alt="Innodb死锁"></p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 环境变量（Linux）</title>
    <url>/2020/10/01/JDK%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%88Linux%EF%BC%89/</url>
    <content><![CDATA[<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h4 id="方式一：设置当前用户环境变量"><a href="#方式一：设置当前用户环境变量" class="headerlink" title="方式一：设置当前用户环境变量:"></a>方式一：设置当前用户环境变量:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在打开的文件的末尾添加</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk7</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出，然后输入下面的命令来使之生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="方式二：设置所有用户环境变量"><a href="#方式二：设置所有用户环境变量" class="headerlink" title="方式二：设置所有用户环境变量"></a>方式二：设置所有用户环境变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"># 在打开的文件的末尾添加</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk7</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<h4 id="方式三：设置系统环境变量"><a href="#方式三：设置系统环境变量" class="headerlink" title="方式三：设置系统环境变量"></a>方式三：设置系统环境变量</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br><span class="line"></span><br><span class="line"># 在打开的文件的末尾添加</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk7</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中正则匹配的3个方法</title>
    <url>/2018/06/02/JS%E4%B8%AD%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E7%9A%843%E4%B8%AA%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="JS中正则匹配的3个方法：match-exec-test"><a href="#JS中正则匹配的3个方法：match-exec-test" class="headerlink" title="JS中正则匹配的3个方法：match,exec,test"></a>JS中正则匹配的3个方法：match,exec,test</h3><p>javascript中正则匹配有3个方法，match,exec,test。这些方法都跟字符串和RegExp对象有关，但使用场景不一样，容易混淆。</p>
<blockquote>
<p>match是字符串的一个方法，接收一个RegExp对象做为参数，其他的是RegExp对象的方法，接收一个字符串参数。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var str = &#x27;abcdef12ab34cd56ef&#x27;;</span><br><span class="line">  var patt = new RegExp(&#x27;ab&#x27;); //注意是非全局匹配</span><br><span class="line">  var ret_test = patt.test(str);</span><br><span class="line">  alert(ret_test);</span><br><span class="line"></span><br><span class="line">  var ret_match = str.match(patt);</span><br><span class="line">  alert(ret_match);</span><br><span class="line"></span><br><span class="line">  var ret_exec = patt.exec(str);</span><br><span class="line">  alert(ret_exec);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ol>
<li><p>regExp.test(string)<br>该方法最简单，在string中找到匹配regExp的字符串则返回true，没找到匹配的字符串则返回false</p>
</li>
<li><p>regExp.exec(string)<br>该方法稍微复杂些。当regExp没有全局标志时，其返回值为字符串数组：数组的第0号元素为刚匹配到的字符串，如果regExp有子表达式，则数组第1号元素为regExp的第一个子表达式，第2号元素为regExp的第二个字表达式…以此类推。在上例中如果<br>patt = new RegExp(‘f(\d)(\d)’,’g’);则 ret_exec 将为字符串数组：[‘f12’,’1’,’2’]。<br>在设置g属性后，虽然匹配结果不受g的影响，返回结果仍然是一个数组（第一个值是第一个匹配到的字符串，以后的为分组匹配内容），但是会改变index和lastIndex等的值，将该对象的匹配的开始位置设置到紧接这匹配子串的字符位置，当第二次调用exec时，将从lastIndex所指示的字符位置开始检索。同样match方法在设置了g属性后，也会改变index和lastIndex的值，但是是一次性的。无法像exec那样能逐过程累积，因此无法累积获取下一次检索的位置。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var patt = new RegExp(&#x27;ab&#x27;, &#x27;g&#x27;);</span><br><span class="line">  var str = &#x27;abcdef12ab34cd56ef&#x27;;</span><br><span class="line">  var ret;</span><br><span class="line">  while((ret = patt.exec(str))!=null) &#123; </span><br><span class="line">    document.write(ret+&quot;&lt;/br&gt;&quot;);</span><br><span class="line">    document.write(&quot;ret.input=&quot;+ret.input+&quot;&lt;/br&gt;&quot;);</span><br><span class="line">    document.write(&quot;ret.index=&quot;+ret.index+&quot;&lt;/br&gt;&quot;);</span><br><span class="line">    document.write(&quot;RegExp.lastIndex =&quot;+RegExp.lastIndex +&quot;&lt;/br&gt;&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行：<br>ab<br>ret.input=abcdef12ab34cd56ef<br>ret.index=0<br>RegExp.lastIndex =2<br>ab<br>ret.input=abcdef12ab34cd56ef<br>ret.index=8<br>RegExp.lastIndex =10</p>
</blockquote>
<h3 id="exec方法返回的不是标准的数组，应该算是一个类数组，因为它还有2个属性：input是输入的字符串，index是当前匹配的字符串第一个字符在input中的位置。"><a href="#exec方法返回的不是标准的数组，应该算是一个类数组，因为它还有2个属性：input是输入的字符串，index是当前匹配的字符串第一个字符在input中的位置。" class="headerlink" title="exec方法返回的不是标准的数组，应该算是一个类数组，因为它还有2个属性：input是输入的字符串，index是当前匹配的字符串第一个字符在input中的位置。"></a>exec方法返回的不是标准的数组，应该算是一个类数组，因为它还有2个属性：input是输入的字符串，index是当前匹配的字符串第一个字符在input中的位置。</h3><ol start="3">
<li><p>string.match(regExp)</p>
<p>该方法比exec简单一些，因为它不用考虑regExp的lastIndex属性。同样，也需要分两种情况（全局匹配与非全局匹配）</p>
<p>当regExp没有全局标志时，返回值与调用exec一样，返回一个数组，数组的第0号元素为刚匹配到的字符串，如果regExp有子表达式，则数组第1号元素为regExp的第一个子表达式，第2号元素为regExp的第二个字表达式…以此类推。主意该数组同时还有2个属性：input是输入的字符串string，index是当前匹配的字符串第一个字符在input中的位置。</p>
<p>当regExp有全局标志(g选项)时，很简单，也符合我们的理解：返回所有匹配到的字符串组成的数组。这是标准数组，没有input属性，也没有index属性。返回值数组中除了匹配到的字符串没有任何其他信息。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var src = &quot;The rain in Spain falls mainly in the plain.&quot;;</span><br><span class="line">  var re = /\w+/g; //有g属性。 </span><br><span class="line">  var i = 0;</span><br><span class="line">  while (i++&lt;10)&#123;</span><br><span class="line">   arr = src.match(re);</span><br><span class="line">   document.write(RegExp.index + &quot;-&quot; + RegExp.lastIndex + &quot;\t&quot; + arr + &quot;&lt;br/&gt;&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM原理讲解和调优</title>
    <url>/2018/01/01/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2 id="JVM原理讲解和调优"><a href="#JVM原理讲解和调优" class="headerlink" title="JVM原理讲解和调优"></a>JVM原理讲解和调优</h2><p>原文：<a href="https://blog.csdn.net/hjxgood/article/details/53896229">https://blog.csdn.net/hjxgood/article/details/53896229</a></p>
<h3 id="一、什么是JVM"><a href="#一、什么是JVM" class="headerlink" title="一、什么是JVM"></a>一、什么是JVM</h3><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p>
<p>Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够”一次编译，到处运行”的原因。</p>
<p>从Java平台的逻辑结构上来看，我们可以从下图来了解JVM：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-1.gif"></p>
<p>从上图能清晰看到Java平台包含的各个逻辑模块，也能了解到JDK与JRE的区别，对于JVM自身的物理结构，我们可以从下图鸟瞰一下：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-2.gif"></p>
<h3 id="二、JAVA代码编译和执行过程"><a href="#二、JAVA代码编译和执行过程" class="headerlink" title="二、JAVA代码编译和执行过程"></a>二、JAVA代码编译和执行过程</h3><p>Java代码编译是由Java源码编译器来完成，流程图如下所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-3.gif"></p>
<p>Java字节码的执行是由JVM执行引擎来完成，流程图如下所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-4.gif"></p>
<p>Java代码编译和执行的整个过程包含了以下三个重要的机制：</p>
<ul>
<li>Java源码编译机制</li>
<li>类加载机制</li>
<li>类执行机制</li>
</ul>
<h4 id="Java源码编译机制"><a href="#Java源码编译机制" class="headerlink" title="Java源码编译机制"></a>Java源码编译机制</h4><p>Java 源码编译由以下三个过程组成：</p>
<ul>
<li>分析和输入到符号表</li>
<li>注解处理</li>
<li>语义分析和生成class文件</li>
</ul>
<p>流程图如下所示：<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-5.gif"></p>
<p>最后生成的class文件由以下部分组成：</p>
<ul>
<li>结构信息。包括class文件格式版本号及各部分的数量与大小的信息</li>
<li>元数据。对应于Java源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池</li>
<li>方法信息。对应Java源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息</li>
</ul>
<h4 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h4><p>JVM的类加载是通过ClassLoader及其子类来完成的，类的层次关系和加载顺序可以由下图来描述：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-6.gif"></p>
<ul>
<li>1）Bootstrap ClassLoader<br>负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类</li>
<li>2）Extension ClassLoader<br>负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包</li>
<li>3）App ClassLoader<br>负责记载classpath中指定的jar包及目录中class</li>
<li>4）Custom ClassLoader<br>属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</li>
</ul>
<h4 id="类执行机制"><a href="#类执行机制" class="headerlink" title="类执行机制"></a>类执行机制</h4><p>JVM是基于栈的体系结构来执行class字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。栈的结构如下图所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-7.gif"></p>
<h3 id="三、JVM内存管理和垃圾回收"><a href="#三、JVM内存管理和垃圾回收" class="headerlink" title="三、JVM内存管理和垃圾回收"></a>三、JVM内存管理和垃圾回收</h3><h4 id="JVM内存组成结构"><a href="#JVM内存组成结构" class="headerlink" title="JVM内存组成结构"></a>JVM内存组成结构</h4><p>JVM栈由堆、栈、本地方法栈、方法区等部分组成，结构图如下所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-8.gif"></p>
<h5 id="1）堆"><a href="#1）堆" class="headerlink" title="1）堆"></a>1）堆</h5><p>所有通过new创建的对象的内存都在堆中分配，堆的大小可以通过-Xmx和-Xms来控制。堆被划分为新生代和旧生代，新生代又被进一步划分为Eden和Survivor区，最后Survivor由From Space和To Space组成，结构图如下所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-9.gif"></p>
<ul>
<li>新生代。新建的对象都是用新生代分配内存，Eden空间不足的时候，会把存活的对象转移到Survivor中，新生代大小可以由-Xmn来控制，也可以用-XX:SurvivorRatio来控制Eden和Survivor的比例</li>
<li>旧生代。用于存放新生代中经过多次垃圾回收仍然存活的对象</li>
<li>持久带（Permanent Space）实现方法区，主要存放所有已加载的类信息，方法信息，常量池等等。可通过-XX:PermSize和-XX:MaxPermSize来指定持久带初始化值和最大值。Permanent Space并不等同于方法区，只不过是Hotspot JVM用Permanent Space来实现方法区而已，有些虚拟机没有Permanent Space而用其他机制来实现方法区。</li>
</ul>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-14.jpeg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xmx:最大堆内存,如：-Xmx512m</span><br><span class="line">-Xms:初始时堆内存,如：-Xms256m</span><br><span class="line">-XX:MaxNewSize:最大年轻区内存</span><br><span class="line">-XX:NewSize:初始时年轻区内存.通常为 Xmx 的 1/3 或 1/4。新生代 = Eden + 2 个 Survivor 空间。实际可用空间为 = Eden + 1 个 Survivor，即 90%</span><br><span class="line">-XX:MaxPermSize:最大持久带内存</span><br><span class="line">-XX:PermSize:初始时持久带内存</span><br><span class="line">-XX:+PrintGCDetails。打印 GC 信息</span><br><span class="line">-XX:NewRatio 新生代与老年代的比例，如 –XX:NewRatio=2，则新生代占整个堆空间的1/3，老年代占2/3</span><br><span class="line">-XX:SurvivorRatio 新生代中 Eden 与 Survivor 的比值。默认值为 8。即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10</span><br></pre></td></tr></table></figure>

<h5 id="2）栈"><a href="#2）栈" class="headerlink" title="2）栈"></a>2）栈</h5><p>每个线程执行每个方法的时候都会在栈中申请一个栈帧，每个栈帧包括局部变量区和操作数栈，用于存放此次方法调用过程中的临时变量、参数和中间结果。<br>-xss:设置每个线程的堆栈大小. JDK1.5+ 每个线程堆栈大小为 1M，一般来说如果栈不是很深的话， 1M 是绝对够用了的。</p>
<h5 id="3）本地方法栈"><a href="#3）本地方法栈" class="headerlink" title="3）本地方法栈"></a>3）本地方法栈</h5><p>用于支持native方法的执行，存储了每个native方法调用的状态</p>
<h5 id="4）方法区"><a href="#4）方法区" class="headerlink" title="4）方法区"></a>4）方法区</h5><p>存放了要加载的类信息、静态变量、final类型的常量、属性和方法信息。JVM用持久代（Permanet Generation）来存放方法区，可通过-XX:PermSize和-XX:MaxPermSize来指定最小值和最大值</p>
<h4 id="垃圾回收按照基本回收策略分"><a href="#垃圾回收按照基本回收策略分" class="headerlink" title="垃圾回收按照基本回收策略分"></a>垃圾回收按照基本回收策略分</h4><p>引用计数（Reference Counting）:</p>
<p>比较古老的回收算法。原理是此对象有一个引用，即增加一个计数，删除一个引用则减少一个计数。垃圾回收时，只用收集计数为0的对象。此算法最致命的是无法处理循环引用的问题。</p>
<p>标记-清除（Mark-Sweep）:</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-10.jpeg"></p>
<p>此算法执行分两阶段。第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。此算法需要暂停整个应用，同时，会产生内存碎片。</p>
<p>复制（Copying）:</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-11.jpeg"></p>
<p>此算法把内存空间划为两个相等的区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把正在使用中的对象复制到另外一个区域中。算法每次只处理正在使用中的对象，因此复制成本比较小，同时复制过去以后还能进行相应的内存整理，不会出现”碎片”问题。当然，此算法的缺点也是很明显的，就是需要两倍内存空间。</p>
<p>标记-整理（Mark-Compact）:</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-12.jpeg"></p>
<p>此算法结合了”标记-清除”和”复制”两个算法的优点。也是分两阶段，第一阶段从根节点开始标记所有被引用对象，第二阶段遍历整个堆，把清除未标记对象并且把存活对象”压缩”到堆的其中一块，按顺序排放。此算法避免了”标记-清除”的碎片问题，同时也避免了”复制”算法的空间问题。</p>
<h3 id="JVM分别对新生代和旧生代采用不同的垃圾回收机制"><a href="#JVM分别对新生代和旧生代采用不同的垃圾回收机制" class="headerlink" title="JVM分别对新生代和旧生代采用不同的垃圾回收机制"></a>JVM分别对新生代和旧生代采用不同的垃圾回收机制</h3><h4 id="新生代的GC："><a href="#新生代的GC：" class="headerlink" title="新生代的GC："></a>新生代的GC：</h4><p>新生代通常存活时间较短，因此基于Copying算法来进行回收，所谓Copying算法就是扫描出存活的对象，并复制到一块新的完全未使用的空间中，对应于新生代，就是在Eden和From Space或To Space之间copy。新生代采用空闲指针的方式来控制GC触发，指针保持最后一个分配的对象在新生代区间的位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。当连续分配对象时，对象会逐渐从eden到survivor，最后到旧生代。<br>在执行机制上JVM提供了串行GC（Serial GC）、并行回收GC（Parallel Scavenge）和并行GC（ParNew）</p>
<h5 id="1）串行GC"><a href="#1）串行GC" class="headerlink" title="1）串行GC"></a>1）串行GC</h5><p>在整个扫描和复制过程采用单线程的方式来进行，适用于单CPU、新生代空间较小及对暂停时间要求不是非常高的应用上，是client级别默认的GC方式，可以通过-XX:+UseSerialGC来强制指定</p>
<h5 id="2）并行回收GC"><a href="#2）并行回收GC" class="headerlink" title="2）并行回收GC"></a>2）并行回收GC</h5><p>在整个扫描和复制过程采用多线程的方式来进行，适用于多CPU、对暂停时间要求较短的应用上，是server级别默认采用的GC方式，可用-XX:+UseParallelGC来强制指定，用-XX:ParallelGCThreads=4来指定线程数</p>
<h5 id="3）并行GC"><a href="#3）并行GC" class="headerlink" title="3）并行GC"></a>3）并行GC</h5><p>与旧生代的并发GC配合使用</p>
<h4 id="旧生代的GC："><a href="#旧生代的GC：" class="headerlink" title="旧生代的GC："></a>旧生代的GC：</h4><p>旧生代与新生代不同，对象存活的时间比较长，比较稳定，因此采用标记（Mark）算法来进行回收，所谓标记就是扫描出存活的对象，然后再进行回收未被标记的对象，回收后对用空出的空间要么进行合并，要么标记出来便于下次进行分配，总之就是要减少内存碎片带来的效率损耗。在执行机制上JVM提供了串行GC（Serial MSC）、并行GC（parallel MSC）和并发GC（CMS），具体算法细节还有待进一步深入研究。</p>
<p>以上各种GC机制是需要组合使用的，指定方式由下表所示：</p>
<table>
<thead>
<tr>
<th>指定方式</th>
<th>新生代GC方式</th>
<th>旧生代GC方式</th>
</tr>
</thead>
<tbody><tr>
<td>-XX:+UseSerialGC</td>
<td>串行GC</td>
<td>串行GC</td>
</tr>
<tr>
<td>-XX:+UseParallelGC</td>
<td>并行回收GC</td>
<td>并行GC</td>
</tr>
<tr>
<td>-XX:+UseConeMarkSweepGC</td>
<td>并行GC</td>
<td>并发GC</td>
</tr>
<tr>
<td>-XX:+UseParNewGC</td>
<td>并行GC</td>
<td>串行GC</td>
</tr>
<tr>
<td>-XX:+UseParallelOldGC</td>
<td>并行回收GC</td>
<td>并行GC</td>
</tr>
<tr>
<td>-XX:+ UseConeMarkSweepGC-XX:+UseParNewGC</td>
<td>串行GC</td>
<td>并发GC</td>
</tr>
<tr>
<td>不支持的组合</td>
<td>1、-XX:+UseParNewGC -XX:+UseParallelOldGC2、-XX:+UseParNewGC  -XX:+UseSerialGC</td>
<td></td>
</tr>
</tbody></table>
<h3 id="四、JVM内存调优"><a href="#四、JVM内存调优" class="headerlink" title="四、JVM内存调优"></a>四、JVM内存调优</h3><p>首先需要注意的是在对JVM内存调优的时候不能只看操作系统级别Java进程所占用的内存，这个数值不能准确的反应堆内存的真实占用情况，因为GC过后这个值是不会变化的，因此内存调优的时候要更多地使用JDK提供的内存查看工具，比如JConsole和Java VisualVM。</p>
<p>对JVM内存的系统级的调优主要的目的是减少GC的频率和Full GC的次数，过多的GC和Full GC是会占用很多的系统资源（主要是CPU），影响系统的吞吐量。特别要关注Full GC，因为它会对整个堆进行整理，导致Full GC一般由于以下几种情况：</p>
<h4 id="旧生代空间不足"><a href="#旧生代空间不足" class="headerlink" title="旧生代空间不足"></a>旧生代空间不足</h4><p>调优时尽量让对象在新生代GC时被回收、让对象在新生代多存活一段时间和不要创建过大的对象及数组避免直接在旧生代创建对象 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pemanet Generation空间不足</span><br><span class="line">    增大Perm Gen空间，避免太多静态对象 </span><br><span class="line">    统计得到的GC后晋升到旧生代的平均大小大于旧生代剩余空间</span><br><span class="line">    控制好新生代和旧生代的比例 </span><br><span class="line">System.gc()被显示调用</span><br><span class="line">    垃圾回收不要手动触发，尽量依靠JVM自身的机制 </span><br><span class="line">    调优手段主要是通过控制堆内存的各个部分的比例和GC策略来实现，下面来看看各部分比例不良设置会导致什么后果</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）新生代设置过小</span><br><span class="line">    一是新生代GC次数非常频繁，增大系统消耗；二是导致大对象直接进入旧生代，占据了旧生代剩余空间，诱发Full GC</span><br><span class="line">2）新生代设置过大</span><br><span class="line">    一是新生代设置过大会导致旧生代过小（堆总量一定），从而诱发Full GC；二是新生代GC耗时大幅度增加</span><br><span class="line">    一般说来新生代占整个堆1/3比较合适</span><br><span class="line">3）Survivor设置过小</span><br><span class="line">    导致对象从eden直接到达旧生代，降低了在新生代的存活时间</span><br><span class="line">4）Survivor设置过大</span><br><span class="line">    导致eden过小，增加了GC频率</span><br><span class="line">    另外，通过-XX:MaxTenuringThreshold=n来控制新生代存活时间，尽量让对象在新生代被回收</span><br><span class="line">    由内存管理和垃圾回收可知新生代和旧生代都有多种GC策略和组合搭配，选择这些策略对于我们这些开发人员是个难题，JVM提供两种较为简单的GC策略的设置方式</span><br><span class="line">1）吞吐量优先</span><br><span class="line">    JVM以吞吐量为指标，自行选择相应的GC策略及控制新生代与旧生代的大小比例，来达到吞吐量指标。这个值可由-XX:GCTimeRatio=n来设置</span><br><span class="line">2）暂停时间优先</span><br><span class="line">    JVM以暂停时间为指标，自行选择相应的GC策略及控制新生代与旧生代的大小比例，尽量保证每次GC造成的应用停止时间都在指定的数值范围内完成。这个值可由-XX:MaxGCPauseRatio=n来设置</span><br></pre></td></tr></table></figure>

<p>最后汇总一下JVM常见配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">堆设置</span><br><span class="line">-Xms:初始堆大小</span><br><span class="line">-Xmx:最大堆大小</span><br><span class="line">-XX:NewSize=n:设置年轻代大小</span><br><span class="line">-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4</span><br><span class="line">-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5</span><br><span class="line">-XX:MaxPermSize=n:设置持久代大小</span><br><span class="line">收集器设置</span><br><span class="line">-XX:+UseSerialGC:设置串行收集器</span><br><span class="line">-XX:+UseParallelGC:设置并行收集器</span><br><span class="line">-XX:+UseParalledlOldGC:设置并行年老代收集器</span><br><span class="line">-XX:+UseConcMarkSweepGC:设置并发收集器</span><br><span class="line">垃圾回收统计信息</span><br><span class="line">-XX:+PrintGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-Xloggc:filename</span><br><span class="line">并行收集器设置</span><br><span class="line">-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。</span><br><span class="line">-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间</span><br><span class="line">-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</span><br><span class="line">并发收集器设置</span><br><span class="line">-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</span><br><span class="line">-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</span><br></pre></td></tr></table></figure>

<p>++++++++++++++++++++++++++++++++另外一篇+++++++++++++++++++++++++++++++++++++</p>
<p>Jvm与c++不同，它实现了内存的自动分配和回收，这种机制使程序员无需关注内存的使用和回收，正是这种情况往往造成程序与jvm内存的分配和回收机制不匹配，从而出现各种问题。比如程序代码量很大，虚拟机永久区内存不足，会抛出outofmemoryerror错误，代码中全局大对象很多导致垃圾回收时间变长，应用出现卡顿现象等。当这二者不匹配时，有时候可能是代码编写不合理造成的，例如上面第二个现象。也有时候需要我们调节jvm各个参数，优化内存的分配和回收，使jvm满足我们程序的要求，比如程序代码量很大，我们要调大永久区，才不会抛出outofmemoryerror。总之，无论哪种现象都需要我们充分理解jvm的内存机制的基础上，才能解决问题，上一篇讲了jvm的垃圾回收机制，这一篇我们要充分理解下jvm的内存区域和jvm调优时用到的各个参数。</p>
<p>根据jvm规范的规定，jvm的内存区域包括：程序计数器、栈、堆、方法区、运行时常量池。这几块区域可以分为三部分：线程堆栈（程序计数器、栈）、堆、非堆（包括方法区、运行时常量池）。</p>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>线程堆栈是表示jvm给每个线程分配的内存大小，jdk5.0以后每个线程分配的内存大小是1    M，这个值的调节是通过-Xss设置。在线程中，每个方法使用和结束就意味着一个栈帧的入栈和出栈，若方法中使用较大深度的递归或者较大循环时，就会导致大量栈帧入栈，内存空间不足，抛出stackoverflowerror错误。因此，若jvm抛出stackoverflowerror错误时，就需要调节-xss参数，扩大栈的空间，或者检查代码，查看是否有较大（或无限）深度递归或循环，如果是代码有问题，修改代码，若代码无问题，需通过-Xss参数扩大栈空间。在jvm默认参数下，栈深度在大多数情况下达到1000到2000完全没有问题，对于正常的方法调用，这个深度是完全够用的。若每个栈的空间变大，在操作系统物理空间内存不变的情况下的，可生成的线程数量就会变少。在32位操作系统下，每个进程可分配的内存大概是2GB，64位操作系统无限制，但是物理内存大小是固定的，是有限制的。因此，当在多线程应用中，每增加一个线程就需要多占用物理内存1M，若物理内存或者进程分配的内存不足时，这是jvm生成新的线程时就会产生outofmemoryerror错误。因为堆或非堆内存不足也会抛出outofmemoryerror错误，因此当出现这种问题，要具体分析是哪部分空间不足，若物理内存（或进程分配的内存）已占满，堆内存和非堆内存空间都在正常的使用范围内，那么问题就出现在堆栈空间不足，要么增加物理内存，要么减少堆空间（这种方式可能不合理）。所以这一部分，如果jvm没有出现错误，保持默认配置即可。</p>
<h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>大家更关注的往往是堆内存的分配和回收，这部分是jvm需要优化的主战场，垃圾回收主要是针对堆内存，jvm垃圾回收的频率和时间是程序运行好坏的重要指标，因为垃圾回收要终止其它正常的工作线程，导致程序停顿。影响Jvm垃圾回收的频率和时间因素，除了垃圾收集器自身的实现机制外，堆内存的大小或各带（堆分代设置）比例设置等也是重要的因素。调节堆内存的参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms 1024M  //表示堆内存初始化大小，默认是物理内存1/64;</span><br><span class="line">-Xmx 1024M  //表示堆内存最大值，默认是物理内存1/4;</span><br><span class="line">-Xmn 512M  //表示堆中新生代大小；</span><br><span class="line">-XX:NewRadio  //表示新生代与老年代的比例，-XX:NewRadio =2表示比例为1:2；</span><br><span class="line">-XX:SurvivorRadio   //表示新生代中eden区与survivor区的比例，默认比例为8；</span><br></pre></td></tr></table></figure>
<p>Jvm中堆内存分为新生代和老年代，新生代又分为eden区和两个survivor区，其中eden区和survivor区默认比例是8:1。新生代中垃圾回收采用复制算法，每次对eden区和其中一个survivor区执行垃圾回收，然后将存活的对象复制到另一个survivor区中，因此，新生代只能使用90%的空间。一般来说，对象首先进入新生代的eden区，经过若干次（默认是15次）回收后，若还存活，则进入老年代，这个回收次数相关的参数设置是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:MaxTenuringThreshold  //表示经过多少次回收，对象进入老年代，默认是15；</span><br></pre></td></tr></table></figure>

<p>对于这个参数，对象并不是都必须经过15次回收后进入老年代，若survivor区中的经过相同回收次数的对象占survivor空间的一半以上时，大于或等于这个次数的对象就可以直接进入老年代。但是，对于一些大对象可以设置直接进入老年代，以避免对新生代中eden区和两个survivor区之间发生大量的内存复制，因为大对象需要足够大的空间，导致新生代空间还相对充足时就提前执行垃圾回收来获取足够的连续空间来安置大对象。Jvm提供了一个参数用来设置大对象直接进入老年代：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:PretenureSizeThreshold  //直接进入老年代对象的值的阈值，-XX:PretenureSizeThreshold=3M,表示大于3M的对象可以直接 进入老年代</span><br></pre></td></tr></table></figure>
<p>以上是jvm中堆内存设置相关的部分参数，在实际的应用中有些设置可以参考很多的经验总结，比如xms与xmx值设置相同，性能才能最好，因为这样可以避免每次垃圾回收进行内存重新分配，使更多的资源用在具体的应用中。然而也有些设置需要参考具体应用，比如eden区、survivor区和老年代等各空间的大小和比例，是否能满足当前的应用，都需要根据具体应用调整各个区内存的大小和比例。现今，硬件可以说已经不是阻碍程序提高性能的瓶颈了，尤其是内存，目前使用的操作系统基本上都是64位了，16G、32G的内存条已经很普遍了。若堆中某区因空间不足而出现outofmemoryerror错误或者程序反应很慢，我们完全可以增大相应的内存来解决。当然一味的增加内存，使jvm不会抛出outofmemroryerror错误，但是有可能会造成一次需要回收的对象增多，回收时间变长，程序出现明显卡顿，从而影响应用的使用，也是不合理的。因此，我们在对jvm堆内存调优时，在保证内存足够用的同时，还要关注的就是各带之间的比例关系，eden区和survivor区之间的默认比例是8:1，一般按照这个比例设置即可。需要关注的是新生代与老年代之间内存大小比例，新生代不能太小否则会频繁执行minor gc，老年代也不能太小，否则新生代中的对象无法进入老年代，只好频繁执行full gc，总之这个比例，查看了很多资料也没有确定的值，还是要根据实际的应用来确定。</p>
<h3 id="非堆内存"><a href="#非堆内存" class="headerlink" title="非堆内存"></a>非堆内存</h3><h4 id="code-cache"><a href="#code-cache" class="headerlink" title="code cache"></a>code cache</h4><p>对于非堆区，jdk7及以前版本包括：code cache和perm gen，jdk8中包括code cache、metaspace和compressed class space。它们有共同的部分就是codecache，首先理解下code cache。在jvm调优时一般不太关注code cache，很少因为它的空间不足造成性能下降，理解code cache，先理解java编译器。对于java编译器，把java文件编译成为class文件，我们称为前端编译，对应的，将class文件中的字节码编译称为机器码称为后端编译，最初，hotspot虚拟机运行时，是对字节码逐条解析，这种方式比较慢，后台hotspot引入了jit编译器，对于那些被频繁使用的方法，即热点代码，jit编译器将这些热点代码编译成本地机器码，保存jvm内存中，虚拟机运行时需要调用这些方法时，直接从内存中获取，这样效率就会更高。上面所讲的被保存的机器码就是code cache。 code cache大小在client模式是32M，在server模式是48M，但是，这个数值在jdk7或以前版本中是这么规定的，在jdk8中好像不是这么规定的，通过jconsole查看code cache大小：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/JVM%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3%E5%92%8C%E8%B0%83%E4%BC%98-13.jpeg"></p>
<p>Code cache的大小并不是48M。当code cache占满时，会停止方法的编译，进而影响性能。</p>
<h3 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h3><p>对于perm gen，也就是被称为永久代，在jdk8中已经移除了永久带，但在jdk7中是存在的，若应用还在使用jdk7时，对永久带的调优参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:PermSize=512M  //永久区初始大小</span><br><span class="line">-XX:MaxPermSize=512M  //永久区最大值</span><br></pre></td></tr></table></figure>
<p>实际应用中，也是将permsize与maxpermsize设置相同值，性能达到最好。知道永久区调节参数后，我们要明白永久区的作用，jvm运行时哪些内容存储在永久区中，这样永久区出现内存溢出时，才能明确地调整。在Hotspot中，一般把方法区称为永久代，方法区中存放两部分内容，一个是类信息（类版本、字段、方法、接口等描述信息），另一个就是常量池，包括字面量（字符串、被final修饰的常量值等）和符号引用。可知，永久区主要存储的就是class文件相关的内容，所以若应用的工程很大，代码量很大，那么永久区被占的空间就很大。永久区内存不足时，jvm会抛出outofmemoryerror:permgenspace错误。需要注意的是在jdk7中已将将字符串常量移动到堆中，不会因字符串常量很大，使永久区不足。永久区中的垃圾回收主要针对两种类型：被废弃的常量和已卸载的类，被废弃的常量就是没有任何地方引用这个字面量了，这个比较简单。已卸载的类相对来说就很复杂了，一个类被称为已卸载的类须满足三个条件：1.该类所有实例已经被回收；2.加载该类的classloader已经被回收；3.该类对应的java.lang.Class对象没有在任何地方被引用。所以，永久区垃圾回收比较困难，所以jvm在对永久区垃圾回收采用的策略是永久区被使用空间达到maxPermSize时，执行full gc，只要永久区在正确的大小值时不执行垃圾回收。总之，永久代、老年代和新生代都称为jvm内存，它们的内存分配和回收受jvm控制，除非当内存不足时，需要向操作系统扩张空间时。</p>
<h3 id="metaspace区"><a href="#metaspace区" class="headerlink" title="metaspace区"></a>metaspace区</h3><p>在jdk8中已经不存在永久区了，因此关于永久区调优的参数已经不再适用了，即使用了，jvm会报警但不会出错。代替永久区的是metaspace。原先在永久代中的常量池中的字面量移动到堆中，类信息和符号引用被保留在现在被称为metaspace的区域中，这样做的好处，我想更有利于jvm的内存分配和回收，常量的回收条件毕竟比类的回收更简单。Metaspace内存调节参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:MetaspaceSize=100M  //表示metaspace使用空间达到这个值时，执行垃圾回收</span><br><span class="line">-XX:MaxMetaspaceSize=100M  //metaspace的最大值</span><br></pre></td></tr></table></figure>
<p>默认情况下，metaspace是没有最大值的，因为metaspace不是jvm内存的一部分，它是属于本地内存，内存的分配由操作系统负责。一般来说，metaspace不需要设置相关参数，若这个区域内存溢出，说明物理内存已经不足，需要增加内存卡了。</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>Jvm还有一部分内存称为直接内存（direct memory），这部分内存不是jvm规范的内存区域，也不在堆内存中。这一部分内存主要是为nio（new input/output）操作准备的，使用native函数分配堆外内存，然后通过存储在java堆中的directbytebuffer对象作为对这块内存的引用进行操作。直接内存不属于堆内存，这部分若内存不足也会抛出outofmemoryerror:direct buffer memory错误，直接内存通过下面参数调整大小：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:MaxDirectMemorySize  //调整直接内存大小</span><br></pre></td></tr></table></figure>

<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p>Jvm调优无非就是两点，一是jvm不能抛出异常，比如stackoverflowerror、outofmemoryerror等，二是jvm性能要满足实际的应用，不能出现卡段或长时间不反应等现象，尤其是高并发时。上面讲的内容已经解决了第一点的问题，对于第二点的问题，是关于jvm内存各区之间的内存比例设置和各区垃圾收集器的使用。各区之间的内存比例需要根据实际的情况具体分析，没有一个放之四海皆准的比例参数供我们选择。另一篇文章讲了各个垃圾收集器的原理，本文再次对垃圾收集器进行归纳总结下，hotspot虚拟机使用的垃圾收集器可分为三种类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">串行收集器，单线程收集器，收集器工作需要停止工作线程；</span><br><span class="line">并行收集器，多线程收集器，收集器工作需要停止工作线程；</span><br><span class="line">并发收集器，多线程收集器，在收集器工作的部分阶段需要停止工作线程；</span><br></pre></td></tr></table></figure>
<p>在hotspot虚拟机中垃圾收集器按照这三种虚拟机类型划分：</p>
<ul>
<li>串行收集器：serial收集器（用于client模式，基本上被弃用），serial old收集器（用于老年代，采用标记整理算法，也被称为ps marksweep收集器，若老年代采用此收集器，那么新生代只能使用parallel scavenge收集器）。</li>
<li>并行收集器：parnew收集器（用于新生代，采用复制算法，若老年代使用cms收集器那么新生代只能使用这个收集器）、parallelscavenge收集器（用于新生代，采用复制算法，与serialold收集器配合使用）、parallel old收集器（parallel scavenge收集器用于老年代的版本，采用标记-整理算法）。</li>
<li>并发收集器：cms收集器（用于老年代，标记清除算法）。</li>
</ul>
<p>垃圾收集器调节相关参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:+UseSerialGC:在新生代和老年代使用串行收集器</span><br><span class="line">-XX:+UseParNewGC:在新生代使用并行收集器</span><br><span class="line">-XX:+UseParallelOldGC:老年代使用并行回收收集器</span><br><span class="line">-XX:ParallelGCThreads:设置用于垃圾回收的线程数。通常情况下可以和CPU数量相等，但在CPU数量较多的情况下，设置相对较小的数值也是合理的。</span><br><span class="line">-XX:MaxGCPauseMillis:设置最大垃圾收集停顿时间。他的值是一个大于0的整数。收集器在工作时，会调整Java堆大小或者其他参数，尽可能把停顿时间控制在MaxGCPauseMillis以内。</span><br><span class="line">-XX:GCTimeRatio:设置吞吐量大小。它是0-100的整数。假设GCTimeRatio的值为n，那么系统将花费不超过1/(1+n)的时间用于垃圾收集。</span><br><span class="line">-XX:+UseAdaptiveSizePolicy:打开自适应GC策略。在这种模式下，新生代的大小、eden和survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</span><br><span class="line">-XX:+UseConcMarkSweepGC:新生代使用并行收集器，老年代使用CMS并发收集器</span><br><span class="line">-XX:ParallelCMSThreads:设定CMS的线程数量</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction:设置CMS收集器在老年代空间被使用多少后触发，默认为68%</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection:设置CMS收集器完成垃圾收集后是否要进行一次内存碎片的整理</span><br><span class="line">-XX:CMSFullGCsBeforeCompaction:设定进行多少次CMS垃圾回收后，进行一次内存压缩</span><br><span class="line">-XX:+CMSClassUnloadingEnabled:允许对类元数据区进行回收</span><br><span class="line">-XX:CMSInitiatingPermOccupancyFraction:当永久区占用率达到这一百分比时，启动CMS回收(前提是-XX:+CMSClassUnloadingEnabled激活了)</span><br><span class="line">-XX:UseCMSInitiatingOccupancyOnlyn:表示只在到达阈值的时候才进行CMS回收</span><br><span class="line">-XX:+CMSIncrementalMode:使用增量模式，比较适合单CPU。增量模式在JDK 8中标记为废弃，并将在JDK 9中彻底移除。</span><br><span class="line">-XX:+UseG1GC：表示使用g1收集器，g1收集器不同于其它收集器，不区分年轻代和老年代。</span><br></pre></td></tr></table></figure>
<p>实际参数设置<br>在实际中对jvm的调优参数设置，以tomcat为例，在bin文件下创建setenv.bat（window操作系统）文件，然后在文件输入以下相应内容格式即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setjava_home=D:\Program Files\Java\jdk1.7.0_80</span><br><span class="line">setjava_opts=%java_opts% -server -Xms1024M -Xmx1024M -Xss1M</span><br><span class="line">rem-XX:MetaspaceSize=100M -XX:MaxMetaspaceSize=100M</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中RSA非对称密钥加解密使用示例</title>
    <url>/2018/01/01/Java%E4%B8%ADRSA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h3><p>RSA加密算法是最常用的非对称加密算法，CFCA在证书服务中离不了它。RSA是第一个比较完善的公开密钥算法，它既能用于加密，也能用于数字签名。这个算法经受住了多年深入的密码分析，虽然密码分析者既不能证明也不能否定RSA的安全性，但这恰恰说明该算法有一定的可信性，目前它已经成为最流行的公开密钥算法。</p>
<h3 id="二、RSA的公钥、私钥的组成，以及加密、解密的公式可见于下表："><a href="#二、RSA的公钥、私钥的组成，以及加密、解密的公式可见于下表：" class="headerlink" title="二、RSA的公钥、私钥的组成，以及加密、解密的公式可见于下表："></a>二、RSA的公钥、私钥的组成，以及加密、解密的公式可见于下表：</h3><p><img src="https://gitee.com/sunglowrise/images/raw/master/note/ZbpBeXvTKmGf6yj.png"></p>
<h3 id="三、使用方式："><a href="#三、使用方式：" class="headerlink" title="三、使用方式："></a>三、使用方式：</h3><p>①  假设A、B机器进行通信，已A机器为主；<br>②  A首先需要用自己的私钥为发送请求数据签名，并将公钥一同发送给B；<br>③  B收到数据后，需要用A发送的公钥进行验证，已确保收到的数据是未经篡改的；<br>④  B验签通过后，处理逻辑，并把处理结果返回，返回数据需要用A发送的公钥进行加密（公钥加密后，只能用配对的私钥解密）；<br>⑤  A收到B返回的数据，使用私钥解密，至此，一次数据交互完成。</p>
<h3 id="四、代码示例："><a href="#四、代码示例：" class="headerlink" title="四、代码示例："></a>四、代码示例：</h3><p>第一步获取私钥，为签名做准备。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 读取私钥  返回PrivateKey</span><br><span class="line">     * @param path  包含私钥的证书路径</span><br><span class="line">     * @param password  私钥证书密码</span><br><span class="line">     * @return 返回私钥PrivateKey</span><br><span class="line">     * @throws KeyStoreException</span><br><span class="line">     * @throws NoSuchAlgorithmException</span><br><span class="line">     * @throws CertificateException</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws UnrecoverableKeyException</span><br><span class="line">     */ </span><br><span class="line">    private static PrivateKey getPrivateKey(String path,String password) </span><br><span class="line">            throws KeyStoreException, NoSuchAlgorithmException, CertificateException, </span><br><span class="line">            IOException, UnrecoverableKeyException &#123; </span><br><span class="line">        KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;); </span><br><span class="line">        FileInputStream fis = new FileInputStream(path); </span><br><span class="line">        char[] nPassword = null; </span><br><span class="line">        if ((password == null) || password.trim().equals(&quot;&quot;)) &#123; </span><br><span class="line">            nPassword = null; </span><br><span class="line">        &#125; else &#123; </span><br><span class="line">            nPassword = password.toCharArray(); </span><br><span class="line">        &#125; </span><br><span class="line">        ks.load(fis, nPassword); </span><br><span class="line">        fis.close(); </span><br><span class="line">        Enumeration&lt;String&gt; en = ks.aliases(); </span><br><span class="line">        String keyAlias = null; </span><br><span class="line">        if (en.hasMoreElements()) &#123; </span><br><span class="line">            keyAlias = (String) en.nextElement(); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        return (PrivateKey) ks.getKey(keyAlias, nPassword); </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<p>签名示例  通过第一步得到的私钥，进行签名操作，具体请看以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 私钥签名： 签名方法如下：BASE64(RSA(MD5(src),privatekey))，其中src为需要签名的字符串，</span><br><span class="line">privatekey是商户的CFCA证书私钥。</span><br><span class="line">     * @param plainText 待签名字符串</span><br><span class="line">     * @param path 签名私钥路径</span><br><span class="line">     * @param password  签名私钥密码</span><br><span class="line">     * @return 返回签名后的字符串</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */ </span><br><span class="line">    public static String sign(String plainText,String path,String password) </span><br><span class="line">            throws Exception  &#123; </span><br><span class="line">        /*</span><br><span class="line">         * MD5加密</span><br><span class="line">         */ </span><br><span class="line">        MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;); </span><br><span class="line">        md5.update(plainText.getBytes(&quot;utf-8&quot;)); </span><br><span class="line">        byte[] digestBytes = md5.digest(); </span><br><span class="line">        /*</span><br><span class="line">         * 用私钥进行签名 RSA</span><br><span class="line">         * Cipher负责完成加密或解密工作，基于RSA</span><br><span class="line">         */ </span><br><span class="line">        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;); </span><br><span class="line">        //ENCRYPT_MODE表示为加密模式 </span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, getPrivateKey(path, password)); </span><br><span class="line">        //加密 </span><br><span class="line">        byte[] rsaBytes = cipher.doFinal(digestBytes); </span><br><span class="line">        //Base64编码 </span><br><span class="line">        return Base64.byteArrayToBase64(rsaBytes);</span><br></pre></td></tr></table></figure>

<p>B收到数据后，需要使用A提供的公钥信息进行验签，此处使用公钥的N、E进行验签<br>首先通过公钥N、E得到公钥PublicKey，如下： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** </span><br><span class="line">     * 根据公钥n、e生成公钥</span><br><span class="line">     * @param modulus   公钥n串</span><br><span class="line">     * @param publicExponent  公钥e串</span><br><span class="line">     * @return 返回公钥PublicKey</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */ </span><br><span class="line">    public static PublicKey getPublickKey(String modulus, String publicExponent) </span><br><span class="line">            throws Exception &#123; </span><br><span class="line">        KeySpec publicKeySpec = new RSAPublicKeySpec( </span><br><span class="line">                new BigInteger(modulus, 16), new BigInteger(publicExponent, 16)); </span><br><span class="line">        KeyFactory factory = KeyFactory.getInstance(&quot;RSA&quot;); </span><br><span class="line">        PublicKey publicKey = factory.generatePublic(publicKeySpec); </span><br><span class="line">        return publicKey; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>得到公钥PublicKey后，再去验证签名，代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 用公钥证书进行验签</span><br><span class="line">     * @param message  签名之前的原文</span><br><span class="line">     * @param cipherText  签名</span><br><span class="line">     * @param pubKeyn 公钥n串</span><br><span class="line">     * @param pubKeye 公钥e串</span><br><span class="line">     * @return boolean 验签成功为true,失败为false</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */ </span><br><span class="line">    public static boolean verify(String message, String cipherText,String pubKeyn, </span><br><span class="line">            String pubKeye) throws Exception &#123; </span><br><span class="line">        Cipher c4 = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;); </span><br><span class="line">        // 根据密钥，对Cipher对象进行初始化,DECRYPT_MODE表示解密模式 </span><br><span class="line">        c4.init(Cipher.DECRYPT_MODE, getPublickKey(pubKeyn,pubKeye)); </span><br><span class="line">        // 解密 </span><br><span class="line">        byte[] desDecTextBytes = c4.doFinal(Base64.base64ToByteArray(cipherText)); </span><br><span class="line">        // 得到前置对原文进行的MD5 </span><br><span class="line">        String md5Digest1 = Base64.byteArrayToBase64(desDecTextBytes); </span><br><span class="line">        MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;); </span><br><span class="line">        md5.update(message.getBytes(&quot;utf-8&quot;)); </span><br><span class="line">        byte[] digestBytes = md5.digest(); </span><br><span class="line">        // 得到商户对原文进行的MD5 </span><br><span class="line">        String md5Digest2 = Base64.byteArrayToBase64(digestBytes); </span><br><span class="line">        // 验证签名 </span><br><span class="line">        if (md5Digest1.equals(md5Digest2)) &#123; </span><br><span class="line">            return true; </span><br><span class="line">        &#125; else &#123; </span><br><span class="line">            return false; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>至此，签名验签已经完毕</p>
<p>提供一个从.cer文件读取公钥的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 读取公钥cer</span><br><span class="line">     * @param path .cer文件的路径  如：c:/abc.cer</span><br><span class="line">     * @return  base64后的公钥串</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws CertificateException</span><br><span class="line">     */ </span><br><span class="line">    public static String getPublicKey(String path) throws IOException, </span><br><span class="line">    CertificateException&#123; </span><br><span class="line">        InputStream inStream = new FileInputStream(path); </span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream(); </span><br><span class="line">        int ch; </span><br><span class="line">        String res = &quot;&quot;; </span><br><span class="line">        while ((ch = inStream.read()) != -1) &#123; </span><br><span class="line">            out.write(ch); </span><br><span class="line">        &#125; </span><br><span class="line">        byte[] result = out.toByteArray(); </span><br><span class="line">        res = Base64.byteArrayToBase64(result); </span><br><span class="line">        return res; </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中native方法</title>
    <url>/2018/01/01/Java%E4%B8%ADnative%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Java无法直接访问到操作系统底层（如系统硬件等-，为此Java使用native方法来扩展Java程序的功能。"><a href="#Java无法直接访问到操作系统底层（如系统硬件等-，为此Java使用native方法来扩展Java程序的功能。" class="headerlink" title="Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。"></a>Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。</h3><blockquote>
<p>可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：<br>１、在Java中声明native()方法，然后编译；<br>２、用javah产生一个.h文件；<br>３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）；<br>４、将第三步的.cpp文件编译成动态链接库文件；<br>５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。</p>
</blockquote>
<blockquote>
<p>JAVA本地方法适用的情况<br>1.为了使用底层的主机平台的某个特性，而这个特性不能通过JAVA API访问<br>2.为了访问一个老的系统或者使用一个已有的库，而这个系统或这个库不是用JAVA编写的<br>3.为了加快程序的性能，而将一段时间敏感的代码作为本地方法实现。</p>
</blockquote>
<h3 id="1、写好JAVA文件（HelloWorld-java）"><a href="#1、写好JAVA文件（HelloWorld-java）" class="headerlink" title="1、写好JAVA文件（HelloWorld.java）"></a>1、写好JAVA文件（HelloWorld.java）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /*</span><br><span class="line">  * Created on 2005-12-19 Author shaoqi</span><br><span class="line">  */</span><br><span class="line">package com.hode.hodeframework.modelupdate;</span><br><span class="line">public class CheckFile&#123;</span><br><span class="line"> </span><br><span class="line">  public native void displayHelloWorld();</span><br><span class="line">   static&#123;</span><br><span class="line">          System.loadLibrary(&quot;test&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">           new CheckFile().displayHelloWorld();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、根据写好的文件编译成CLASS文件"><a href="#2、根据写好的文件编译成CLASS文件" class="headerlink" title="2、根据写好的文件编译成CLASS文件"></a>2、根据写好的文件编译成CLASS文件</h3><blockquote>
<p>在classes或bin之类的class根目录下执行javah -jni HelloWorld，<br>就会在根目录下得到一个HelloWorld.h的文件<br>生成的HelloWorld.h内容如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* DO NOT EDIT THIS FILE - it is machine generated */</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">/* Header for class HelloWorld */</span><br><span class="line"></span><br><span class="line">#ifndef _Included_HelloWorld</span><br><span class="line">#define _Included_HelloWorld</span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line">/*</span><br><span class="line"> * Class:     HelloWorld</span><br><span class="line"> * Method:    hello</span><br><span class="line"> * Signature: ()V</span><br><span class="line"> */</span><br><span class="line">JNIEXPORT void JNICALL Java_HelloWorld_hello</span><br><span class="line">  (JNIEnv *, jobject);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个参数是调用JNI方法时使用的JNI Environment指针。第二个参数是指向在此Java代码中实例化的Java对象HelloWorld的一个句柄。其他参数是方法本身的参数</p>
</blockquote>
<h3 id="3、根据头文件HelloWorld-h的内容编写HelloWorldImpl-c文件-实现头文件中的方法"><a href="#3、根据头文件HelloWorld-h的内容编写HelloWorldImpl-c文件-实现头文件中的方法" class="headerlink" title="3、根据头文件HelloWorld.h的内容编写HelloWorldImpl.c文件,实现头文件中的方法"></a>3、根据头文件HelloWorld.h的内容编写HelloWorldImpl.c文件,实现头文件中的方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">#include &quot;HelloWorld.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">JNIEXPORT void JNICALL Java_HelloWorld_hello(JNIEnv *env,jobject obj)&#123;</span><br><span class="line">printf(&quot;Hello World!\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中，第一行是将jni.h文件引入（在%JAVA_HOME%\include目录下），里边有JNIEnv和jobject的定义。</p>
</blockquote>
<h3 id="4、编译c实现"><a href="#4、编译c实现" class="headerlink" title="4、编译c实现"></a>4、编译c实现</h3><blockquote>
<p>这里以在Windows中为例，需要生成dll文件。在保存HelloWorldImpl.c文件夹下面，使用VC的编译器cl成。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cl -I%java_home%\include -I%java_home%\include\win32 -LD HelloWorldImp.c -Fehello.dll</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：生成的dll文件名在选项-Fe后面配置，这里是hello，因为在HelloWorld.java文件中我们loadLibary的时候使用的名字是hello。当然这里修改之后那里也需要修改。另外需要将-I%java_home%\include -I%java_home%\include\win32参数加上，因为在第四步里面编写本地方法的时候引入了jni.h文件。</p>
</blockquote>
<blockquote>
<p>vc的编译方法：cl -I%java_home%\include -I%java_home%\include\win32 -LD HelloWorld.c -Fehello.dll<br>最后在运行时加参数-Djava.library.path=[dll存放的路径]</p>
</blockquote>
<h3 id="5、运行程序"><a href="#5、运行程序" class="headerlink" title="5、运行程序"></a>5、运行程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全(加密、摘要、签名、证书、SSL、HTTPS)</title>
    <url>/2018/01/01/Java%E5%AE%89%E5%85%A8(%E5%8A%A0%E5%AF%86%E3%80%81%E6%91%98%E8%A6%81%E3%80%81%E7%AD%BE%E5%90%8D%E3%80%81%E8%AF%81%E4%B9%A6%E3%80%81SSL%E3%80%81HTTPS)/</url>
    <content><![CDATA[<h3 id="Java安全-加密、摘要、签名、证书、SSL、HTTPS"><a href="#Java安全-加密、摘要、签名、证书、SSL、HTTPS" class="headerlink" title="Java安全(加密、摘要、签名、证书、SSL、HTTPS)"></a>Java安全(加密、摘要、签名、证书、SSL、HTTPS)</h3><p>对于一般的开发人员来说，很少需要对安全领域内的基础技术进行深入的研究，但是鉴于日常系统开发中遇到的各种安全相关的问题，熟悉和了解这些安全技术的基本原理和使用场景还是非常必要的。<br>本文将对非对称加密、数字摘要、数字签名、数字证书、SSL、HTTPS等这些安全领域内的技术进行一番简要的介绍，解释他们之间的关系，同时补充一些周边话题。</p>
<p>安全领域的技术众多，但是归根结底，他们都是为了保障如下三个方面：</p>
<ul>
<li>1）认证用户和服务器，确保数据发送到正确的客户机和服务器</li>
<li>2）加密数据以防止数据中途被窃取</li>
<li>3）维护数据的完整性，确保数据在传输过程中不被改变。 </li>
</ul>
<h3 id="对称加密和非对称密钥加解密"><a href="#对称加密和非对称密钥加解密" class="headerlink" title="对称加密和非对称密钥加解密"></a>对称加密和非对称密钥加解密</h3><p>对于一份数据，通过一种算法，基于传入的密钥(一串由数字或字符组成的字符串,也称”key”），将明文数据转换成了不可阅读的密文，这是众所周知的”加密”，同样的，密文到达目的地后，需要再以相应的算法，配合一个密钥，将密文再解密成明文，这就是”解密”。<br>如果加密和解密使用的是同一个密钥,那么这就是”对称密钥加解密”（最常见的对称加密算法是DES）。<br>如果加密和解密使用的是两个不同的密钥，那么这就是”非对称密钥加解密”（最常用的非对称加密算法是RSA）。<br>这两个不同的密钥一个叫作公开密钥（publickey）另一个叫私有密钥（privatekey），公开密钥对外公开，任何人均可获取，而私有密钥则由自己保存，其实公钥和私钥并没有什么不同之处，公钥之所以成为公钥是因为它会被公开出来，产生任意份拷贝，供任何人获取，而只有服务主机持有唯一的一份私钥，从这种分发模式上看，我们不难看出其中的用意，这种分发模式实际上是Web站点多客户端(浏览器)与单一服务器的网络拓扑所决定的，多客户端意味着密钥能被复制和公开获取，单一服务器意味着密钥被严格控制，只能由本服务器持有，这实际上也是后面要提到的之所以能通过数据证书确定信任主机的重要原因之一。<br>如果我们跳出web站点的拓扑环境，其实就没有什么公钥与私钥之分了，比如，对于那些使用以密钥为身份认证的SSH主机，往往是为每一个用户单独生成一个私钥分发给他们自己保存，SSH主机会保存一份公钥，公钥私钥各有一份，都不会公开传播。</p>
<p>简言之：<br>对称加密速度快，但加密和解密的钥匙必须相同，只有通信双方才能知道钥匙<br>非对称加密速度慢，加密和解密的钥匙不相同，某一个人持有私钥，任何人都可以知道公钥</p>
<h3 id="数字摘要–数据完整性的校验"><a href="#数字摘要–数据完整性的校验" class="headerlink" title="数字摘要–数据完整性的校验"></a>数字摘要–数据完整性的校验</h3><p>这个非常简单，我们在下载文件的时候经常会看到有的下载站点也提供下载文件的”数字摘要”，供下载者验证下载后的文件是否完整，或者说是否和服务器上的文件”一模一样”。其实，数字摘要就是采用单项Hash函数将需要加密的明文”摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，儿同样的明文其摘要必定一致。 因此，”数字摘要”叫”数字指纹”可能会更贴切一些。”数字摘要”是https能确保数据完整性和防篡改的根本原因。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-1.png"></p>
<h3 id="数字签名–水到渠成的技术"><a href="#数字签名–水到渠成的技术" class="headerlink" title="数字签名–水到渠成的技术"></a>数字签名–水到渠成的技术</h3><p>让我们来看看有了”非对称密钥加解密”和”数字摘要”两项技术之后，我们能做些什么呢？假如发送方想把一份报文发送给接收方，在发送报文前，发送方用一个哈希函数从报文文本中生成报文摘要,然后用自己的私人密钥对这个摘要进行加密，这个加密后的摘要将作为报文的”签名”和报文一起发送给接收方，接收方首先用与发送方一样的哈希函数从接收到的原始报文中计算出报文摘要，接着再用发送方的公用密钥来对报文附加的数字签名进行解密，如果这两个摘要相同、那么接收方就能确认报文是从发送方发送且没有被遗漏和修改过！这就是结合”非对称密钥加解密”和”数字摘要”技术所能做的事情，这也就是人们所说的”数字签名”技术。在这个过程中，对传送数据生成摘要并使用私钥进行加密地过程就是生成”数字签名”的过程，经过加密的数字摘要，就是人们所说的”数字签名”！<br>数字签名技术就是对”非对称密钥加解密”和”数字摘要”两项技术的应用，它将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。(注意，数字签名只能验证数据的完整性，数据本身是否加密不属于数字签名的控制范围)<br>综上所述，数字签名有两种功效：一是能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名。二是数字签名能确定消息的完整性。</p>
<h3 id="数字证书–值得信赖的公钥"><a href="#数字证书–值得信赖的公钥" class="headerlink" title="数字证书–值得信赖的公钥"></a>数字证书–值得信赖的公钥</h3><p>只从”准确认证发送方身份”和”确保数据完整性”两个安全方面来看，数字签名似乎已经完全做到了，还有漏洞存在的可能么？有，漏洞不在数字签名技术本身，而在它所依赖的密钥，只有密钥是真实可靠的前提下，使用数字签名才是安全有效的。考虑这种可能的情况：在上述发送方向接收方传送报文的例子中，如果发送方所持有的公钥来路有问题或是被替换了，那么，持有对应私钥的冒充接受方就有可能接收到发送方发送的报文。这里的问题就是：对于请求方来说，它怎么能确定它所得到的公钥一定是从目标主机那里发布的，而且没有被篡改过呢？亦或者请求的目标主机本本身就从事窃取用户信息的不正当行为呢？这时候，我们需要有一个权威的值得信赖的第三方机构(一般是由政府审核并授权的机构)来统一对外发放主机机构的公钥，只要请求方这种机构获取公钥，就避免了上述问题的发生。这种机构被称为证书权威机构（Certificate Authority, CA），它们所发放的包含主机机构名称、公钥在内的文件就是人们所说的”数字证书”。<br>数字证书的颁发过程一般为：用户首先产生自己的密钥对，并将公共密钥及部分个人身份信息传送给认证中心。认证中心在核实身份后，将执行一些必要的步骤，以确信请求确实由用户发送而来，然后，认证中心将发给用户一个数字证书，该证书内包含用户的个人信息和他的公钥信息，同时还附有认证中心的签名信息。用户就可以使用自己的数字证书进行相关的各种活动。数字证书由独立的证书发行机构发布。数字证书各不相同，每种证书可提供不同级别的可信度。可以从证书发行机构获得您自己的数字证书。（本段摘自百度百科）</p>
<h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>SSL(Secure Socket Layer)是netscape公司设计的主要用于web的安全传输协议。这种协议在WEB上获得了广泛的应用，IETF(<a href="http://www.ietf.org)将ssl作了标准化,即rfc2246,并将其称为tls(transport/">www.ietf.org)将SSL作了标准化，即RFC2246,并将其称为TLS（Transport</a> Layer Security），从技术上讲，TLS1.0与SSL3.0的差别非常微小。</p>
<ul>
<li><p>基本原理：<br>先非对称加密传递对称加密所要用的钥匙，然后双方用该钥匙对称加密和解密往来的数据</p>
</li>
<li><p>要求：<br>服务器端需安装数字证书，用户可能需要确认证书，会话过程中的加密与解密过程由浏览器与服务器自动完成，对用户完全透明。<br>SSL握手阶段示意图：<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-2.png"></p>
</li>
<li><p>工作过程：<br>浏览器向服务器发出请求，询问对方支持的对称加密算法和非对称加密算法；服务器回应自己支持的算法。</p>
</li>
</ul>
<p>浏览器选择双方都支持的加密算法，并请求服务器出示自己的证书；服务器回应自己的证书。 </p>
<p>浏览器随机产生一个用于本次会话的对称加密的钥匙，并使用服务器证书中附带的公钥对该钥匙进行加密后传递给服务器；服务器为本次会话保持该对称加密的钥匙。第三方不知道服务器的私钥，即使截获了数据也无法解密。非对称加密让任何浏览器都可以与服务器进行加密会话。</p>
<p>浏览器使用对称加密的钥匙对请求消息加密后传送给服务器，服务器使用该对称加密的钥匙进行解密；服务器使用对称加密的钥匙对响应消息加密后传送给浏览器，浏览器使用该对称加密的钥匙进行解密。第三方不知道对称加密的钥匙，即使截获了数据也无法解密。对称加密提高了加密速度。</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>如果我们是在一开始来讲述HTTPS协议，那将会是一个很大的话题，但是讲到这里的时候，实现上所有关于HTTPS的内容，我们基本上已经讲完了，它所有依赖的所有安全技术就是上面我们所提及的，就像大家所知道的那样，HTTPS是由SSL+HTTP协议构建的可进行加密传输、身份认证（确认客户端连接的目标主机是否是真实正确的主机）的网络协议。https所能实现的安全保证，正是SSL所能解决的安全问题。</p>
<p>HTTPS的劣势：<br>https的主要缺点就是性能问题。造成https性能低于http的原因有两个：</p>
<ul>
<li>1.对数据进行加解密决定了它比http慢。</li>
<li>2.另外一个重要原因的是https禁用了缓存。</li>
</ul>
<p>相关测试数据表明使用HTTPS协议传输数据的工作效率只有使用HTTP协议传输的十分之一。因此对于一个网站来说，只有那对那些安全要求极高的的数据才会选择使用https进行传输。</p>
<h4 id="对以上的知识联通起来做一个集中图示，相信大家会有更加清晰的理解："><a href="#对以上的知识联通起来做一个集中图示，相信大家会有更加清晰的理解：" class="headerlink" title="对以上的知识联通起来做一个集中图示，相信大家会有更加清晰的理解："></a>对以上的知识联通起来做一个集中图示，相信大家会有更加清晰的理解：</h4><ol>
<li><p>鲍勃有两把钥匙，一把是公钥，另一把是私钥。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-3.png"></p>
</li>
<li><p>鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-4.png"></p>
</li>
<li><p>苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-5.png"></p>
</li>
<li><p>鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-6.png"></p>
</li>
<li><p>鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的数字摘要（digest）。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-7.png"></p>
</li>
<li><p>然后，鲍勃使用私钥，对这个数字摘要加密，生成”数字签名”（signature）。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-8.png"></p>
</li>
<li><p>鲍勃将这个签名，附在信件下面，一起发给苏珊。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-9.png"></p>
</li>
<li><p>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-10.png"></p>
</li>
<li><p>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-11.png"></p>
</li>
<li><p>复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-12.png"></p>
</li>
<li><p>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-13.png"></p>
</li>
<li><p>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-14.png"></p>
</li>
<li><p>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-15.png"></p>
</li>
<li><p>我们看一个应用”数字证书”的实例：https协议。这个协议主要用于网页加密<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-16.png"></p>
</li>
<li><p>首先，客户端向服务器发出加密请求。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-17.png"></p>
</li>
<li><p>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-18.png"></p>
</li>
<li><p>客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-19.png"></p>
</li>
<li><p>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-20.png"></p>
</li>
<li><p>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-21.png"></p>
</li>
<li><p>如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%AE%89%E5%85%A8-22.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实用小方法</title>
    <url>/2018/01/01/Java%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h4 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 描述：获取10到20位的随机字符串</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-05-17</span><br><span class="line">     * @param     least 最少位数&lt;br&gt;</span><br><span class="line">     * @param    len 浮动长度</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getRandStr(int least,int len) &#123;</span><br><span class="line">        String base = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;</span><br><span class="line">         Random random = new Random();</span><br><span class="line">        int length = random.nextInt(len) + least;</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            int number = random.nextInt(base.length());</span><br><span class="line">            sb.append(base.charAt(number));</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String getCharAndNumr(int length)&#123;     </span><br><span class="line">    String val = &quot;&quot;;</span><br><span class="line">    Random random = new Random();</span><br><span class="line">    for(int i = 0; i &lt; length; i++)&#123;     </span><br><span class="line">    	 String charOrNum = random.nextInt(2) % 2 == 0 ? &quot;char&quot; : &quot;num&quot;; // 输出字母还是数字     </span><br><span class="line">    	 if(&quot;char&quot;.equalsIgnoreCase(charOrNum)) &#123;// 字符串     </span><br><span class="line">    	    int choice = random.nextInt(2) % 2 == 0 ? 65 : 97; //取得大写字母还是小写字母     </span><br><span class="line">    	    val += (char) (choice + random.nextInt(26));     </span><br><span class="line">    	 &#125;else if(&quot;num&quot;.equalsIgnoreCase(charOrNum)) &#123;// 数字     </span><br><span class="line">           val += String.valueOf(random.nextInt(10));</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;          </span><br><span class="line">    return val;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h4 id="判断request请求是来自来源"><a href="#判断request请求是来自来源" class="headerlink" title="判断request请求是来自来源"></a>判断request请求是来自来源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s1 = request.getHeader(&quot;user-agent&quot;);</span><br><span class="line">System.err.println(s1);</span><br><span class="line">if(s1.contains(&quot;Android&quot;)) &#123;</span><br><span class="line">System.out.println(&quot;Android移动客户端&quot;);</span><br><span class="line">&#125; else if(s1.contains(&quot;iPhone&quot;)) &#123;</span><br><span class="line">System.out.println(&quot;iPhone移动客户端&quot;);</span><br><span class="line">&#125;  else if(s1.contains(&quot;iPad&quot;)) &#123;</span><br><span class="line">System.out.println(&quot;iPad客户端&quot;);</span><br><span class="line">&#125;  else if(s1.contains(&quot;Windows&quot;)) &#123;</span><br><span class="line">System.out.println(&quot;Window客户端&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;其他客户端&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建文字图片word-image"><a href="#创建文字图片word-image" class="headerlink" title="创建文字图片word image"></a>创建文字图片word image</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String args[]) throws Exception &#123;</span><br><span class="line">	String maskText = &quot;马亚伟boss马亚伟boss马亚伟boss&quot;;</span><br><span class="line">	int maskFontSize = 22;</span><br><span class="line">	Font font = new Font(&quot;宋体&quot;, Font.PLAIN, maskFontSize);</span><br><span class="line">	BufferedImage tmpImage = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">	Graphics2D tg = tmpImage.createGraphics();</span><br><span class="line">	tg.drawImage(tmpImage, 0, 0, null);</span><br><span class="line">	tg.setFont(font);</span><br><span class="line">	FontMetrics tfm = tg.getFontMetrics();</span><br><span class="line">	Rectangle2D trect = tfm.getStringBounds(maskText, tg);</span><br><span class="line">	tg.dispose();</span><br><span class="line">	BufferedImage maskedImage = new BufferedImage((int) Math.ceil(trect.getWidth()), (int) Math.ceil(trect.getHeight()),BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">	Graphics2D g = maskedImage.createGraphics();</span><br><span class="line">	g.drawImage(maskedImage, 0, 0, null);</span><br><span class="line">	g.setColor(Color.black);</span><br><span class="line">	// g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">	g.setFont(font);</span><br><span class="line">	g.drawString(maskText, 0, maskedImage.getHeight() - 6);</span><br><span class="line">	g.dispose();</span><br><span class="line">	//String maskSealPath = ServletActionContext.getServletContext().getRealPath(&quot;/file/nianhui/signimg&quot;) + File.separator+&quot;xinnianheka-&quot;+UUID.randomUUID()+&quot;.png&quot;;</span><br><span class="line">	String maskSealPath = &quot;D:&quot; + File.separator + &quot;xinnianheka.png&quot;;</span><br><span class="line">	FileOutputStream bos = new FileOutputStream(maskSealPath);</span><br><span class="line">	ImageIO.write(maskedImage, &quot;PNG&quot;, bos);</span><br><span class="line">	Image sealImage = Image.getInstance(maskSealPath);</span><br><span class="line">	sealImage.setAbsolutePosition(0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="java删除文件夹"><a href="#java删除文件夹" class="headerlink" title="java删除文件夹"></a>java删除文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除目录（文件夹）以及目录下的文件</span><br><span class="line"> * @param   sPath 被删除目录的文件路径</span><br><span class="line"> * @return  目录删除成功返回true，否则返回false</span><br><span class="line"> */ </span><br><span class="line">public boolean deleteDirectory(String sPath) &#123;</span><br><span class="line">    // 如果sPath不以文件分隔符结尾，自动添加文件分隔符</span><br><span class="line">    if (!sPath.endsWith(File.separator)) &#123;</span><br><span class="line">        sPath = sPath + File.separator;</span><br><span class="line">    &#125;</span><br><span class="line">    File dirFile = new File(sPath);</span><br><span class="line">    // 如果dir对应的文件不存在，或者不是一个目录，则退出</span><br><span class="line">    if (!dirFile.exists() || !dirFile.isDirectory()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean flag = true;</span><br><span class="line">    // 删除文件夹下的所有文件(包括子目录)</span><br><span class="line">    File[] files = dirFile.listFiles();</span><br><span class="line">    for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">        // 删除子文件</span><br><span class="line">        if (files[i].isFile()) &#123;</span><br><span class="line">            flag = deleteFile(files[i].getAbsolutePath());</span><br><span class="line">            if (!flag)</span><br><span class="line">                break;</span><br><span class="line">        &#125; // 删除子目录</span><br><span class="line">        else &#123;</span><br><span class="line">            flag = deleteDirectory(files[i].getAbsolutePath());</span><br><span class="line">            if (!flag)</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!flag)</span><br><span class="line">        return false;</span><br><span class="line">    // 删除当前目录</span><br><span class="line">    if (dirFile.delete()) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="延时方法："><a href="#延时方法：" class="headerlink" title="延时方法："></a>延时方法：</h4><ol>
<li><p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* 等待ss秒</span><br><span class="line">* @param ss</span><br><span class="line">*/</span><br><span class="line">private void waitSometime(int ss) &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        boolean flag = false;</span><br><span class="line">        int count = 0 ;</span><br><span class="line">        Thread thread = new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        while(!flag)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            thread.sleep(100);</span><br><span class="line">            if(count == ss*10)&#123;</span><br><span class="line">                flag = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方法二</p>
<h4 id="数字转大写"><a href="#数字转大写" class="headerlink" title="数字转大写"></a>数字转大写</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"> </span><br><span class="line">public class MoneyFormat &#123;</span><br><span class="line"> </span><br><span class="line">    private final static String[] pattern = &#123; &quot;零&quot;, &quot;壹&quot;, &quot;贰&quot;, &quot;叁&quot;, &quot;肆&quot;, &quot;伍&quot;, &quot;陆&quot;, &quot;柒&quot;, &quot;捌&quot;, &quot;玖&quot; &#125;;</span><br><span class="line">    private final static String[] cPattern = &#123; &quot;&quot;, &quot;拾&quot;, &quot;佰&quot;, &quot;仟&quot;, &quot;万&quot;, &quot;拾&quot;, &quot;佰&quot;, &quot;仟&quot;, &quot;亿&quot; &#125;;</span><br><span class="line">    private final static String[] cfPattern = &#123; &quot;&quot;, &quot;角&quot;, &quot;分&quot; &#125;;</span><br><span class="line">    private final static String ZEOR = &quot;零&quot;;</span><br><span class="line"> </span><br><span class="line">    public static String format(String moneyString) &#123;</span><br><span class="line">        // 判断是否为小数</span><br><span class="line">        int dotPoint = moneyString.indexOf(&quot;.&quot;);</span><br><span class="line">        String moneyStr;</span><br><span class="line">        if (dotPoint != -1) &#123;</span><br><span class="line">            moneyStr = moneyString.substring(0, moneyString.indexOf(&quot;.&quot;));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            moneyStr = moneyString;</span><br><span class="line">        &#125;</span><br><span class="line">        // 小数部分的处理,以及最后的&quot;元&quot;.</span><br><span class="line">        StringBuffer fraction = null;</span><br><span class="line">        StringBuffer ms = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; moneyStr.length(); i++) &#123;</span><br><span class="line">            // 按数组的编号加入对应大写汉字</span><br><span class="line">            ms.append(pattern[moneyStr.charAt(i) - 48]);</span><br><span class="line">        &#125;</span><br><span class="line">        int cpCursor = 1;</span><br><span class="line">        for (int j = moneyStr.length() - 1; j &gt; 0; j--) &#123;</span><br><span class="line">            // 在j之后加字符,不影响j对原字符串的相对位置</span><br><span class="line">            ms.insert(j, cPattern[cpCursor]);</span><br><span class="line">            cpCursor = cpCursor == 8 ? 1 : cpCursor + 1; // 亿位之后重新循环</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        while (ms.indexOf(&quot;零拾&quot;) != -1) &#123;</span><br><span class="line">            // 当十位为零时用一个&quot;零&quot;代替&quot;零拾&quot;</span><br><span class="line">            ms.replace(ms.indexOf(&quot;零拾&quot;), ms.indexOf(&quot;零拾&quot;) + 2, ZEOR);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.indexOf(&quot;零佰&quot;) != -1) &#123;</span><br><span class="line">            ms.replace(ms.indexOf(&quot;零佰&quot;), ms.indexOf(&quot;零佰&quot;) + 2, ZEOR);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.indexOf(&quot;零仟&quot;) != -1) &#123;</span><br><span class="line">            ms.replace(ms.indexOf(&quot;零仟&quot;), ms.indexOf(&quot;零仟&quot;) + 2, ZEOR);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.indexOf(&quot;零万&quot;) != -1) &#123;</span><br><span class="line">            // 万需保留，中文习惯</span><br><span class="line">            ms.replace(ms.indexOf(&quot;零万&quot;), ms.indexOf(&quot;零万&quot;) + 2, &quot;万&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.indexOf(&quot;零亿&quot;) != -1) &#123;</span><br><span class="line">            ms.replace(ms.indexOf(&quot;零亿&quot;), ms.indexOf(&quot;零亿&quot;) + 2, &quot;亿&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.indexOf(&quot;零零&quot;) != -1) &#123;</span><br><span class="line">            // 有连续数位出现零，即有以下情况，此时根据习惯保留一个零即可</span><br><span class="line">            ms.replace(ms.indexOf(&quot;零零&quot;), ms.indexOf(&quot;零零&quot;) + 2, ZEOR);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.indexOf(&quot;亿万&quot;) != -1) &#123;</span><br><span class="line">            // 特殊情况，如:100000000,根据习惯保留高位</span><br><span class="line">            ms.replace(ms.indexOf(&quot;亿万&quot;), ms.indexOf(&quot;亿万&quot;) + 2, &quot;亿&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        while (ms.lastIndexOf(&quot;零&quot;) == ms.length() - 1) &#123;</span><br><span class="line">            // 当结尾为零j，不必显示,经过处理也只可能出现一个零</span><br><span class="line">            ms.delete(ms.lastIndexOf(&quot;零&quot;), ms.lastIndexOf(&quot;零&quot;) + 1);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        int end;</span><br><span class="line">        if ((dotPoint = moneyString.indexOf(&quot;.&quot;)) != -1) &#123;</span><br><span class="line">            // 是小数的进入</span><br><span class="line">            String fs = moneyString.substring(dotPoint + 1, moneyString.length());</span><br><span class="line">            if (fs.indexOf(&quot;00&quot;) == -1 || fs.indexOf(&quot;00&quot;) &gt;= 2) &#123;</span><br><span class="line">                // 若前两位小数全为零，则跳过操作</span><br><span class="line">                end = fs.length() &gt; 2 ? 2 : fs.length();</span><br><span class="line">                // 仅保留两位小数</span><br><span class="line">                fraction = new StringBuffer(fs.substring(0, end));</span><br><span class="line">                for (int j = 0; j &lt; fraction.length(); j++) &#123;</span><br><span class="line">                    fraction.replace(j, j + 1, pattern[fraction.charAt(j) - 48]); // 替换大写汉字</span><br><span class="line">                &#125;</span><br><span class="line">                for (int i = fraction.length(); i &gt; 0; i--) &#123; // 插入中文标识</span><br><span class="line">                    fraction.insert(i, cfPattern[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                fraction.insert(0, &quot;元&quot;); // 为整数部分添加标识</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                fraction = new StringBuffer(&quot;元整&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fraction = new StringBuffer(&quot;元整&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        ms.append(fraction);</span><br><span class="line">        // 加入小数部分</span><br><span class="line">        return ms.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] ar) &#123;</span><br><span class="line">        System.out.println(MoneyFormat.format(&quot;300000.00&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="获取径路总结"><a href="#获取径路总结" class="headerlink" title="获取径路总结"></a>获取径路总结</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsp中</span><br><span class="line">1、&lt;%=request.getContextPath()%&gt;</span><br><span class="line">2、$&#123;pageContext.request.contextPath&#125;</span><br><span class="line">3、</span><br><span class="line">(1)得到包含工程名的当前页面全路径：request.getRequestURI() </span><br><span class="line">(2)得到工程名：request.getContextPath() </span><br><span class="line">(3)得到当前页面所在目录下全名称：request.getServletPath() </span><br><span class="line">(4)得到页面所在服务器的全路径：application.getRealPath(&quot;页面.jsp&quot;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java中</span><br><span class="line">1、request.getSession().getServletContext().getRealPath(&quot;&quot;)</span><br><span class="line">2、web项目的全路径：ServletActionContext.getServletContext().getRealPath(&quot;/&quot;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">3、类的绝对路径：Class.class.getClass().getResource(&quot;/&quot;).getPath()</span><br><span class="line">4、this.getClass().getClassLoader().getResource(&quot;&quot;).getPath();</span><br><span class="line">      this.getClass().getResource(&quot;/conf&quot;).getPath();</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins部署（ubuntu）</title>
    <url>/2021/10/02/Jenkins%E9%83%A8%E7%BD%B2%EF%BC%88ubuntu%EF%BC%89/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>一般网站部署的流程：需求分析—原型设计—开发代码—内网部署-提交测试—确认上线—备份数据—外网更新-最终测试，如果发现外网部署的代码有异常，需要及时回滚。</p>
</blockquote>
<h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><blockquote>
<p>通过jenkins工具平台实现全自动部署+测试，是一个可扩展的持续集成引擎，是一个开源软件项目，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins非常易于安装和配置，简单易用。</p>
</blockquote>
<p><strong>简单来说：</strong></p>
<blockquote>
<p>开发人员：写好代码，不需要自己进行源码编译、打包等工作，直接将代码分支存放在SVN、GIT仓库即可。 </p>
</blockquote>
<blockquote>
<p>运维人员：减轻人工干预的错误率，ansible一键完成了同时解放运维人员繁杂的上传代码、手动备份、更新.</p>
</blockquote>
<blockquote>
<p>测试人员：可以通过jenkins进行简单的代码及网站测试.</p>
</blockquote>
<p><strong>持续集成的意义(总结 提升工作效率)</strong></p>
<blockquote>
<p>持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</p>
</blockquote>
<blockquote>
<p>持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</p>
</blockquote>
<blockquote>
<p>持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心</p>
</blockquote>
<p><strong>持续集成的组件</strong></p>
<blockquote>
<p>一个自动构建过程，包括自动编译、分发、部署和测试<br>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，例如SVN、GIT代码库<br>一个jenkins持续集成服务器就是一个配置简单和使用方便的持续集成服务器</p>
</blockquote>
<h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><blockquote>
<p>由于jenkins是使用java代码开发的，所以我们需要安装java容器才能运行jenkins,又因为java的web服务器用的是tomcat，所以我们要安装JDK+Tomcat</p>
</blockquote>
<p><strong>安装jdk+tomcat</strong></p>
<blockquote>
<p>安装jdk， <a href="!https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">官网下载</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt安装</span></span><br><span class="line"><span class="comment"># apt install openjdk-8-jdk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源码安装</span></span><br><span class="line"><span class="comment"># 官方下载对应的*.tar.gz, 以jdk-8u211-linux-x64.tar.gz为例</span></span><br><span class="line"><span class="comment"># 创建一个目录用于存放解压后的文件，并解压缩到该目录下</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /usr/lib/jvm</span><br><span class="line">sudo tar -zxvf jdk-8u211-linux-x64.tar.gz -C /usr/lib/jvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">sudo vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件末尾追加如下内容</span></span><br><span class="line"><span class="comment"># set oracle jdk environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_211</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认jdk</span></span><br><span class="line">update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_211/bin/java 300  </span><br><span class="line">update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_211/bin/javac 300  </span><br><span class="line">update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_211/bin/jar 300   </span><br><span class="line">update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_211/bin/javah 300   </span><br><span class="line">update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_211/bin/javap 300 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">update-alternatives --config java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装tomcat</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="built_in">cd</span> /opt/ &amp;&amp; wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.40/bin/apache-tomcat-8.5.40.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar zxvf apache-tomcat-8.5.40.tar.gz</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/tomcat &amp;&amp; <span class="built_in">mv</span> apache-tomcat-8.5.40/* /usr/local/tomcat</span><br></pre></td></tr></table></figure>

<p><strong>安装jenkins</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将存储库密钥添加到系统。添加密钥后，系统将返回OK 。</span></span><br><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Debian包存储库地址附加到服务器的sources.list ：</span></span><br><span class="line"><span class="built_in">echo</span> deb http://pkg.jenkins.io/debian-stable binary/ | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/jenkins.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行update ，以便apt-get将使用新的存储库：</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Jenkins及其依赖项，包括Java：</span></span><br><span class="line">sudo apt-get install jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start jenkins</span><br><span class="line"> </span><br><span class="line">netstat -tnlp | grep 8080</span><br><span class="line"><span class="comment"># tcp        0      0 :::8080                     :::*                        LISTEN     6900/java</span></span><br></pre></td></tr></table></figure>


<h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><blockquote>
<p>访问http://<sever_ip>:8080, 访问Jenkins， 出现Unlock Jenkins 页面。如果无法访问请检查系统防火墙、云的安全组设置。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-01.png"></p>
</blockquote>
<blockquote>
<p>查看密码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<blockquote>
<p>复制输出的内容，粘贴到Administrator password，输入 exit 退出容器</p>
</blockquote>
<blockquote>
<p>django项目需要插件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git plugin</span><br><span class="line">python plugin</span><br><span class="line">pipeline</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时进行下一步你会看到此界面，点击 select plugins to install<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-02.png"></p>
</blockquote>
<blockquote>
<p>等待安装完成<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-03.png"></p>
</blockquote>
<blockquote>
<p>如果有插件安装失败，安装结束之后会有”Retry”重试选项，点击重试即可。</p>
</blockquote>
<blockquote>
<p>进行下一步<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-04.png"></p>
</blockquote>
<blockquote>
<p>进入主界面后如果看到右上角有错误的提示信息，那么请把你的Jenkins升级到最新版本，然后更新一下插件。</p>
</blockquote>
<blockquote>
<p>如果更新之后出现协议警告,可以直接点击警告中的Protocol Configuration，或者点击系统管理—&gt;全局安全配置—&gt;Agents—&gt;Agent protocols</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-05.png"></p>
<h3 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h3><blockquote>
<p>【系统管理】-&gt; 【插件管理】-&gt; 【高级】-&gt; 【升级站点】</p>
</blockquote>
<blockquote>
<p>更换地址：<a href="http://mirror.xmission.com/jenkins/updates/current/update-center.json">http://mirror.xmission.com/jenkins/updates/current/update-center.json</a><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-06.png"></p>
</blockquote>
<h3 id="添加远程主机"><a href="#添加远程主机" class="headerlink" title="添加远程主机"></a>添加远程主机</h3><blockquote>
<p>添加凭证， 输入远程主机的账号密码，ID 用UUID 即可。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-07.png"></p>
</blockquote>
<blockquote>
<p>凭证-&gt;系统-&gt;全局凭证-&gt;添加凭证<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-08.png"></p>
</blockquote>
<blockquote>
<p>系统管理-&gt;系统设置-&gt;SSH remote host<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-09.png"></p>
</blockquote>
<h3 id="创建django测试项目"><a href="#创建django测试项目" class="headerlink" title="创建django测试项目"></a>创建django测试项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line">django-admin startproject mtest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app</span></span><br><span class="line">python manage.py startapp mayw</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings中添加app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;mayw&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello django world !&lt;h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改路由urls.py</span></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">from mayw import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(r<span class="string">&#x27;^$&#x27;</span>, views.index)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到码云</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Jenkins-创建任务"><a href="#Jenkins-创建任务" class="headerlink" title="Jenkins 创建任务"></a>Jenkins 创建任务</h3><blockquote>
<p>1<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-11.png"><br>2<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-10.png"><br>3 General<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-12.png"><br>4 源码管理（Source Code Management）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-13.png"><br>5 添加ssh私钥</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;ma.yawei@h3c.com&quot;</span> -f ~/.ssh/id-rsa-gitee</span><br><span class="line">git config --global user.name <span class="string">&quot;mayw&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;ma.yawei@h3c.com&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-14.png"></p>
<blockquote>
<p>6 构建触发器（Build Triggers）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-15.png"><br>H/2 * * * * 2分钟从git上pull一次代码，若代码有变化就构建环境</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * *  </span><br><span class="line">在master-build中创建触发器,设定1分钟执行一次</span><br><span class="line">poll SCM(日常表 可以根据时间来判断)</span><br><span class="line">H/2 * * * *    (2分钟检查一下版本库  如果有更新就不触发  如果没有更新就不触发)</span><br><span class="line">注：Schedule的配置规则是有5个空格隔开的字符组成，从左到右分别代表：分 时 天 月 年。*代表所有，0 20 * * * 表示&quot;在任何年任何月任何天20点0分&quot;进行构建</span><br></pre></td></tr></table></figure>

<blockquote>
<p>7 构建（Build）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-16.png"></p>
</blockquote>
<blockquote>
<p>8 构建后操作</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-17.png"></p>
<h3 id="创建内网部署任务"><a href="#创建内网部署任务" class="headerlink" title="创建内网部署任务"></a>创建内网部署任务</h3><blockquote>
<p>注意：<br>BUILD_ID=DONTKILLME : 在jenkins里面在后台运行的程序都会被jenkins自动杀死 所以需要加上BUILDID这个参数。加了这个参数你的程序就不会被杀。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BUILD_ID=DONTKILLME nohup python manage.py runserver 0.0.0.0:8000 &amp;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-18.png"></p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-19.png"></p>
<p><img src="https://gitee.com/sunglowrise/images/raw/masterydnote/2019/jenkins-20.png"></p>
<blockquote>
<p>邮箱配置（系统管理-&gt; 系统设置 -&gt; 邮件通知）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在&quot;Jenkins Location&quot;设置系统管理员地址（重要：不能省略！）</span><br><span class="line">在&quot;邮件通知&quot;部分配置发送邮件的用户名、密码（注意这里的密码使用的是163邮箱设置的&quot;客户端授权码&quot;，不是登陆密码）</span><br><span class="line">勾选&quot;通过发送测试邮件测试配置&quot;，填入测试收件人，点击&quot;Test Configuration&quot;</span><br><span class="line">到163邮箱里check新邮件</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-25.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-24.png"></p>
<h3 id="创建外网部署任务"><a href="#创建外网部署任务" class="headerlink" title="创建外网部署任务"></a>创建外网部署任务</h3><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-21.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-22.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-23.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 远程主机要做的事情：</span></span><br><span class="line"><span class="comment"># 安装django</span></span><br><span class="line"><span class="comment"># 创建一个目录把代码版本库拉取到本地</span></span><br><span class="line"><span class="comment"># 写脚本来运行代码 </span></span><br><span class="line"><span class="comment"># 脚本内容</span></span><br><span class="line"><span class="comment"># xxx.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># start.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data/git-test</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> /data/git-test/test11</span><br><span class="line"><span class="built_in">nohup</span> python manage.py runserver 0.0.0.0:8000 &gt; /dev/null   2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S架构图</title>
    <url>/2021/06/29/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/k8s.png" alt="K8S架构图"></p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/k8s_architecture.png" alt="K8S架构图"></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s之GlusterFS集群文件系统安装使用</title>
    <url>/2021/06/29/K8s%E4%B9%8BGlusterFS%E9%9B%86%E7%BE%A4%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
<th>clusterFs角色</th>
</tr>
</thead>
<tbody><tr>
<td>10.94.12.220</td>
<td>k8s-master</td>
<td>master</td>
</tr>
<tr>
<td>10.94.12.221</td>
<td>k8s-node1</td>
<td>slave</td>
</tr>
<tr>
<td>10.94.12.222</td>
<td>k8s-node2</td>
<td>slave</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置本地hosts</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">10.94.12.220  k8s-master</span><br><span class="line">10.94.12.221  k8s-node1</span><br><span class="line">10.94.12.222  k8s-node2</span><br></pre></td></tr></table></figure>

<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Centos</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line"># Ubuntu</span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure>

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos </span></span><br><span class="line">yum install -y centos-release-gluster </span><br><span class="line">yum install -y glusterfs glusterfs-server glusterfs-fuse glusterfs-rdma</span><br><span class="line"></span><br><span class="line">systemctl start glusterd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> glusterd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt install -y glusterfs-server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="将slave节点加入到根gluster集群"><a href="#将slave节点加入到根gluster集群" class="headerlink" title="将slave节点加入到根gluster集群"></a>将slave节点加入到根gluster集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gluster peer probe k8s-master</span><br><span class="line">gluster peer probe k8s-node1</span><br><span class="line">gluster peer probe k8s-node2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点的状态</span></span><br><span class="line">gluster peer status</span><br><span class="line"> </span><br><span class="line"><span class="comment">#删除指定的节点，后跟主机名或IP</span></span><br><span class="line">gluster peer detach node2</span><br><span class="line"> </span><br><span class="line"><span class="comment">#gluster peer命令帮助信息</span></span><br><span class="line">gluster peer <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h4 id="创建卷"><a href="#创建卷" class="headerlink" title="创建卷"></a>创建卷</h4><blockquote>
<p>为了满足不同应用对高性能、高可用的需求，GlusterFS 支持 7 种卷，即 distribute 卷、stripe 卷、replica 卷、distribute stripe 卷、distribute replica 卷、stripe Replica 卷、distribute stripe replica 卷。<br>其实不难看出，GlusterFS 卷类型实际上可以分为3种基本卷和4种复合卷，每种类型的卷都有其自身的特点和适用场景。</p>
</blockquote>
<h5 id="1-分布式卷"><a href="#1-分布式卷" class="headerlink" title="1. 分布式卷"></a>1. 分布式卷</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/gluster</span><br><span class="line"><span class="comment"># 创建卷</span></span><br><span class="line">gluster volume create k8s_data k8s-master:/data/gluster k8s-node1:/data/gluster k8s-node2:/data/gluster force</span><br></pre></td></tr></table></figure>

<h5 id="2-复制式卷"><a href="#2-复制式卷" class="headerlink" title="2. 复制式卷"></a>2. 复制式卷</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k8s_data 这个是卷的名称</span></span><br><span class="line"><span class="comment"># replica 3  表示是三份副本，也就是一份数据写三分</span></span><br><span class="line"><span class="comment"># 目前支持比较好的是2或者3副本，事实上个人觉得3最好，性能上还可以接受，安全上比2要好，因为是无中心的，2个brick复制可能脑裂的几率会比较大。</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/gluster</span><br><span class="line">gluster volume create k8s_data replica 3 k8s-master:/data/gluster k8s-node1:/data/gluster k8s-node2:/data/gluster force</span><br></pre></td></tr></table></figure>

<h5 id="3-分布式复制式卷"><a href="#3-分布式复制式卷" class="headerlink" title="3. 分布式复制式卷"></a>3. 分布式复制式卷</h5><blockquote>
<p>这个模式比较的重要，企业开发中，一般会使用这个模式。执行添加卷的时候，一定要确保挂载的目录存在，不然，就会报错。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/gluster2</span><br><span class="line"><span class="comment"># 创建备份</span></span><br><span class="line">gluster volume create k8s_data replica 2 k8s-node1:/data/gluster2 k8s-node2:/data/gluster2 force</span><br><span class="line"><span class="comment"># 添加备份</span></span><br><span class="line">gluster volume add-brick k8s_data replica 2 k8s-master:/data/gluster2 force</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-收缩卷"><a href="#4-收缩卷" class="headerlink" title="4. 收缩卷"></a>4. 收缩卷</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开始缩容</span></span><br><span class="line">gluster volume remove-brick k8s_data k8s-node1:/data/gluster2/ k8s-node2:/data/gluster2/ start</span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">gluster volume remove-brick k8s_data k8s-node1:/data/gluster2/ k8s-node2:/data/gluster2/ status</span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line">gluster volume remove-brick k8s_data k8s-node1:/data/gluster2/ k8s-node2:/data/gluster2/ commit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="5-迁移卷"><a href="#5-迁移卷" class="headerlink" title="5. 迁移卷"></a>5. 迁移卷</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 刚刚删除了卷，然后现在需要将k8s-master节点，换成k8s-node1节点</span></span><br><span class="line"><span class="comment"># 开始迁移 </span></span><br><span class="line">gluster volume replace-brick k8s_data k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ start</span><br><span class="line"><span class="comment"># 查看迁移状态 </span></span><br><span class="line">gluster volume replace-brick k8s_data k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ status</span><br><span class="line"><span class="comment"># 数据迁移完毕后提交 </span></span><br><span class="line">gluster volume replace-brick k8s_data k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ commit</span><br><span class="line"><span class="comment"># 如果机器10.0.21.246出现故障已经不能运行,执行强制提交 </span></span><br><span class="line">gluster volume replace-brick k8s_data  k8s-master:/data/gluster2/ k8s-node1:/data/gluster2/ commit -force</span><br><span class="line"><span class="comment"># 同步整个卷</span></span><br><span class="line">gluster volume heal k8s_data full</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="卷操作"><a href="#卷操作" class="headerlink" title="卷操作"></a>卷操作</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动卷</span><br><span class="line">gluster volume start k8s_data</span><br><span class="line">#停止卷</span><br><span class="line">gluster volume  stop k8s_data</span><br><span class="line">#查看节点状态</span><br><span class="line">gluster  volume status</span><br><span class="line">#查看卷的情况</span><br><span class="line">gluster volume info k8s_data</span><br><span class="line">#删除卷</span><br><span class="line">gluster volume delete  k8s_data</span><br></pre></td></tr></table></figure>

<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gluster peer probe <span class="comment"># 增加一个节点，参数为主机名或IP</span></span><br><span class="line">gluster peer detach <span class="comment"># 删除指定的节点，后跟主机名或IP</span></span><br><span class="line">gluster peer status <span class="comment"># 列出切点的状态</span></span><br><span class="line">gluster peer <span class="built_in">help</span> <span class="comment"># 关于gluster peer命令的帮助信息</span></span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/xuguokun1986/article/details/71693769">https://blog.csdn.net/xuguokun1986/article/details/71693769</a></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>GlusterFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Libreoffice 之 Office 转 Pdf</title>
    <url>/2020/10/01/Libreoffice%20%E4%B9%8B%20Office%20%E8%BD%AC%20Pdf/</url>
    <content><![CDATA[<h4 id="安装libreOffice"><a href="#安装libreOffice" class="headerlink" title="安装libreOffice"></a>安装libreOffice</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install -y libreoffice</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装pypi"><a href="#安装pypi" class="headerlink" title="安装pypi"></a>安装pypi</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple pillow pypdf2 wand</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created By Murray(m18527) on 2019/10/29 14:04</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> PILImage</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader, PdfFileWriter</span><br><span class="line"><span class="keyword">from</span> wand.color <span class="keyword">import</span> Color</span><br><span class="line"><span class="keyword">from</span> wand.image <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">path_join</span>(<span class="params">path, *paths</span>):</span><br><span class="line">    <span class="keyword">return</span> os.path.join(path, *paths).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">office2pdf</span>(<span class="params">file_paths, out_dir</span>):</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(file_paths, <span class="built_in">list</span>):</span><br><span class="line">        file_paths = <span class="string">&quot; &quot;</span>.join(file_paths)</span><br><span class="line">    <span class="keyword">if</span> sys.platform == <span class="string">&quot;win32&quot;</span>:</span><br><span class="line">        cmd = <span class="string">&#x27;cmd /c &quot;D:/Program Files/LibreOffice/program/soffice&quot; --headless --invisible --convert-to pdf&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27; --outdir &#123;out_dir&#125; &#123;files&#125;&#x27;</span>.<span class="built_in">format</span>(out_dir=out_dir, files=file_paths)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd = <span class="string">&#x27;libreoffice --headless --invisible --convert-to pdf:writer_pdf_Export&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27; --outdir &#123;out_dir&#125; &#123;files&#125;&#x27;</span>.<span class="built_in">format</span>(out_dir=out_dir, files=file_paths)</span><br><span class="line">    p = os.popen(cmd)</span><br><span class="line">    p.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Covert to pdf finish. &#123;&#125; --&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_paths, out_dir))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Time used: &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(time.time() - start_time, <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress_image</span>(<span class="params">src_path, dst_path</span>):</span><br><span class="line">    ext = os.path.splitext(src_path)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> ext[<span class="number">1</span>:].upper() <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;JPG&#x27;</span>, <span class="string">&#x27;JPEG&#x27;</span>, <span class="string">&#x27;PNG&#x27;</span>]:</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    src_img = PILImage.<span class="built_in">open</span>(src_path)</span><br><span class="line">    w, h = src_img.size</span><br><span class="line">    dst_img = src_img.resize((<span class="built_in">int</span>(w / <span class="number">2</span>), <span class="built_in">int</span>(h / <span class="number">2</span>)), PILImage.ANTIALIAS)</span><br><span class="line">    dst_img.save(dst_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pdf2jpg</span>(<span class="params">pdf_path, image_dir, page_range=<span class="literal">None</span></span>):</span><br><span class="line">    img_list = []</span><br><span class="line">    pdf_file = PdfFileReader(pdf_path, strict=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> page_range:</span><br><span class="line">        total_pages = pdf_file.getNumPages()</span><br><span class="line">        page_range = <span class="built_in">range</span>(total_pages)</span><br><span class="line">    <span class="keyword">for</span> page_index <span class="keyword">in</span> page_range:</span><br><span class="line">        image_path = path_join(image_dir, <span class="string">&#x27;&#123;&#125;.jpg&#x27;</span>.<span class="built_in">format</span>(page_index))</span><br><span class="line">        page_obj = pdf_file.getPage(page_index)</span><br><span class="line">        dst_pdf = PdfFileWriter()</span><br><span class="line">        dst_pdf.addPage(page_obj)</span><br><span class="line">        pdf_bytes = io.BytesIO()</span><br><span class="line">        dst_pdf.write(pdf_bytes)</span><br><span class="line">        pdf_bytes.seek(<span class="number">0</span>)</span><br><span class="line">        img = Image(file=pdf_bytes, resolution=<span class="number">120</span>)</span><br><span class="line">        img.<span class="built_in">format</span> = <span class="string">&#x27;jpg&#x27;</span></span><br><span class="line">        img.compression_quality = <span class="number">90</span></span><br><span class="line">        img.background_color = Color(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">        img.save(filename=image_path)</span><br><span class="line">        img.destroy()</span><br><span class="line">        img_list.append(image_path)</span><br><span class="line">    <span class="keyword">return</span> img_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    office2pdf(<span class="string">r&quot;d:/data/office/test1.docx d:/data/office/test2.xlsx&quot;</span>, <span class="string">r&quot;d:/data/office&quot;</span>)</span><br><span class="line">    images = pdf2jpg(<span class="string">&quot;d:/data/office/test1.pdf&quot;</span>, <span class="string">&quot;d:/data/office/&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(images)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="wand-报错（linux）"><a href="#wand-报错（linux）" class="headerlink" title="wand 报错（linux）"></a>wand 报错（linux）</h4><blockquote>
<p>wand.exceptions.PolicyError: not authorized `/tmp/magick-25178xZ1TZlrRxjNS’ @ error/constitute.c/ReadImage/412</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 Under /etc/ImageMagick Directory may also beImageMagick-6 table of Content</span></span><br><span class="line"></span><br><span class="line">vim /etc/ImageMagick-6/policy.xml</span><br><span class="line">&lt;policy domain=<span class="string">&quot;coder&quot;</span> rights=<span class="string">&quot;none&quot;</span> pattern=<span class="string">&quot;PDF&quot;</span> /&gt; </span><br><span class="line"><span class="comment"># 改为 </span></span><br><span class="line">&lt;policy domain=<span class="string">&quot;coder&quot;</span> rights=<span class="string">&quot;read|write&quot;</span> pattern=<span class="string">&quot;PDF&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 之磁盘分区与挂载</title>
    <url>/2020/10/01/Linux%20%E4%B9%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="磁盘分区与挂载"><a href="#磁盘分区与挂载" class="headerlink" title="磁盘分区与挂载"></a>磁盘分区与挂载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看磁盘</span><br><span class="line">df -h</span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"># 分区与格式化</span><br><span class="line">fdisk /dev/sdb</span><br><span class="line"># 格式化分区</span><br><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line"></span><br><span class="line"># 查看磁盘ID</span><br><span class="line">blkid /dev/sdb1</span><br><span class="line"># /dev/sdb1: UUID=&quot;a77cd3a5-c077-4f7b-9903-5a467fed0fca&quot; TYPE=&quot;ext4&quot;</span><br><span class="line"></span><br><span class="line"># 开机自挂载</span><br><span class="line">vim /etc/fstab</span><br><span class="line"># 添加</span><br><span class="line">UUID=a77cd3a5-c077-4f7b-9903-5a467fed0fca /var/lib/docker ext4 defaults 0  0</span><br><span class="line"># 或</span><br><span class="line">echo UUID=a77cd3a5-c077-4f7b-9903-5a467fed0fca /var/lib/docker ext4 defaults 0  0 &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line">mount -a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将设备挂载到指定的目录下</span><br><span class="line">mount /dev/vdb1 /data</span><br><span class="line"></span><br><span class="line"># 保存到文件系统表 /etc/fstab</span><br><span class="line"># 当系统重新启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录。</span><br><span class="line">echo /dev/vdb1 /data ext4 defaults 0 0 &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 定时任务</title>
    <url>/2020/10/01/Linux%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="Linux定时任务"><a href="#Linux定时任务" class="headerlink" title="Linux定时任务"></a>Linux定时任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 */2 * * * supervisorctl -c /etc/supervisor/supervisord.conf restart receiverapp</span><br></pre></td></tr></table></figure>
<p>重启crontab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/rc.d/init.d/crond restart </span><br><span class="line">service cron restart</span><br></pre></td></tr></table></figure>













<p>Linux设置定时任务方法<br>linux下定时执行任务的方法：<br>在LINUX中你应该先输入crontab -e，然后就会有个vi编辑界面，再输入0 3 * * 1 /clearigame2内容到里面 :wq 保存退出。</p>
<p>在LINUX中，周期执行的任务一般由cron这个守护进程来处理[ps -ef|grep cron]。cron读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。<br>cron的配置文件称为”crontab”，是”cron table”的简写。</p>
<p>1、cron在3个地方查找配置文件<br>/var/spool/cron/ 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名。<br>/etc/crontab 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab。<br>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</p>
<p>2、权限<br>crontab权限问题到/var/adm/cron/下一看，文件cron.allow和cron.deny是否存在<br>用法如下：<br>1、如果两个文件都不存在，则只有root用户才能使用crontab命令。<br>2、如果cron.allow存在但cron.deny不存在，则只有列在cron.allow文件里的用户才能使用crontab命令，如果root用户也不在里面，则root用户也不能使用crontab。<br>3、如果cron.allow不存在, cron.deny存在，则只有列在cron.deny文件里面的用户不能使用crontab命令，其它用户都能使用。<br>4、如果两个文件都存在，则列在cron.allow文件中而且没有列在cron.deny中的用户可以使用crontab，如果两个文件中都有同一个用户，<br>以cron.allow文件里面是否有该用户为准，如果cron.allow中有该用户，则可以使用crontab命令。</p>
<p>3、cron服务<br>cron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。<br> service crond start    //启动服务<br> service crond stop     //关闭服务<br> service crond restart  //重启服务<br> service crond reload   //重新载入配置<br> service crond status   //查看服务状态 </p>
<p>4、在crontab文件中如何输入需要执行的命令和时间<br>该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。<br>每个域之间使用空格或者制表符分隔。格式如下：<br>minute hour day-of-month month-of-year day-of-week commands<br>分钟 小时 每个月的哪天 每年的哪月 每个星期的礼拜几 需执行的命令<br>合法值 00-59 00-23 01-31 01-12 0-6 (0 is sunday) commands（代表要执行的脚本）<br>除了数字还有几个个特殊的符号就是”<em>“、”/“和”-“、”,”，</em>代表所有的取值范围内的数字，”/“代表每的意思,”/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。</p>
<p>几个例子：<br>每五分钟执行一次： */5 * * * *<br>每小时执行一次 ：   0 * * * *<br>每天执行一次：       0 0 * * *<br>每周执行一次：       0 0 * * 0<br>每月执行一次：       0 0 1 * *<br>每年执行一次：       0 0 1 1 *</p>
<p>每天早上6点<br>0 6 * * * echo “Good morning.” &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</p>
<p>每两个小时<br>0 */2 * * * echo “Have a break now.” &gt;&gt; /tmp/test.txt  </p>
<p>晚上11点到早上8点之间每两个小时和早上八点<br>0 23-7/2，8 * * * echo “Have a good dream” &gt;&gt; /tmp/test.txt</p>
<p>每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点<br>0 11 4 * 1-3 command line</p>
<p>1月1日早上4点<br>0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </p>
<p>每小时执行/etc/cron.hourly内的脚本<br>01 * * * * root run-parts /etc/cron.hourly<br>每天执行/etc/cron.daily内的脚本<br>02 4 * * * root run-parts /etc/cron.daily </p>
<p>每星期执行/etc/cron.weekly内的脚本<br>22 4 * * 0 root run-parts /etc/cron.weekly </p>
<p>每月去执行/etc/cron.monthly内的脚本<br>42 4 1 * * root run-parts /etc/cron.monthly </p>
<p>注意: “run-parts”这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。   </p>
<p>每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。<br>5，15，25，35，45，55 16，17，18 * * * command</p>
<p>每周一，三，五的下午3：00系统进入维护状态，重新启动系统。<br>00 15 * * 1，3，5 shutdown -r +5</p>
<p>每小时的10分，40分执行用户目录下的innd/bbslin这个指令：<br>10，40 * * * * innd/bbslink </p>
<p>每小时的1分执行用户目录下的bin/account这个指令：<br>1 * * * * bin/account</p>
<p>每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）：<br>20 3 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st）  </p>
<p>每年的一月和四月，4号到9号的3点12分和3点55分执行/bin/rm -f expire.1st这个指令，并把结果添加在mm.txt这个文件之后（mm.txt文件位于用户自己的目录位置）。<br>12,55 3 4-9 1,4 * /bin/rm -f expire.1st$#@62;$#@62;mm.txt </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 搭建VsFTP</title>
    <url>/2020/10/01/Linux%20%E6%90%AD%E5%BB%BAVsFTP/</url>
    <content><![CDATA[<h4 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h4><ol>
<li>安装 vsftpd<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：<br><br>/etc/vsftpd/vsftpd.conf是核心配置文件。<br><br>/etc/vsftpd/ftpusers 是黑名单文件，此文件里的用户不允许访问 FTP 服务器。<br><br>/etc/vsftpd/user_list是白名单文件，是允许访问 FTP 服务器的用户列表</p>
</blockquote>
</li>
</ol>
<ul>
<li>运行以下命令设置开机自启动。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure></li>
<li>运行以下命令启动 FTP 服务。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></li>
<li>运行以下命令查看 FTP 服务端口。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -antup | grep ftp</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>配置 vsftpd<blockquote>
<p>vsftpd 安装后默认开启了匿名 FTP 的功能，使用匿名FTP，用户无需输入用户名密码即可登录 FTP服务器，但没有权限修改或上传文件。</p>
</blockquote>
</li>
</ol>
<ul>
<li>配置匿名用户上传文件权限</li>
</ul>
<blockquote>
<p>修改 vsftpd.conf 的配置文</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将写权限修改为<code>write_enable=YES</code>。<br><br>将匿名上传权限修改为<code>anon_upload_enable=YES</code></p>
</blockquote>
<ul>
<li>更改 <code>/var/ftp/pub</code> 目录的权限，为 FTP 用户添加写权限，并重新加载配置文件。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod o+w /var/ftp/pub/</span><br><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>配置本地用户登录</li>
</ol>
<ul>
<li><p>创建用户并设置密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd ftptest</span><br><span class="line">passwd ftptest</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/vsftpd/vsftpd.conf</code></p>
<blockquote>
<p>将是否允许匿名登录 FTP 的参数修改为<code>anonymous enable=NO</code><br><br>将是否允许本地用户登录 FTP 的参数修改为<code>local_enable=YES</code></p>
</blockquote>
</li>
</ul>
<ol start="4">
<li>设置安全组<blockquote>
<p>搭建好 FTP 站点后，您需要在实例的安全组的入方向添加一条放行 FTP 端口的规则。</p>
</blockquote>
</li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>vsftp 读取目录列表失败<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态:	正在连接 118.22.6.11:21...</span><br><span class="line">状态:	连接建立，等待欢迎消息...</span><br><span class="line">状态:	已登录</span><br><span class="line">状态:	读取目录列表...</span><br><span class="line">命令:	PWD</span><br><span class="line">响应:	257 &quot;/&quot;</span><br><span class="line">命令:	TYPE I</span><br><span class="line">响应:	200 Switching to Binary mode.</span><br><span class="line">命令:	PASV</span><br><span class="line">响应:	227 Entering Passive Mode (118,22,6,11,95,109).</span><br><span class="line">命令:	LIST</span><br><span class="line">错误:	20 秒后无活动，连接超时</span><br><span class="line">错误:	读取目录列表失败</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>解决：</p>
<ul>
<li>开放20、21端口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=20/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=21/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></li>
<li>关闭selinux：<code>setenforce 0</code></li>
<li>FTP客户端设置传输模式为<code>主动</code>模式。</li>
</ul>
<ol start="2">
<li><p>指定挂载点</p>
<blockquote>
<p>修改<code>/etc/vsftpd.conf</code><br><br>添加一行 <code>local_root=/data</code><br> #假设硬盘挂载点是/data。这样的话，使用普通用户登录的话，ftp的默认目录不再是/home/xxx/ ,而是/data</p>
</blockquote>
</li>
<li><p>PASV问题</p>
<blockquote>
<p>解决：vsftpd.conf加上了一句<code>pasv_enable=NO</code></p>
</blockquote>
</li>
</ol>
<h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">centos FTP 用户指定目录禁用上级目录</span><br><span class="line">在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录。</span><br><span class="line">chroot_list_enable=YES/NO（NO）</span><br><span class="line">设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。(注释掉只显示指定目录为根)</span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line">用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。</span><br><span class="line">chroot_local_user=YES/NO（NO）</span><br><span class="line">用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。</span><br><span class="line">通过搭配能实现以下几种效果：</span><br><span class="line">①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。</span><br><span class="line">②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。</span><br><span class="line">③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。</span><br><span class="line">④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。</span><br></pre></td></tr></table></figure>


<h4 id="Ubuntu-14-04"><a href="#Ubuntu-14-04" class="headerlink" title="Ubuntu 14.04"></a>Ubuntu 14.04</h4><ol>
<li><p>更新源列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：如果不运行该命令，直接安装vsftpd,会出现”有几个软件包无法下载</p>
</blockquote>
</li>
<li><p>安装vsftpd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>
<p>安装提示信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  vsftpd</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 39 not upgraded.</span><br><span class="line">Need to get 111 kB of archives.</span><br><span class="line">After this operation, 361 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://mirrors.cloud.aliyuncs.com/ubuntu/ trusty-updates/main vsftpd amd64 3.0.2-1ubuntu2.14.04.1 [111 kB]</span><br><span class="line">Fetched 111 kB in 0s (2,095 kB/s)</span><br><span class="line">Preconfiguring packages ...</span><br><span class="line">Selecting previously unselected package vsftpd.</span><br><span class="line">(Reading database ... 100873 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../vsftpd_3.0.2-1ubuntu2.14.04.1_amd64.deb ...</span><br><span class="line">Unpacking vsftpd (3.0.2-1ubuntu2.14.04.1) ...</span><br><span class="line">Processing triggers for man-db (2.6.7.1-1ubuntu1) ...</span><br><span class="line">Processing triggers for ureadahead (0.100.0-16) ...</span><br><span class="line">ureadahead will be reprofiled on next reboot</span><br><span class="line">Setting up vsftpd (3.0.2-1ubuntu2.14.04.1) ...</span><br><span class="line">vsftpd start/running, process 19096</span><br><span class="line">Processing triggers for ureadahead (0.100.0-16) ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看vsftp运行状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service vsftpd status </span><br></pre></td></tr></table></figure>
</li>
<li><p>创建用户与主目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /home/uftp</span><br><span class="line"></span><br><span class="line">sudo useradd -d /home/uftp -s /bin/bash uftp</span><br><span class="line"></span><br><span class="line">sudo passwd uftp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改vsftpd.conf配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/vsftpd.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userlist_deny=NO</span><br><span class="line">userlist_enable=YES</span><br><span class="line">userlist_file=/etc/ftp_user_list</span><br><span class="line"></span><br><span class="line"># seccomp_sandbox=NO # 不配置可能导致530问题</span><br><span class="line"></span><br><span class="line">local_enable=YES # 允许本地用户登录</span><br><span class="line"></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">#chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建user_list文件并添加uftp用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ftp_user_list</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建vsftpd.chroot_list文件并添加uftp用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/vsftpd.chroot_list</span><br><span class="line"></span><br></pre></td></tr></table></figure>















</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下各目录作用</title>
    <url>/2020/10/01/Linux%E4%B8%8B%E5%90%84%E7%9B%AE%E5%BD%95%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Linux下各目录作用"><a href="#Linux下各目录作用" class="headerlink" title="Linux下各目录作用"></a>Linux下各目录作用</h3><h4 id="“-“的目录的内容"><a href="#“-“的目录的内容" class="headerlink" title="“/“的目录的内容"></a>“/“的目录的内容</h4><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/usr</td>
<td>目录包含所有的命令、程序库、文档和其它文件，以及Linux发行版本的主要的应用程序。这些文件在正常操作中不会被改变的。</td>
</tr>
<tr>
<td>/var</td>
<td>目录包含在正常操作中被改变的文件：假脱机文件、记录文件、加锁文件、临时文件和页格式化文件等。</td>
</tr>
<tr>
<td>/home</td>
<td>目录包含用户的文件：参数设置文件、个性化文件、文档、数据、EMAIL、缓存数据等。这个目录在系统升级时应该保留。</td>
</tr>
<tr>
<td>/proc</td>
<td>目录整个包含虚的文件。它们实际上并不存在磁盘上，也不占用任何空间。当查看这些文件时，实际上是在访问存在内存中的信息，这些信息用于访问系统。</td>
</tr>
<tr>
<td>/bin</td>
<td>系统启动时需要的执行文件（二进制），这些文件可以被普通用户使用。</td>
</tr>
<tr>
<td>/sbin</td>
<td>系统执行文件（二进制），这些文件不打算被普通用户使用。普通用户仍然可以使用它们，但要指定目录。</td>
</tr>
<tr>
<td>/etc</td>
<td>操作系统的配置文件目录。</td>
</tr>
<tr>
<td>/root</td>
<td>系统管理员（即超级用户或根用户）的Home目录。</td>
</tr>
<tr>
<td>/dev</td>
<td>设备文件目录。LINUX下设备被当成文件，这样一来硬件被抽象化，便于读写、网络共享以及需要临时装载到文件系统中。正常情况下，设备会有一个独立的子目 录。这些设备的内容会出现在独立的子目录下。LINUX没有所谓的驱动符。</td>
</tr>
<tr>
<td>/lib</td>
<td>根文件系统目录下程序和核心模块的共享库。</td>
</tr>
<tr>
<td>/boot</td>
<td>用于自举加载程序（LILO或GRUB）的文件。当计算机启动时（如果有多个操作系统，有可能允许你选择启动哪一个操作系统），这些文件首先被装载。这个 目录也会包含LINUX核（压缩文件vmlinuz），但LINUX核也可以存在别处，只要配置LILO并且LILO知道LINUX核在哪儿。</td>
</tr>
<tr>
<td>/opt</td>
<td>可选的应用程序。</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时文件。该目录会被自动清理干净。</td>
</tr>
<tr>
<td>/lost+found</td>
<td>这个目录平时是空的，当系统不正常关机后，在文件系统修复时恢复的文件。</td>
</tr>
<tr>
<td>/mnt</td>
<td>这个目录是空的，系统提供这个目录是让用户临时挂载别的文件系统。</td>
</tr>
</tbody></table>
<h4 id="“-usr”-目录的内容"><a href="#“-usr”-目录的内容" class="headerlink" title="“/usr” 目录的内容"></a>“/usr” 目录的内容</h4><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/usr/X11R6</td>
<td>X-WINDOWS系统（version 11, release 6)。</td>
</tr>
<tr>
<td>/usr/X11</td>
<td>同/usr/X11R6 （/usr/X11R6的符号连接）。</td>
</tr>
<tr>
<td>/usr/X11R6/bin</td>
<td>大量的小X-WINDOWS应用程序（也可能是一些在其它子目录下大执行文件的符号连接）。</td>
</tr>
<tr>
<td>/usr/doc</td>
<td>LINUX的文档资料（在更新的系统中，这个目录移到/usr/share/doc）。</td>
</tr>
<tr>
<td>/usr/share</td>
<td>独立与你计算机结构的数据。</td>
</tr>
<tr>
<td>/usr/bin</td>
<td>存放着许多应用程序。</td>
</tr>
<tr>
<td>/usr/sbin</td>
<td>超级用户使用的一些管理程序。</td>
</tr>
<tr>
<td>/usr/local</td>
<td>本地管理员安装的应用程序（也可能每个应用程序有单独的子目录），这个目录下的内容在重安装或升级操作系统后应该存在。</td>
</tr>
<tr>
<td>/usr/local/bin</td>
<td>可能是用户安装的小的应用程序，和一些在/usr/local目录下大应用程序的符号连接。</td>
</tr>
<tr>
<td>/usr/include</td>
<td>Linux下开发和编译应用程序需要的头文件，在这里查找。</td>
</tr>
<tr>
<td>/usr/lib</td>
<td>存放一些常用的动态链接共享库和静态档案库。</td>
</tr>
<tr>
<td>/usr/man</td>
<td>man在Linux中是帮助的同义词，帮助文档的存放目录。</td>
</tr>
<tr>
<td>/usr/src</td>
<td>Linux开放的源代码就存在这个目录。</td>
</tr>
</tbody></table>
<h4 id="“-proc”目录的内容"><a href="#“-proc”目录的内容" class="headerlink" title="“/proc”目录的内容"></a>“/proc”目录的内容</h4><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/proc/cpuinfo</td>
<td>关于处理器的信息，如类型、厂家、型号和性能等。</td>
</tr>
<tr>
<td>/proc/devices</td>
<td>当前运行内核所配置的所有设备清单。</td>
</tr>
<tr>
<td>/proc/dma</td>
<td>当前正在使用的DMA通道。</td>
</tr>
<tr>
<td>/proc/filesystems</td>
<td>当前运行内核所配置的文件系统。</td>
</tr>
<tr>
<td>/proc/interrupts</td>
<td>正在使用的中断，和曾经有多少个中断。</td>
</tr>
<tr>
<td>/proc/ioports</td>
<td>当前正在使用的I/O端口。</td>
</tr>
</tbody></table>
<h4 id="Linux下文件夹部署详解"><a href="#Linux下文件夹部署详解" class="headerlink" title="Linux下文件夹部署详解"></a>Linux下文件夹部署详解</h4><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>指令文件 （适用于所有用户的）</td>
</tr>
<tr>
<td>/etc</td>
<td>系统配置文件</td>
</tr>
<tr>
<td>/sbin</td>
<td>指令文件 （适用于root用户的）</td>
</tr>
<tr>
<td>/home</td>
<td>用户主目录，新建用户后，该用户的源文件默认建立在此目录下</td>
</tr>
<tr>
<td>/boot</td>
<td>内核和启动文件</td>
</tr>
<tr>
<td>/dev</td>
<td>设备文件，用于和地层驱动打叫道的</td>
</tr>
<tr>
<td>/usr</td>
<td>应用程序放置目录</td>
</tr>
<tr>
<td>/mnt</td>
<td>临时挂载的文件系统， 如光驱</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时文件</td>
</tr>
<tr>
<td>/root</td>
<td>root用户主目录</td>
</tr>
<tr>
<td>/opt</td>
<td>空文件夹</td>
</tr>
<tr>
<td>/proc</td>
<td>内存中实际参数和内核的映象，此文件夹的文件不宜改动</td>
</tr>
<tr>
<td>/lib</td>
<td>类库，用于动态加载内核</td>
</tr>
<tr>
<td>/lost+found</td>
<td>恢复误删除文件</td>
</tr>
</tbody></table>
<h3 id="总结来说"><a href="#总结来说" class="headerlink" title="总结来说"></a>总结来说</h3><ul>
<li>用户应该将文件存在/home/<user_login_name>目录下(及其子目录下)。</li>
<li>本地管理员大多数情况下将额外的软件安装在/usr/local目录下并符号连接在/usr/local/bin下的主执行程序。</li>
<li>系统的所有设置在/etc目录下。</li>
<li>不要修改根目录（”/“）或”/usr”目录下的任何内容，除非真的清楚要做什么。这些目录最好和LINUX发布时保持一致。</li>
<li>大多数工具和应用程序安装在目录：”/bin”, “/usr/sbin”, “/sbin”, “/usr/x11/bin”, “/usr/local/bin”。</li>
<li>所有的文件在单一的目录树下。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装与配置snmp服务</title>
    <url>/2020/10/01/Linux%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEsnmp%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="Linux下安装与配置snmp服务"><a href="#Linux下安装与配置snmp服务" class="headerlink" title="Linux下安装与配置snmp服务"></a>Linux下安装与配置snmp服务</h3><h4 id="yum安装snmp服务"><a href="#yum安装snmp服务" class="headerlink" title="yum安装snmp服务"></a>yum安装snmp服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y net-snmp net-snmp-utils</span><br></pre></td></tr></table></figure>

<h4 id="启动snmp服务"><a href="#启动snmp服务" class="headerlink" title="启动snmp服务"></a>启动snmp服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动snmp</span></span><br><span class="line">service snmpd start <span class="comment"># 提示：Starting snmpd: [  OK  ]，则启动snmp服务成功。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将snmp服务设置为开机自启动</span></span><br><span class="line">chkconfig snmpd on <span class="comment"># 将snmpd服务设为开机自启动，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看开机启动是否设置成功</span></span><br><span class="line">chkconfig --list | grep snmpd <span class="comment"># 成功显示：snmpd    0:off	1:off	2:on	3:on	4:on	5:on	6:off</span></span><br></pre></td></tr></table></figure>

<h4 id="验证snmp服务"><a href="#验证snmp服务" class="headerlink" title="验证snmp服务"></a>验证snmp服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用snmpwalk命令，查看本机localhost的主机名：</span></span><br><span class="line">snmpwalk -c public -v 2c localhost sysName.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用snmptranslate命令，检查snmp工具是否可以使用：</span></span><br><span class="line">snmptranstate -To | <span class="built_in">head</span> <span class="comment"># 若查出了部分oid，则表示snmp工具可以正常使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试远端主机是否可以获取数据</span></span><br><span class="line">snmpwalk -c public -v 2c 192.168.1.110 sysName.0 <span class="comment"># 若通过远端主机获取到的主机名，与在本机获取到的主机名是一致的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置snmp服务"><a href="#配置snmp服务" class="headerlink" title="配置snmp服务"></a>配置snmp服务</h4><blockquote>
<p>以上安装完成后，使用的是snmp的默认配置，通过这些默认配置，我们只能获取主机的部分信息。但一些其他的重要信息，无法获取。如主机的CPU使用情况，内存使用情况等。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">snmpwalk -c public -v 2c 192.168.1.110 1.3.6.1.4.1.2021.11.11.0 <span class="comment"># 如上，无法获取CPU的空闲率（注：1.3.6.1.4.1.2021.11.11.0是主机CPU空闲率的oid）。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>要获取主机的一些重要信息，则要修改snmp的默认配置。</p>
</blockquote>
<ul>
<li>配置方法<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/etc/snmp/snmpd.conf文件</span></span><br><span class="line"><span class="built_in">cp</span> /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.bak  <span class="comment"># backup</span></span><br><span class="line">vim /etc/snmp/snmpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># ① 修改查看设备节点的权限 </span></span><br><span class="line"><span class="comment"># 在该文件中，找到如下位置：</span></span><br><span class="line">view    systemview    included   .1.3.6.1.2.1.1</span><br><span class="line">view    systemview    included   .1.3.6.1.2.1.25.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># view：定义了可以查看哪些节点设备的信息。</span></span><br><span class="line"><span class="comment"># snmp默认配置只能查看.1.3.6.1.2.1.1和.1.3.6.1.2.1.25.1.1节点下的设备信息，而主机CPU和内存等设备都不在这些节点下，所以无法获取这些数据。因此，可以修改这个配置，添加一行：</span></span><br><span class="line">view    systemview    included   .1 <span class="comment"># 表示可以查看.1节点下的所有设备信息 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ② 修改Process checks的配置</span></span><br><span class="line"><span class="comment"># 搜索Process checks位置</span></span><br><span class="line">/Process checks <span class="comment">#搜索并找到位置Process checks位置，将</span></span><br><span class="line"><span class="comment"># proc mountd</span></span><br><span class="line"><span class="comment"># proc ntalkd 4</span></span><br><span class="line"><span class="comment"># proc sendmail 10 1</span></span><br><span class="line"><span class="comment"># 三行前的&quot;#&quot;号去掉，取消注释，结果为：</span></span><br><span class="line">proc mountd</span><br><span class="line">proc ntalkd 4</span><br><span class="line">proc sendmail 10 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ③ 修改Executables/scripts配置</span></span><br><span class="line"><span class="comment"># 搜索Executables位置:</span></span><br><span class="line">/Executables <span class="comment"># 找到Executables/scripts位置，将</span></span><br><span class="line"><span class="comment">#exec echotest /bin/echo hello world</span></span><br><span class="line"><span class="comment"># 一行前的&quot;#&quot;号去掉，取消注释。</span></span><br><span class="line"><span class="built_in">exec</span> echotest /bin/echo hello world</span><br><span class="line"></span><br><span class="line"><span class="comment"># ④ 修改disk checks配置</span></span><br><span class="line"><span class="comment"># 搜索disk checks位置:</span></span><br><span class="line">/disk checks <span class="comment"># 找到disk checks位置，将</span></span><br><span class="line"><span class="comment">#disk / 10000</span></span><br><span class="line"><span class="comment"># 一行前的&quot;#&quot;号去掉，取消注释。</span></span><br><span class="line">disk / 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑤ 修改load average checks配置</span></span><br><span class="line"><span class="comment"># 搜索load average checks:</span></span><br><span class="line">/load average checks <span class="comment"># 找到load average checks位置，将</span></span><br><span class="line"> <span class="comment">#load 12 14 14</span></span><br><span class="line"><span class="comment"># 一行前的&quot;#&quot;号去掉，取消注释。</span></span><br><span class="line">load 12 14 14</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑥ 保存修改，重启snmp服务</span></span><br><span class="line">service snmpd restart</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="验证修改配置后的snmp服务"><a href="#验证修改配置后的snmp服务" class="headerlink" title="验证修改配置后的snmp服务"></a>验证修改配置后的snmp服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -c public -v 2c 192.168.1.110 1.3.6.1.4.1.2021.11.11.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Snmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装MySQL</title>
    <url>/2019/01/01/Linux%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<h3 id="Centos："><a href="#Centos：" class="headerlink" title="Centos："></a>Centos：</h3><p>a、安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure>
<p>b、配置root密码</p>
<blockquote>
<p>在mysql系统外，使用mysqladmin</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p password 密码</span><br><span class="line">Enter password: 【输入原来的密码】</span><br></pre></td></tr></table></figure>
<p>或者</p>
<blockquote>
<p>通过登录mysql系统，</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mysql -uroot -p</span><br><span class="line">Enter password: 【输入原来的密码】</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt; update user set password=password(&quot;123456&quot;) where user=&#x27;root&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit; </span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu:"></a>Ubuntu:</h3><blockquote>
<p>安装（若没有mysql-server，则可能需要配置软件源）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server-5.7</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo apt-get install mysql-server-5.7</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动mysql服务：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br><span class="line">service mysql restart</span><br><span class="line">service mysql stop</span><br></pre></td></tr></table></figure>


<h3 id="设置远程访问"><a href="#设置远程访问" class="headerlink" title="设置远程访问"></a>设置远程访问</h3><blockquote>
<p>将/etc/mysql/my.cnf（或/etc/mysql/mysql.conf.d/mysqld.cnf）中找到bind-address注释掉或者改成0.0.0.0。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Instead of skip-networking the default is now to listen only on </span></span><br><span class="line"><span class="comment"># localhost which is more compatible and is not less </span></span><br><span class="line"><span class="comment"># secure.bind-address = 127.0.0.1</span></span><br><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mysql默认是不允许远程连接的，因为有很大的安全隐患。需要手动增加可以远程访问数据库的用户。</p>
</blockquote>
<p><strong>方法一</strong></p>
<blockquote>
<p>本地登入mysql，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，将”localhost”改为”%”</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -u root -p</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">mysql&gt;select host, user from user;</span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<blockquote>
<p>直接授权(推荐 )，需连接到mysql服务器</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -u root -p</span><br><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;your_password&#x27; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件共享</title>
    <url>/2020/10/01/Linux%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu:"></a>Ubuntu:</h3><h4 id="samba共享文件："><a href="#samba共享文件：" class="headerlink" title="samba共享文件："></a>samba共享文件：</h4><ul>
<li><p>安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y samba</span><br></pre></td></tr></table></figure></li>
<li><p>配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑samba配置文件</span></span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="comment"># 添加如下内容：</span></span><br><span class="line">[mhiwyf]</span><br><span class="line">    comment = mhiwyf samba share</span><br><span class="line">    path = /home/mhiwyf/share</span><br><span class="line">    browseable = <span class="built_in">yes</span></span><br><span class="line">    writable = <span class="built_in">yes</span></span><br><span class="line">    valid <span class="built_in">users</span> = mhiwyf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户密码</span></span><br><span class="line">sudo smbpasswd -a mhiwyf <span class="comment"># 添加mhiwyf用户（linux系统中已有的用户） ，并且增加密码 ，添加成功会有提示。</span></span><br><span class="line">sudo smbpasswd -e mhiwyf <span class="comment"># 查看用户mhiwyf是否存在，也就是没有添加成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单测试配置是否正确</span></span><br><span class="line">sudo testparm </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启samba</span></span><br><span class="line">sudo service smbd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置文件夹权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /home/mhiwyf/share</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS:"></a>CentOS:</h3><ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y samba samba-client samba-commom </span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/samba/smb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下内容：</span></span><br><span class="line">[mhiwyf]</span><br><span class="line">    comment = mhiwyf samba share</span><br><span class="line">    path = /home/mhiwyf/share</span><br><span class="line">    browseable = <span class="built_in">yes</span></span><br><span class="line">    writable = <span class="built_in">yes</span></span><br><span class="line">    valid <span class="built_in">users</span> =mhiwyf</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 设定用户密码：</span></span><br><span class="line">smbpasswd -a mhiwyf <span class="comment"># 添加mhiwyf用户（linux系统中已有的用户） ，并且增加密码 ，添加成功会有提示。</span></span><br><span class="line">smbpasswd -e mhiwyf <span class="comment"># 查看用户mhiwyf是否存在，也就是没有添加成功。</span></span><br><span class="line">testparm <span class="comment">#简单测试配置是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改共享文件夹权限</span></span><br><span class="line"><span class="built_in">chmod</span> 777 /home/myw/share</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防护墙：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭centos的selinux模块</p>
<blockquote>
<p>该模块增加了centos安全访问控制性能，对samba及ftp等一些配置均有影响。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑/etc/sysconfig/selinux文件</span></span><br><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="comment"># 修改如下：</span></span><br><span class="line">SELINUX=disabled <span class="comment"># 将SELINUX=enforcing改为SELINUX=disabled</span></span><br><span class="line"><span class="comment"># 退出保存，然后执行命令行setenforce 0，并且重启</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>6、启动、暂停和停止服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/smb start</span><br><span class="line">/etc/init.d/smb stop</span><br><span class="line">/etc/init.d/smb restart</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">service smb start</span><br><span class="line">service smb stop</span><br><span class="line">service smb restart</span><br></pre></td></tr></table></figure>

<ul>
<li>开启端口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"> </span><br><span class="line"> # 命令含义： </span><br><span class="line"> # --zone #作用域 </span><br><span class="line"> # --add-port=80/tcp  #添加端口，格式为：端口/通讯协议 </span><br><span class="line"> # --permanent  #永久生效，没有此参数重启后失效</span><br><span class="line"></span><br><span class="line"># 重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="Samba参数说明"><a href="#Samba参数说明" class="headerlink" title="Samba参数说明"></a>Samba参数说明</h3><ul>
<li>配置Samba服务<blockquote>
<p>Samba的主配置文件为/etc/samba/smb.conf</p>
</blockquote>
</li>
</ul>
<p><strong>主配置文件由两部分构成</strong>:</p>
<ul>
<li>Global Settings # 该设置都是与Samba服务整体运行环境有关的选项，它的设置项目是针对所有共享资源的。</li>
<li>Share Definitions # 该设置针对的是共享目录个别的设置，只对当前的共享资源起作用。</li>
</ul>
<p><strong>全局参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line"> </span><br><span class="line">config file = /usr/local/samba/lib/smb.conf.%m</span><br><span class="line"><span class="comment"># 说明：config file可以让你使用另一个配置文件来覆盖缺省的配置文件。如果文件不存在，则该项无效。这个参数很有用，可以使得samba配置更灵活，可以让一台 samba服务器模拟多台不同配置的服务器。比如，你想让PC1（主机名）这台电脑在访问Samba Server时使用它自己的配置文件，那么先在/etc/samba/host/下为PC1配置一个名为smb.conf.pc1的文件，然后在 smb.conf中加入：config file = /etc/samba/host/smb.conf.%m。这样当PC1请求连接Samba Server时，smb.conf.%m就被替换成smb.conf.pc1。这样，对于PC1来说，它所使用的Samba服务就是由 smb.conf.pc1定义的，而其他机器访问Samba Server则还是应用smb.conf。</span></span><br><span class="line"> </span><br><span class="line">workgroup = WORKGROUP</span><br><span class="line"><span class="comment"># 说明：设定 Samba Server 所要加入的工作组或者域。</span></span><br><span class="line"> </span><br><span class="line">server string = Samba Server Version %v</span><br><span class="line"><span class="comment"># 说明：设定 Samba Server 的注释，可以是任何字符串，也可以不填。宏%v表示显示Samba的版本号。</span></span><br><span class="line"> </span><br><span class="line">netbios name = smbserver</span><br><span class="line"><span class="comment"># 说明：设置Samba Server的NetBIOS名称。如果不填，则默认会使用该服务器的DNS名称的第一部分。netbios name和workgroup名字不要设置成一样了。</span></span><br><span class="line"> </span><br><span class="line">interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24</span><br><span class="line"><span class="comment"># 说明：设置Samba Server监听哪些网卡，可以写网卡名，也可以写该网卡的IP地址。</span></span><br><span class="line"> </span><br><span class="line">hosts allow = 127. 192.168.1. 192.168.10.1</span><br><span class="line"><span class="comment"># 说明：表示允许连接到Samba Server的客户端，多个参数以空格隔开。可以用一个IP表示，也可以用一个网段表示。hosts deny 与hosts allow 刚好相反。</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># hosts allow=172.17.2.EXCEPT172.17.2.50 # 表示容许来自172.17.2.*的主机连接，但排除172.17.2.50</span></span><br><span class="line"><span class="comment"># hosts allow=172.17.2.0/255.255.0.0 # 表示容许来自172.17.2.0/255.255.0.0子网中的所有主机连接</span></span><br><span class="line"><span class="comment"># hosts allow=M1，M2 # 表示容许来自M1和M2两台计算机连接</span></span><br><span class="line"><span class="comment"># hosts allow=@pega # 表示容许来自pega网域的所有计算机连接</span></span><br><span class="line"> </span><br><span class="line">max connections = 0</span><br><span class="line"><span class="comment"># 说明：max connections用来指定连接Samba Server的最大连接数目。如果超出连接数目，则新的连接请求将被拒绝。0表示不限制。</span></span><br><span class="line"> </span><br><span class="line">deadtime = 0</span><br><span class="line"><span class="comment"># 说明：deadtime用来设置断掉一个没有打开任何文件的连接的时间。单位是分钟，0代表Samba Server不自动切断任何连接。</span></span><br><span class="line"> </span><br><span class="line">time server = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：time server用来设置让nmdb成为windows客户端的时间服务器。</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">log</span> file = /var/log/samba/log.%m</span><br><span class="line"><span class="comment"># 说明：设置Samba Server日志文件的存储位置以及日志文件名称。在文件名后加个宏%m（主机名），表示对每台访问Samba Server的机器都单独记录一个日志文件。如果pc1、pc2访问过Samba Server，就会在/var/log/samba目录下留下log.pc1和log.pc2两个日志文件。</span></span><br><span class="line"> </span><br><span class="line">max <span class="built_in">log</span> size = 50</span><br><span class="line"><span class="comment"># 说明：设置Samba Server日志文件的最大容量，单位为kB，0代表不限制。</span></span><br><span class="line"> </span><br><span class="line">security = user</span><br><span class="line"><span class="comment"># 说明：设置用户访问Samba Server的验证方式，一共有四种验证方式。</span></span><br><span class="line"><span class="comment"># 1. share：用户访问Samba Server不需要提供用户名和口令, 安全性能较低。</span></span><br><span class="line"><span class="comment"># 2. user：Samba Server共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。</span></span><br><span class="line"><span class="comment"># 3. server：依靠其他Windows NT/2000或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个NT系统上,使用 Windows NT进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。</span></span><br><span class="line"><span class="comment"># 4. domain：域安全级别,使用主域控制器(PDC)来完成认证。</span></span><br><span class="line"> </span><br><span class="line">passdb backend = tdbsam</span><br><span class="line"><span class="comment"># 说明：passdb backend就是用户后台的意思。目前有三种后台：smbpasswd、tdbsam和ldapsam。sam应该是security account manager（安全账户管理）的简写。</span></span><br><span class="line"><span class="comment"># 1.smbpasswd：该方式是使用smb自己的工具smbpasswd来给系统用户（真实用户或者虚拟用户）设置一个Samba密码，客户端就用这个密码来访问Samba的资源。smbpasswd文件默认在/etc/samba目录下，不过有时候要手工建立该文件。</span></span><br><span class="line"><span class="comment"># 2.tdbsam： 该方式则是使用一个数据库文件来建立用户数据库。数据库文件叫passdb.tdb，默认在/etc/samba目录下。passdb.tdb用户数据库 可以使用smbpasswd –a来建立Samba用户，不过要建立的Samba用户必须先是系统用户。我们也可以使用pdbedit命令来建立Samba账户。pdbedit命令的 参数很多，我们列出几个主要的。</span></span><br><span class="line"><span class="comment">#   pdbedit –a username：新建Samba账户。</span></span><br><span class="line"><span class="comment">#   pdbedit –x username：删除Samba账户。</span></span><br><span class="line"><span class="comment">#   pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。</span></span><br><span class="line"><span class="comment">#   pdbedit –Lv：列出Samba用户列表的详细信息。</span></span><br><span class="line"><span class="comment">#   pdbedit –c &quot;[D]&quot; –u username：暂停该Samba用户的账号。</span></span><br><span class="line"><span class="comment">#   pdbedit –c &quot;[]&quot; –u username：恢复该Samba用户的账号。</span></span><br><span class="line"><span class="comment"># 3.ldapsam：该方式则是基于LDAP的账户管理方式来验证用户。首先要建立LDAP服务，然后设置&quot;passdb backend = ldapsam:ldap://LDAP Server&quot;</span></span><br><span class="line"> </span><br><span class="line">encrypt passwords = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：是否将认证密码加密。因为现在windows操作系统都是使用加密密码，所以一般要开启此项。不过配置文件默认已开启。</span></span><br><span class="line"> </span><br><span class="line">smb passwd file = /etc/samba/smbpasswd</span><br><span class="line"><span class="comment"># 说明：用来定义samba用户的密码文件。smbpasswd文件如果没有那就要手工新建。</span></span><br><span class="line"> </span><br><span class="line">username map = /etc/samba/smbusers</span><br><span class="line"><span class="comment"># 说明：用来定义用户名映射，比如可以将root换成administrator、admin等。不过要事先在smbusers文件中定义好。比如：root = administrator admin，这样就可以用administrator或admin这两个用户来代替root登陆Samba Server，更贴近windows用户的习惯。</span></span><br><span class="line"> </span><br><span class="line">guest account = nobody</span><br><span class="line"><span class="comment"># 说明：用来设置guest用户名。</span></span><br><span class="line"> </span><br><span class="line">socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192</span><br><span class="line"><span class="comment"># 说明：用来设置服务器和客户端之间会话的Socket选项，可以优化传输速度。</span></span><br><span class="line"> </span><br><span class="line">domain master = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置Samba服务器是否要成为网域主浏览器，网域主浏览器可以管理跨子网域的浏览服务。</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">local</span> master = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：local master用来指定Samba Server是否试图成为本地网域主浏览器。如果设为no，则永远不会成为本地网域主浏览器。但是即使设置为yes，也不等于该Samba Server就能成为主浏览器，还需要参加选举。</span></span><br><span class="line"> </span><br><span class="line">preferred master = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置Samba Server一开机就强迫进行主浏览器选举，可以提高Samba Server成为本地网域主浏览器的机会。如果该参数指定为yes时，最好把domain master也指定为yes。使用该参数时要注意：如果在本Samba Server所在的子网有其他的机器（不论是windows NT还是其他Samba Server）也指定为首要主浏览器时，那么这些机器将会因为争夺主浏览器而在网络上大发广播，影响网络性能。如果同一个区域内有多台Samba Server，将上面三个参数设定在一台即可。</span></span><br><span class="line"> </span><br><span class="line">os level = 200</span><br><span class="line"><span class="comment"># 说明：设置samba服务器的os level。该参数决定Samba Server是否有机会成为本地网域的主浏览器。os level从0到255，winNT的os level是32，win95/98的os level是1。Windows 2000的os level是64。如果设置为0，则意味着Samba Server将失去浏览选择。如果想让Samba Server成为PDC，那么将它的os level值设大些。</span></span><br><span class="line"> </span><br><span class="line">domain logons = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置Samba Server是否要做为本地域控制器。主域控制器和备份域控制器都需要开启此项。</span></span><br><span class="line"> </span><br><span class="line">logon script = %u.bat</span><br><span class="line"><span class="comment"># 说明：当使用者用windows客户端登陆，那么Samba将提供一个登陆档。如果设置成%u.bat，那么就要为每个用户提供一个登陆档。如果人比较多， 那就比较麻烦。可以设置成一个具体的文件名，比如start.bat，那么用户登陆后都会去执行start.bat，而不用为每个用户设定一个登陆档了。 这个文件要放置在[netlogon]的path设置的目录路径下。</span></span><br><span class="line"> </span><br><span class="line">wins support = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置samba服务器是否提供wins服务。</span></span><br><span class="line"> </span><br><span class="line">wins server = wins服务器IP地址</span><br><span class="line"><span class="comment"># 说明：设置Samba Server是否使用别的wins服务器提供wins服务。</span></span><br><span class="line"> </span><br><span class="line">wins proxy = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置Samba Server是否开启wins代理服务。</span></span><br><span class="line"> </span><br><span class="line">dns proxy = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置Samba Server是否开启dns代理服务。</span></span><br><span class="line"> </span><br><span class="line">load printers = <span class="built_in">yes</span>/no</span><br><span class="line"><span class="comment"># 说明：设置是否在启动Samba时就共享打印机。</span></span><br><span class="line"> </span><br><span class="line">printcap name = cups</span><br><span class="line"><span class="comment"># 说明：设置共享打印机的配置文件。</span></span><br><span class="line"> </span><br><span class="line">printing = cups</span><br><span class="line"><span class="comment"># 说明：设置Samba共享打印机的类型。现在支持的打印系统有：bsd, sysv, plp, lprng, aix, hpux, qnx</span></span><br></pre></td></tr></table></figure>

<p><strong>共享参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[共享名]</span><br><span class="line"> </span><br><span class="line">comment = 任意字符串</span><br><span class="line"># 说明：comment是对该共享的描述，可以是任意字符串。</span><br><span class="line"> </span><br><span class="line">path = 共享目录路径</span><br><span class="line"># 说明：path用来指定共享目录的路径。可以用%u、%m这样的宏来代替路径里的unix用户和客户机的Netbios名，用宏表示主要用于[homes] 共享域。例如：如果我们不打算用home段做为客户的共享，而是在/home/share/下为每个Linux用户以他的用户名建个目录，作为他的共享目 录，这样path就可以写成：path = /home/share/%u; 。用户在连接到这共享时具体的路径会被他的用户名代替，要注意这个用户名路径一定要存在，否则，客户机在访问时会找不到网络路径。同样，如果我们不是以用 户来划分目录，而是以客户机来划分目录，为网络上每台可以访问samba的机器都各自建个以它的netbios名的路径，作为不同机器的共享资源，就可以 这样写：path = /home/share/%m 。</span><br><span class="line"> </span><br><span class="line">browseable = yes/no</span><br><span class="line"># 说明：browseable用来指定该共享是否可以浏览。</span><br><span class="line"> </span><br><span class="line">writable = yes/no</span><br><span class="line"># 说明：writable用来指定该共享路径是否可写。</span><br><span class="line"> </span><br><span class="line">available = yes/no</span><br><span class="line"># 说明：available用来指定该共享资源是否可用。</span><br><span class="line"> </span><br><span class="line">admin users = 该共享的管理者</span><br><span class="line"># 说明：admin users用来指定该共享的管理员（对该共享具有完全控制权限）。在samba 3.0中，如果用户验证方式设置成&quot;security=share&quot;时，此项无效。</span><br><span class="line"># 例如：admin users =david，sandy（多个用户中间用逗号隔开）。</span><br><span class="line"> </span><br><span class="line">valid users = 允许访问该共享的用户</span><br><span class="line"># 说明：valid users用来指定允许访问该共享资源的用户。</span><br><span class="line"># 例如：valid users = david，@dave，@tech（多个用户或者组中间用逗号隔开，如果要加入一个组就用&quot;@组名&quot;表示。）</span><br><span class="line"> </span><br><span class="line">invalid users = 禁止访问该共享的用户</span><br><span class="line"># 说明：invalid users用来指定不允许访问该共享资源的用户。</span><br><span class="line"># 例如：invalid users = root，@bob（多个用户或者组中间用逗号隔开。）</span><br><span class="line"> </span><br><span class="line">write list = 允许写入该共享的用户</span><br><span class="line"># 说明：write list用来指定可以在该共享下写入文件的用户。</span><br><span class="line"># 例如：write list = david，@dave</span><br><span class="line"> </span><br><span class="line">public = yes/no</span><br><span class="line"># 说明：public用来指定该共享是否允许guest账户访问。</span><br><span class="line"> </span><br><span class="line">guest ok = yes/no</span><br><span class="line"># 说明：意义同&quot;public&quot;。</span><br></pre></td></tr></table></figure>

<p><strong>几个特殊共享</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[homes]</span><br><span class="line">comment = Home Directories</span><br><span class="line">browseable = no</span><br><span class="line">writable = yes</span><br><span class="line">valid users = %S</span><br><span class="line">; valid users = MYDOMAIN\%S</span><br><span class="line"> </span><br><span class="line">[printers]</span><br><span class="line">comment = All Printers</span><br><span class="line">path = /var/spool/samba</span><br><span class="line">browseable = no</span><br><span class="line">guest ok = no</span><br><span class="line">writable = no</span><br><span class="line">printable = yes</span><br><span class="line"> </span><br><span class="line">[netlogon]</span><br><span class="line">comment = Network Logon Service</span><br><span class="line">path = /var/lib/samba/netlogon</span><br><span class="line">guest ok = yes</span><br><span class="line">writable = no</span><br><span class="line">share modes = no</span><br><span class="line"> </span><br><span class="line">[Profiles]</span><br><span class="line">path = /var/lib/samba/profiles</span><br><span class="line">browseable = no</span><br><span class="line">guest ok = yes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Samba安装好后，使用testparm命令可以测试smb.conf配置是否正确。使用testparm –v命令可以详细的列出smb.conf支持的配置参数。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testparm –v</span><br></pre></td></tr></table></figure>

<blockquote>
<p>smbpasswd命令的常用方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbpasswd -a 增加用户（要增加的用户必须以是系统用户）</span><br><span class="line">smbpasswd -d 冻结用户，就是这个用户不能在登录了</span><br><span class="line">smbpasswd -e 恢复用户，解冻用户，让冻结的用户可以在使用</span><br><span class="line">smbpasswd -n 把用户的密码设置成空. 要在global中写入 null passwords -true</span><br><span class="line">smbpasswd -x  删除用户</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux时间同步（ntpdate）</title>
    <url>/2020/10/01/Linux%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%EF%BC%88ntpdate%EF%BC%89/</url>
    <content><![CDATA[<h3 id="用ntpdate从时间服务器更新时间"><a href="#用ntpdate从时间服务器更新时间" class="headerlink" title="用ntpdate从时间服务器更新时间"></a>用ntpdate从时间服务器更新时间</h3><ul>
<li><p>手动同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ntpdate指令</span></span><br><span class="line">yum install ntp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动同步ntp时间</span></span><br><span class="line">ntpdate time.nuri.net</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>自动同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/etc/crontab</span></span><br><span class="line">vim /etc/crontab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">*/30 * * * * ntpdate time.nuri.net  <span class="comment"># 域名或IP, 每30分钟同步一次</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>时间服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">time.nuri.net</span><br><span class="line">0.asia.pool.ntp.org</span><br><span class="line">1.asia.pool.ntp.org</span><br><span class="line">2.asia.pool.ntp.org</span><br><span class="line">3.asia.pool.ntp.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>时区配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line">tzselect  <span class="comment"># 一步步的选择 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="comment"># 复制相应的时区文件</span></span><br><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/$主时区/$次时区 /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置上海时区示例：</span></span><br><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>手动调整（日期与时间）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置年月日为20171012，时间为00:00 </span></span><br><span class="line"><span class="built_in">date</span> -s 20171012</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时间，不改变日期 </span></span><br><span class="line"><span class="built_in">date</span> -s 16:02:23 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日期及时间 </span></span><br><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;20171012 16:02:23&quot;</span> </span><br></pre></td></tr></table></figure>




</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux清理内存</title>
    <url>/2020/10/01/Linux%E6%B8%85%E7%90%86%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h3 id="Centos-清理内存"><a href="#Centos-清理内存" class="headerlink" title="Centos 清理内存"></a>Centos 清理内存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存使用情况 </span></span><br><span class="line">free -mh</span><br><span class="line"></span><br><span class="line">3 清理内存</span><br><span class="line"><span class="built_in">sync</span>;<span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放网页缓存(To free pagecache):</span></span><br><span class="line"><span class="built_in">sync</span>; <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放目录项和索引(To free dentries and inodes):</span></span><br><span class="line"><span class="built_in">sync</span>; <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放网页缓存，目录项和索引（To free pagecache, dentries and inodes）:</span></span><br><span class="line"><span class="built_in">sync</span>; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统安装Windows字体（Centos）</title>
    <url>/2020/10/01/Linux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Windows%E5%AD%97%E4%BD%93%EF%BC%88Centos%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Linux系统安装Windows字体"><a href="#Linux系统安装Windows字体" class="headerlink" title="Linux系统安装Windows字体"></a>Linux系统安装Windows字体</h3><h4 id="1-复制字体"><a href="#1-复制字体" class="headerlink" title="1. 复制字体"></a>1. 复制字体</h4><blockquote>
<p>在”C:\Windows\Fonts”目录下找到所要安装字体，这里以”simsun.ttf”为例。如果安装的字体找不到，就去网上下载。</p>
</blockquote>
<h4 id="2-上传字体至CentOS系统"><a href="#2-上传字体至CentOS系统" class="headerlink" title="2. 上传字体至CentOS系统"></a>2. 上传字体至CentOS系统</h4><blockquote>
<p>在/usr/share/fonts目录下建立一个子目录，比如./chinese/winFonts。上传”simsun.ttf”字体至此目录。</p>
</blockquote>
<h4 id="3-进入此目录安装"><a href="#3-进入此目录安装" class="headerlink" title="3. 进入此目录安装"></a>3. 进入此目录安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/chinese/fonts/winFonts</span><br><span class="line">chmod -R 755 ./*.ttf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行以下命令建立字体索引信息，更新字体缓存：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure>

<h4 id="4-执行以下命令让字体生效"><a href="#4-执行以下命令让字体生效" class="headerlink" title="4. 执行以下命令让字体生效"></a>4. 执行以下命令让字体生效</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="5-问题与解决"><a href="#5-问题与解决" class="headerlink" title="5. 问题与解决"></a>5. 问题与解决</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果安装失败可以尝试更改权限：</span><br><span class="line">cd /usr/share/fonts/chinese/winFonts</span><br><span class="line">chmod 755 *.ttf</span><br><span class="line"></span><br><span class="line"># 若提示 &quot; mkfontscale: command not found&quot;，用yum安装：</span><br><span class="line">yum install mkfontscale</span><br><span class="line"></span><br><span class="line"># 提示 &quot; fc-cache: command not found&quot;</span><br><span class="line">yum install fontconfig</span><br><span class="line"></span><br><span class="line"># 若需要重启服务器：</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"># 查看已安装的字体：</span><br><span class="line">fc-list</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软件源</title>
    <url>/2020/10/01/Linux%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
    <content><![CDATA[<h4 id="动态查看日志文件"><a href="#动态查看日志文件" class="headerlink" title="动态查看日志文件"></a>动态查看日志文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f /var/log/messages</span><br></pre></td></tr></table></figure>

<h4 id="查看端口："><a href="#查看端口：" class="headerlink" title="查看端口："></a>查看端口：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure>
<h4 id="开启端口："><a href="#开启端口：" class="headerlink" title="开启端口："></a>开启端口：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line">firewall-cmd --add-port=80/tcp</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">开启端口</span><br><span class="line"> firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"> 命令含义： </span><br><span class="line">--zone #作用域 </span><br><span class="line">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议 </span><br><span class="line">--permanent  #永久生效，没有此参数重启后失效</span><br><span class="line"> 重启防火墙</span><br><span class="line"> firewall-cmd --reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h4><ul>
<li><p>阿里云镜像源：<a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com/</a></p>
</li>
<li><p>清华TUNA镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/">进入官网</a>，在左边的列表中找到Ubuntu</p>
</li>
<li><p>中科大USTC镜像源：<a href="https://mirrors.ustc.edu.cn/">进入官网</a>，在左边的列表中找到Ubuntu的help</p>
</li>
<li><p>中科大USTC镜像源生成器：<a href="https://mirrors.ustc.edu.cn/repogen/">https://mirrors.ustc.edu.cn/repogen/</a></p>
</li>
</ul>
<h4 id="centos"><a href="#centos" class="headerlink" title="centos:"></a>centos:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum 的配置文件分为两部分：main 和repository</span><br><span class="line">main 部分定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。</span><br><span class="line">repository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:/etc/yum.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">cachedir=/var/cache/yum //yum 缓存的目录，yum 在此存储下载的rpm 包和数据库，默认设置为/var/cache/yum</span><br><span class="line">keepcache=0 //安装完成后是否保留软件包，0为不保留（默认为0），1为保留</span><br><span class="line">debuglevel=2 //Debug 信息输出等级，范围为0-10，缺省为2</span><br><span class="line">logfile=/var/log/yum.log //yum 日志文件位置。用户可以到/var/log/yum.log 文件去查询过去所做的更新。</span><br><span class="line">pkgpolicy=newest //包的策略。一共有两个选项，newest 和last，这个作用是如果你设置了多个repository，而同一软件在不同的repository 中同时存在，yum 应该安装哪一个，如果是newest，则yum 会安装最新的那个版本。如果是last，则yum 会将服务器id 以字母表排序，并选择最后的那个服务器上的软件安装。一般都是选newest。</span><br><span class="line">distroverpkg=redhat-release //指定一个软件包，yum 会根据这个包判断你的发行版本，默认是redhat-release，也可以是安装的任何针对自己发行版的rpm 包。</span><br><span class="line">tolerant=1 //有1和0两个选项，表示yum 是否容忍命令行发生与软件包有关的错误，比如你要安装1,2,3三个包，而其中3此前已经安装了，如果你设为1,则yum 不会出现错误信息。默认是0。</span><br><span class="line">exactarch=1 //有1和0两个选项，设置为1，则yum 只会安装和系统架构匹配的软件包，例如，yum 不会将i686的软件包安装在适合i386的系统中。默认为1。</span><br><span class="line">retries=6 //网络连接发生错误后的重试次数，如果设为0，则会无限重试。默认值为6.</span><br><span class="line">obsoletes=1 //这是一个update 的参数，具体请参阅yum(8)，简单的说就是相当于upgrade，允许更新陈旧的RPM包。</span><br><span class="line">plugins=1 //是否启用插件，默认1为允许，0表示不允许。我们一般会用yum-fastestmirror这个插件。</span><br><span class="line">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=16&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</span><br><span class="line"> # Note: yum-RHN-plugin doesn&#x27;t honor this.</span><br><span class="line">metadata_expire=1h</span><br><span class="line">installonly_limit = 5</span><br><span class="line"># PUT YOUR REPOS HERE OR IN separate files named file.repo</span><br><span class="line"># in /etc/yum.repos.d</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repository : /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<p>网易163：wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror system uses the connecting IP address of the client and the</span><br><span class="line"># update status of each mirror to pick mirrors that are updated to and</span><br><span class="line"># geographically close to the client.  You should use this for CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work for you, as a fall back you can try the</span><br><span class="line"># remarked out baseurl= line instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base - 163.com</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#released updates</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates - 163.com</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#additional packages that may be useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras - 163.com</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line">#additional packages that extend functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus - 163.com</span><br><span class="line">baseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>




<p>ubuntu15.04:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">搜狐源：</span><br><span class="line">deb http://mirrors.sohu.com/ubuntu/ vivid main restricted universe multiverse</span><br><span class="line">deb http://mirrors.sohu.com/ubuntu/ vivid-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.sohu.com/ubuntu/ vivid-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.sohu.com/ubuntu/ vivid-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.sohu.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.sohu.com/ubuntu/ vivid main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.sohu.com/ubuntu/ vivid-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.sohu.com/ubuntu/ vivid-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.sohu.com/ubuntu/ vivid-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.sohu.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">阿里云源：</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ vivid main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ vivid-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ vivid-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ vivid-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ vivid main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ vivid-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ vivid-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ vivid-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br><span class="line"> </span><br><span class="line">网易源：</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ vivid main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ vivid-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ vivid-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ vivid-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ vivid main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ vivid-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ vivid-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ vivid-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ vivid-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>ubuntu16.0.4：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>1、操作步骤<br>添加阿里源到如下列表中<br>sudo vim /etc/apt/sources.list.d/aliyun.list<br>更新列表<br>sudo apt-get update<br>2、阿里源</p>
<p>刷新源：sudo apt-get update</p>
<p>更新：sudo update-manager -c -d</p>
<h4 id="大致过程："><a href="#大致过程：" class="headerlink" title="大致过程："></a>大致过程：</h4><ul>
<li><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载对应版本repo文件, 放入/etc/yum.repos.d/(操作前请做好相应备份)</p>
<blockquote>
<p>阿里云Linux安装镜像源地址：<a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com/</a></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>网易开源镜像站:<a href="http://mirrors.163.com/">http://mirrors.163.com/</a></p>
</blockquote>
<blockquote>
<p>中科大的Linux安装镜像源：<a href="http://centos.ustc.edu.cn/">http://centos.ustc.edu.cn/</a></p>
</blockquote>
<blockquote>
<p>搜狐的Linux安装镜像源：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a></p>
</blockquote>
<blockquote>
<p>北京首都在线科技：<a href="http://mirrors.yun-idc.com/">http://mirrors.yun-idc.com/</a></p>
</blockquote>
<ul>
<li>运行以下命令生成缓存<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux防火墙</title>
    <url>/2020/10/01/Linux%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h3 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a>iptables防火墙</h3><ul>
<li>常用命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables start <span class="comment">#开启防火墙 </span></span><br><span class="line">service iptables restart <span class="comment">#重启防火墙</span></span><br><span class="line">service iptables stop <span class="comment">#关闭防火墙</span></span><br><span class="line">service iptables status <span class="comment">#查看防火墙状态 </span></span><br><span class="line"></span><br><span class="line">chkconfig iptables on <span class="comment">#设置防火墙开机启动</span></span><br><span class="line">chkconfig iptables off <span class="comment">#禁止开机启动防火墙</span></span><br><span class="line"></span><br><span class="line">iptables -L -n <span class="comment">#查看当前所有的iptables配置</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>列出指定端口的进程：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i tcp:80 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>列出所有端口：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>

<ul>
<li>开放端口<blockquote>
<p>开启端口（以80端口为例）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT <span class="comment"># 写入修改</span></span><br><span class="line">/etc/init.d/iptables save   <span class="comment"># 保存修改</span></span><br><span class="line">service iptables restart    <span class="comment"># 重启防火墙，修改生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="comment"># 编辑防火墙配置文件</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="comment"># 在配置文件加入如下语句</span></span><br><span class="line">-A INPUT -p tcp -m state –state NEW -m tcp –dport 80 -j ACCEPT <span class="comment"># 添加规则</span></span><br><span class="line"><span class="comment"># 保存iptables配置</span></span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="firewall防火墙"><a href="#firewall防火墙" class="headerlink" title="firewall防火墙"></a>firewall防火墙</h3><ul>
<li><p>常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld.service  # 开启防火墙firewall</span><br><span class="line">systemctl stop firewalld.service  # 停止防火墙firewall</span><br><span class="line">systemctl restart firewalld.service  # 重启防火墙firewall</span><br><span class="line">systemctl disable firewalld.service # 禁止防火墙firewall开机启动</span><br><span class="line">firewall-cmd --state # 查看默认防火墙状态</span><br><span class="line">chkconfig iptables on # 设置防火墙开机启动</span><br><span class="line">chkconfig iptables off # 禁止开机启动防火墙</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>防火墙和端口配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看已经开放的端口：</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"># 查看端口：</span><br><span class="line">netstat -anp | grep 8080</span><br><span class="line"># 列出指定端口的进程：</span><br><span class="line">lsof -i tcp:80 </span><br><span class="line"># 列出所有端口：</span><br><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line">firewall-cmd --add-port=80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="comment"># 修改防火墙配置文件： </span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="comment"># 加入端口配置</span></span><br><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT </span><br><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 6379:7000 -j ACCEPT  //开放6379到7000之间的端口</span><br><span class="line"></span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="ufw-防火墙"><a href="#ufw-防火墙" class="headerlink" title="ufw 防火墙"></a>ufw 防火墙</h3><ul>
<li><p>参考：<a href="https://www.cnblogs.com/bethal/p/5363492.html">https://www.cnblogs.com/bethal/p/5363492.html</a></p>
</li>
<li><p>常用操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status ufw  # 显示防火墙和端口的侦听状态</span><br><span class="line">sudo systemctl start ufw  # 开启防火墙</span><br><span class="line">sudo systemctl stop ufw  # 关闭防火墙</span><br><span class="line">sudo systemctl restart ufw  # 重启防火墙</span><br><span class="line"></span><br><span class="line">sudo systemctl enable ufw  # 开启防火墙开机启动</span><br><span class="line">sudo systemctl disable ufw  # 禁用防火墙开机启动</span><br><span class="line"></span><br><span class="line">sudo ufw logging on|off</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>开启端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启端口</span><br><span class="line">ufw allow 22</span><br><span class="line"></span><br><span class="line"># 拒绝端口</span><br><span class="line">ufw deny 80/tcp</span><br><span class="line"></span><br><span class="line"># 允许基于TCP或UDP的数据包</span><br><span class="line">sudo ufw allow 80/tcp</span><br><span class="line">sudo ufw allow http/tcp</span><br><span class="line"></span><br><span class="line"># 删除规则</span><br><span class="line">ufw delete allow 80</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua 笔记</title>
    <url>/2021/03/01/Lua%20%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Lua-笔记"><a href="#Lua-笔记" class="headerlink" title="Lua 笔记"></a>Lua 笔记</h3><h4 id="安装lua"><a href="#安装lua" class="headerlink" title="安装lua"></a>安装lua</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz</span><br><span class="line">tar zxf lua-5.3.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-5.3.5</span><br><span class="line">make linux <span class="built_in">test</span></span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>安装make linux test失败<blockquote>
<p>描述</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd src &amp;&amp; make linux</span><br><span class="line">make[1]: Entering directory &#x27;/data/lua-5.3.5/src&#x27;</span><br><span class="line">make all SYSCFLAGS=&quot;-DLUA_USE_LINUX&quot; SYSLIBS=&quot;-Wl,-E -ldl -lreadline&quot;</span><br><span class="line">make[2]: Entering directory &#x27;/data/lua-5.3.5/src&#x27;</span><br><span class="line">gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX    -c -o lua.o lua.c</span><br><span class="line">lua.c:82:10: fatal error: readline/readline.h: No such file or directory</span><br><span class="line"> #include &lt;readline/readline.h&gt;</span><br><span class="line">compilation terminated.</span><br><span class="line">&lt;builtin&gt;: recipe for target &#x27;lua.o&#x27; failed</span><br><span class="line">make[2]: *** [lua.o] Error 1</span><br><span class="line">make[2]: Leaving directory &#x27;/data/lua-5.3.5/src&#x27;</span><br><span class="line">Makefile:110: recipe for target &#x27;linux&#x27; failed</span><br><span class="line">make[1]: *** [linux] Error 2</span><br><span class="line">make[1]: Leaving directory &#x27;/data/lua-5.3.5/src&#x27;</span><br><span class="line">Makefile:55: recipe for target &#x27;linux&#x27; failed</span><br><span class="line">make: *** [linux] Error 2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缺少libreadline-dev依赖包</span></span><br><span class="line"><span class="comment"># centos: </span></span><br><span class="line">yum install readline-devel</span><br><span class="line"><span class="comment"># debian: </span></span><br><span class="line">apt-get install libreadline-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="lua基本语法"><a href="#lua基本语法" class="headerlink" title="lua基本语法"></a>lua基本语法</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符串连接使用的是 .. </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;str&quot;</span> .. <span class="string">&#x27;ing&#x27;</span> .. <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- # 来计算字符串的长度</span></span><br><span class="line"><span class="built_in">print</span>(#<span class="string">&quot;kk&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- select(&quot;#&quot;,...) 来获取可变参数的数量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">   result = <span class="number">0</span></span><br><span class="line">   <span class="keyword">local</span> <span class="built_in">arg</span>=&#123;...&#125;</span><br><span class="line">   <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">      result = result + v</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;总共传入 &quot;</span> .. <span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,...) .. <span class="string">&quot; 个数&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> result/<span class="built_in">select</span>(<span class="string">&quot;#&quot;</span>,...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均值为&quot;</span>,average(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- select(&#x27;#&#x27;, …) 返回可变参数的长度</span></span><br><span class="line"><span class="comment">-- select(n, …) 用于访问 n 到 select(&#x27;#&#x27;,…) 的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB笔记</title>
    <url>/2018/08/28/MongoDB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --dbpath D:\mongodb\db</span><br></pre></td></tr></table></figure>

<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo --port </span><br></pre></td></tr></table></figure>

<h4 id="注册window服务"><a href="#注册window服务" class="headerlink" title="注册window服务"></a>注册window服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc create MongoDB binpath= &quot;C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe --dbpath D:\MongoDB\data&quot;</span><br><span class="line">sc config MongoDB start= auto</span><br><span class="line">sc start MongoDB</span><br></pre></td></tr></table></figure>

<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0; i &lt; 30; i++) &#123; </span><br><span class="line">    db.users.save(&#123;name: &quot;mhiwyf_&quot; + i %6, age: 22 + i, sex: i % 2&#125;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.group(&#123;</span><br><span class="line">    key:&#123;name:true&#125;,</span><br><span class="line">    initial:&#123;Total:0&#125;,</span><br><span class="line">    reduce:function(items,prev)&#123;prev.Total +=1&#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;age:&#123;$gt:37&#125;&#125;)</span><br><span class="line">db.users.find(&#123;age:&#123;$gt:45&#125;&#125;,&#123;sex:0&#125;)</span><br><span class="line"># 注：第一个&#123;&#125; 放where条件 第二个&#123;&#125; 指定那些列显示和不显示 （0表示不显示 1表示显示)</span><br></pre></td></tr></table></figure>

<h4 id="模糊查询（正则）"><a href="#模糊查询（正则）" class="headerlink" title="模糊查询（正则）"></a>模糊查询（正则）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;name:/^mhiwyf/&#125;)</span><br><span class="line"></span><br><span class="line"># $gt（大于）、$lt（小于）、$gte（大于等于）、$lte（小于等于）、$in（在）、$nin（不在）、$or（或）</span><br><span class="line"></span><br><span class="line">db.users.find(&#123;age:&#123;$in:[45,46]&#125;&#125;)</span><br><span class="line">db.users.find(&#123;$or:[&#123;name:&quot;mhiwyf_0&quot;&#125;,&#123;age:45&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">$slice </span><br><span class="line">结合limit()和skip()函数功能，limit()和skip()无法作用于数组，而$slice可以，该操作符可接受两个参数：若只有一个参数，则参数表示将要返回数据项的总数；若有两个参数，则第一个参数将用于定义偏移，第二个参数用于定义限制。</span><br><span class="line"></span><br><span class="line">$mod</span><br><span class="line">db.users.find(&#123;age:&#123;$mod:[2,0]&#125;&#125;)</span><br><span class="line">$mod[2,0] 表示目标值除以2，并检查运算余数是否为0，通过这种方式提供偶数结果。</span><br><span class="line"></span><br><span class="line">$size</span><br><span class="line">db.users.find(&#123;age:&#123;$size:1&#125;&#125;)</span><br><span class="line">通过操作符$size可以过滤出文档中数组大小符合条件的结果。</span><br><span class="line"></span><br><span class="line">$exists</span><br><span class="line">db.users.find(&#123;age:&#123;$exists:true&#125;&#125;)</span><br><span class="line">使用$exists操作符将在特定字段存在或不存在的情况下，返回该对象。</span><br><span class="line"></span><br><span class="line">update(criteria,objNew,options)</span><br><span class="line"># criteria:查询将要更新的目录记录</span><br><span class="line"># objNew：指定更新的信息</span><br><span class="line"># options：指定更新文档时的选项，可选值：upsert 和 multi，upsert：指定更新是否是upsert操作，如果数据存在就更新，否则就创建数据；multi：指定是否应该更新所有匹配文档，或者更新第一个文档（默认行为）。</span><br><span class="line"></span><br><span class="line">$inc</span><br><span class="line">指定的键执行（原子）更新操作，若字段存在，就将该值增加给定的增量；若字段不存在，就创建该字段。</span><br><span class="line"></span><br><span class="line">$set</span><br><span class="line">该字符将某个字段设置为指定值。</span><br><span class="line"></span><br><span class="line">$unset</span><br><span class="line">该操作符可以删除指定的字段。</span><br><span class="line"></span><br><span class="line">$push</span><br><span class="line">向数组中添加值</span><br><span class="line"></span><br><span class="line">ensureIndex</span><br><span class="line">添加索引，1：表示升序 -1：表示降序</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB简单安装配置（Win10）</title>
    <url>/2018/08/28/MongoDB%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%EF%BC%88Win10%EF%BC%89/</url>
    <content><![CDATA[<ol>
<li>在win10安装MongoDB，正常安装。</li>
<li>配置环境变量，在path配置%MONGO_HOME%\bin</li>
<li>创建数据库目录：mongod –dbpath D:\MongoDB\data<br>注：其中 –dbpath是指定数据库存放目录<br><img src="https://mhiwyf.github.io/images/ydnote/2018/20181206091908.png"><br>这时在浏览器输入<a href="http://localhost:27017/%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%98%BE%E7%A4%BA%E4%BF%A1%E6%81%AF%E4%B8%BA">http://localhost:27017/可以看到显示信息为</a><br>It looks like you are trying to access MongoDB over HTTP on the native driver port.</li>
</ol>
<p>到此mongodb算是安装完了。</p>
<ol start="4">
<li>MongoDB安装为Windows服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①将mongodb安装为windows服务非常简单只需要在上面执行的命令行后添加 --install即可</span><br><span class="line">mongod --dbpath D:\MongoDB\data --install</span><br><span class="line"></span><br><span class="line">②若出现下面提示</span><br><span class="line">--install has to be used with --logpath</span><br><span class="line">按照提示，需要指定log目录，创建log目录D:\MongoDB\logs 然后重新执行命令</span><br><span class="line">mongod --dbpath D:\MongoDB\data --logpath=D:\MongoDB\logs\mongodb.log --logappend</span><br><span class="line"></span><br><span class="line">③使用sc命令创建服务，使用net start启动服务</span><br><span class="line">sc create MongoDB binPath= &quot;D:\MongoDB\bin\mongod.exe --service --dbpath D:\MongoDB\data --logpath=D:\MongoDB\logs\mongodb.log  --logappend&quot;</span><br><span class="line"></span><br><span class="line">④net start MongoDB</span><br></pre></td></tr></table></figure></li>
<li>mongoDB配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建立数据库目录 D:\MongoDB\data</span><br><span class="line">建立日志目录 D:\MongoDB\logs</span><br><span class="line">建立配置文件目录 D:\MongoDB\etc</span><br><span class="line">建立配置文件 D:\MongoDB\etc\mongodb.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mongodb.conf：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#数据库路径</span><br><span class="line">dbpath=D:\MongoDB\data</span><br><span class="line">#日志输出文件路径</span><br><span class="line">logpath=D:\MongoDB\logs\mongodb.log</span><br><span class="line">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class="line">logappend=true</span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal=true</span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=true</span><br><span class="line">#端口号 默认为27017</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>配置文件和相关目录建好后使用如下方式启动MongoDB</p>
</blockquote>
<ul>
<li><p>普通启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --config D:\MongoDB\etc\mongodb.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装为Windows服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --config D:\MongoDB\etc\mongodb.conf --install</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用SC安装为Windows服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc create MongoDB binPath= &quot;D:\MongoDB\bin\mongod.exe --service --config=D:\MongoDB\etc\mongodb.conf&quot;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis自动生成代码</title>
    <url>/2018/01/01/MyBatis%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="所需的jar包（3个）："><a href="#所需的jar包（3个）：" class="headerlink" title="所需的jar包（3个）："></a>所需的jar包（3个）：</h3><blockquote>
<p>mybatis-3.3.0.jar<br>mybatis-generator-core-1.3.2.jar<br>mysql-connector-java-5.1.38.jar</p>
</blockquote>
<h3 id="配置文件：generatorConfig-xml"><a href="#配置文件：generatorConfig-xml" class="headerlink" title="配置文件：generatorConfig.xml"></a>配置文件：generatorConfig.xml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE generatorConfiguration </span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; </span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- 数据库驱动 --&gt;</span><br><span class="line">    &lt;classPathEntry location=&quot;mysql-connector-java-5.1.38.jar&quot; /&gt;</span><br><span class="line">    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库链接URL，用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">            connectionURL=&quot;jdbc:mysql://localhost:3306/hhmdemo&quot; userId=&quot;root&quot;</span><br><span class="line">            password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        &lt;!-- 生成模型的包名和位置 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.mhiywf.hhmdemo.bean&quot;</span><br><span class="line">            targetProject=&quot;../hhmdemo/src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- 生成映射文件的包名和位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;hhmdemo/mapping&quot;</span><br><span class="line">            targetProject=&quot;../hhmdemo/src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- 生成DAO的包名和位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">            targetPackage=&quot;com.mhiywf.hhmdemo.dao&quot;</span><br><span class="line">            targetProject=&quot;../hhmdemo/src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名 --&gt;</span><br><span class="line">        &lt;table tableName=&quot;sysuser&quot; domainObjectName=&quot;SysUser&quot;</span><br><span class="line">            enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">            enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">            selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置文件提供了 mybatis-generator所需要的参数信息：</p>
</blockquote>
<ul>
<li>classPathEntry 是引用的jdbc的类路径，这里将jdbc jar和generator的jar包放在一起了；</li>
<li>commentGenerator 是用来除去时间信息的，这在配合类似subversion的代码管理工具时使用很有效，因为可以减少没有必要的注释迁入；</li>
<li>jdbcConnection是指定的jdbc的连接信息；</li>
<li>javaTypeResolver式类型转换的信息，这里并没有用到；</li>
<li>javaModelGenerator是模型的生成信息，这里将指定这些Java model类的生成路径；</li>
<li>sqlMapGenerator是mybatis 的sqlMapper XML文件的生成信息，包括生成路径等；</li>
<li>javaClientGenerator是应用接口的生成信息；</li>
<li>table是用户指定的被生成相关信息的表，它必须在指定的jdbc连接中已经被建立。</li>
</ul>
<h3 id="sysuser表结构"><a href="#sysuser表结构" class="headerlink" title="sysuser表结构"></a>sysuser表结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `sysuser`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `sysuser` (</span><br><span class="line">  `id` int(10) NOT NULL DEFAULT &#x27;0&#x27;,</span><br><span class="line">  `real_name` varchar(10) DEFAULT NULL COMMENT &#x27;真实姓名&#x27;,</span><br><span class="line">  `login_id` varchar(30) DEFAULT NULL COMMENT &#x27;登陆名&#x27;,</span><br><span class="line">  `login_pwd` varchar(50) DEFAULT NULL COMMENT &#x27;登陆密码&#x27;,</span><br><span class="line">  `state` varchar(1) DEFAULT NULL COMMENT &#x27;用户状态&#x27;,</span><br><span class="line">  `role_id` varchar(30) DEFAULT NULL COMMENT &#x27;角色id&#x27;,</span><br><span class="line">  `created_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<h3 id="执行："><a href="#执行：" class="headerlink" title="执行："></a>执行：</h3><p>将3个jar和配置文件存入在一个文件（项目名_generator）中，将该文件放在项目的同级目录中，在命令行进入到该文件夹下，执行下面脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从备份配置（双机异地热备份）</title>
    <url>/2019/01/01/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%87%E4%BB%BD%E9%85%8D%E7%BD%AE%EF%BC%88%E5%8F%8C%E6%9C%BA%E5%BC%82%E5%9C%B0%E7%83%AD%E5%A4%87%E4%BB%BD%EF%BC%89/</url>
    <content><![CDATA[<h4 id="一、MySQL备份工作原理"><a href="#一、MySQL备份工作原理" class="headerlink" title="一、MySQL备份工作原理"></a>一、MySQL备份工作原理</h4><blockquote>
<p>MYSQL主从同步是在MySQL主从复制（Master-Slave Replication）基础上实现的，通过设置在Master上的binlog（主服务器数据库的每次操作都会记录在二进制日志文件mysql-bin.xxx），使其处于打开状态；Slave通过一个I/O线程从Master上读取binlog，然后传输到Slave的中继日志(relay-log文件)中，然后使用SQL线程读取中继日志，并应用到自身数据库中，从而实现主从数据同步功能。</p>
</blockquote>
<h4 id="二、同步初态"><a href="#二、同步初态" class="headerlink" title="二、同步初态"></a>二、同步初态</h4><ol>
<li><p>将主服务器要同步的数据库加锁，避免同步时发生改变</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;use database_name;</span><br><span class="line">&gt;flush tables with read lock;</span><br></pre></td></tr></table></figure></li>
<li><p>使用mysqldump工具导出数据</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -pxxx database_name &gt;database_name.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份完成后，解锁数据库:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;unlock tables;</span><br></pre></td></tr></table></figure></li>
<li><p>将初始数据导入从数据库:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;CREATE DATABASE IF NOT EXISTS database_name DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">&gt;use database_name;</span><br><span class="line">&gt;source database_name.sql;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="三、-主从同步设置"><a href="#三、-主从同步设置" class="headerlink" title="三、 主从同步设置"></a>三、 主从同步设置</h4><ol>
<li>主服务器（Master）配置</li>
</ol>
<ul>
<li><p>保证从服务器对主服务器数据库的访问</p>
</li>
<li><p>修改Master数据库配置（<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>）</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log-bin                 = mysql-bin</span><br><span class="line">binlog_format           = mixed</span><br><span class="line">server-id               = 1</span><br><span class="line"></span><br><span class="line">read-only               = 0</span><br><span class="line">expire_logs_days        = 10</span><br><span class="line">max_binlog_size         = 500M</span><br><span class="line">binlog_cache_size       = 128K</span><br><span class="line">binlog_ignore_db        = mysql,information_schema,performance_schema,sys</span><br><span class="line">#binlog_do_db            = gongdiyun</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">server-id</td>
<td align="left">数据库唯一ID，一组主从中此标识号不能重复。其中1 代表主数据库（源） 2代表辅数据库（目的）</td>
</tr>
<tr>
<td align="left">log_bin</td>
<td align="left">开启bin-log，并指定文件目录和文件名前缀</td>
</tr>
<tr>
<td align="left">log-bin</td>
<td align="left">开启bin-log</td>
</tr>
<tr>
<td align="left">binlog_do_db</td>
<td align="left">需要同步的数据库名字，可以是多个，之间用分号分割</td>
</tr>
<tr>
<td align="left">binlog_ignore_db</td>
<td align="left">不需要同步的数据库名字</td>
</tr>
<tr>
<td align="left">max_binlog_size</td>
<td align="left">每个bin-log最大大小，当此大小等于500M时会自动生成一个新的日志文件。一条记录不会写在2个日志文件中，所以有时日志文件会超过此大小</td>
</tr>
<tr>
<td align="left">binlog_cache_size</td>
<td align="left">日志缓存大小</td>
</tr>
<tr>
<td align="left">binlog-do-db</td>
<td align="left">需要同步的数据库名字，如果是多个，就以此格式在写一行即可</td>
</tr>
<tr>
<td align="left">binlog-ignore-db</td>
<td align="left">不需要同步的数据库名字，如果是多个，就以此格式在写一行即可</td>
</tr>
<tr>
<td align="left">expire_logs_day</td>
<td align="left">设置bin-log日志文件保存的天数，此参数mysql5.0以下版本不支持</td>
</tr>
<tr>
<td align="left">binlog_format</td>
<td align="left">bin-log日志文件格式，设置为MIXED可以防止主键重复</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
</li>
<li><p>查看主服务器日记记录位置</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status\G</span><br></pre></td></tr></table></figure>
<blockquote>
<p>显示如下：</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000001</span><br><span class="line">         Position: 154</span><br><span class="line">     Binlog_Do_DB: </span><br><span class="line"> Binlog_Ignore_DB: mysql,information_schema,performance_schema,sys</span><br><span class="line">Executed_Gtid_Set: </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建权限设置</p>
<blockquote>
<p>在Slave上，使用Master上的admin@%帐户登陆Master与其通信。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE ON *.* TO admin@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<ol start="2">
<li>从服务器（Slave）配置</li>
</ol>
<ul>
<li><p>修改Slave数据库配置（<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id               = 2</span><br><span class="line">#replicate_wild_do_table = %</span><br><span class="line">relay_log               = mysqld_relay_bin</span><br><span class="line">log-slave-updates       = YES</span><br><span class="line">read_only               = 1</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">relay_log</td>
<td align="left">配置中继日志</td>
</tr>
<tr>
<td align="left">log-slave-updates</td>
<td align="left">表示slave将复制事件写进自己的二进制日志，简单地说，如果从库同时作为其它库的主库，那么需要添加该参数，否则不需要</td>
</tr>
<tr>
<td align="left">read_only</td>
<td align="left">它防止改变数据</td>
</tr>
<tr>
<td align="left">replicate_do_db</td>
<td align="left">数据库白名单列表</td>
</tr>
<tr>
<td align="left">replicate_ignore_db</td>
<td align="left">数据库黑名单列表</td>
</tr>
<tr>
<td align="left">replicate_do_table</td>
<td align="left">表白名单列表</td>
</tr>
<tr>
<td align="left">replicate_ignore_table</td>
<td align="left">表黑名单列表</td>
</tr>
<tr>
<td align="left">replicate_wild_do_table</td>
<td align="left">使用通配符定义表白名单列表</td>
</tr>
<tr>
<td align="left">replicate_wild_ignore_table</td>
<td align="left">使用通配符定义表黑名单列表</td>
</tr>
</tbody></table>
</li>
<li><p>开启同步</p>
<blockquote>
<p>在从服务器上执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">        MASTER_HOST=&#x27;192.168.31.242&#x27;,</span><br><span class="line">        MASTER_USER=&#x27;admin&#x27;,</span><br><span class="line">        MASTER_PASSWORD=&#x27;mhiwyf&#x27;,</span><br><span class="line">        MASTER_LOG_FILE=&#x27;mysql-bin.000001&#x27;,</span><br><span class="line">        MASTER_LOG_POS=154;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>重启mysql并查看slave线程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>信息如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.31.242</span><br><span class="line">                  Master_User: admin</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 590</span><br><span class="line">               Relay_Log_File: mysqld_relay_bin.000003</span><br><span class="line">                Relay_Log_Pos: 756</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              ......</span><br><span class="line">              ......</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Master_host 指的是 主服务器的地址。 </span><br><span class="line"></span><br><span class="line">2. Master_user 指的是主服务器上用来复制的用户。  从服务器会用此账号来登录主服务。进行复制。</span><br><span class="line"></span><br><span class="line">3. Master_log_file 就是前面提到的， 主服务器上的日志文件名.</span><br><span class="line"></span><br><span class="line">4. Read_Master_log_pos 就是前面提到的主服务器的日志记录位置， 从服务器根据这两个条件来选择复制的文件和位置。</span><br><span class="line"></span><br><span class="line">5. Slave_IO_Running:  指的就是从服务器上负责读取主服务器的线程工作状态。 从服务器用这个专门的线程链接到主服务器上，并把日志拷贝回来。</span><br><span class="line"></span><br><span class="line">6. Slave_SQL_Running: 指的就是专门执行sql的线程。 它负责把复制回来的Relaylog执行到自己的数据库中。 这两个参数必须都为Yes 才表明复制在正常工作</span><br></pre></td></tr></table></figure>




<h3 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h3></li>
</ul>
<ol>
<li>MySQL同步故障：” Slave_SQL_Running:No” 两种解决办法   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">    ...</span><br><span class="line">             Relay_Log_File: localhost-relay-bin.000535</span><br><span class="line">              Relay_Log_Pos: 21795072</span><br><span class="line">      Relay_Master_Log_File: localhost-bin.000094</span><br><span class="line">           Slave_IO_Running: Yes</span><br><span class="line">          Slave_SQL_Running: No</span><br><span class="line">            Replicate_Do_DB: </span><br><span class="line">        Replicate_Ignore_DB: </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>解决办法一</p>
<pre><code>1. 程序可能在slave上进行了写操作

2. 也可能是slave机器重起后，事务回滚造成的

一般是事务回滚造成的：
解决办法：
mysql&gt; stop slave ;
mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
mysql&gt; start slave ;
</code></pre>
</li>
<li><p>解决办法二</p>
<ul>
<li>首先停掉Slave服务：slave stop</li>
<li>查看主机状态(show master status\G),获取记录File和Position对应的值</li>
<li>到slave服务器上执行手动同步：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to </span><br><span class="line">    master_host=&#x27;master_ip&#x27;,</span><br><span class="line">    master_user=&#x27;user&#x27;, </span><br><span class="line">    master_password=&#x27;pwd&#x27;, </span><br><span class="line">    master_port=3306, </span><br><span class="line">    master_log_file=localhost-bin.000094&#x27;, </span><br><span class="line">    master_log_pos=33622483 ;</span><br><span class="line"></span><br><span class="line">start slave ;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h4 id="示例-MySQL主从复制的配置"><a href="#示例-MySQL主从复制的配置" class="headerlink" title="示例(MySQL主从复制的配置)"></a>示例(MySQL主从复制的配置)</h4><ul>
<li><p>mysql-master(my.cnf)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /home/mysql/data</span><br><span class="line">tmpdir = /home/mysql/temp</span><br><span class="line"># server_id = .....</span><br><span class="line">socket = /usr/local/mysql/mysql.sock</span><br><span class="line">log-error = /home/mysql/logs/mysql_error.log</span><br><span class="line">pid-file = /home/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line">open_files_limit = 10240</span><br><span class="line"></span><br><span class="line">back_log = 600</span><br><span class="line">max_connections=500</span><br><span class="line">max_connect_errors = 6000</span><br><span class="line">wait_timeout=605800</span><br><span class="line"></span><br><span class="line">#open_tables = 600</span><br><span class="line">#table_cache = 650</span><br><span class="line">#opened_tables = 630</span><br><span class="line"></span><br><span class="line">max_allowed_packet = 32M</span><br><span class="line"></span><br><span class="line">sort_buffer_size = 4M</span><br><span class="line">join_buffer_size = 4M</span><br><span class="line">thread_cache_size = 300</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 256M</span><br><span class="line">query_cache_limit = 2M</span><br><span class="line">query_cache_min_res_unit = 16k</span><br><span class="line"></span><br><span class="line">tmp_table_size = 256M</span><br><span class="line">max_heap_table_size = 256M</span><br><span class="line"></span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">read_buffer_size = 1M</span><br><span class="line">read_rnd_buffer_size = 16M</span><br><span class="line">bulk_insert_buffer_size = 64M</span><br><span class="line"></span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 2G</span><br><span class="line">innodb_log_buffer_size = 32M</span><br><span class="line">innodb_log_file_size = 128M</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line"></span><br><span class="line">#####################</span><br><span class="line">thread_concurrency = 32</span><br><span class="line">long_query_time= 2</span><br><span class="line">slow-query-log = on</span><br><span class="line">slow-query-log-file = /home/mysql/logs/mysql-slow.log  </span><br><span class="line"></span><br><span class="line">## replication</span><br><span class="line">server_id=205</span><br><span class="line">#binlog-do-db=roncoo</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=edu-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 32M</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>mysql-slave(my.cnf)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /home/mysql/data</span><br><span class="line">tmpdir = /home/mysql/temp</span><br><span class="line"># server_id = .....</span><br><span class="line">socket = /usr/local/mysql/mysql.sock</span><br><span class="line">log-error = /home/mysql/logs/mysql_error.log</span><br><span class="line">pid-file = /home/mysql/mysql.pid</span><br><span class="line"></span><br><span class="line">open_files_limit = 10240</span><br><span class="line"></span><br><span class="line">back_log = 600</span><br><span class="line">max_connections=500</span><br><span class="line">max_connect_errors = 6000</span><br><span class="line">wait_timeout=605800</span><br><span class="line"></span><br><span class="line">#open_tables = 600</span><br><span class="line">#table_cache = 650</span><br><span class="line">#opened_tables = 630</span><br><span class="line"></span><br><span class="line">max_allowed_packet = 32M</span><br><span class="line"></span><br><span class="line">sort_buffer_size = 4M</span><br><span class="line">join_buffer_size = 4M</span><br><span class="line">thread_cache_size = 300</span><br><span class="line">query_cache_type = 1</span><br><span class="line">query_cache_size = 256M</span><br><span class="line">query_cache_limit = 2M</span><br><span class="line">query_cache_min_res_unit = 16k</span><br><span class="line"></span><br><span class="line">tmp_table_size = 256M</span><br><span class="line">max_heap_table_size = 256M</span><br><span class="line"></span><br><span class="line">key_buffer_size = 256M</span><br><span class="line">read_buffer_size = 1M</span><br><span class="line">read_rnd_buffer_size = 16M</span><br><span class="line">bulk_insert_buffer_size = 64M</span><br><span class="line"></span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line"></span><br><span class="line">innodb_buffer_pool_size = 2G</span><br><span class="line">innodb_log_buffer_size = 32M</span><br><span class="line">innodb_log_file_size = 128M</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line"></span><br><span class="line">#####################</span><br><span class="line">thread_concurrency = 32</span><br><span class="line">long_query_time= 2</span><br><span class="line">slow-query-log = on</span><br><span class="line">slow-query-log-file = /home/mysql/logs/mysql-slow.log  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## replication</span><br><span class="line">server_id=206</span><br><span class="line">#binlog-do-db=roncoo</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=edu-mysql-slave1-bin</span><br><span class="line">binlog_cache_size = 1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">relay_log=edu-mysql-relay-bin</span><br><span class="line">log_slave_updates=1</span><br><span class="line">read_only=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 32M</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用函数</title>
    <url>/2019/01/01/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="mysql函数大全"><a href="#mysql函数大全" class="headerlink" title="mysql函数大全"></a>mysql函数大全</h2><h3 id="一、数学函数"><a href="#一、数学函数" class="headerlink" title="一、数学函数"></a>一、数学函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ABS(x)   返回x的绝对值</span><br><span class="line">BIN(x)   返回x的二进制（OCT返回八进制，HEX返回十六进制）</span><br><span class="line">CEILING(x)   返回大于x的最小整数值</span><br><span class="line">EXP(x)   返回值e（自然对数的底）的x次方</span><br><span class="line">FLOOR(x)   返回小于x的最大整数值</span><br><span class="line">GREATEST(x1,x2,...,xn)返回集合中最大的值</span><br><span class="line">LEAST(x1,x2,...,xn) 返回集合中最小的值</span><br><span class="line">LN(x) 返回x的自然对数</span><br><span class="line">LOG(x,y) 返回以x为底y的对数</span><br><span class="line">MOD(x,y) 返回x/y的模（余数）</span><br><span class="line">PI() 返回pi的值（圆周率）</span><br><span class="line">RAND() 返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line">ROUND(x,y) 返回参数x的四舍五入的有y位小数的值</span><br><span class="line">SIGN(x) 返回代表数字x的符号的值</span><br><span class="line">SQRT(x) 返回一个数的平方根</span><br><span class="line">TRUNCATE(x,y) 返回数字x截短为y位小数的结果</span><br><span class="line">CONVERT(str using charset)，其中str是要转换的数据，using是关键字，charset表示要转换为哪种编码格式的编码。这个函数一般是用来把数据转换成另一种编码格式.</span><br></pre></td></tr></table></figure>

<h3 id="二、聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#二、聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="二、聚合函数(常用于GROUP BY从句的SELECT查询中)"></a>二、聚合函数(常用于GROUP BY从句的SELECT查询中)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AVG(col) 返回指定列的平均值</span><br><span class="line">COUNT(col) 返回指定列中非NULL值的个数</span><br><span class="line">MIN(col) 返回指定列的最小值</span><br><span class="line">MAX(col) 返回指定列的最大值</span><br><span class="line">SUM(col) 返回指定列的所有值之和</span><br><span class="line">GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果</span><br></pre></td></tr></table></figure>

<h3 id="三、字符串函数"><a href="#三、字符串函数" class="headerlink" title="三、字符串函数"></a>三、字符串函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ASCII(char) 返回字符的ASCII码值</span><br><span class="line">BIT_LENGTH(str) 返回字符串的比特长度</span><br><span class="line">CONCAT(s1,s2...,sn) 将s1,s2...,sn连接成字符串</span><br><span class="line">CONCAT_WS(sep,s1,s2...,sn) 将s1,s2...,sn连接成字符串，并用sep字符间隔</span><br><span class="line">INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果，x从1开始</span><br><span class="line">FIND_IN_SET(str,list) 分析逗号分隔的list列表，如果发现str，返回str在list中的位置</span><br><span class="line">LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果</span><br><span class="line">LEFT(str,x) 返回字符串str中最左边的x个字符</span><br><span class="line">LENGTH(s) 返回字符串str中的字符数</span><br><span class="line">LTRIM(str) 从字符串str中切掉开头的空格</span><br><span class="line">POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置</span><br><span class="line">QUOTE(str) 用反斜杠转义str中的单引号</span><br><span class="line">REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果</span><br><span class="line">REVERSE(str) 返回颠倒字符串str的结果</span><br><span class="line">RIGHT(str,x) 返回字符串str中最右边的x个字符</span><br><span class="line">RTRIM(str) 返回字符串str尾部的空格</span><br><span class="line">STRCMP(s1,s2) 比较字符串s1和s2</span><br><span class="line">TRIM(str) 去除字符串首部和尾部的所有空格</span><br><span class="line">UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果</span><br></pre></td></tr></table></figure>

<h3 id="四、日期和时间函数"><a href="#四、日期和时间函数" class="headerlink" title="四、日期和时间函数"></a>四、日期和时间函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CURDATE()或CURRENT_DATE() 返回当前的日期</span><br><span class="line">CURTIME()或CURRENT_TIME() 返回当前的时间</span><br><span class="line">DATE_ADD(date,INTERVAL int keyword) 返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH);</span><br><span class="line">DATE_FORMAT(date,fmt)  依照指定的fmt格式格式化日期date值</span><br><span class="line">DATE_SUB(date,INTERVAL int keyword) 返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_SUB(CURRENT_DATE,INTERVAL 6 MONTH);</span><br><span class="line">DAYOFWEEK(date)   返回date所代表的一星期中的第几天(1~7)</span><br><span class="line">DAYOFMONTH(date)  返回date是一个月的第几天(1~31)</span><br><span class="line">DAYOFYEAR(date)   返回date是一年的第几天(1~366)</span><br><span class="line">DAYNAME(date)   返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE);</span><br><span class="line">FROM_UNIXTIME(ts,fmt)  根据指定的fmt格式，格式化UNIX时间戳ts</span><br><span class="line">HOUR(time)   返回time的小时值(0~23)</span><br><span class="line">MINUTE(time)   返回time的分钟值(0~59)</span><br><span class="line">MONTH(date)   返回date的月份值(1~12)</span><br><span class="line">MONTHNAME(date)   返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE);</span><br><span class="line">NOW()    返回当前的日期和时间</span><br><span class="line">QUARTER(date)   返回date在一年中的季度(1~4)，如SELECT QUARTER(CURRENT_DATE);</span><br><span class="line">WEEK(date)   返回日期date为一年中第几周(0~53)</span><br><span class="line">YEAR(date)   返回日期date的年份(1000~9999)</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取当前系统时间：</span><br><span class="line">SELECT FROM_UNIXTIME(UNIX_TIMESTAMP());</span><br><span class="line">SELECT EXTRACT(YEAR_MONTH FROM CURRENT_DATE);</span><br><span class="line">SELECT EXTRACT(DAY_SECOND FROM CURRENT_DATE);</span><br><span class="line">SELECT EXTRACT(HOUR_MINUTE FROM CURRENT_DATE);</span><br><span class="line"></span><br><span class="line"># 返回两个日期值之间的差值(月数)：</span><br><span class="line">SELECT PERIOD_DIFF(200302,199802);</span><br><span class="line"></span><br><span class="line"># 在Mysql中计算年龄：</span><br><span class="line">SELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(NOW())-TO_DAYS(birthday)),&#x27;%Y&#x27;)+0 AS age FROM employee; # 这样，如果Brithday是未来的年月日的话，计算结果为0。</span><br><span class="line"></span><br><span class="line"># 下面的SQL语句计算员工的绝对年龄，即当Birthday是未来的日期时，将得到负值。</span><br><span class="line">SELECT DATE_FORMAT(NOW(), &#x27;%Y&#x27;) - DATE_FORMAT(birthday, &#x27;%Y&#x27;) -(DATE_FORMAT(NOW(), &#x27;00-%m-%d&#x27;) &lt;DATE_FORMAT(birthday, &#x27;00-%m-%d&#x27;)) AS age from employee</span><br></pre></td></tr></table></figure>

<h3 id="五、加密函数"><a href="#五、加密函数" class="headerlink" title="五、加密函数"></a>五、加密函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AES_ENCRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储</span><br><span class="line">AES_DECRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果</span><br><span class="line">DECODE(str,key)   使用key作为密钥解密加密字符串str</span><br><span class="line">ENCRYPT(str,salt)   使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str</span><br><span class="line">ENCODE(str,key)   使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储</span><br><span class="line">MD5()    计算字符串str的MD5校验和</span><br><span class="line">PASSWORD(str)   返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。</span><br><span class="line">SHA()    计算字符串str的安全散列算法(SHA)校验和</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT ENCRYPT(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;salt&#x27;</span>);</span><br><span class="line">SELECT ENCODE(<span class="string">&#x27;xufeng&#x27;</span>,<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">SELECT DECODE(ENCODE(<span class="string">&#x27;xufeng&#x27;</span>,<span class="string">&#x27;key&#x27;</span>),<span class="string">&#x27;key&#x27;</span>); <span class="comment"># 加解密放在一起</span></span><br><span class="line">SELECT AES_ENCRYPT(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">SELECT AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;key&#x27;</span>),<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">SELECT MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">SELECT SHA(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="六、控制流函数"><a href="#六、控制流函数" class="headerlink" title="六、控制流函数"></a>六、控制流函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL有4个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL控制流函数：</span></span><br><span class="line">CASE WHEN[test1] THEN [result1]...ELSE [default] END  <span class="comment"># 如果testN是真，则返回resultN，否则返回default</span></span><br><span class="line">CASE [<span class="built_in">test</span>] WHEN[val1] THEN [result]...ELSE [default] END   <span class="comment"># 如果test和valN相等，则返回resultN，否则返回default</span></span><br><span class="line">IF(<span class="built_in">test</span>,t,f)  <span class="comment"># 如果test是真，返回t；否则返回f</span></span><br><span class="line">IFNULL(arg1,arg2) <span class="comment"># 如果arg1不是空，返回arg1，否则返回arg2</span></span><br><span class="line">NULLIF(arg1,arg2) <span class="comment"># 如果arg1=arg2返回NULL；否则返回arg1</span></span><br><span class="line"><span class="comment"># IFNULL()，它有两个参数，并且对第一个参数进行判断。如果第一个参数不是NULL，函数就会向调用者返回第一个参数；如果是NULL,将返回第二个参数。</span></span><br><span class="line">SELECT IFNULL(1,2), IFNULL(NULL,10),IFNULL(4*NULL,<span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="comment"># NULLIF() 函数将会检验提供的两个参数是否相等，如果相等，则返回NULL，如果不相等，就返回第一个参数。</span></span><br><span class="line">SELECT NULLIF(1,1),NULLIF(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>),NULLIF(2+3,4+1);</span><br><span class="line"><span class="comment"># MySQL的IF()函数也可以建立一个简单的条件测试，这个函数有三个参数，第一个是要被判断的表达式，如果表达式为真，IF()将会返回第二个参数，如果为假，IF()将会返回第三个参数。</span></span><br><span class="line">SELECTIF(1&lt;10,2,3),IF(56&gt;100,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="comment"># IF()函数在只有两种可能结果时才适合使用。然而，在现实世界中，我们可能发现在条件测试中会需要多个分支。在这种情况下，MySQL提供了CASE函数，第一个参数是要被判断的值或表达式，接下来的是一系列的WHEN-THEN块，每一块的第一个参数指定要比较的值，如果为真，就返回结果。所有的WHEN-THEN块将以ELSE块结束，当END结束了所有外部的CASE块时，如果前面的每一个块都不匹配就会返回ELSE块指定的默认结果。如果没有指定ELSE块，而且所有的WHEN-THEN比较都不是真，MySQL将会返回NULL。</span></span><br><span class="line"><span class="comment"># CASE函数的格式有些复杂，通常如下所示：</span></span><br><span class="line">CASE [expression to be evaluated]</span><br><span class="line">WHEN [val 1] THEN [result 1]</span><br><span class="line">WHEN [val 2] THEN [result 2]</span><br><span class="line">WHEN [val 3] THEN [result 3]</span><br><span class="line">......</span><br><span class="line">WHEN [val n] THEN [result n]</span><br><span class="line">ELSE [default result]</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="comment"># CASE函数还有另外一种句法，有时使用起来非常方便，如下：</span></span><br><span class="line">CASE</span><br><span class="line">WHEN [conditional <span class="built_in">test</span> 1] THEN [result 1]</span><br><span class="line">WHEN [conditional <span class="built_in">test</span> 2] THEN [result 2]</span><br><span class="line">ELSE [default result]</span><br><span class="line">END</span><br><span class="line"><span class="comment"># 这种条件下，返回的结果取决于相应的条件测试是否为真。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SELECT CASE <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    WHEN <span class="string">&#x27;red&#x27;</span> THEN <span class="string">&#x27;stop&#x27;</span></span><br><span class="line">    WHEN <span class="string">&#x27;green&#x27;</span> THEN <span class="string">&#x27;go&#x27;</span> END;</span><br><span class="line">SELECT CASE 9 WHEN 1 THEN <span class="string">&#x27;a&#x27;</span> WHEN 2 THEN <span class="string">&#x27;b&#x27;</span> ELSE <span class="string">&#x27;N/A&#x27;</span> END;</span><br><span class="line">SELECT CASE WHEN (2+2)=4 THEN <span class="string">&#x27;OK&#x27;</span> WHEN(2+2)&lt;&gt;4 THEN <span class="string">&#x27;not OK&#x27;</span> END AS STATUS;</span><br><span class="line">SELECT Name,IF((IsActive = <span class="number">1</span>),&#x27;已激活&#x27;,&#x27;未激活&#x27;) AS RESULT FROM UserLoginInfo;</span><br><span class="line">SELECT fname,lname,(math+sci+lit) AS total,</span><br><span class="line">    CASE WHEN (math+sci+lit) &lt; <span class="number">50</span> THEN &#x27;D&#x27;</span><br><span class="line">    WHEN (math+sci+lit) BETWEEN <span class="number">50</span> AND <span class="number">150</span> THEN &#x27;C&#x27;</span><br><span class="line">    WHEN (math+sci+lit) BETWEEN <span class="number">151</span> AND <span class="number">250</span> THEN &#x27;B&#x27;</span><br><span class="line">    ELSE &#x27;A&#x27; END</span><br><span class="line">    AS grade FROM marks;</span><br><span class="line">SELECT IF(ENCRYPT(&#x27;sue&#x27;,&#x27;ts&#x27;)=upass,&#x27;allow&#x27;,&#x27;deny&#x27;) AS LoginResult FROM users WHERE uname = &#x27;sue&#x27;; #一个登陆验证</span><br></pre></td></tr></table></figure>

<h3 id="七、格式化函数"><a href="#七、格式化函数" class="headerlink" title="七、格式化函数"></a>七、格式化函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATE_FORMAT(date,fmt)  依照字符串fmt格式化日期date值</span><br><span class="line">FORMAT(x,y)   把x格式化为以逗号隔开的数字序列，y是结果的小数位数</span><br><span class="line">INET_ATON(ip)   返回IP地址的数字表示</span><br><span class="line">INET_NTOA(num)   返回数字所代表的IP地址</span><br><span class="line">TIME_FORMAT(time,fmt)  依照字符串fmt格式化时间time值</span><br><span class="line"># 其中最简单的是FORMAT()函数，它可以把大的数值格式化为以逗号间隔的易读的序列。</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT FORMAT(34234.34323432,3);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%W,%D %M %Y %r&#x27;);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%Y-%m-%d&#x27;);</span><br><span class="line">SELECT DATE_FORMAT(19990330,&#x27;%Y-%m-%d&#x27;);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%h:%i %p&#x27;);</span><br><span class="line">SELECT INET_ATON(&#x27;10.122.89.47&#x27;);</span><br><span class="line">SELECT INET_NTOA(175790383);</span><br></pre></td></tr></table></figure>

<h3 id="八、类型转化函数"><a href="#八、类型转化函数" class="headerlink" title="八、类型转化函数"></a>八、类型转化函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。</span><br><span class="line"># 类型有：BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0;</span><br><span class="line">SELECT &#x27;f&#x27;=BINARY &#x27;F&#x27;,&#x27;f&#x27;=CAST(&#x27;F&#x27; AS BINARY);</span><br></pre></td></tr></table></figure>

<h3 id="九、系统信息函数"><a href="#九、系统信息函数" class="headerlink" title="九、系统信息函数"></a>九、系统信息函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATABASE()   返回当前数据库名</span><br><span class="line">BENCHMARK(count,expr)  将表达式expr重复运行count次</span><br><span class="line">CONNECTION_ID()   返回当前客户的连接ID</span><br><span class="line">FOUND_ROWS()   返回最后一个SELECT查询进行检索的总行数</span><br><span class="line">USER()或SYSTEM_USER()  返回当前登陆用户名</span><br><span class="line">VERSION()   返回MySQL服务器的版本</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DATABASE(), VERSION(), USER();</span><br><span class="line">SELECT BENCHMARK(9999999,LOG(RAND()*PI())); # 该例中,MySQL计算LOG(RAND()*PI())表达式9999999次。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>针对字符串位置的操作，第一个位置被标记为1。 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ASCII(str):</span><br><span class="line">返回字符串str的最左面字符的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL。 </span><br><span class="line"></span><br><span class="line">ORD(str):</span><br><span class="line">如果字符串str最左面字符是一个多字节字符，通过以格式((first byte ASCII code)*256+(second byte ASCII code))[*256+third byte ASCII code...] 返回字符的ASCII代码值来返回多字节字符代码。</span><br><span class="line">如果最左面的字符不是一个多字节字符。返回与ASCII()函数返回的相同值。</span><br><span class="line"></span><br><span class="line">CONV(N,from_base,to_base):</span><br><span class="line">在不同的数字基之间变换数字。返回数字N的字符串数字，从from_base基变换为to_base基，如果任何参数是NULL，返回NULL。</span><br><span class="line">参数N解释为一个整数，但是可以指定为一个整数或一个字符串。最小基是2且最大的基是36。</span><br><span class="line">如果to_base是一个负数，N被认为是一个有符号数，否则，N被当作无符号数。 CONV以64位点精度工作。 </span><br><span class="line"></span><br><span class="line">BIN(N) </span><br><span class="line">返回二进制值N的一个字符串表示，在此N是一个长整数(BIGINT)数字，这等价于CONV(N,10,2)。如果N是NULL，返回NULL。 </span><br><span class="line"></span><br><span class="line">OCT(N) </span><br><span class="line">返回八进制值N的一个字符串的表示，在此N是一个长整型数字，这等价于CONV(N,10,8)。如果N是NULL，返回NULL。 </span><br><span class="line"></span><br><span class="line">HEX(N) </span><br><span class="line">返回十六进制值N一个字符串的表示，在此N是一个长整型(BIGINT)数字，这等价于CONV(N,10,16)。如果N是NULL，返回NULL。 </span><br><span class="line"></span><br><span class="line">CHAR(N,...) </span><br><span class="line">CHAR()将参数解释为整数并且返回由这些整数的ASCII代码字符组成的一个字符串。NULL值被跳过。 </span><br><span class="line">mysql&gt; select CHAR(77,121,83,81,&#x27;76&#x27;);</span><br><span class="line">    -&gt; &#x27;MySQL&#x27;</span><br><span class="line"></span><br><span class="line">CONCAT(str1,str2,...) </span><br><span class="line">返回来自于参数连结的字符串。如果任何参数是NULL，返回NULL。可以有超过2个的参数。一个数字参数被变换为等价的字符串形式。 </span><br><span class="line">mysql&gt; select CONCAT(&#x27;My&#x27;, &#x27;S&#x27;, &#x27;QL&#x27;);</span><br><span class="line">    -&gt; &#x27;MySQL&#x27;</span><br><span class="line">mysql&gt; select CONCAT(&#x27;My&#x27;, NULL, &#x27;QL&#x27;);</span><br><span class="line">    -&gt; NULL</span><br><span class="line"></span><br><span class="line">LENGTH(str) </span><br><span class="line">OCTET_LENGTH(str) </span><br><span class="line">CHAR_LENGTH(str) </span><br><span class="line">CHARACTER_LENGTH(str) </span><br><span class="line">返回字符串str的长度。 </span><br><span class="line">mysql&gt; select LENGTH(&#x27;text&#x27;);</span><br><span class="line">    -&gt; 4</span><br><span class="line">mysql&gt; select OCTET_LENGTH(&#x27;text&#x27;);</span><br><span class="line">    -&gt; 4</span><br><span class="line">注意，对于多字节字符，其CHAR_LENGTH()仅计算一次。 </span><br><span class="line"></span><br><span class="line">LOCATE(substr,str) </span><br><span class="line">POSITION(substr IN str) </span><br><span class="line">返回子串substr在字符串str第一个出现的位置，如果substr不是在str里面，返回0. </span><br><span class="line">mysql&gt; select LOCATE(&#x27;bar&#x27;, &#x27;foobarbar&#x27;);</span><br><span class="line">    -&gt; 4</span><br><span class="line">mysql&gt; select LOCATE(&#x27;xbar&#x27;, &#x27;foobar&#x27;);</span><br><span class="line">    -&gt; 0</span><br><span class="line">该函数是多字节可靠的。 </span><br><span class="line">LOCATE(substr,str,pos) </span><br><span class="line">返回子串substr在字符串str第一个出现的位置，从位置pos开始。如果substr不是在str里面，返回0。</span><br><span class="line">mysql&gt; select LOCATE(&#x27;bar&#x27;, &#x27;foobarbar&#x27;,5);</span><br><span class="line">    -&gt; 7</span><br><span class="line">这函数是多字节可靠的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSTR(str,substr) </span><br><span class="line">返回子串substr在字符串str中的第一个出现的位置。这与有2个参数形式的LOCATE()相同，除了参数被颠倒。 </span><br><span class="line">mysql&gt; select INSTR(&#x27;foobarbar&#x27;, &#x27;bar&#x27;);</span><br><span class="line">    -&gt; 4</span><br><span class="line">mysql&gt; select INSTR(&#x27;xbar&#x27;, &#x27;foobar&#x27;);</span><br><span class="line">    -&gt; 0</span><br><span class="line">这函数是多字节可靠的。</span><br><span class="line"> </span><br><span class="line">LPAD(str,len,padstr) </span><br><span class="line">返回字符串str，左面用字符串padstr填补直到str是len个字符长。 </span><br><span class="line">mysql&gt; select LPAD(&#x27;hi&#x27;,4,&#x27;??&#x27;);</span><br><span class="line">    -&gt; &#x27;??hi&#x27;</span><br><span class="line"></span><br><span class="line">RPAD(str,len,padstr) </span><br><span class="line">返回字符串str，右面用字符串padstr填补直到str是len个字符长。 </span><br><span class="line">mysql&gt; select RPAD(&#x27;hi&#x27;,5,&#x27;?&#x27;);</span><br><span class="line">    -&gt; &#x27;hi???&#x27;</span><br><span class="line"></span><br><span class="line">LEFT(str,len) </span><br><span class="line">返回字符串str的最左面len个字符。</span><br><span class="line">mysql&gt; select LEFT(&#x27;foobarbar&#x27;, 5);</span><br><span class="line">    -&gt; &#x27;fooba&#x27;</span><br><span class="line">该函数是多字节可靠的。 </span><br><span class="line"></span><br><span class="line">RIGHT(str,len) </span><br><span class="line">返回字符串str的最右面len个字符。 </span><br><span class="line">mysql&gt; select RIGHT(&#x27;foobarbar&#x27;, 4);</span><br><span class="line">    -&gt; &#x27;rbar&#x27;</span><br><span class="line">该函数是多字节可靠的。 </span><br><span class="line"></span><br><span class="line">SUBSTRING(str,pos,len) </span><br><span class="line">SUBSTRING(str FROM pos FOR len) </span><br><span class="line">  </span><br><span class="line">MID(str,pos,len) </span><br><span class="line">从字符串str返回一个len个字符的子串，从位置pos开始。使用FROM的变种形式是ANSI SQL92语法。 </span><br><span class="line">mysql&gt; select SUBSTRING(&#x27;Quadratically&#x27;,5,6);</span><br><span class="line">    -&gt; &#x27;ratica&#x27;</span><br><span class="line">该函数是多字节可靠的。</span><br><span class="line"></span><br><span class="line">SUBSTRING(str,pos) </span><br><span class="line">SUBSTRING(str FROM pos) </span><br><span class="line">从字符串str的起始位置pos返回一个子串。 </span><br><span class="line">mysql&gt; select SUBSTRING(&#x27;Quadratically&#x27;,5);</span><br><span class="line">    -&gt; &#x27;ratically&#x27;</span><br><span class="line">mysql&gt; select SUBSTRING(&#x27;foobarbar&#x27; FROM 4);</span><br><span class="line">    -&gt; &#x27;barbar&#x27;</span><br><span class="line">该函数是多字节可靠的。</span><br><span class="line"> </span><br><span class="line">SUBSTRING_INDEX(str,delim,count) </span><br><span class="line">返回从字符串str的第count个出现的分隔符delim之后的子串。如果count是正数，返回最后的分隔符到左边(从左边数) 的所有字符。如果count是负数，返回最后的分隔符到右边的所有字符(从右边数)。 </span><br><span class="line">mysql&gt; select SUBSTRING_INDEX(&#x27;www.mysql.com&#x27;, &#x27;.&#x27;, 2);</span><br><span class="line">    -&gt; &#x27;www.mysql&#x27;</span><br><span class="line">mysql&gt; select SUBSTRING_INDEX(&#x27;www.mysql.com&#x27;, &#x27;.&#x27;, -2);</span><br><span class="line">    -&gt; &#x27;mysql.com&#x27;</span><br><span class="line">该函数对多字节是可靠的。</span><br><span class="line"></span><br><span class="line">LTRIM(str) </span><br><span class="line">返回删除了其前置空格字符的字符串str。 </span><br><span class="line">mysql&gt; select LTRIM(&#x27; barbar&#x27;);</span><br><span class="line">    -&gt; &#x27;barbar&#x27;</span><br><span class="line"></span><br><span class="line">RTRIM(str) </span><br><span class="line">返回删除了其拖后空格字符的字符串str。 </span><br><span class="line">mysql&gt; select RTRIM(&#x27;barbar   &#x27;);</span><br><span class="line">    -&gt; &#x27;barbar&#x27;</span><br><span class="line">该函数对多字节是可靠的。</span><br><span class="line"></span><br><span class="line">TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM] str) </span><br><span class="line">返回字符串str，其所有remstr前缀或后缀被删除了。</span><br><span class="line">如果没有修饰符BOTH、LEADING或TRAILING给出，BOTH被假定。如果remstr没被指定，空格被删除。 </span><br><span class="line">mysql&gt; select TRIM(&#x27; bar   &#x27;);</span><br><span class="line">    -&gt; &#x27;bar&#x27;</span><br><span class="line">mysql&gt; select TRIM(LEADING &#x27;x&#x27; FROM &#x27;xxxbarxxx&#x27;);</span><br><span class="line">    -&gt; &#x27;barxxx&#x27;</span><br><span class="line">mysql&gt; select TRIM(BOTH &#x27;x&#x27; FROM &#x27;xxxbarxxx&#x27;);</span><br><span class="line">    -&gt; &#x27;bar&#x27;</span><br><span class="line">mysql&gt; select TRIM(TRAILING &#x27;xyz&#x27; FROM &#x27;barxxyz&#x27;);</span><br><span class="line">    -&gt; &#x27;barx&#x27;</span><br><span class="line">该函数对多字节是可靠的。</span><br><span class="line"></span><br><span class="line">SOUNDEX(str) </span><br><span class="line">返回str的一个同音字符串。听起来&quot;大致相同&quot;的2个字符串应该有相同的同音字符串。</span><br><span class="line">一个&quot;标准&quot;的同音字符串长是4个字符，但是SOUNDEX()函数返回一个任意长的字符串。</span><br><span class="line">可以在结果上使用SUBSTRING()得到一个&quot;标准&quot;的 同音串。</span><br><span class="line">所有非数字字母字符在给定的字符串中被忽略。所有在A-Z之外的字符国际字母被当作元音。 </span><br><span class="line">mysql&gt; select SOUNDEX(&#x27;Hello&#x27;);</span><br><span class="line">    -&gt; &#x27;H400&#x27;</span><br><span class="line">mysql&gt; select SOUNDEX(&#x27;Quadratically&#x27;);</span><br><span class="line">    -&gt; &#x27;Q36324&#x27;</span><br><span class="line"></span><br><span class="line">SPACE(N) </span><br><span class="line">返回由N个空格字符组成的一个字符串。 </span><br><span class="line">mysql&gt; select SPACE(6);</span><br><span class="line">    -&gt; &#x27;     &#x27;</span><br><span class="line"></span><br><span class="line">REPLACE(str,from_str,to_str) </span><br><span class="line">返回字符串str，其字符串from_str的所有出现由字符串to_str代替。 </span><br><span class="line">mysql&gt; select REPLACE(&#x27;www.mysql.com&#x27;, &#x27;w&#x27;, &#x27;Ww&#x27;);</span><br><span class="line">    -&gt; &#x27;WwWwWw.mysql.com&#x27;</span><br><span class="line">该函数对多字节是可靠的。</span><br><span class="line"></span><br><span class="line">REPEAT(str,count) </span><br><span class="line">返回由重复countTimes次的字符串str组成的一个字符串。</span><br><span class="line">如果count &lt;= 0，返回一个空字符串。如果str或count是NULL，返回NULL。 </span><br><span class="line">mysql&gt; select REPEAT(&#x27;MySQL&#x27;, 3);</span><br><span class="line">    -&gt; &#x27;MySQLMySQLMySQL&#x27;</span><br><span class="line"></span><br><span class="line">REVERSE(str) </span><br><span class="line">返回颠倒字符顺序的字符串str。 </span><br><span class="line">mysql&gt; select REVERSE(&#x27;abc&#x27;);</span><br><span class="line">    -&gt; &#x27;cba&#x27;</span><br><span class="line">该函数对多字节可靠的。</span><br><span class="line"></span><br><span class="line">INSERT(str,pos,len,newstr) </span><br><span class="line">返回字符串str，在位置pos起始的子串且len个字符长得子串由字符串newstr代替。 </span><br><span class="line">mysql&gt; select INSERT(&#x27;Quadratic&#x27;, 3, 4, &#x27;What&#x27;);</span><br><span class="line">    -&gt; &#x27;QuWhattic&#x27;</span><br><span class="line">该函数对多字节是可靠的。</span><br><span class="line"></span><br><span class="line">ELT(N,str1,str2,str3,...) </span><br><span class="line">如果N= 1，返回str1，如果N= 2，返回str2，等等。如果N小于1或大于参数个数，返回NULL。ELT()是FIELD()反运算。 </span><br><span class="line">mysql&gt; select ELT(1, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;);</span><br><span class="line">    -&gt; &#x27;ej&#x27;</span><br><span class="line">mysql&gt; select ELT(4, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;);</span><br><span class="line">    -&gt; &#x27;foo&#x27;</span><br><span class="line"></span><br><span class="line">FIELD(str,str1,str2,str3,...) </span><br><span class="line">返回str在str1, str2, str3, ...清单的索引。如果str没找到，返回0。FIELD()是ELT()反运算。 </span><br><span class="line">mysql&gt; select FIELD(&#x27;ej&#x27;, &#x27;Hej&#x27;, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;);</span><br><span class="line">    -&gt; 2</span><br><span class="line">mysql&gt; select FIELD(&#x27;fo&#x27;, &#x27;Hej&#x27;, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;);</span><br><span class="line">    -&gt; 0</span><br><span class="line"></span><br><span class="line">FIND_IN_SET(str,strlist) </span><br><span class="line">如果字符串str在由N子串组成的表strlist之中，返回一个1到N的值。一个字符串表是被&quot;,&quot;分隔的子串组成的一个字符串。如果第一个参数是一个常数字符串并且第二个参数是一种类型为SET的列，FIND_IN_SET()函数被优化而使用位运算！如果str不是在strlist里面或如果strlist是空字符串，返回0。如果任何一个参数是NULL，返回NULL。如果第一个参数包含一个&quot;,&quot;，该函数将工作不正常。 </span><br><span class="line">mysql&gt; SELECT FIND_IN_SET(&#x27;b&#x27;,&#x27;a,b,c,d&#x27;);</span><br><span class="line">    -&gt; 2</span><br><span class="line"></span><br><span class="line">MAKE_SET(bits,str1,str2,...) </span><br><span class="line">返回一个集合 (包含由&quot;,&quot;字符分隔的子串组成的一个字符串)，由相应的位在bits集合中的的字符串组成。str1对应于位0，str2对应位1，等等。在str1, str2, ...中的NULL串不添加到结果中。 </span><br><span class="line">mysql&gt; SELECT MAKE_SET(1,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;);</span><br><span class="line">    -&gt; &#x27;a&#x27;</span><br><span class="line">mysql&gt; SELECT MAKE_SET(1 | 4,&#x27;hello&#x27;,&#x27;nice&#x27;,&#x27;world&#x27;);</span><br><span class="line">    -&gt; &#x27;hello,world&#x27;</span><br><span class="line">mysql&gt; SELECT MAKE_SET(0,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;);</span><br><span class="line">    -&gt; &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">EXPORT_SET(bits,on,off,[separator,[number_of_bits]]) </span><br><span class="line">返回一个字符串，在这里对于在&quot;bits&quot;中设定每一位，你得到一个&quot;on&quot;字符串，并且对于每个复位(reset)的位，你得到一个&quot;off&quot;字符串。每个字符串用&quot;separator&quot;分隔(缺省&quot;,&quot;)，并且只有&quot;bits&quot;的&quot;number_of_bits&quot; (缺省64)位被使用。 </span><br><span class="line">mysql&gt; select EXPORT_SET(5,&#x27;Y&#x27;,&#x27;N&#x27;,&#x27;,&#x27;,4)</span><br><span class="line">    -&gt; Y,N,Y,N </span><br><span class="line"></span><br><span class="line">LCASE(str)</span><br><span class="line">LOWER(str) </span><br><span class="line">返回字符串str，根据当前字符集映射(缺省是ISO-8859-1 Latin1)把所有的字符改变成小写。该函数对多字节是可靠的。 </span><br><span class="line">mysql&gt; select LCASE(&#x27;QUADRATICALLY&#x27;);</span><br><span class="line">    -&gt; &#x27;quadratically&#x27;</span><br><span class="line"></span><br><span class="line">UCASE(str) </span><br><span class="line">UPPER(str) </span><br><span class="line">返回字符串str，根据当前字符集映射(缺省是ISO-8859-1 Latin1)把所有的字符改变成大写。该函数对多字节是可靠的。 </span><br><span class="line">mysql&gt; select UCASE(&#x27;Hej&#x27;);</span><br><span class="line">    -&gt; &#x27;HEJ&#x27;</span><br><span class="line">该函数对多字节是可靠的。</span><br><span class="line"> </span><br><span class="line">LOAD_FILE(file_name) </span><br><span class="line">读入文件并且作为一个字符串返回文件内容。文件必须在服务器上，你必须指定到文件的完整路径名，而且你必须有file权限。文件必须所有内容都是可读的并且小于max_allowed_packet。如果文件不存在或由于上面原因之一不能被读出，函数返回NULL。 </span><br><span class="line">mysql&gt; UPDATE table_name</span><br><span class="line">      SET blob_column=LOAD_FILE(&quot;/tmp/picture&quot;)</span><br><span class="line">      WHERE id=1;</span><br><span class="line"></span><br><span class="line">MySQL必要时自动变换数字为字符串，并且反过来也如此： </span><br><span class="line">mysql&gt; SELECT 1+&quot;1&quot;;</span><br><span class="line">    -&gt; 2</span><br><span class="line">mysql&gt; SELECT CONCAT(2,&#x27; test&#x27;);</span><br><span class="line">    -&gt; &#x27;2 test&#x27;</span><br><span class="line">如果你想要明确地变换一个数字到一个字符串，把它作为参数传递到CONCAT()。 </span><br><span class="line">如果字符串函数提供一个二进制字符串作为参数，结果字符串也是一个二进制字符串。</span><br><span class="line">被变换到一个字符串的数字被当作是一个二进制字符串。这仅影响比较</span><br></pre></td></tr></table></figure>
<p><strong>mysql 时间函数用法集合</strong></p>
<ul>
<li>使用日期函数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询选择了所有记录，其date_col的值是在最后30天以内： </span><br><span class="line">mysql&gt; SELECT something FROM table  </span><br><span class="line">  WHERE TO_DAYS(NOW()) - TO_DAYS(date_col) &lt;= 30; </span><br><span class="line"></span><br><span class="line">DAYOFWEEK(date)  </span><br><span class="line">    返回日期date的星期索引(1=星期天，2=星期一, ……7=星期六)。这些索引值对应于ODBC标准。  </span><br><span class="line">mysql&gt; select DAYOFWEEK(&#x27;1998-02-03&#x27;);  </span><br><span class="line">  -&gt; 3 </span><br><span class="line"></span><br><span class="line">WEEKDAY(date)  </span><br><span class="line">  返回date的星期索引(0=星期一，1=星期二, ……6= 星期天)。  </span><br><span class="line">mysql&gt; select WEEKDAY(&#x27;1997-10-04 22:23:00&#x27;);  </span><br><span class="line">  -&gt; 5  </span><br><span class="line">mysql&gt; select WEEKDAY(&#x27;1997-11-05&#x27;);  </span><br><span class="line">  -&gt; 2 </span><br><span class="line"></span><br><span class="line">DAYOFMONTH(date)  </span><br><span class="line">  返回date的月份中日期，在1到31范围内。  </span><br><span class="line">mysql&gt; select DAYOFMONTH(&#x27;1998-02-03&#x27;);  </span><br><span class="line">  -&gt; 3 </span><br><span class="line"></span><br><span class="line">DAYOFYEAR(date)  </span><br><span class="line">  返回date在一年中的日数, 在1到366范围内。  </span><br><span class="line">mysql&gt; select DAYOFYEAR(&#x27;1998-02-03&#x27;);  </span><br><span class="line">  -&gt; 34 </span><br><span class="line"></span><br><span class="line">MONTH(date)  </span><br><span class="line">  返回date的月份，范围1到12。  </span><br><span class="line">mysql&gt; select MONTH(&#x27;1998-02-03&#x27;);  </span><br><span class="line">  -&gt; 2 </span><br><span class="line"></span><br><span class="line">DAYNAME(date)  </span><br><span class="line">  返回date的星期名字。  </span><br><span class="line">mysql&gt; select DAYNAME(&quot;1998-02-05&quot;);  </span><br><span class="line">  -&gt; &#x27;Thursday&#x27; </span><br><span class="line"></span><br><span class="line">MONTHNAME(date)  </span><br><span class="line">  返回date的月份名字。  </span><br><span class="line">mysql&gt; select MONTHNAME(&quot;1998-02-05&quot;);  </span><br><span class="line">  -&gt; &#x27;February&#x27; </span><br><span class="line"></span><br><span class="line">QUARTER(date)  </span><br><span class="line">  返回date一年中的季度，范围1到4。  </span><br><span class="line">mysql&gt; select QUARTER(&#x27;98-04-01&#x27;);  </span><br><span class="line">  -&gt; 2 </span><br><span class="line"></span><br><span class="line">WEEK(date)  </span><br><span class="line">WEEK(date,first)  </span><br><span class="line">  对于星期天是一周的第一天的地方，有一个单个参数，返回date的周数，范围在0到52。</span><br><span class="line">    2个参数形式WEEK()允许你指定星期是否开始于星期天或星期一。</span><br><span class="line">    如果第二个参数是0，星期从星期天开始，如果第二个参数是1，从星期一开始。  </span><br><span class="line">mysql&gt; select WEEK(&#x27;1998-02-20&#x27;);  </span><br><span class="line">  -&gt; 7  </span><br><span class="line">mysql&gt; select WEEK(&#x27;1998-02-20&#x27;,0);  </span><br><span class="line">  -&gt; 7  </span><br><span class="line">mysql&gt; select WEEK(&#x27;1998-02-20&#x27;,1);</span><br><span class="line">  -&gt; 8 </span><br><span class="line"></span><br><span class="line">YEAR(date)  </span><br><span class="line">  返回date的年份，范围在1000到9999。  </span><br><span class="line">mysql&gt; select YEAR(&#x27;98-02-03&#x27;);  </span><br><span class="line">  -&gt; 1998 </span><br><span class="line"></span><br><span class="line">HOUR(time)  </span><br><span class="line">  返回time的小时，范围是0到23。  </span><br><span class="line">mysql&gt; select HOUR(&#x27;10:05:03&#x27;);  </span><br><span class="line">  -&gt; 10 </span><br><span class="line"></span><br><span class="line">MINUTE(time)  </span><br><span class="line">  返回time的分钟，范围是0到59。  </span><br><span class="line">mysql&gt; select MINUTE(&#x27;98-02-03 10:05:03&#x27;);  </span><br><span class="line">  -&gt; 5 </span><br><span class="line"></span><br><span class="line">SECOND(time)  </span><br><span class="line">  回来time的秒数，范围是0到59。  </span><br><span class="line">mysql&gt; select SECOND(&#x27;10:05:03&#x27;);  </span><br><span class="line">  -&gt; 3 </span><br><span class="line"></span><br><span class="line">PERIOD_ADD(P,N)  </span><br><span class="line">  增加N个月到阶段P（以格式YYMM或YYYYMM)。以格式YYYYMM返回值。注意阶段参数P不是日期值。  </span><br><span class="line">mysql&gt; select PERIOD_ADD(9801,2);</span><br><span class="line">  -&gt; 199803 </span><br><span class="line"></span><br><span class="line">PERIOD_DIFF(P1,P2) </span><br><span class="line">  返回在时期P1和P2之间月数，P1和P2应该以格式YYMM或YYYYMM。注意，时期参数P1和P2不是日期值。  </span><br><span class="line">mysql&gt; select PERIOD_DIFF(9802,199703);  </span><br><span class="line">  -&gt; 11 </span><br><span class="line"></span><br><span class="line">DATE_ADD(date,INTERVAL expr type)  </span><br><span class="line">     </span><br><span class="line">DATE_SUB(date,INTERVAL expr type)  </span><br><span class="line">     </span><br><span class="line">ADDDATE(date,INTERVAL expr type)  </span><br><span class="line">     </span><br><span class="line">SUBDATE(date,INTERVAL expr type)  </span><br><span class="line">  这些功能执行日期运算。ADDDATE()和SUBDATE()是DATE_ADD()和DATE_SUB()的同义词。 </span><br><span class="line">  DATETIME或DATE值，expr是指定加到开始日期或从开始日期减去的间隔值一个表达式，expr是一个字符串；它可以以 </span><br><span class="line">  一个&quot;-&quot;开始表示负间隔。type是一个关键词，指明表达式应该如何被解释。EXTRACT(type FROM date)函数从日期中返回&quot;type&quot;间隔。</span><br><span class="line">  下表显示了type和expr参数怎样被关联： type值 含义 期望的expr格式  </span><br><span class="line">  SECOND 秒 SECONDS  </span><br><span class="line">  MINUTE 分钟 MINUTES  </span><br><span class="line">  HOUR 时间 HOURS  </span><br><span class="line">  DAY 天 DAYS  </span><br><span class="line">  MONTH 月 MONTHS  </span><br><span class="line">  YEAR 年 YEARS  </span><br><span class="line">  MINUTE_SECOND 分钟和秒 &quot;MINUTES:SECONDS&quot;  </span><br><span class="line">  HOUR_MINUTE 小时和分钟 &quot;HOURS:MINUTES&quot;  </span><br><span class="line">  DAY_HOUR 天和小时 &quot;DAYS HOURS&quot;  </span><br><span class="line">  YEAR_MONTH 年和月 &quot;YEARS-MONTHS&quot;  </span><br><span class="line">  HOUR_SECOND 小时, 分钟， &quot;HOURS:MINUTES:SECONDS&quot;  </span><br><span class="line">  DAY_MINUTE 天, 小时, 分钟 &quot;DAYS HOURS:MINUTES&quot;  </span><br><span class="line">  DAY_SECOND 天, 小时, 分钟, 秒 &quot;DAYS HOURS:MINUTES:SECONDS&quot; </span><br><span class="line"></span><br><span class="line">MySQL在expr格式中允许任何标点分隔符。表示显示的是建议的分隔符。</span><br><span class="line">如果date参数是一个DATE值并且你的计算仅仅包含YEAR、MONTH和DAY部分(即，没有时间部分)，结果是一个DATE值。否则结果是一个DATETIME值。 </span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &quot;1997-12-31 23:59:59&quot; + INTERVAL 1 SECOND;  </span><br><span class="line">  -&gt; 1998-01-01 00:00:00  </span><br><span class="line">mysql&gt; SELECT INTERVAL 1 DAY + &quot;1997-12-31&quot;;  </span><br><span class="line">  -&gt; 1998-01-01  </span><br><span class="line">mysql&gt; SELECT &quot;1998-01-01&quot; - INTERVAL 1 SECOND;  </span><br><span class="line">  -&gt; 1997-12-31 23:59:59  </span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1997-12-31 23:59:59&quot;,INTERVAL 1 SECOND);  </span><br><span class="line">  -&gt; 1998-01-01 00:00:00  </span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1997-12-31 23:59:59&quot;,INTERVAL 1 DAY);  </span><br><span class="line">  -&gt; 1998-01-01 23:59:59  </span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1997-12-31 23:59:59&quot;,INTERVAL &quot;1:1&quot; MINUTE_SECOND);  </span><br><span class="line">  -&gt; 1998-01-01 00:01:00  </span><br><span class="line">mysql&gt; SELECT DATE_SUB(&quot;1998-01-01 00:00:00&quot;,INTERVAL &quot;1 1:1:1&quot; DAY_SECOND);  </span><br><span class="line">  -&gt; 1997-12-30 22:58:59  </span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1998-01-01 00:00:00&quot;,  </span><br><span class="line">  INTERVAL &quot;-1 10&quot; DAY_HOUR);  </span><br><span class="line">  -&gt; 1997-12-30 14:00:00  </span><br><span class="line">mysql&gt; SELECT DATE_SUB(&quot;1998-01-02&quot;, INTERVAL 31 DAY);  </span><br><span class="line">  -&gt; 1997-12-02  </span><br><span class="line">mysql&gt; SELECT EXTRACT(YEAR FROM &quot;1999-07-02&quot;);  </span><br><span class="line">  -&gt; 1999  </span><br><span class="line">mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM &quot;1999-07-02 01:02:03&quot;);  </span><br><span class="line">  -&gt; 199907  </span><br><span class="line">mysql&gt; SELECT EXTRACT(DAY_MINUTE FROM &quot;1999-07-02 01:02:03&quot;);  </span><br><span class="line">  -&gt; 20102 </span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_ADD(&#x27;1998-01-30&#x27;, Interval 1 month);  </span><br><span class="line">  -&gt; 1998-02-28 </span><br><span class="line"></span><br><span class="line">注意，从前面的例子中词INTERVAL和type关键词不是区分大小写的。  </span><br><span class="line">  </span><br><span class="line">TO_DAYS(date)  </span><br><span class="line">  给出一个日期date，返回一个天数(从0年的天数)。  </span><br><span class="line">mysql&gt; select TO_DAYS(950501);  </span><br><span class="line">  -&gt; 728779  </span><br><span class="line">mysql&gt; select TO_DAYS(&#x27;1997-10-07&#x27;);  </span><br><span class="line">  -&gt; 729669 </span><br><span class="line"></span><br><span class="line">TO_DAYS()</span><br><span class="line">  不打算用于使用格列高里历(1582)出现前的值。 </span><br><span class="line"></span><br><span class="line">FROM_DAYS(N)  </span><br><span class="line">  给出一个天数N，返回一个DATE值。  </span><br><span class="line">mysql&gt; select FROM_DAYS(729669);  </span><br><span class="line">  -&gt; &#x27;1997-10-07&#x27; </span><br><span class="line"></span><br><span class="line">DATE_FORMAT(date,format)  </span><br><span class="line">  根据format字符串格式化date值。下列修饰符可以被用在format字符串中： %M 月名字(January……December)  </span><br><span class="line">  %W 星期名字(Sunday……Saturday)  </span><br><span class="line">  %D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）  </span><br><span class="line">  %Y 年, 数字, 4 位  </span><br><span class="line">  %y 年, 数字, 2 位  </span><br><span class="line">  %a 缩写的星期名字(Sun……Sat)  </span><br><span class="line">  %d 月份中的天数, 数字(00……31)  </span><br><span class="line">  %e 月份中的天数, 数字(0……31)  </span><br><span class="line">  %m 月, 数字(01……12)  </span><br><span class="line">  %c 月, 数字(1……12)  </span><br><span class="line">  %b 缩写的月份名字(Jan……Dec)  </span><br><span class="line">  %j 一年中的天数(001……366)  </span><br><span class="line">  %H 小时(00……23)  </span><br><span class="line">  %k 小时(0……23)  </span><br><span class="line">  %h 小时(01……12)  </span><br><span class="line">  %I 小时(01……12)  </span><br><span class="line">  %l 小时(1……12)  </span><br><span class="line">  %i 分钟, 数字(00……59)  </span><br><span class="line">  %r 时间,12 小时(hh:mm:ss [AP]M)  </span><br><span class="line">  %T 时间,24 小时(hh:mm:ss)  </span><br><span class="line">  %S 秒(00……59)  </span><br><span class="line">  %s 秒(00……59)  </span><br><span class="line">  %p AM或PM  </span><br><span class="line">  %w 一个星期中的天数(0=Sunday ……6=Saturday ）  </span><br><span class="line">  %U 星期(0……52), 这里星期天是星期的第一天  </span><br><span class="line">  %u 星期(0……52), 这里星期一是星期的第一天  </span><br><span class="line">  %% 一个文字&quot;%&quot;。 </span><br><span class="line"></span><br><span class="line">  所有的其他字符不做解释被复制到结果中。 </span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%W %M %Y&#x27;);  </span><br><span class="line">  -&gt; &#x27;Saturday October 1997&#x27;  </span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%H:%i:%s&#x27;);  </span><br><span class="line">  -&gt; &#x27;22:23:00&#x27;  </span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;,  </span><br><span class="line">  &#x27;%D %y %a %d %m %b %j&#x27;);  </span><br><span class="line">  -&gt; &#x27;4th 97 Sat 04 10 Oct 277&#x27;  </span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;,  </span><br><span class="line">  &#x27;%H %k %I %r %T %S %w&#x27;);  </span><br><span class="line">  -&gt; &#x27;22 22 10 10:23:00 PM 22:23:00 00 6&#x27;  </span><br><span class="line">  MySQL3.23中，在格式修饰符字符前需要%。在MySQL更早的版本中，%是可选的。 </span><br><span class="line"></span><br><span class="line">TIME_FORMAT(time,format)  </span><br><span class="line">  这象上面的DATE_FORMAT()函数一样使用，但是format字符串只能包含处理小时、分钟和秒的那些格式修饰符。其他修饰符产生一个NULL值或0。  </span><br><span class="line">  </span><br><span class="line">CURDATE()  </span><br><span class="line">     </span><br><span class="line">CURRENT_DATE  </span><br><span class="line">  以&#x27;YYYY-MM-DD&#x27;或YYYYMMDD格式返回今天日期值，取决于函数是在一个字符串还是数字上下文被使用。  </span><br><span class="line">mysql&gt; select CURDATE();  </span><br><span class="line">  -&gt; &#x27;1997-12-15&#x27;  </span><br><span class="line">mysql&gt; select CURDATE() + 0;  </span><br><span class="line">  -&gt; 19971215 </span><br><span class="line"></span><br><span class="line">CURTIME()  </span><br><span class="line">     </span><br><span class="line">CURRENT_TIME  </span><br><span class="line">  以&#x27;HH:MM:SS&#x27;或HHMMSS格式返回当前时间值，取决于函数是在一个字符串还是在数字的上下文被使用。  </span><br><span class="line">mysql&gt; select CURTIME();  </span><br><span class="line">  -&gt; &#x27;23:50:26&#x27;  </span><br><span class="line">mysql&gt; select CURTIME() + 0;  </span><br><span class="line">  -&gt; 235026 </span><br><span class="line"></span><br><span class="line">NOW()  </span><br><span class="line">     </span><br><span class="line">SYSDATE()  </span><br><span class="line">     </span><br><span class="line">CURRENT_TIMESTAMP  </span><br><span class="line">  以&#x27;YYYY-MM-DD HH:MM:SS&#x27;或YYYYMMDDHHMMSS格式返回当前的日期和时间，取决于函数是在一个字符串还是在数字的上下文被使用。  </span><br><span class="line">mysql&gt; select NOW();  </span><br><span class="line">  -&gt; &#x27;1997-12-15 23:50:26&#x27;  </span><br><span class="line">mysql&gt; select NOW() + 0;  </span><br><span class="line">  -&gt; 19971215235026 </span><br><span class="line"></span><br><span class="line">UNIX_TIMESTAMP()  </span><br><span class="line">     </span><br><span class="line">UNIX_TIMESTAMP(date)  </span><br><span class="line">  如果没有参数调用，返回一个Unix时间戳记(从&#x27;1970-01-01 00:00:00&#x27;GMT开始的秒数)。如果UNIX_TIMESTAMP()用一个date参数被调用，它返回从&#x27;1970-01-01 00:00:00&#x27; GMT开始的秒数值。date可以是一个DATE字符串、一个DATETIME字符串、一个TIMESTAMP或以YYMMDD或YYYYMMDD格式的本地时间的一个数字。  </span><br><span class="line">mysql&gt; select UNIX_TIMESTAMP();  </span><br><span class="line">  -&gt; 882226357  </span><br><span class="line">mysql&gt; select UNIX_TIMESTAMP(&#x27;1997-10-04 22:23:00&#x27;);  </span><br><span class="line">  -&gt; 875996580  </span><br><span class="line">  当UNIX_TIMESTAMP被用于一个TIMESTAMP列，函数将直接接受值，没有隐含的&quot;string-to-unix-timestamp&quot;变换。 </span><br><span class="line"></span><br><span class="line">FROM_UNIXTIME(unix_timestamp)  </span><br><span class="line">  以&#x27;YYYY-MM-DD HH:MM:SS&#x27;或YYYYMMDDHHMMSS格式返回unix_timestamp参数所表示的值，取决于函数是在一个字符串还是或数字上下文中被使用。  </span><br><span class="line">mysql&gt; select FROM_UNIXTIME(875996580);  </span><br><span class="line">  -&gt; &#x27;1997-10-04 22:23:00&#x27;  </span><br><span class="line">mysql&gt; select FROM_UNIXTIME(875996580) + 0;  </span><br><span class="line">  -&gt; 19971004222300 </span><br><span class="line"></span><br><span class="line">FROM_UNIXTIME(unix_timestamp,format)  </span><br><span class="line">  返回表示 Unix 时间标记的一个字符串，根据format字符串格式化。format可以包含与DATE_FORMAT()函数列出的条目同样的修饰符。  </span><br><span class="line">mysql&gt; select FROM_UNIXTIME(UNIX_TIMESTAMP(),  </span><br><span class="line">  &#x27;%Y %D %M %h:%i:%s %x&#x27;);  </span><br><span class="line">  -&gt; &#x27;1997 23rd December 03:43:30 x&#x27; </span><br><span class="line"></span><br><span class="line">SEC_TO_TIME(seconds)  </span><br><span class="line">  返回seconds参数，变换成小时、分钟和秒，值以&#x27;HH:MM:SS&#x27;或HHMMSS格式化，取决于函数是在一个字符串还是在数字上下文中被使用。  </span><br><span class="line">mysql&gt; select SEC_TO_TIME(2378);  </span><br><span class="line">  -&gt; &#x27;00:39:38&#x27;  </span><br><span class="line">mysql&gt; select SEC_TO_TIME(2378) + 0;  </span><br><span class="line">  -&gt; 3938 </span><br><span class="line"></span><br><span class="line">TIME_TO_SEC(time)  </span><br><span class="line">  返回time参数，转换成秒。  </span><br><span class="line">mysql&gt; select TIME_TO_SEC(&#x27;22:23:00&#x27;);  </span><br><span class="line">  -&gt; 80580  </span><br><span class="line">mysql&gt; select TIME_TO_SEC(&#x27;00:39:38&#x27;);  </span><br><span class="line">  -&gt; 2378</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>Mysql取系统函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Select curtime();</span><br><span class="line"></span><br><span class="line">Select curdate():</span><br><span class="line"></span><br><span class="line">Select sysdate():</span><br><span class="line">select now();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库备份与还原</title>
    <url>/2019/01/01/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h4 id="MySQL备份和还原是利用mysqldump、mysql和source命令来完成的"><a href="#MySQL备份和还原是利用mysqldump、mysql和source命令来完成的" class="headerlink" title="MySQL备份和还原是利用mysqldump、mysql和source命令来完成的"></a>MySQL备份和还原是利用mysqldump、mysql和source命令来完成的</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><ul>
<li>复制表结构<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tableName_new LIKE databaseName.tableName;</span><br></pre></td></tr></table></figure></li>
<li>复制表数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO tableName_new SELECT * FROM databaseName.tableName;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="方法二（不会复制主键、索引，as可省略）"><a href="#方法二（不会复制主键、索引，as可省略）" class="headerlink" title="方法二（不会复制主键、索引，as可省略）"></a>方法二（不会复制主键、索引，as可省略）</h5><ul>
<li>复制表结构和数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tableName_new  as SELECT * FROM databaseName.tableName;</span><br></pre></td></tr></table></figure></li>
<li>复制表结构<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tableName_new  as SELECT * FROM databaseName.tableName WHERE 1=0;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="MySQL数据库的数据备份和恢复（导入和导出）命令操作语法"><a href="#MySQL数据库的数据备份和恢复（导入和导出）命令操作语法" class="headerlink" title="MySQL数据库的数据备份和恢复（导入和导出）命令操作语法"></a>MySQL数据库的数据备份和恢复（导入和导出）命令操作语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 导出数据库中所有表结构；只导出表结构, 不导出表中的数据</span><br><span class="line">mysqldump --opt -d 数据库名称 -u用户名 -p密码 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line">② 导出数据库中所有表中的数据；只导出表中的数据，不导出表结构</span><br><span class="line">mysqldump -t 数据库名称 -u用户名 -p密码 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line">③ 导出数据库中所有的表结构和数据；导出表结构和数据</span><br><span class="line">mysqldump 数据库名称 -u用户名 -p密码 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line">④ 导出指定表的结构和数据</span><br><span class="line">mysqldump -u用户名 -p密码 -B 数据库名称 --table 表名 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line">⑤ 导出指定表数据，只导出数据，不导出表结构</span><br><span class="line">mysqldump -t 数据库名称 -u用户名 -p密码 --table 表名 &gt; 保存文件路径</span><br><span class="line"></span><br><span class="line">⑥ 将备份文件导入到数据库</span><br><span class="line">mysql -u用户名 -p密码 数据库名称 &lt; 用于恢复数据库的数据文件路径</span><br></pre></td></tr></table></figure>

<h4 id="1、导出"><a href="#1、导出" class="headerlink" title="1、导出"></a>1、导出</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 导出全库备份到本地的目录</span><br><span class="line">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --lock-all-tables --add-drop-database -A &gt; db.all.sql</span><br><span class="line"></span><br><span class="line">② 导出指定库到本地的目录(例如mysql库)</span><br><span class="line">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --databases mysql &gt; db.sql</span><br><span class="line"></span><br><span class="line">③ 导出某个库的表到本地的目录(例如mysql库的user表)</span><br><span class="line">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --tables mysql user&gt; db.table.sql</span><br><span class="line"></span><br><span class="line">④ 导出指定库的表(仅数据)到本地的目录(例如mysql库的user表,带过滤条件)</span><br><span class="line">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --no-create-db --no-create-info --tables mysql user --where=&quot;host=&#x27;localhost&#x27;&quot;&gt; db.table.sql</span><br><span class="line"></span><br><span class="line">⑤ 导出某个库的所有表结构</span><br><span class="line">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --no-data --databases mysql &gt; db.nodata.sql</span><br><span class="line"></span><br><span class="line">⑥ 导出某个查询sql的数据为txt格式文件到本地的目录(各数据值之间用&quot;制表符&quot;分隔)</span><br><span class="line">例如sql为&#x27;select user,host,password from mysql.user;&#x27;</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 --skip-column-names -B -e &#x27;select user,host,password from mysql.user;&#x27; &gt; mysql_user.txt</span><br><span class="line"></span><br><span class="line">⑦ 导出某个查询sql的数据为txt格式文件到MySQL服务器.</span><br><span class="line">登录MySQL,将默认的制表符换成逗号.(适应csv格式文件).</span><br><span class="line">指定的路径,mysql要有写的权限.最好用tmp目录,文件用完之后,再删除!</span><br><span class="line">SELECT user,host,password FROM mysql.user INTO OUTFILE &#x27;/tmp/mysql_user.csv&#x27; FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>


<h4 id="2、导入"><a href="#2、导入" class="headerlink" title="2、导入"></a>2、导入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 恢复全库数据到MySQL,因为包含mysql库的权限表,导入完成需要执行FLUSH PRIVILEGES;命令</span><br><span class="line">第一种方法:</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 &lt; db.all.sql</span><br><span class="line"></span><br><span class="line">第二种方法:</span><br><span class="line">登录MySQL,执行source命令,后面的文件名要用绝对路径.</span><br><span class="line">mysql&gt; source /tmp/db.all.sql;</span><br><span class="line"></span><br><span class="line">② 恢复某个库的数据(mysql库的user表)</span><br><span class="line">第一种方法:</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 mysql &lt; db.table.sql</span><br><span class="line"></span><br><span class="line">第二种方法:</span><br><span class="line">登录MySQL,执行source命令,后面的文件名要用绝对路径.</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class="line">......</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; source /tmp/db.table.sql;</span><br><span class="line"></span><br><span class="line">③ 恢复MySQL服务器上面的txt格式文件(需要FILE权限,各数据值之间用&quot;制表符&quot;分隔)</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class="line">......</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; LOAD DATA INFILE &#x27;/tmp/mysql_user.txt&#x27; INTO TABLE user ;</span><br><span class="line"></span><br><span class="line">④ 恢复MySQL服务器上面的csv格式文件(需要FILE权限,各数据值之间用&quot;逗号&quot;分隔)</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class="line">......</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; LOAD DATA INFILE &#x27;/tmp/mysql_user.csv&#x27; INTO TABLE user FIELDS TERMINATED BY &#x27;,&#x27;;</span><br><span class="line"></span><br><span class="line">⑤ 恢复本地的txt或csv文件到MySQL</span><br><span class="line">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class="line">......</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line"># txt</span><br><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;/tmp/mysql_user.csv&#x27; INTO TABLE user;</span><br><span class="line"># csv</span><br><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;/tmp/mysql_user.csv&#x27; INTO TABLE user FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>


<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于MySQL连接</span><br><span class="line">-u$USER 用户名</span><br><span class="line">-p$PASSWD 密码</span><br><span class="line">-h127.0.0.1 如果连接远程服务器,请用对应的主机名或者IP地址替换</span><br><span class="line">-P3306 端口</span><br><span class="line">--default-character-set=utf8 指定字符集</span><br><span class="line">关于mysql参数</span><br><span class="line">--skip-column-names 不显示数据列的名字</span><br><span class="line">-B 以批处理的方式运行mysql程序.查询结果将显示为制表符间隔格式.</span><br><span class="line">-e 执行命令后,退出</span><br><span class="line">关于mysqldump参数</span><br><span class="line">-A 全库备份</span><br><span class="line">--routines 备份存储过程和函数</span><br><span class="line">--default-character-set=utf8 设置字符集</span><br><span class="line">--lock-all-tables 全局一致性锁</span><br><span class="line">--add-drop-database 在每次执行建表语句之前,先执行DROP TABLE IF EXIST语句</span><br><span class="line">--no-create-db 不输出CREATE DATABASE语句</span><br><span class="line">--no-create-info 不输出CREATE TABLE语句</span><br><span class="line">--databases 将后面的参数都解析为库名</span><br><span class="line">--tables 第一个参数为库名 后续为表名</span><br><span class="line">关于LOAD DATA语法</span><br><span class="line">如果LOAD DATA语句不带LOCAL关键字,就在MySQL的服务器上直接读取文件,且要具有FILE权限.</span><br><span class="line">如果带LOCAL关键字,就在客户端本地读取数据文件,通过网络传到MySQL.</span><br><span class="line">LOAD DATA语句,同样被记录到binlog,不过是内部的机制.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库调优</title>
    <url>/2019/01/01/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2 id="MySQL数据库调优"><a href="#MySQL数据库调优" class="headerlink" title="MySQL数据库调优"></a>MySQL数据库调优</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol>
<li>安全 —&gt; 数据可持续性</li>
<li>性能 —&gt; 数据的高性能访问</li>
</ol>
<h3 id="优化范围"><a href="#优化范围" class="headerlink" title="优化范围"></a>优化范围</h3><ol>
<li>存储、主机和操作系统方面<ul>
<li>主机架构稳定性</li>
<li>I/O规划及配置</li>
<li>Swap交换分区</li>
<li>OS内核参数和网络问题</li>
</ul>
</li>
<li>应用程序方面<ul>
<li>应用程序稳定性</li>
<li>SQL语句性能</li>
<li>串行访问资源</li>
<li>性能欠佳会话管理</li>
<li>这个应用适不适合用MySQL</li>
</ul>
</li>
<li>数据库优化方面:<ul>
<li>内存</li>
<li>数据库结构(物理&amp;逻辑)</li>
<li>实例配置</li>
</ul>
</li>
</ol>
<blockquote>
<p>说明：不管是在，设计系统，定位问题还是优化，都可以按照这个顺序执行。</p>
</blockquote>
<h3 id="优化维度"><a href="#优化维度" class="headerlink" title="优化维度"></a>优化维度</h3><blockquote>
<p>数据库优化维度(四个):</p>
</blockquote>
<ul>
<li>硬件</li>
<li>系统配置</li>
<li>数据库表结构</li>
<li>SQL及索引</li>
</ul>
<h3 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h3><h5 id="数据库层面"><a href="#数据库层面" class="headerlink" title="数据库层面"></a>数据库层面</h5><ul>
<li>检查问题常用工具<ul>
<li>msyqladmin  # mysql客户端，可进行管理操作</li>
<li>mysqladmin extended-status -u username -p password</li>
<li>mysqlshow  # 功能强大的查看shell命令</li>
<li>show [SESSION|GLOBAL] variables  # 查看数据库参数信息</li>
<li>show [SESSION|GLOBAL] status  # 查看数据库的状态信息</li>
<li>information_schema  # 获取元数据的方法 eg: <code>select TABLE_NAME, TABLE_ROWS from information_schema.tables where TABLE_SCHEMA=&#39;zeus&#39;;</code></li>
<li>show engine innodb status  # 引擎的所有状态</li>
<li>show processlist  # 查看当前所有连接session状态</li>
<li>explain  # 获取查询语句的执行计划s</li>
<li>show index from <table_name> # 查看表的索引信息</li>
<li>slow-log  # 记录慢查询语句</li>
<li>mysqldumpslow  # 分析slowlog文件的</li>
</ul>
</li>
<li>不常用但好用的工具<ul>
<li>zabbix  # 监控主机、系统、数据库（部署zabbix监控平台）</li>
<li>pt-query-digest  # 分析慢日志</li>
<li>mysqlslap  # 分析慢日志</li>
<li>sysbench  # 压力测试工具</li>
<li>workbench  # 管理、备份、监控、分析、优化工具（比较费资源）</li>
</ul>
</li>
</ul>
<h5 id="数据库层面问题解决思路"><a href="#数据库层面问题解决思路" class="headerlink" title="数据库层面问题解决思路"></a>数据库层面问题解决思路</h5><ul>
<li><p>一般应急调优的思路：</p>
<blockquote>
<p>针对突然的业务办理卡顿，无法进行正常的业务处理！需要立马解决的场景！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、show processlist</span><br><span class="line">2、explain select id, name from stu where name=&#x27;clsn&#x27;; # ALL id name age sex</span><br><span class="line">   show index from table;</span><br><span class="line">3、通过执行计划判断，索引问题（有没有、合不合理）或者语句本身问题</span><br><span class="line">4、show status like &#x27;%lock%&#x27;; # 查询锁状态</span><br><span class="line">   kill SESSION_ID; # 杀掉有问题的session</span><br></pre></td></tr></table></figure>
</li>
<li><p>常规调优思路：</p>
<blockquote>
<p>针对业务周期性的卡顿，例如在每天10-11点业务特别慢，但是还能够使用，过了这段时间就好了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、查看slowlog，分析slowlog，分析出查询慢的语句。</span><br><span class="line">2、按照一定优先级，进行一个一个的排查所有慢语句。</span><br><span class="line">3、分析top sql，进行explain调试，查看语句执行时间。</span><br><span class="line">4、调整索引或语句本身。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="系统层面"><a href="#系统层面" class="headerlink" title="系统层面"></a>系统层面</h5><ul>
<li>cpu 方面</li>
<li></li>
</ul>
<h2 id="MYSQL性能查看（命中率-慢查询"><a href="#MYSQL性能查看（命中率-慢查询" class="headerlink" title="MYSQL性能查看（命中率,慢查询)"></a>MYSQL性能查看（命中率,慢查询)</h2><blockquote>
<p>考虑到服务器硬件配置的不同，具体应用的配置有差别， 需要根据自己的情况进行配置优化，好的做法是MySQL服务器稳定运行了一段时间后运行，根据服务器的”状态”进行优化。</p>
</blockquote>
<ul>
<li>mysql服务器状态<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global status;  # 列出MySQL服务器运行各种状态值</span><br></pre></td></tr></table></figure></li>
<li>查询MySQL服务器配置信息<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables;  # 列出服务器配置信息</span><br></pre></td></tr></table></figure>
<h3 id="一、慢查询"><a href="#一、慢查询" class="headerlink" title="一、慢查询"></a>一、慢查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%slow%&#x27;; </span><br><span class="line">  +------------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +------------------+-------+ </span><br><span class="line">  | log_slow_queries | ON | </span><br><span class="line">  | slow_launch_time | 2 | </span><br><span class="line">  +------------------+-------+ </span><br><span class="line">  </span><br><span class="line">mysql&gt; show global status like &#x27;%slow%&#x27;; </span><br><span class="line">  +---------------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +---------------------+-------+ </span><br><span class="line">  | Slow_launch_threads | 0 | </span><br><span class="line">  | Slow_queries | 4148 | </span><br><span class="line">  +---------------------+-------+  </span><br></pre></td></tr></table></figure>
配置中打开了记录慢查询，执行时间超过2秒的即为慢查询，系统显示有4148个慢查询，可以分析慢查询日志，找出有问题的SQL语句，慢查询时间不宜设置过长，否则意义不大，最好在5秒以内，如果需要微秒级别的慢查询，可以考虑给MySQL打补丁：<a href="http://www.percona.com/docs/wiki/release:start%EF%BC%8C%E8%AE%B0%E5%BE%97%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">http://www.percona.com/docs/wiki/release:start，记得找对应的版本。</a></li>
</ul>
<p>打开慢查询日志可能会对系统性能有一点点影响，如果你的mysql是主-从结构，可以考虑打开其中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。</p>
<h3 id="二、连接数"><a href="#二、连接数" class="headerlink" title="二、连接数"></a>二、连接数</h3><blockquote>
<p>经常会遇见”MySQL: ERROR 1040: Too many connections” 的情况，一种是访问量确实很高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是MySQL配置文件中max_connections值过小： </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;max_connections&#x27;; </span><br><span class="line">  +-----------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-----------------+-------+ </span><br><span class="line">  | max_connections | 256 | </span><br><span class="line">  +-----------------+-------+  </span><br></pre></td></tr></table></figure>
<p>这台MySQL服务器最大连接数是256，然后查询一下服务器响应的最大连接数： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;Max_used_connections&#x27;;</span><br></pre></td></tr></table></figure>
<p>MySQL服务器过去的最大连接数是245，没有达到服务器连接数上限256，应该没有出现1040错误，比较理想的设置是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Max_used_connections / max_connections * 100% ≈ 85%</span><br></pre></td></tr></table></figure>
<p>最大连接数占上限连接数的85%左右，如果发现比例在10%以下，MySQL服务器连接数上限设置的过高了。</p>
<h3 id="三、Key-buffer-size"><a href="#三、Key-buffer-size" class="headerlink" title="三、Key_buffer_size"></a>三、Key_buffer_size</h3><blockquote>
<p>key_buffer_size是对MyISAM表性能影响最大的一个参数，下面一台以MyISAM为主要存储引擎服务器的配置： </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;key_buffer_size&#x27;; </span><br><span class="line">  +-----------------+------------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-----------------+------------+ </span><br><span class="line">  | key_buffer_size | 536870912 | </span><br><span class="line">  +-----------------+------------+  </span><br></pre></td></tr></table></figure>
<p>分配了512MB内存给key_buffer_size，再看一下key_buffer_size的使用情况： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;key_read%&#x27;; </span><br><span class="line">  +------------------------+-------------+ </span><br><span class="line">  | Variable_name | Value | mysql </span><br><span class="line">  +------------------------+-------------+ </span><br><span class="line">  | Key_read_requests | 27813678764 | </span><br><span class="line">  | Key_reads | 6798830 | </span><br><span class="line">  +------------------------+-------------+  </span><br></pre></td></tr></table></figure>
<p>一共有27813678764个索引读取请求，有6798830个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key_cache_miss_rate = Key_reads / Key_read_requests * 100%</span><br></pre></td></tr></table></figure>
<p>比如上面的数据，key_cache_miss_rate为0.0244%，4000个索引读取请求才有一个直接读硬盘，已经很BT了,key_cache_miss_rate在0.1%以下都很好(每1000个请求有一个直接读硬盘)，如果key_cache_miss_rate在0.01%以下的话，key_buffer_size分配的过多，可以适当减少。</p>
<blockquote>
<p>MySQL服务器还提供了key_blocks_*参数： </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;key_blocks_u%&#x27;; </span><br><span class="line">  +------------------------+-------------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +------------------------+-------------+ </span><br><span class="line">  | Key_blocks_unused | 0 | </span><br><span class="line">  | Key_blocks_used | 413543 | </span><br><span class="line">  +------------------------+-------------+  </span><br></pre></td></tr></table></figure>
<p>Key_blocks_unused表示未使用的缓存簇(blocks)数，Key_blocks_used表示曾经用到的最大的blocks数，比如这台服务器，所有的缓存都用到了，要么增加key_buffer_size，要么就是过渡索引了，把缓存占满了。比较理想的设置： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Key_blocks_used / (Key_blocks_unused + Key_blocks_used) * 100% ≈ 80%</span><br></pre></td></tr></table></figure>

<h3 id="四、临时表"><a href="#四、临时表" class="headerlink" title="四、临时表"></a>四、临时表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;created_tmp%&#x27;; </span><br><span class="line">  +-------------------------+---------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-------------------------+---------+ </span><br><span class="line">  | Created_tmp_disk_tables | 21197 | </span><br><span class="line">  | Created_tmp_files | 58 | </span><br><span class="line">  | Created_tmp_tables | 1771587 | </span><br><span class="line">  +-------------------------+---------+  </span><br></pre></td></tr></table></figure>
<p>每次创建临时表，Created_tmp_tables增加，如果是在磁盘上创建临时表，Created_tmp_disk_tables也增加,Created_tmp_files表示MySQL服务创建的临时文件文件数，比较理想的配置是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Created_tmp_disk_tables / Created_tmp_tables * 100% &lt;= 25% </span><br></pre></td></tr></table></figure>
<p>比如上面的服务器<br><code>Created_tmp_disk_tables / Created_tmp_tables * 100% = 1.20%</code>，应该相当好了。我们再看一下MySQL服务器对临时表的配置： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables where Variable_name in (&#x27;tmp_table_size&#x27;, &#x27;max_heap_table_size&#x27;); </span><br><span class="line">  +---------------------+-----------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +---------------------+-----------+ </span><br><span class="line">  | max_heap_table_size | 268435456 | </span><br><span class="line">  | tmp_table_size | 536870912 | </span><br><span class="line">  +---------------------+-----------+  </span><br></pre></td></tr></table></figure>
<p>只有256MB以下的临时表才能全部放内存，超过的就会用到硬盘临时表。</p>
<h3 id="五、Open-Table情况"><a href="#五、Open-Table情况" class="headerlink" title="五、Open Table情况"></a>五、Open Table情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;open%tables%&#x27;; </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">  | Open_tables | 919 | </span><br><span class="line">  | Opened_tables | 1951 | </span><br><span class="line">  +---------------+-------+  </span><br></pre></td></tr></table></figure>
<p>Open_tables表示打开表的数量，Opened_tables表示打开过的表数量，如果Opened_tables数量过大，说明配置中table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache值： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;table_open_cache&#x27;; </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">  | table_cache | 2048 | </span><br><span class="line">  +---------------+-------+</span><br></pre></td></tr></table></figure>
<p>比较合适的值为： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Open_tables / Opened_tables * 100% &gt;= 85%</span><br><span class="line">Open_tables / table_cache * 100% &lt;= 95%</span><br></pre></td></tr></table></figure>

<h3 id="六、进程使用情况"><a href="#六、进程使用情况" class="headerlink" title="六、进程使用情况"></a>六、进程使用情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;Thread%&#x27;&#x27;; </span><br><span class="line">  +-------------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-------------------+-------+ </span><br><span class="line">  | Threads_cached | 46 | </span><br><span class="line">  | Threads_connected | 2 | </span><br><span class="line">  | Threads_created | 570 | </span><br><span class="line">  | Threads_running | 1 | </span><br><span class="line">  +-------------------+-------+  </span><br></pre></td></tr></table></figure>
<p>如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)。Threads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size配置： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;thread_cache_size&#x27;; </span><br><span class="line">  +-------------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-------------------+-------+ </span><br><span class="line">  | thread_cache_size | 64 | </span><br><span class="line">  +-------------------+-------+  </span><br></pre></td></tr></table></figure>
<p>示例中的服务器还是挺健康的。</p>
<h3 id="七、查询缓存-query-cache"><a href="#七、查询缓存-query-cache" class="headerlink" title="七、查询缓存(query cache)"></a>七、查询缓存(query cache)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;qcache%&#x27;; </span><br><span class="line">  +-------------------------+-----------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-------------------------+-----------+ </span><br><span class="line">  | Qcache_free_blocks | 22756 | </span><br><span class="line">  | Qcache_free_memory | 76764704 | </span><br><span class="line">  | Qcache_hits | 213028692 | </span><br><span class="line">  | Qcache_inserts | 208894227 | </span><br><span class="line">  | Qcache_lowmem_prunes | 4010916 | </span><br><span class="line">  | Qcache_not_cached | 13385031 | </span><br><span class="line">  | Qcache_queries_in_cache | 43560 | </span><br><span class="line">  | Qcache_total_blocks | 111212 | </span><br><span class="line">  +-------------------------+-----------+  </span><br></pre></td></tr></table></figure>
<p>MySQL查询缓存变量解释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。</span><br><span class="line">Qcache_free_memory：缓存中的空闲内存。 </span><br><span class="line">Qcache_hits：每次查询在缓存中命中时就增大</span><br><span class="line">Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。</span><br><span class="line">Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看;如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。(上面的 free_blocks和free_memory可以告诉您属于哪种情况) </span><br><span class="line">Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。</span><br><span class="line">Qcache_queries_in_cache：当前缓存的查询(和响应)的数量。</span><br><span class="line">Qcache_total_blocks：缓存中块的数量。</span><br></pre></td></tr></table></figure>
<p>再查询一下服务器关于query_cache的配置： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;query_cache%&#x27;; </span><br><span class="line">  +------------------------------+-----------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +------------------------------+-----------+ </span><br><span class="line">  | query_cache_limit | 2097152 | </span><br><span class="line">  | query_cache_min_res_unit | 4096 | </span><br><span class="line">  | query_cache_size | 203423744 | </span><br><span class="line">  | query_cache_type | ON | </span><br><span class="line">  | query_cache_wlock_invalidate | OFF |</span><br><span class="line">    +——————————+———–+</span><br></pre></td></tr></table></figure>
<p>各字段的解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query_cache_limit：超过此大小的查询将不缓存</span><br><span class="line">query_cache_min_res_unit：缓存块的最小大小</span><br><span class="line">query_cache_size：查询缓存大小</span><br><span class="line">query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询 </span><br><span class="line">query_cache_wlock_invalidate：当有其他客户端正在对MyISAM表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。</span><br><span class="line">query_cache_min_res_unit的配置是一柄&quot;双刃剑&quot;，默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。</span><br><span class="line"></span><br><span class="line">查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%</span><br><span class="line">如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。</span><br><span class="line"></span><br><span class="line">查询缓存利用率 = (query_cache_size - Qcache_free_memory) / query_cache_size * 100%</span><br><span class="line"></span><br><span class="line">查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;查询缓存利用率在80%以上而且Qcache_lowmem_prunes &gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。 </span><br><span class="line"></span><br><span class="line">查询缓存命中率 = (Qcache_hits - Qcache_inserts) / Qcache_hits * 100%</span><br><span class="line">  示例服务器 查询缓存碎片率 = 20.46%，查询缓存利用率 = 62.26%，查询缓存命中率 = 1.94%，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。</span><br></pre></td></tr></table></figure>

<h3 id="八、排序使用情况"><a href="#八、排序使用情况" class="headerlink" title="八、排序使用情况"></a>八、排序使用情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;sort%&#x27;; </span><br><span class="line">  +-------------------+------------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-------------------+------------+ </span><br><span class="line">  | Sort_merge_passes | 29 | </span><br><span class="line">  | Sort_range | 37432840 | </span><br><span class="line">  | Sort_rows | 9178691532 | </span><br><span class="line">  | Sort_scan | 1860569 | </span><br><span class="line">  +-------------------+------------+  </span><br></pre></td></tr></table></figure>
<p>Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?(引自<a href="http://qroom.blogspot.com/2007/09/mysql-select-sort.html%EF%BC%8C%E8%B2%8C%E4%BC%BC%E8%A2%AB%E5%A2%99">http://qroom.blogspot.com/2007/09/mysql-select-sort.html，貌似被墙</a>) mysql<br>  另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处，参见：<a href="http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is-read_rnd_buffer_size/">http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is-read_rnd_buffer_size/</a></p>
<h3 id="九、文件打开数-open-files"><a href="#九、文件打开数-open-files" class="headerlink" title="九、文件打开数(open_files)"></a>九、文件打开数(open_files)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;open_files&#x27;; </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">  | Open_files | 1410 | </span><br><span class="line">  +---------------+-------+ </span><br><span class="line">mysql&gt; show variables like &#x27;open_files_limit&#x27;; </span><br><span class="line">  +------------------+-------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +------------------+-------+ </span><br><span class="line">  | open_files_limit | 4590 | </span><br><span class="line">  +------------------+-------+  </span><br></pre></td></tr></table></figure>

<p>比较合适的设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Open_files / open_files_limit * 100% &lt;= 75%</span><br></pre></td></tr></table></figure>

<h3 id="十、表锁情况"><a href="#十、表锁情况" class="headerlink" title="十、表锁情况"></a>十、表锁情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;table_locks%&#x27;; </span><br><span class="line">  +-----------------------+-----------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-----------------------+-----------+ </span><br><span class="line">  | Table_locks_immediate | 490206328 | </span><br><span class="line">  | Table_locks_waited | 2084912 | </span><br><span class="line">  +-----------------------+-----------+  </span><br></pre></td></tr></table></figure>
<p>Table_locks_immediate表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，如果Table_locks_immediate / Table_locks_waited &gt; 5000，最好采用InnoDB引擎，因为InnoDB是行锁而MyISAM是表锁，对于高并发写入的应用InnoDB效果会好些。示例中的服务器Table_locks_immediate / Table_locks_waited = 235，MyISAM就足够了。</p>
<h3 id="十一、表扫描情况"><a href="#十一、表扫描情况" class="headerlink" title="十一、表扫描情况"></a>十一、表扫描情况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;handler_read%&#x27;; </span><br><span class="line">  +-----------------------+-------------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +-----------------------+-------------+ </span><br><span class="line">  | Handler_read_first | 5803750 | </span><br><span class="line">  | Handler_read_key | 6049319850 | </span><br><span class="line">  | Handler_read_next | 94440908210 | </span><br><span class="line">  | Handler_read_prev | 34822001724 | </span><br><span class="line">  | Handler_read_rnd | 405482605 | </span><br><span class="line">  | Handler_read_rnd_next | 18912877839 | </span><br><span class="line">  +-----------------------+-------------+  </span><br></pre></td></tr></table></figure>
<p>各字段解释参见<a href="http://hi.baidu.com/thinkinginlamp/blog/item/31690cd7c4bc5cdaa144df9c.html%EF%BC%8C">http://hi.baidu.com/thinkinginlamp/blog/item/31690cd7c4bc5cdaa144df9c.html，</a><br>调出服务器完成的查询请求次数： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global status like &#x27;com_select&#x27;; </span><br><span class="line">  +---------------+-----------+ </span><br><span class="line">  | Variable_name | Value | </span><br><span class="line">  +---------------+-----------+ </span><br><span class="line">  | Com_select | 222693559 | </span><br><span class="line">  +---------------+-----------+  </span><br></pre></td></tr></table></figure>

<p>计算表扫描率：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表扫描率 = Handler_read_rnd_next / Com_select</span><br></pre></td></tr></table></figure>
<p>如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。</p>
<h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3><p>文中提到一些数字都是参考值，了解基本原理就可以，除了MySQL提供的各种status值外，操作系统的一些性能指标也很重要，比如常用的top,iostat等，尤其是iostat，现在的系统瓶颈一般都在磁盘IO上，关于iostat的使用.</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 查看连接数</title>
    <url>/2019/01/01/Mysql%20%E6%9F%A5%E7%9C%8B%E8%BF%9E%E6%8E%A5%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令： show processlist;</span><br><span class="line">如果是root帐号，你能看到所有用户的当前连接。</span><br><span class="line">如果是其它普通帐号，只能看到自己占用的连接。</span><br><span class="line">show processlist;只列出前100条，如果想全列出请使用show full processlist;</span><br><span class="line">mysql&gt; show processlist;</span><br><span class="line"> </span><br><span class="line">命令： show status;</span><br><span class="line"> </span><br><span class="line">命令：show status like &#x27;%下面变量%&#x27;;</span><br><span class="line"> </span><br><span class="line">Aborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。</span><br><span class="line">Aborted_connects 尝试已经失败的MySQL服务器的连接的次数。</span><br><span class="line">Connections 试图连接MySQL服务器的次数。</span><br><span class="line">Created_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。</span><br><span class="line">Delayed_insert_threads 正在使用的延迟插入处理器线程的数量。</span><br><span class="line">Delayed_writes 用INSERT DELAYED写入的行数。</span><br><span class="line">Delayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。</span><br><span class="line">Flush_commands 执行FLUSH命令的次数。</span><br><span class="line">Handler_delete 请求从一张表中删除行的次数。</span><br><span class="line">Handler_read_first 请求读入表中第一行的次数。</span><br><span class="line">Handler_read_key 请求数字基于键读行。</span><br><span class="line">Handler_read_next 请求读入基于一个键的一行的次数。</span><br><span class="line">Handler_read_rnd 请求读入基于一个固定位置的一行的次数。</span><br><span class="line">Handler_update 请求更新表中一行的次数。</span><br><span class="line">Handler_write 请求向表中插入一行的次数。</span><br><span class="line">Key_blocks_used 用于关键字缓存的块的数量。</span><br><span class="line">Key_read_requests 请求从缓存读入一个键值的次数。</span><br><span class="line">Key_reads 从磁盘物理读入一个键值的次数。</span><br><span class="line">Key_write_requests 请求将一个关键字块写入缓存次数。</span><br><span class="line">Key_writes 将一个键值块物理写入磁盘的次数。</span><br><span class="line">Max_used_connections 同时使用的连接的最大数目。</span><br><span class="line">Not_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。</span><br><span class="line">Not_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。</span><br><span class="line">Open_tables 打开表的数量。</span><br><span class="line">Open_files 打开文件的数量。</span><br><span class="line">Open_streams 打开流的数量(主要用于日志记载）</span><br><span class="line">Opened_tables 已经打开的表的数量。</span><br><span class="line">Questions 发往服务器的查询的数量。</span><br><span class="line">Slow_queries 要花超过long_query_time时间的查询数量。</span><br><span class="line">Threads_connected 当前打开的连接的数量。</span><br><span class="line">Threads_running 不在睡眠的线程数量。</span><br><span class="line">Uptime 服务器工作了多少秒。</span><br><span class="line"> </span><br><span class="line">My.ini配置 虚拟内存</span><br><span class="line">innodb_buffer_pool_size=576M   -&gt;128M InnoDB引擎缓冲区 </span><br><span class="line">query_cache_size=100M             -&gt;32 查询缓存</span><br><span class="line">tmp_table_size=102M                  -&gt;32M 临时表大小</span><br><span class="line">key_buffer_size=16m                  -&gt;8M</span><br><span class="line"> </span><br><span class="line">设置max_connections</span><br><span class="line"> </span><br><span class="line">命令：show variables like &#x27;%max_connections%&#x27;</span><br><span class="line">（这个办法在debian＋mysql  Ver 12.22 Distrib 4.0.22, for pc-linux (i386)</span><br><span class="line">里实验了）</span><br><span class="line">设置办法是在my.cnf文件中，添加下面的最后红色的一行：</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">#socket=MySQL</span><br><span class="line">skip-locking</span><br><span class="line">set-variable = key_buffer=16K</span><br><span class="line">set-variable = max_allowed_packet=1M</span><br><span class="line">set-variable = thread_stack=64K</span><br><span class="line">set-variable = table_cache=4</span><br><span class="line">set-variable = sort_buffer=64K</span><br><span class="line">set-variable = net_buffer_length=2K</span><br><span class="line">set-variable = max_connections=32000</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>修改完毕后，重启MySQL即可。当然，为了确保设置正确，应该查看一下max_connections。</p>
</blockquote>
<blockquote>
<p>注意：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、虽然这里写的32000。但实际MySQL服务器允许的最大连接数16384；</span><br><span class="line">2、除max_connections外，上述其他配置应该根据你们系统自身需要进行配置，不必拘泥；</span><br><span class="line">3、添加了最大允许连接数，对系统消耗增加不大。</span><br><span class="line">4、如果你的mysql用的是my.ini作配置文件，设置类似，但设置的格式要稍作变通。</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用mysqld --help 可以查看到max_connections 变量。 </span><br><span class="line">或者 mysql -uuser -p</span><br><span class="line">后mysql&gt;show variables;</span><br><span class="line">也会看到max_connections 。  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>mysql的最大连接数默认是100, 这个数值对于并发连接很多的数据库应用是远远不够的，当连接请求大于默认连接数后，就会出现无法连接数据库的错误，因此我们需要把它适当调大一些， 有两种办法可以修改最大连接数，一种是修改safe_mysqld，另一种是直接修改原代码并重新编译。下面分别介绍这两种方法：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.修改safe_mysqld</span><br><span class="line">找到safe_mysqld编辑它，找到mysqld启动的那两行，在后面加上参数 ：</span><br><span class="line"> </span><br><span class="line">-O max_connections=1000</span><br><span class="line"> </span><br><span class="line">例如 ：(其中前面有---的是原来的内容，而+++是修改过以后的）</span><br><span class="line">--- safe_mysqld.orig Mon Sep 25 09:34:01 2000</span><br><span class="line">+++ safe_mysqld Sun Sep 24 16:56:46 2000</span><br><span class="line">@@ -109,10 +109,10 @@</span><br><span class="line">if test &quot;$#&quot; -eq 0</span><br><span class="line">then</span><br><span class="line">nohup $ledir/mysqld --basedir=$MY_BASEDIR_VERSION --datadir=$DATADIR /</span><br><span class="line">- --skip-locking &gt;&gt; $err_log 2&gt;&amp;1</span><br><span class="line">+ --skip-locking -O max_connections=1000 &gt;&gt; $err_log 2&gt;&amp;1</span><br><span class="line">else</span><br><span class="line">nohup $ledir/mysqld --basedir=$MY_BASEDIR_VERSION --datadir=$DATADIR /</span><br><span class="line">- --skip-locking &quot;$@&quot; &gt;&gt; $err_log 2&gt;&amp;1</span><br><span class="line">+ --skip-locking &quot;$@&quot; -O max_connections=1000 &gt;&gt; $err_log 2&gt;&amp;1</span><br><span class="line">fi</span><br><span class="line">if test ! -f $pid_file # This is removed if normal shutdown</span><br><span class="line">then</span><br><span class="line">然后关闭mysql重启它，用</span><br><span class="line">/mysqladmin所在路径/mysqladmin -uroot -p variables</span><br><span class="line">输入root数据库账号的密码后可看到</span><br><span class="line">| max_connections | 1000 |</span><br><span class="line">即新改动已经生效。</span><br><span class="line"> </span><br><span class="line">2.修改原代码</span><br><span class="line"> </span><br><span class="line">解开MySQL的原代码，进入里面的sql目录修改mysqld.cc找到下面一行：</span><br><span class="line"> </span><br><span class="line">&#123; &quot;max_connections&quot;, (long*) &amp;max_connections,1000,1,16384,0,1&#125;,</span><br><span class="line"> </span><br><span class="line">把它改为：</span><br><span class="line"> </span><br><span class="line">&#123; &quot;max_connections&quot;, (long*) &amp;max_connections,1000,1,16384,0,1&#125;,</span><br><span class="line"> </span><br><span class="line">存盘退出，然后./configure ;make;make install可以获得同样的效果。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql问题查询</title>
    <url>/2019/01/01/Mysql%E9%97%AE%E9%A2%98%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="1-查询mysql链接是否释放"><a href="#1-查询mysql链接是否释放" class="headerlink" title="1. 查询mysql链接是否释放"></a>1. 查询mysql链接是否释放</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询 mysql 占用的链接是不是释放</span><br><span class="line">netstat -naplt | grep 3306</span><br><span class="line"></span><br><span class="line"># 统计数量</span><br><span class="line">netstat -naplt | grep 3306 | wc -l</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-查询mysql当前连接情况-查看负载较大用户"><a href="#2-查询mysql当前连接情况-查看负载较大用户" class="headerlink" title="2. 查询mysql当前连接情况(查看负载较大用户)"></a>2. 查询mysql当前连接情况(查看负载较大用户)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询当前数据库用户连接情况.</span><br><span class="line"># 如果是root帐号,你能看到所有用户的当前连接.如果是其它普通帐号,只能看到自己占用的连接.</span><br><span class="line">show processlist; </span><br><span class="line"># 列出全部链接</span><br><span class="line">show full processlist;</span><br><span class="line"></span><br><span class="line"># 查看状态命令： </span><br><span class="line">show status;</span><br><span class="line">show status like &#x27;%下面变量%&#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">Aborted_clients 由于客户没有正确关闭连接已经死掉,已经放弃的连接数量.</span><br><span class="line">Aborted_connects 尝试已经失败的MySQL服务器的连接的次数.</span><br><span class="line">Connections 试图连接MySQL服务器的次数.</span><br><span class="line">Created_tmp_tables 当执行语句时,已经被创造了的隐含临时表的数量.</span><br><span class="line">Delayed_insert_threads 正在使用的延迟插入处理器线程的数量.</span><br><span class="line">Delayed_writes 用INSERT DELAYED写入的行数.</span><br><span class="line">Delayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数.</span><br><span class="line">Flush_commands 执行FLUSH命令的次数.</span><br><span class="line">Handler_delete 请求从一张表中删除行的次数.</span><br><span class="line">Handler_read_first 请求读入表中第一行的次数.</span><br><span class="line">Handler_read_key 请求数字基于键读行.</span><br><span class="line">Handler_read_next 请求读入基于一个键的一行的次数.</span><br><span class="line">Handler_read_rnd 请求读入基于一个固定位置的一行的次数.</span><br><span class="line">Handler_update 请求更新表中一行的次数.</span><br><span class="line">Handler_write 请求向表中插入一行的次数.</span><br><span class="line">Key_blocks_used 用于关键字缓存的块的数量.</span><br><span class="line">Key_read_requests 请求从缓存读入一个键值的次数.</span><br><span class="line">Key_reads 从磁盘物理读入一个键值的次数.</span><br><span class="line">Key_write_requests 请求将一个关键字块写入缓存次数.</span><br><span class="line">Key_writes 将一个键值块物理写入磁盘的次数.</span><br><span class="line">Max_used_connections 同时使用的连接的最大数目.</span><br><span class="line">Not_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块.</span><br><span class="line">Not_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量.</span><br><span class="line">Open_tables 打开表的数量.</span><br><span class="line">Open_files 打开文件的数量.</span><br><span class="line">Open_streams 打开流的数量(主要用于日志记载）</span><br><span class="line">Opened_tables 已经打开的表的数量.</span><br><span class="line">Questions 发往服务器的查询的数量.</span><br><span class="line">Slow_queries 要花超过long_query_time时间的查询数量.</span><br><span class="line">Threads_connected 当前打开的连接的数量.</span><br><span class="line">Threads_running 不在睡眠的线程数量.</span><br></pre></td></tr></table></figure>

<h3 id="3-查看mysql配置"><a href="#3-查看mysql配置" class="headerlink" title="3. 查看mysql配置"></a>3. 查看mysql配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看 mysql 的最大连接数</span><br><span class="line">show variables like &#x27;max_connections&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看服务器响应的最大连接数</span><br><span class="line">show global status like &#x27;Max_used_connections&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-Mysql经常出现sleep进程的解决办法"><a href="#4-Mysql经常出现sleep进程的解决办法" class="headerlink" title="4. Mysql经常出现sleep进程的解决办法"></a>4. Mysql经常出现sleep进程的解决办法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 编辑 /etc/my.cnf,在mysqld 下 新增 timeout参数，设置为120秒，如下：</span><br><span class="line">[mysqld]</span><br><span class="line">wait_timeout=120</span><br><span class="line">interactive_timeout=120</span><br><span class="line"># 注意：要同时设置interactive_timeout和wait_timeout才会生效。重启mysql即可。</span><br><span class="line"></span><br><span class="line"># 临时设置</span><br><span class="line">set global interactive_timeout=600;</span><br><span class="line">set global wait_timeout=600;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos 之 Docker部署</title>
    <url>/2020/01/01/Nacos%20%E4%B9%8B%20Docker%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h3><h4 id="1-拉镜像"><a href="#1-拉镜像" class="headerlink" title="1. 拉镜像"></a>1. 拉镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure>


<h4 id="2-创建数据目录"><a href="#2-创建数据目录" class="headerlink" title="2. 创建数据目录"></a>2. 创建数据目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/nacos/logs</span><br></pre></td></tr></table></figure>

<h4 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3. 启动容器"></a>3. 启动容器</h4><blockquote>
<p>doc: <a href="https://hub.docker.com/r/nacos/nacos-server">https://hub.docker.com/r/nacos/nacos-server</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--privileged=true \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=118.25.6.156 \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=root \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-v /data/nacos/logs:/home/nacos/logs \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-初始化数据库"><a href="#4-初始化数据库" class="headerlink" title="4. 初始化数据库"></a>4. 初始化数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use nacos;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(255) DEFAULT NULL,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(20) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  `c_desc` varchar(256) DEFAULT NULL,</span><br><span class="line">  `c_use` varchar(64) DEFAULT NULL,</span><br><span class="line">  `effect` varchar(64) DEFAULT NULL,</span><br><span class="line">  `type` varchar(64) DEFAULT NULL,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info_aggr   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info_aggr` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(255) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `datum_id` varchar(255) NOT NULL COMMENT &#x27;datum_id&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;内容&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info_beta   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info_beta` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &#x27;betaIps&#x27;,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(20) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info_tag   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info_tag` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `tag_id` varchar(128) NOT NULL COMMENT &#x27;tag_id&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(20) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_tags_relation   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_tags_relation` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &#x27;id&#x27;,</span><br><span class="line">  `tag_name` varchar(128) NOT NULL COMMENT &#x27;tag_name&#x27;,</span><br><span class="line">  `tag_type` varchar(64) DEFAULT NULL COMMENT &#x27;tag_type&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `nid` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  PRIMARY KEY (`nid`),</span><br><span class="line">  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = group_capacity   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `group_capacity` (</span><br><span class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID，空字符表示整个集群&#x27;,</span><br><span class="line">  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,</span><br><span class="line">  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,</span><br><span class="line">  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数，，0表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = his_config_info   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `his_config_info` (</span><br><span class="line">  `id` bigint(64) unsigned NOT NULL,</span><br><span class="line">  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `data_id` varchar(255) NOT NULL,</span><br><span class="line">  `group_id` varchar(128) NOT NULL,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27;,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` varchar(20) DEFAULT NULL,</span><br><span class="line">  `op_type` char(10) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = tenant_capacity   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `tenant_capacity` (</span><br><span class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;,</span><br><span class="line">  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,</span><br><span class="line">  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,</span><br><span class="line">  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;,</span><br><span class="line">  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `tenant_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `kp` varchar(128) NOT NULL COMMENT &#x27;kp&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `tenant_name` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;,</span><br><span class="line">  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;,</span><br><span class="line">  `create_source` varchar(32) DEFAULT NULL COMMENT &#x27;create_source&#x27;,</span><br><span class="line">  `gmt_create` bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` bigint(20) NOT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE users (</span><br><span class="line">	username varchar(50) NOT NULL PRIMARY KEY,</span><br><span class="line">	password varchar(500) NOT NULL,</span><br><span class="line">	enabled boolean NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE roles (</span><br><span class="line">	username varchar(50) NOT NULL,</span><br><span class="line">	role varchar(50) NOT NULL,</span><br><span class="line">	constraint uk_username_role UNIQUE (username,role)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE permissions (</span><br><span class="line">    role varchar(50) NOT NULL,</span><br><span class="line">    resource varchar(512) NOT NULL,</span><br><span class="line">    action varchar(8) NOT NULL,</span><br><span class="line">    constraint uk_role_permission UNIQUE (role,resource,action)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);</span><br><span class="line"></span><br><span class="line">INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h3><h4 id="1-拉镜像-1"><a href="#1-拉镜像-1" class="headerlink" title="1. 拉镜像"></a>1. 拉镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull nacos/nacos-server:1.2.0  //此版本有权限控制</span><br><span class="line">sudo docker pull nacos/nacos-server:1.1.4  //稳定版，推荐</span><br></pre></td></tr></table></figure>

<h4 id="2-创建数据目录-1"><a href="#2-创建数据目录-1" class="headerlink" title="2. 创建数据目录"></a>2. 创建数据目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/nacos/logs</span><br></pre></td></tr></table></figure>

<h4 id="3-启动容器-1"><a href="#3-启动容器-1" class="headerlink" title="3. 启动容器"></a>3. 启动容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--privileged=true \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_HOST=118.25.6.156 \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_PASSWORD=root \</span><br><span class="line">-e MYSQL_MASTER_SERVICE_DB_NAME=nacos \</span><br><span class="line">-e MYSQL_SLAVE_SERVICE_HOST=118.25.6.156 \</span><br><span class="line">-e MYSQL_SLAVE_SERVICE_PORT=3306 \</span><br><span class="line">-v /data/nacos/logs:/home/nacos/logs \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:1.1.4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-初始化数据库-1"><a href="#4-初始化数据库-1" class="headerlink" title="4. 初始化数据库"></a>4. 初始化数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use nacos;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    enabled <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> roles (</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    role <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos初探（单机）</title>
    <url>/2021/02/28/Nacos%E5%88%9D%E6%8E%A2(1_4_1)/</url>
    <content><![CDATA[<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 13306:3306 --name mysql57 \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /home/data/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /home/data/mysql/logs:/logs \</span><br><span class="line">-v /home/data/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=1q2w3e \</span><br><span class="line">-e MYSQL_DATABASE=nacos \</span><br><span class="line">-e MYSQL_USER=nacos \</span><br><span class="line">-e MYSQL_PASSWORD=1q2w3e \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="Nacos之Docker部署"><a href="#Nacos之Docker部署" class="headerlink" title="Nacos之Docker部署"></a>Nacos之Docker部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">--<span class="built_in">link</span> mysql57:mysql_host \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=mysql_host \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=1q2w3e \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-e TIME_ZONE=<span class="string">&#x27;Asia/Shanghai&#x27;</span> \</span><br><span class="line">-v /home/data/nacos/logs:/home/nacos/logs \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--name nacos \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure>
<h3 id="Nacos初始化数据库"><a href="#Nacos初始化数据库" class="headerlink" title="Nacos初始化数据库"></a>Nacos初始化数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE `nacos`</span><br><span class="line">DEFAULT CHARACTER SET utf8mb4</span><br><span class="line">DEFAULT COLLATE utf8mb4_general_ci;</span><br><span class="line">create database <span class="keyword">if</span> not exists nacos default charset utf8mb4 collate utf8mb4_general_ci;</span><br><span class="line">CREATE TABLE config_info (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128) default <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  app_name varchar(128),</span><br><span class="line">  content longtext,</span><br><span class="line">  md5 varchar(32) DEFAULT NULL,</span><br><span class="line">  gmt_create timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  gmt_modified timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  src_user varchar(128) DEFAULT NULL,</span><br><span class="line">  src_ip varchar(50) DEFAULT NULL,</span><br><span class="line">  c_desc varchar(256) DEFAULT NULL,</span><br><span class="line">  c_use varchar(64) DEFAULT NULL,</span><br><span class="line">  effect varchar(64) DEFAULT NULL,</span><br><span class="line">  <span class="built_in">type</span> varchar(64) DEFAULT NULL,</span><br><span class="line">  c_schema LONG VARCHAR DEFAULT NULL,</span><br><span class="line">  constraint configinfo_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_configinfo_datagrouptenant UNIQUE (data_id,group_id,tenant_id));</span><br><span class="line">CREATE INDEX configinfo_dataid_key_idx ON config_info(data_id);</span><br><span class="line">CREATE INDEX configinfo_groupid_key_idx ON config_info(group_id);</span><br><span class="line">CREATE INDEX configinfo_dataid_group_key_idx ON config_info(data_id, group_id);</span><br><span class="line">CREATE TABLE his_config_info (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL,</span><br><span class="line">  nid bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128) default <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  app_name varchar(128),</span><br><span class="line">  content longtext,</span><br><span class="line">  md5 varchar(32) DEFAULT NULL,</span><br><span class="line">  gmt_create timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00.000&#x27;</span>,</span><br><span class="line">  gmt_modified timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00.000&#x27;</span>,</span><br><span class="line">  src_user varchar(128),</span><br><span class="line">  src_ip varchar(50) DEFAULT NULL,</span><br><span class="line">  op_type char(10) DEFAULT NULL,</span><br><span class="line">  constraint hisconfiginfo_nid_key PRIMARY KEY (nid));</span><br><span class="line">CREATE INDEX hisconfiginfo_dataid_key_idx ON his_config_info(data_id);</span><br><span class="line">CREATE INDEX hisconfiginfo_gmt_create_idx ON his_config_info(gmt_create);</span><br><span class="line">CREATE INDEX hisconfiginfo_gmt_modified_idx ON his_config_info(gmt_modified);</span><br><span class="line">CREATE TABLE config_info_beta (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128) default <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  app_name varchar(128),</span><br><span class="line">  content longtext,</span><br><span class="line">  beta_ips varchar(1024),</span><br><span class="line">  md5 varchar(32) DEFAULT NULL,</span><br><span class="line">  gmt_create timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  gmt_modified timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  src_user varchar(128),</span><br><span class="line">  src_ip varchar(50) DEFAULT NULL,</span><br><span class="line">  constraint configinfobeta_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_configinfobeta_datagrouptenant UNIQUE (data_id,group_id,tenant_id));</span><br><span class="line">CREATE TABLE config_info_tag (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128) default <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  tag_id varchar(128) NOT NULL,</span><br><span class="line">  app_name varchar(128),</span><br><span class="line">  content longtext,</span><br><span class="line">  md5 varchar(32) DEFAULT NULL,</span><br><span class="line">  gmt_create timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  gmt_modified timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  src_user varchar(128),</span><br><span class="line">  src_ip varchar(50) DEFAULT NULL,</span><br><span class="line">  constraint configinfotag_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_configinfotag_datagrouptenanttag UNIQUE (data_id,group_id,tenant_id,tag_id));</span><br><span class="line">CREATE TABLE config_info_aggr (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128) default <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  datum_id varchar(255) NOT NULL,</span><br><span class="line">  app_name varchar(128),</span><br><span class="line">  content longtext,</span><br><span class="line">  gmt_modified timestamp NOT NULL DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  constraint configinfoaggr_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_configinfoaggr_datagrouptenantdatum UNIQUE (data_id,group_id,tenant_id,datum_id));</span><br><span class="line">CREATE TABLE app_list (</span><br><span class="line"> <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line"> app_name varchar(128) NOT NULL,</span><br><span class="line"> is_dynamic_collect_disabled smallint DEFAULT 0,</span><br><span class="line"> last_sub_info_collected_time timestamp DEFAULT <span class="string">&#x27;1970-01-01 08:00:00.0&#x27;</span>,</span><br><span class="line"> sub_info_lock_owner varchar(128),</span><br><span class="line"> sub_info_lock_time timestamp DEFAULT <span class="string">&#x27;1970-01-01 08:00:00.0&#x27;</span>,</span><br><span class="line"> constraint applist_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line"> constraint uk_appname UNIQUE (app_name));</span><br><span class="line">CREATE TABLE app_configdata_relation_subs (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  app_name varchar(128) NOT NULL,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  gmt_modified timestamp DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  constraint configdatarelationsubs_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_app_sub_config_datagroup UNIQUE (app_name, data_id, group_id));</span><br><span class="line">CREATE TABLE app_configdata_relation_pubs (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  app_name varchar(128) NOT NULL,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  gmt_modified timestamp DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  constraint configdatarelationpubs_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_app_pub_config_datagroup UNIQUE (app_name, data_id, group_id));</span><br><span class="line">CREATE TABLE config_tags_relation (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL,</span><br><span class="line">  tag_name varchar(128) NOT NULL,</span><br><span class="line">  tag_type varchar(64) DEFAULT NULL,</span><br><span class="line">  data_id varchar(255) NOT NULL,</span><br><span class="line">  group_id varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128) DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  nid bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  constraint config_tags_id_key PRIMARY KEY (nid),</span><br><span class="line">  constraint uk_configtagrelation_configidtag UNIQUE (<span class="built_in">id</span>, tag_name, tag_type));</span><br><span class="line">CREATE INDEX config_tags_tenant_id_idx ON config_tags_relation(tenant_id);</span><br><span class="line">CREATE TABLE group_capacity (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  group_id varchar(128) DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  quota int(10) DEFAULT 0,</span><br><span class="line">  `usage` int(10) DEFAULT 0,</span><br><span class="line">  max_size int(10) DEFAULT 0,</span><br><span class="line">  max_aggr_count int(10) DEFAULT 0,</span><br><span class="line">  max_aggr_size int(10) DEFAULT 0,</span><br><span class="line">  max_history_count int(10) DEFAULT 0,</span><br><span class="line">  gmt_create timestamp DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  gmt_modified timestamp DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  constraint group_capacity_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_group_id UNIQUE (group_id));</span><br><span class="line">CREATE TABLE tenant_capacity (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  tenant_id varchar(128) DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  quota int(10) DEFAULT 0,</span><br><span class="line">  `usage` int(10) DEFAULT 0,</span><br><span class="line">  max_size int(10) DEFAULT 0,</span><br><span class="line">  max_aggr_count int(10) DEFAULT 0,</span><br><span class="line">  max_aggr_size int(10) DEFAULT 0,</span><br><span class="line">  max_history_count int(10) DEFAULT 0,</span><br><span class="line">  gmt_create timestamp DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  gmt_modified timestamp DEFAULT <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  constraint tenant_capacity_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_tenant_id UNIQUE (tenant_id));</span><br><span class="line">CREATE TABLE tenant_info (</span><br><span class="line">  <span class="built_in">id</span> bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  kp varchar(128) NOT NULL,</span><br><span class="line">  tenant_id varchar(128)  DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  tenant_name varchar(128)  DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  tenant_desc varchar(256)  DEFAULT NULL,</span><br><span class="line">  create_source varchar(32) DEFAULT NULL,</span><br><span class="line">  gmt_create bigint NOT NULL,</span><br><span class="line">  gmt_modified bigint NOT NULL,</span><br><span class="line">  constraint tenant_info_id_key PRIMARY KEY (<span class="built_in">id</span>),</span><br><span class="line">  constraint uk_tenant_info_kptenantid UNIQUE (kp,tenant_id));</span><br><span class="line">CREATE INDEX tenant_info_tenant_id_idx ON tenant_info(tenant_id);</span><br><span class="line">CREATE TABLE <span class="built_in">users</span> (</span><br><span class="line">        username varchar(50) NOT NULL PRIMARY KEY,</span><br><span class="line">        password varchar(500) NOT NULL,</span><br><span class="line">        enabled boolean NOT NULL DEFAULT <span class="literal">true</span></span><br><span class="line">);</span><br><span class="line">CREATE TABLE roles (</span><br><span class="line">        username varchar(50) NOT NULL,</span><br><span class="line">        `role` varchar(50) NOT NULL,</span><br><span class="line">        constraint uk_username_role UNIQUE (username,role)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE permissions (</span><br><span class="line">    `role` varchar(50) NOT NULL,</span><br><span class="line">    resource varchar(512) NOT NULL,</span><br><span class="line">    `action` varchar(8) NOT NULL,</span><br><span class="line">    constraint uk_role_permission UNIQUE (role,resource,action)</span><br><span class="line">);</span><br><span class="line">INSERT INTO <span class="built_in">users</span> (username, password, enabled) VALUES (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, TRUE);</span><br><span class="line">INSERT INTO roles (username, role) VALUES (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line">/******************************************/</span><br><span class="line">/*   ipv6 support   */</span><br><span class="line">/******************************************/</span><br><span class="line">ALTER TABLE `config_info_tag`</span><br><span class="line">MODIFY COLUMN `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT <span class="string">&#x27;source ip&#x27;</span> AFTER `src_user`;</span><br><span class="line">ALTER TABLE `his_config_info`</span><br><span class="line">MODIFY COLUMN `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL AFTER `src_user`;</span><br><span class="line">ALTER TABLE `config_info`</span><br><span class="line">MODIFY COLUMN `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT <span class="string">&#x27;source ip&#x27;</span> AFTER `src_user`;</span><br><span class="line">ALTER TABLE `config_info_beta`</span><br><span class="line">MODIFY COLUMN `src_ip` varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT <span class="string">&#x27;source ip&#x27;</span> AFTER `src_user`;</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 配置</title>
    <url>/2021/03/01/Nginx%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ubuntu</span><br><span class="line">sudo apt install -y nginx</span><br><span class="line"></span><br><span class="line"># centos</span><br><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><blockquote>
<p>路径：<code>/etc/nginx/nginx.conf</code> </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行用户（用户组）</span><br><span class="line">user www-data;</span><br><span class="line"># user www-data www-data;</span><br><span class="line"></span><br><span class="line">#启动进程数，根据硬件调整，通常设置为cpu的数量或者2倍CPU数。</span><br><span class="line"># worker_processes auto;</span><br><span class="line">worker_processes 2;</span><br><span class="line"> </span><br><span class="line">#全局错误日志及PID文件的存放路径</span><br><span class="line">#error_log logs/error.log;</span><br><span class="line">#error_log logs/error.log notice;</span><br><span class="line">#error_log logs/error.log info;</span><br><span class="line"> </span><br><span class="line"># pid（进程标识符）的存放路径</span><br><span class="line">#pid /run/nginx.pid;</span><br><span class="line"> </span><br><span class="line"># 指定进程可以打开的最大描述符数目</span><br><span class="line">#worker_rlimit_nofile 20480;</span><br><span class="line"># 这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line"># 现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    # epoll是多路复用IO(I/O Multiplexing)中的一种方式, linux建议epoll，FreeBSD建议采用kqueue，window下不指定。</span><br><span class="line">    # 仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line">    </span><br><span class="line">    # 补充说明:</span><br><span class="line">    # 与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    # A）标准事件模型</span><br><span class="line">    #   Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    # B）高效事件模型</span><br><span class="line">    #   Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #   Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #   /dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #   Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">    # 单个后台worker process进程的最大并发链接数（工作进程的最大连接数量）</span><br><span class="line">    worker_connections  20480;</span><br><span class="line"> </span><br><span class="line">    # 根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    # 并发总数为worker_processes与worker_connections的乘积，即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关，因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数，而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右。</span><br><span class="line">    # 来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # keepalive超时时间</span><br><span class="line">    #keepalive_timeout 60;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 客户端请求头部的缓冲区大小</span><br><span class="line">    #client_header_buffer_size 4k;</span><br><span class="line">    </span><br><span class="line">    # 根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    # 分页大小可以用命令getconf PAGESIZE 取得：# getconf PAGESIZE 结果：4096</span><br><span class="line">    # 但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为&quot;系统分页大小&quot;的整倍数。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 为打开文件指定缓存，默认没有启用，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    #open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 检查一次缓存的有效信息周期（即指多长时间检查一次缓存的有效信息）</span><br><span class="line">    #open_file_cache_valid 80s;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #open_file_cache_min_uses 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">## 设定http服务器，利用它的反向代理功能提供负载均衡支持 </span><br><span class="line">http &#123;</span><br><span class="line">    </span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    </span><br><span class="line">    log_format log404 &#x27;$status [$time_local] $remote_addr $host$request_uri $sent_http_location&#x27;;</span><br><span class="line"> </span><br><span class="line">    # 日志格式说明：</span><br><span class="line">    #   $remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">    #   $remote_user：用来记录客户端用户名称；</span><br><span class="line">    #   $time_local： 用来记录访问时间与时区；</span><br><span class="line">    #   $request： 用来记录请求的url与http协议；</span><br><span class="line">    #   $status： 用来记录请求状态；成功是200，</span><br><span class="line">    #   $body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">    #   $http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">    #   $http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">    </span><br><span class="line">    # 通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    access_log  logs/host.access.404.log  log404;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 保存服务器名字的hash表</span><br><span class="line">    #server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    # 保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    # 客户端请求头部的缓冲区大小</span><br><span class="line">    #client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    # 可以根据系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 客户请求头缓冲大小</span><br><span class="line">    #large_client_header_buffers 8 128k;</span><br><span class="line"></span><br><span class="line">    # nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    # 指定缓存是否启用</span><br><span class="line">    #open_file_cache max=102400 inactive=20s;</span><br><span class="line">    </span><br><span class="line">    # 这个指令指定缓存是否启用。</span><br><span class="line">    # 例: </span><br><span class="line">    # open_file_cache max=1000 inactive=20s; </span><br><span class="line">    # open_file_cache_valid 30s; </span><br><span class="line">    # open_file_cache_min_uses 2; </span><br><span class="line">    # open_file_cache_errors on;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    #open_file_cache_errors off</span><br><span class="line">    </span><br><span class="line">    # 语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #open_file_cache_min_uses 1</span><br><span class="line"></span><br><span class="line">    # 语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #open_file_cache_valid</span><br><span class="line">    # 语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 设定通过nginx上传文件的大小</span><br><span class="line">    #client_max_body_size 300m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    # 对于普通应用，必须设为 on,</span><br><span class="line">    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off， 以平衡磁盘与网络I/O处理速度，降低系统的uptime。</span><br><span class="line">    sendfile     on;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    # 后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">    #proxy_connect_timeout 90; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">    #proxy_read_timeout 180;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">    #proxy_send_timeout 180;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">    #proxy_buffer_size 256k;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    # 设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">    #proxy_buffers 4 256k;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    #proxy_busy_buffers_size 256k;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">    #proxy_temp_file_write_size 256k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # proxy_temp_path和proxy_cache_path指定的路径必须在同一分区</span><br><span class="line">    #proxy_temp_path /data0/proxy_temp_dir;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。</span><br><span class="line">    #proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    # 连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  60;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line">    </span><br><span class="line">    #client_body_buffer_size 512k;</span><br><span class="line">    # 如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    # 表示使nginx阻止HTTP应答代码为400或者更高的应答</span><br><span class="line">    #proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    # upstream 配置</span><br><span class="line">    #upstream bakend &#123;</span><br><span class="line">    #    server 127.0.0.1:8027;</span><br><span class="line">    #    server 127.0.0.1:8028;</span><br><span class="line">    #    server 127.0.0.1:8029;</span><br><span class="line">    #    hash $request_uri;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ## 设定虚拟主机配置</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        # 配置侦听端口，如80</span><br><span class="line">        listen    80;</span><br><span class="line">        </span><br><span class="line">        # 配置访问域名，如定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"> </span><br><span class="line">        # 定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"> </span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"> </span><br><span class="line">        # 默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            # 定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location ~* \.(mp3|exe)$ &#123;</span><br><span class="line"></span><br><span class="line">            # 对以&quot;mp3或exe&quot;结尾的地址进行负载均衡</span><br><span class="line">            proxy_pass http://img_relay$request_uri;</span><br><span class="line">            </span><br><span class="line">            # 设置被代理服务器的端口或套接字，以及URL</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            </span><br><span class="line">            # 以上三行配置是将代理服务器收到的用户的信息传到真实服务器上</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            proxy_redirect off;</span><br><span class="line"></span><br><span class="line">            client_max_body_size 10m;    #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">            proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /images &#123;</span><br><span class="line"></span><br><span class="line">            if ($http_user_agent ~* &quot;xnp&quot;) &#123;</span><br><span class="line">                rewrite ^(.*)$ http://i1.***img.com/help/noimg.gif redirect;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            proxy_pass http://img_relay$request_uri;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            #error_page 404 http://i1.***img.com/help/noimg.gif;</span><br><span class="line">            error_page 404 502 = @fetch;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        location @fetch &#123;</span><br><span class="line">            </span><br><span class="line">            access_log /data/logs/baijiaqi.log log404;</span><br><span class="line">            rewrite ^(.*)$ http://i1.***img.com/help/noimg.gif redirect;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">        location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>upstream配置说明：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream bakend &#123;</span><br><span class="line">    server 127.0.0.1:8027;</span><br><span class="line">    server 127.0.0.1:8028;</span><br><span class="line">    server 127.0.0.1:8029;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nginx的upstream目前支持4种方式的分配</span><br><span class="line"></span><br><span class="line">1、轮询（默认）</span><br><span class="line">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line"></span><br><span class="line">2、weight</span><br><span class="line">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">例如：</span><br><span class="line">upstream bakend &#123;</span><br><span class="line">server 192.168.0.14 weight=10;</span><br><span class="line">server 192.168.0.15 weight=10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2、ip_hash</span><br><span class="line">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">例如：</span><br><span class="line">upstream bakend &#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.0.14:88;</span><br><span class="line">server 192.168.0.15:80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3、fair（第三方）</span><br><span class="line">按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">upstream backend &#123;</span><br><span class="line">server server1;</span><br><span class="line">server server2;</span><br><span class="line">fair;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4、url_hash（第三方）</span><br><span class="line">按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line"></span><br><span class="line">例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">upstream backend &#123;</span><br><span class="line">server squid1:3128;</span><br><span class="line">server squid2:3128;</span><br><span class="line">hash $request_uri;</span><br><span class="line">hash_method crc32;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tips:</span><br><span class="line">upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 127.0.0.1:9090 down;</span><br><span class="line">server 127.0.0.1:8080 weight=2;</span><br><span class="line">server 127.0.0.1:6060;</span><br><span class="line">server 127.0.0.1:7070 backup;</span><br><span class="line">&#125;</span><br><span class="line">在需要使用负载均衡的server中增加</span><br><span class="line">proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">每个设备的状态设置为:</span><br><span class="line">1.down表示单前的server暂时不参与负载</span><br><span class="line">2.weight为weight越大，负载的权重就越大。</span><br><span class="line">3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line"></span><br><span class="line">client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line"></span><br><span class="line">location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line"></span><br><span class="line">5. 最少连接数（把请求分配到连接数最少的server）</span><br><span class="line"></span><br><span class="line">upstream bakend &#123;   </span><br><span class="line">    least_conn;</span><br><span class="line">    server 127.0.0.1:9090 down;</span><br><span class="line">    server 127.0.0.1:8080 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量说明</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ngx_http_core_module模块支持内置变量，他们的名字和apache的内置变量是一致的。</span><br><span class="line"></span><br><span class="line">首先是说明客户请求title中的行，例如$http_user_agent,$http_cookie等等。</span><br><span class="line"></span><br><span class="line">此外还有其它的一些变量：</span><br><span class="line"></span><br><span class="line">$args此变量与请求行中的参数相等</span><br><span class="line"></span><br><span class="line">$content_length等于请求行的&quot;Content_Length&quot;的值。</span><br><span class="line"></span><br><span class="line">$content_type等同与请求头部的&quot;Content_Type&quot;的值</span><br><span class="line"></span><br><span class="line">$document_root等同于当前请求的root指令指定的值</span><br><span class="line"></span><br><span class="line">$document_uri与$uri一样</span><br><span class="line"></span><br><span class="line">$host与请求头部中&quot;Host&quot;行指定的值或是request到达的server的名字（没有Host行）一样</span><br><span class="line"></span><br><span class="line">$limit_rate允许限制的连接速率</span><br><span class="line"></span><br><span class="line">$request_method等同于request的method，通常是&quot;GET&quot;或&quot;POST&quot;</span><br><span class="line"></span><br><span class="line">$remote_addr客户端ip</span><br><span class="line"></span><br><span class="line">$remote_port客户端port</span><br><span class="line"></span><br><span class="line">$remote_user等同于用户名，由ngx_http_auth_basic_module认证</span><br><span class="line"></span><br><span class="line">$request_filename当前请求的文件的路径名，由root或alias和URI request组合而成</span><br><span class="line"></span><br><span class="line">$request_body_file</span><br><span class="line"></span><br><span class="line">$request_uri含有参数的完整的初始URI</span><br><span class="line"></span><br><span class="line">$query_string与$args一样</span><br><span class="line"></span><br><span class="line">$sheeme http模式（http,https）尽在要求是评估例如</span><br><span class="line"></span><br><span class="line">Rewrite ^(.+)$ $sheme://example.com$; Redirect;</span><br><span class="line"></span><br><span class="line">$server_protocol等同于request的协议，使用&quot;HTTP/或&quot;HTTP/</span><br><span class="line"></span><br><span class="line">$server_addr request到达的server的ip，一般获得此变量的值的目的是进行系统调用。为了避免系统调用，有必要在listen指令中指明ip，并使用bind参数。</span><br><span class="line"></span><br><span class="line">$server_name请求到达的服务器名</span><br><span class="line"></span><br><span class="line">$server_port请求到达的服务器的端口号</span><br><span class="line"></span><br><span class="line">$uri等同于当前request中的URI，可不同于初始值，例如内部重定向时或使用index</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>OGNL中的#、%和$符号</title>
    <url>/2018/01/01/OGNL%E4%B8%AD%E7%9A%84#%E3%80%81%25%E5%92%8C$%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>1．#符号的三种用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）访问非根对象属性，例如示例中的#session.msg表达式，由于Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀。实际上，#相当于ActionContext. getContext()；#session.msg表达式相当于ActionContext.getContext().getSession(). getAttribute(&quot;msg&quot;) 。</span><br><span class="line">2）用于过滤和投影（projecting）集合，如示例中的persons.&#123;?#this.age&gt;20&#125;。</span><br><span class="line">3） 用来构造Map，例如示例中的#&#123;&#x27;foo1&#x27;:&#x27;bar1&#x27;, &#x27;foo2&#x27;:&#x27;bar2&#x27;&#125;。</span><br></pre></td></tr></table></figure>

<p>2．%符号</p>
<blockquote>
<p>%符号的用途是在标志的属性为字符串类型时，计算OGNL表达式的值。如下面的代码所示：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;构造Map&lt;/h3&gt;</span><br><span class="line">&lt;s:set name=&quot;foobar&quot; value=&quot;#&#123;&#x27;foo1&#x27;:&#x27;bar1&#x27;, &#x27;foo2&#x27;:&#x27;bar2&#x27;&#125;&quot; /&gt;</span><br><span class="line">&lt;p&gt;The value of key &quot;foo1&quot; is &lt;s:property value=&quot;#foobar[&#x27;foo1&#x27;]&quot; /&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;不使用％：&lt;s:url value=&quot;#foobar[&#x27;foo1&#x27;]&quot; /&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;使用％：&lt;s:url value=&quot;%&#123;#foobar[&#x27;foo1&#x27;]&#125;&quot; /&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行界面如下所示</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">he value of key &quot;foo1&quot; is bar1</span><br><span class="line">不使用%：#foobar[&#x27;foo1&#x27;]</span><br><span class="line">使用%：bar1</span><br></pre></td></tr></table></figure>

<p>3．$符号</p>
<blockquote>
<p>$符号主要有两个方面的用途。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1） 在国际化资源文件中，引用OGNL表达式，例如国际化资源文件中的代码：reg.agerange=国际化资源信息：年龄必须在$&#123;min&#125;同$&#123;max&#125;之间。</span><br><span class="line">2） 在Struts 2框架的配置文件中引用OGNL表达式</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>OGNL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle学习</title>
    <url>/2019/01/01/Oracle%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="SQL语言的种类："><a href="#SQL语言的种类：" class="headerlink" title="SQL语言的种类："></a>SQL语言的种类：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①数据查询语言DQL：select</span><br><span class="line">②数据定义语言DDL：create、drop、alter、truncate</span><br><span class="line">③数据操纵语言DML：insert、update、delete</span><br><span class="line">④事务控制语言TCL：commit、 rollback、savepoint</span><br><span class="line">⑤数据控制语言DCL：grant、revoke</span><br></pre></td></tr></table></figure>
<h4 id="1、-查询语句中的使用函数"><a href="#1、-查询语句中的使用函数" class="headerlink" title="1、 查询语句中的使用函数"></a>1、 查询语句中的使用函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①round（数字，小数位数）：用于数字的四舍五入。若第二个参数没有，默认是0。如round（1.23456，2）-&gt;1.23 round(1.23456)---&gt;1</span><br><span class="line">trunc（数字，小数位数）：用于截取。若第二个参数没有，默认是0。如trunc（1.23456，2）-&gt;1.23</span><br><span class="line"></span><br><span class="line">②sysdate日期函数 ，如select sysdate from dual；</span><br><span class="line">months_between(日期1，日期2)：获取两日期相差的月数。如：select ABS(ROUND(months_between(HIREDATE,sysdate))) from emp;</span><br><span class="line">add_months(日期，月数)：在日期上增加月数获取新的日期。如：select to_char(add_months(sysdate,-12),&#x27;yyyy-MM-dd hh24:mi:ss&#x27;) from dual;</span><br><span class="line">last_day(日期)：获取指定日期的月的最后一天的日期。如：select LAST_DAY(SYSDATE) from dual;</span><br><span class="line">to_char（日期，格式）：把日期数据转换为字符数据。如：select to_char(sysdate,&#x27;yyyy-MM-dd hh24:mi:ss&#x27;) from dual;</span><br><span class="line">说明：</span><br><span class="line">yyyy四位数年 如：2016</span><br><span class="line">year 全拼的年 如：twenty sixteen</span><br><span class="line">month 全拼的月 如：November 或11月（中文）</span><br><span class="line">mm 两位数的月 如：11</span><br><span class="line">mon 简拼的月 如：nov （中文没有简拼）</span><br><span class="line">dd 两位数字的日</span><br><span class="line">day 全拼的星期 如：Tuesday</span><br><span class="line">dy 简拼的星期 如：tue</span><br><span class="line">am 上午/下午 如：am/pm</span><br><span class="line">to_day(日期字符串，日期格式) ：将日期字符串解析为日期 如：select to_date(&#x27;2016-08-09&#x27;,&#x27;yyyy-MM-dd&#x27;) from dual;</span><br><span class="line"></span><br><span class="line">③coalesce（参1，参2，...，默认值）：参1不为null，返回参1；参1为null，返回参2；参2为null，返回参3；...；默认值</span><br><span class="line"></span><br><span class="line">④case 条件 when 匹配1 then 值1 when 匹配2 then 值2 ...else 值N end</span><br><span class="line">decode()函数是Oracle中等价于case when 函数。</span><br><span class="line">decode()语法：decode（判断条件，匹配1，值1，匹配2，值2，...，默认值） 如select decode(2,1,&#x27;aa&#x27;,2,&#x27;bb&#x27;,&#x27;cc&#x27;) dd from dual;</span><br><span class="line"></span><br><span class="line">⑤单行函数：round(),to_date(),to_char(),coalesce() ---每行数据返回一行结果。</span><br><span class="line">upper 转换为大写 如：upper(&#x27;aa&#x27;)</span><br><span class="line">lower 转换为小写 如：lower(&#x27;AA&#x27;)</span><br><span class="line">initcap 转换为首字母大写 如：initcap(&#x27;cap&#x27;)</span><br><span class="line">length 取长度 如：length(&#x27;cap&#x27;)</span><br><span class="line">lpad 左补丁 如：lpad(&#x27;张三&#x27;，10，&#x27;*&#x27;) </span><br><span class="line">rpad 右补丁 如：rpad(&#x27;张三&#x27;，10，&#x27;*&#x27;) </span><br><span class="line">replace 字符替换 如：REPLACE(&#x27;JACK and JUE&#x27;,&#x27;J&#x27;,&#x27;BL&#x27;)</span><br><span class="line">trim 去除前后空格 如：trim(&#x27;  hh  &#x27;)</span><br><span class="line"></span><br><span class="line">⑥组函数：count(),avg(),sum(),max(),min() ---多行数据返回一行结果（组函数忽略空值）</span><br><span class="line"></span><br><span class="line">⑦All，Any，In</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2、DDL"><a href="#2、DDL" class="headerlink" title="2、DDL"></a>2、DDL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①复制全表：create table 表名 as 查询语句；</span><br><span class="line">②drop删除数据和表结构</span><br><span class="line">truncate 和 delete删除数据，保留表结构</span><br><span class="line">drop 和 truncate 不可回滚，delete可回滚。</span><br></pre></td></tr></table></figure>

<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># sqlplus连接</span><br><span class="line">conn 用户名<span class="operator">/</span>密码@网络服务名 [<span class="keyword">as</span> sysdba<span class="operator">/</span>sysoper]</span><br><span class="line"># 断开当前连接</span><br><span class="line">disc<span class="operator">/</span>disconn<span class="operator">/</span><span class="keyword">disconnect</span></span><br><span class="line"># 查看当前用户名</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">user</span></span><br><span class="line"># 创建用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> 密码;</span><br><span class="line"># 修改用户密码</span><br><span class="line">password 用户名或passw;</span><br><span class="line"># 如果要想修改其它用户的密码，需要用sys<span class="operator">/</span><span class="keyword">system</span>登录</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> 新密码;</span><br><span class="line"># 清空屏幕</span><br><span class="line">clear screen</span><br><span class="line"># 删除用户</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名 [cascade]</span><br><span class="line"># 权限(<span class="keyword">connect</span>、resource、dba；<span class="keyword">insert</span>、<span class="keyword">delete</span>、<span class="keyword">update</span>、<span class="keyword">select</span>、<span class="keyword">all</span>)</span><br><span class="line"><span class="keyword">grant</span> 权限,... <span class="keyword">to</span> 用户;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># user_tables: 用于显示当前用户所拥有的所有表，它只返回用户所对应方案的所有表</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables;</span><br><span class="line"></span><br><span class="line"># all_tables: 用于显示当前用户可以访问的所有表，它不仅会返回当前用户方案的所有表，还会返回当前用户可以访问的其它方案的表</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables;</span><br><span class="line"></span><br><span class="line"># dba_tables: 它会显示所有方案拥有的数据库表。但是查询这种数据库字典视图，要求用户必须是dba角色或是有<span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span> 系统权限。</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> dba_tables;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 单列索引</span><br><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(列名);</span><br><span class="line"></span><br><span class="line"># 复合索引</span><br><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...);</span><br><span class="line"></span><br><span class="line"># 查询索引（dba_indexs用于显示数据库所有的索引信息，而user_indexs用于显示当前用户的索引信息）</span><br><span class="line"><span class="keyword">select</span> index_name, index_type <span class="keyword">from</span> user_indexes <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 显示索引列（通过查询数据字典视图user_ind_columns,可以显示索引对应的列的信息）</span><br><span class="line"><span class="keyword">select</span> table_name, column_name <span class="keyword">from</span> user_ind_columns <span class="keyword">where</span> index_name <span class="operator">=</span><span class="string">&#x27;IND_ENAME&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
















































]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>PLSQL Developer连接本地Oracle 11g 64位数据库</title>
    <url>/2019/01/01/PLSQL%20Developer%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0Oracle%2011g%2064%E4%BD%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>PL/SQL Developer连接本地Oracle 11g 64位数据库</p>
<ol>
<li>登录PL/SQL Developer</li>
</ol>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206093607-oracle-1.png"></p>
<blockquote>
<p>没有数据库的TNS，先以非登录方式登录PL/SQL Developer，设置Oracle Home和OCI Libaray。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206093728-oracle-2.png"></p>
<blockquote>
<p>在Oracle Home这选项下，没有自动识别到Oracle Home目录，于是手动指定Oracle Home路径。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206093757-oracle-3.png"></p>
<blockquote>
<p>点击”确定”，退出PL/SQL Developer，再次登录。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206093835-oracle-4.png"></p>
<p>还是选择不到数据库TNS，尝试无数据库登录，看看报什么错误。</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206093854-oracle-5.png"></p>
<blockquote>
<p>终于找到问题的关键点了，安装的PL/SQL Deleloper只能识别32的oci.dll。然而发现PL/SQL Deleloper不区分64位和32位。只能从oci.dll入手解决问题。</p>
</blockquote>
<ol start="2">
<li>安装oracle Clinet</li>
</ol>
<blockquote>
<p>首先到Oracle官网上下载Oracle 11g Client，需要登Oracle 帐号才能下载。目前下载地址：<a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html</a></p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206093955-oracle-6.png"></p>
<blockquote>
<p>将下载的Oracle Client文件instantclient-basic-nt-11.2.0.4.0.zip解压到C盘。然后在解压后的C:\Oracle\instantclient_11_2目录下新建NETWORK\ADMIN目录，在ADMIN目录下新建tnsnames.ora文件，添加数据库TNS。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORCL =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：tnsnames.ora可以从Oracle数据库HOME目录(%ORACLE_HOME%\product\11.2.0\dbhome_1\NETWORK\ADMIN)<br>把tnsnames.ora拷贝过来。然后确定HOST配置是否正确，如果HOST是主机名，需要把主机名后面的域名去掉。</p>
</blockquote>
<ol start="3">
<li>配置PL/SQL Developer的Oracle Home和OCI Libaray</li>
</ol>
<blockquote>
<p>以非登录模式进入PL/SQL Developer，将Oracle Home路径指定为Oracle Client目录(C:\Oracle\instantclient_11_2)，OCI Libaray路径为Oracle Client目录的oci.dll(C:\Oracle\instantclient_11_2\oci.dll)。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206094011-oracle-7.png"></p>
<blockquote>
<p>点击”确定”，现在配置已完成。退出PL/SQL Developer。</p>
</blockquote>
<ol start="4">
<li>验证Oracle Client</li>
</ol>
<blockquote>
<p>打开新的PL/SQL Developer，输入用户名和密码，在database选项下，选配置的TNS。</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/20181206094025-oracle-8.png"></p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
        <tag>PLSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python (HTTP多进程、多线程服务器)</title>
    <url>/2021/04/01/Python%20(HTTP%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8)/</url>
    <content><![CDATA[<h4 id="Python-HTTP多进程服务器"><a href="#Python-HTTP多进程服务器" class="headerlink" title="Python (HTTP多进程服务器)"></a>Python (HTTP多进程服务器)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import multiprocessing</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Server(object):</span><br><span class="line">    def __init__(self, port):</span><br><span class="line">        &quot;&quot;&quot; 在初始化中做好tcp连接的准备工作 &quot;&quot;&quot;</span><br><span class="line">        # 1创建一个tcp套接字</span><br><span class="line">        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        # 端口重复使用</span><br><span class="line">        self.tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">        # 2.绑定本地端口</span><br><span class="line">        self.tcp_socket.bind((&quot;&quot;, port))</span><br><span class="line">        # 3.设置监听</span><br><span class="line">        self.tcp_socket.listen(128)</span><br><span class="line"></span><br><span class="line">    def run_server(self):</span><br><span class="line">            &quot;&quot;&quot; 循环运行服务器 &quot;&quot;&quot;</span><br><span class="line">            while True:</span><br><span class="line">                # 1.等待用户接入</span><br><span class="line">                new_socket, addr = self.tcp_socket.accept()</span><br><span class="line">                # 2.为用户提供服务,创建多线程</span><br><span class="line">                p = multiprocessing.Process(target=self.content, args=(new_socket,))</span><br><span class="line">                p.start()</span><br><span class="line">                # 因为进程会复制一份再去运行，所以在这里要关掉主进程的客户链接</span><br><span class="line">                new_socket.close()</span><br><span class="line">                # 3.关闭套接字</span><br><span class="line">            self.tcp_socket.close()</span><br><span class="line"></span><br><span class="line">    def content(self, new_socket):</span><br><span class="line">            # 1.接受消息</span><br><span class="line">            client_message = new_socket.recv(1024).decode(&quot;utf-8&quot;)</span><br><span class="line">            # 对接收的的请求信息进行分析筛选</span><br><span class="line">            request_message = client_message.splitlines()</span><br><span class="line">            print(request_message[0])</span><br><span class="line">            if request_message:</span><br><span class="line">                hanld_result = re.match(r&quot;[^/]+(/[^ ]*)&quot;, request_message[0])</span><br><span class="line">                print(hanld_result.group(1))</span><br><span class="line">            # 2.返回消息给用户</span><br><span class="line">            if hanld_result:</span><br><span class="line">                file_name = hanld_result.group(1)</span><br><span class="line">                if file_name == &quot;/&quot;:</span><br><span class="line">                    file_name = &quot;/index.html&quot;</span><br><span class="line">                try:</span><br><span class="line">                    file = open(&quot;./html&quot; + file_name, &quot;rb&quot;)</span><br><span class="line">                except:</span><br><span class="line">                    response = &quot;HTTP/1.1 404 NOT FOUND\r\n\r\n&quot;</span><br><span class="line">                    new_socket.send(response.encode(&quot;utf-8&quot;))</span><br><span class="line">                    new_socket.send(&quot;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&quot;.encode(&quot;utf-8&quot;))</span><br><span class="line">                else:</span><br><span class="line">                    response = &quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span><br><span class="line">                    new_socket.send(response.encode(&quot;utf-8&quot;))</span><br><span class="line">                    html = file.read()</span><br><span class="line">                    file.close()</span><br><span class="line">                    new_socket.send(html)</span><br><span class="line">                # 3.关闭new_socket客户连接</span><br><span class="line">            new_socket.close()</span><br><span class="line">def main():</span><br><span class="line">    server1 = Server(7758)</span><br><span class="line">    server1.run_server()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Python-HTTP多线程服务器"><a href="#Python-HTTP多线程服务器" class="headerlink" title="Python(HTTP多线程服务器)"></a>Python(HTTP多线程服务器)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import threading</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Server(object):</span><br><span class="line">    def __init__(self, port):</span><br><span class="line">        &quot;&quot;&quot; 在初始化中做好tcp连接的准备工作 &quot;&quot;&quot;</span><br><span class="line">        # 1创建一个tcp套接字</span><br><span class="line">        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        # 端口重复使用</span><br><span class="line">        self.tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)</span><br><span class="line">        # 2.绑定本地端口</span><br><span class="line">        self.tcp_socket.bind((&quot;&quot;, port))</span><br><span class="line">        # 3.设置监听</span><br><span class="line">        self.tcp_socket.listen(128)</span><br><span class="line"></span><br><span class="line">    def run_server(self):</span><br><span class="line">        &quot;&quot;&quot; 循环运行服务器 &quot;&quot;&quot;</span><br><span class="line">        while True:</span><br><span class="line">            # 1.等待用户接入</span><br><span class="line">            new_socket, addr = self.tcp_socket.accept()</span><br><span class="line">            # 2.为用户提供服务,创建多线程</span><br><span class="line">            t = threading.Thread(target=self.content, args=(new_socket,))</span><br><span class="line">            t.start()</span><br><span class="line">            # 3.关闭套接字 #</span><br><span class="line">            self.tcp_socket.close()</span><br><span class="line"></span><br><span class="line">    def content(self, new_socket):</span><br><span class="line">        # 1.接受消息</span><br><span class="line">        client_message = new_socket.recv(1024).decode(&quot;utf-8&quot;)</span><br><span class="line">        # 对接收的的请求信息进行分析筛选</span><br><span class="line">        request_message = client_message.splitlines()</span><br><span class="line">        print(request_message[0])</span><br><span class="line">        if request_message:</span><br><span class="line">            hanld_result = re.match(r&quot;[^/]+(/[^ ]*)&quot;, request_message[0])</span><br><span class="line">            print(hanld_result.group(1))</span><br><span class="line">            # 2.返回消息给用户 #</span><br><span class="line">            if hanld_result:</span><br><span class="line">                file_name = hanld_result.group(1)</span><br><span class="line">                if file_name == &quot;/&quot;:</span><br><span class="line">                    file_name = &quot;/index.html&quot;</span><br><span class="line">                try:</span><br><span class="line">                    file = open(&quot;./html&quot; + file_name, &quot;rb&quot;)</span><br><span class="line">                except:</span><br><span class="line">                    response = &quot;HTTP/1.1 404 NOT FOUND\r\n\r\n&quot;</span><br><span class="line">                    new_socket.send(response.encode(&quot;utf-8&quot;))</span><br><span class="line">                    new_socket.send(&quot;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&quot;.encode(&quot;utf-8&quot;))</span><br><span class="line">                else:</span><br><span class="line">                    response = &quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span><br><span class="line">                    new_socket.send(response.encode(&quot;utf-8&quot;))</span><br><span class="line">                    html = file.read()</span><br><span class="line">                    file.close()</span><br><span class="line">                    new_socket.send(html)</span><br><span class="line">                    # 3.关闭new_socket客户连接</span><br><span class="line">                new_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    server1 = Server(7758)</span><br><span class="line">    server1.run_server()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="python使用zeromq实现多进程简单poll复用"><a href="#python使用zeromq实现多进程简单poll复用" class="headerlink" title="python使用zeromq实现多进程简单poll复用"></a>python使用zeromq实现多进程简单poll复用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zmq</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">from  multiprocessing import Process</span><br><span class="line"> </span><br><span class="line">def server_push(port=&quot;5556&quot;):</span><br><span class="line">	context = zmq.Context()</span><br><span class="line">	socket = context.socket(zmq.PUSH)</span><br><span class="line">	socket.bind(&quot;tcp://*:%s&quot; % port)</span><br><span class="line">	print(&quot;Running server on port: &quot;, port)</span><br><span class="line">	# serves only 5 request and dies</span><br><span class="line">	for reqnum in range(10):</span><br><span class="line">		if reqnum &lt; 6:</span><br><span class="line">			socket.send(&quot;Continue&quot;.encode(&quot;ascii&quot;) )</span><br><span class="line">		else:</span><br><span class="line">			socket.send(&quot;Exit&quot;.encode(&quot;ascii&quot;) )</span><br><span class="line">			break</span><br><span class="line">		time.sleep (1)</span><br><span class="line"> </span><br><span class="line">def server_pub(port=&quot;5558&quot;):</span><br><span class="line">	context = zmq.Context()</span><br><span class="line">	socket = context.socket(zmq.PUB)</span><br><span class="line">	socket.bind(&quot;tcp://*:%s&quot; % port)</span><br><span class="line">	publisher_id = random.randrange(0,9999)</span><br><span class="line">	print (&quot;Running server on port: &quot;, port)</span><br><span class="line">	# serves only 5 request and dies</span><br><span class="line">	for reqnum in range(10):</span><br><span class="line">		# Wait for next request from client</span><br><span class="line">		topic = random.randrange(8,10)</span><br><span class="line">		messagedata = &quot;server#%s&quot; % publisher_id</span><br><span class="line">		print(&quot;%s %s&quot; % (topic, messagedata))</span><br><span class="line">		socket.send( (&quot;%d %s&quot; % (topic, messagedata)).encode(&quot;ascii&quot;) )</span><br><span class="line">		time.sleep(1)  </span><br><span class="line"> </span><br><span class="line">def client(port_push, port_sub):</span><br><span class="line">	context = zmq.Context()</span><br><span class="line">	socket_pull = context.socket(zmq.PULL)</span><br><span class="line">	socket_pull.connect (&quot;tcp://localhost:%s&quot; % port_push)</span><br><span class="line">	print (&quot;Connected to server with port %s&quot; % port_push)</span><br><span class="line">	socket_sub = context.socket(zmq.SUB)</span><br><span class="line">	socket_sub.connect (&quot;tcp://localhost:%s&quot; % port_sub)</span><br><span class="line">	socket_sub.setsockopt(zmq.SUBSCRIBE, &quot;9&quot;.encode(&quot;ascii&quot;) )</span><br><span class="line">	print (&quot;Connected to publisher with port %s&quot; % port_sub)</span><br><span class="line">	# Initialize poll set</span><br><span class="line">	poller = zmq.Poller()</span><br><span class="line">	poller.register(socket_pull, zmq.POLLIN)</span><br><span class="line">	poller.register(socket_sub, zmq.POLLIN)</span><br><span class="line">	# Work on requests from both server and publisher</span><br><span class="line">	should_continue = True</span><br><span class="line">	while should_continue:</span><br><span class="line">		socks = dict(poller.poll())</span><br><span class="line">		if socket_pull in socks and socks[socket_pull] == zmq.POLLIN:</span><br><span class="line">			message = socket_pull.recv()</span><br><span class="line">			print (&quot;Recieved control command: %s&quot; % message)</span><br><span class="line">		if message == &quot;Exit&quot;: </span><br><span class="line">			print (&quot;Recieved exit command, client will stop recieving messages&quot;)</span><br><span class="line">			should_continue = False</span><br><span class="line"> </span><br><span class="line">		if socket_sub in socks and socks[socket_sub] == zmq.POLLIN:</span><br><span class="line">			string = socket_sub.recv()</span><br><span class="line">			topic, messagedata = string.split()</span><br><span class="line">			print(&quot;Processing ... &quot;, topic, messagedata)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	# Now we can run a few servers </span><br><span class="line">	server_push_port = &quot;5556&quot;</span><br><span class="line">	server_pub_port = &quot;5558&quot;</span><br><span class="line">	Process(target=server_push, args=(server_push_port,)).start()</span><br><span class="line">	Process(target=server_pub, args=(server_pub_port,)).start()</span><br><span class="line">	Process(target=client, args=(server_push_port,server_pub_port,)).start()</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Socket 编程详细介绍</title>
    <url>/2021/04/01/Python%20Socket%20%E7%BC%96%E7%A8%8B%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="Python-Socket-编程详细介绍"><a href="#Python-Socket-编程详细介绍" class="headerlink" title="Python Socket 编程详细介绍"></a>Python Socket 编程详细介绍</h3><p>Python 提供了两个基本的 socket 模块：</p>
<ul>
<li><code>Socket</code> 它提供了标准的BSD Socket API。</li>
<li><code>SocketServer</code> 它提供了服务器重心，可以简化网络服务器的开发。</li>
</ul>
<p>下面讲解下 Socket模块功能。</p>
<h3 id="Socket-类型"><a href="#Socket-类型" class="headerlink" title="Socket 类型"></a>Socket 类型</h3><p>套接字格式：socket(family, type[,protocal]) 使用给定的套接族，套接字类型，协议编号（默认为0）来创建套接字</p>
<table>
<thead>
<tr>
<th align="left">socket 类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">socket.AF_UNIX</td>
<td align="left">用于同一台机器上的进程通信（既本机通信）</td>
</tr>
<tr>
<td align="left">socket.AF_INET</td>
<td align="left">用于服务器与服务器之间的网络通信</td>
</tr>
<tr>
<td align="left">socket.AF_INET6</td>
<td align="left">基于IPV6方式的服务器与服务器之间的网络通信</td>
</tr>
<tr>
<td align="left">socket.SOCK_STREAM</td>
<td align="left">基于TCP的流式socket通信</td>
</tr>
<tr>
<td align="left">socket.SOCK_DGRAM</td>
<td align="left">基于UDP的数据报式socket通信</td>
</tr>
<tr>
<td align="left">socket.SOCK_RAW</td>
<td align="left">原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</td>
</tr>
<tr>
<td align="left">socket.SOCK_SEQPACKET</td>
<td align="left">可靠的连续数据包服务</td>
</tr>
</tbody></table>
<p>创建TCP Socket：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>

<p>创建UDP Socket：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>

<h3 id="Socket-函数"><a href="#Socket-函数" class="headerlink" title="Socket 函数"></a>Socket 函数</h3><ul>
<li>TCP发送数据时，已建立好TCP链接，所以不需要指定地址，而UDP是面向无连接的，每次发送都需要指定发送给谁。</li>
<li>服务器与客户端不能直接发送列表，元素，字典等带有数据类型的格式，发送的内容必须是字符串数据。</li>
</ul>
<p><strong>服务器端 Socket 函数</strong></p>
<table>
<thead>
<tr>
<th align="left">Socket 函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">s.bind(address)</td>
<td align="left">将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port))</td>
</tr>
<tr>
<td align="left">s.listen(backlog)</td>
<td align="left">开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了</td>
</tr>
<tr>
<td align="left">s.accept()</td>
<td align="left">接受TCP链接并返回（conn, address），其中conn是新的套接字对象，可以用来接收和发送数据，address是链接客户端的地址。</td>
</tr>
</tbody></table>
<p><strong>客户端 Socket 函数</strong></p>
<table>
<thead>
<tr>
<th align="left">Socket 函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">s.connect(address)</td>
<td align="left">链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误</td>
</tr>
<tr>
<td align="left">s.connect_ex(address)</td>
<td align="left">功能与s.connect(address)相同，但成功返回0，失败返回errno的值</td>
</tr>
</tbody></table>
<p><strong>公共 Socket 函数</strong></p>
<table>
<thead>
<tr>
<th align="left">Socket 函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">s.recv(bufsize[, flag])</td>
<td align="left">接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略</td>
</tr>
<tr>
<td align="left">s.send(string[, flag])</td>
<td align="left">发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小</td>
</tr>
<tr>
<td align="left">s.sendall(string[, flag])</td>
<td align="left">完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常</td>
</tr>
<tr>
<td align="left">s.recvfrom(bufsize[, flag])</td>
<td align="left">接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址</td>
</tr>
<tr>
<td align="left">s.sendto(string[, flag], address)</td>
<td align="left">发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数</td>
</tr>
<tr>
<td align="left">s.close()</td>
<td align="left">关闭套接字</td>
</tr>
<tr>
<td align="left">s.getpeername()</td>
<td align="left">返回套接字的远程地址，返回值通常是一个tuple(ipaddr, port)</td>
</tr>
<tr>
<td align="left">s.getsockname()</td>
<td align="left">返回套接字自己的地址，返回值通常是一个tuple(ipaddr, port)</td>
</tr>
<tr>
<td align="left">s.setsockopt(level, optname, value)</td>
<td align="left">设置给定套接字选项的值</td>
</tr>
<tr>
<td align="left">s.getsockopt(level, optname[, buflen])</td>
<td align="left">返回套接字选项的值</td>
</tr>
<tr>
<td align="left">s.settimeout(timeout)</td>
<td align="left">设置套接字操作的超时时间，timeout是一个浮点数，单位是秒，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()</td>
</tr>
<tr>
<td align="left">s.gettimeout()</td>
<td align="left">返回当前超时值，单位是秒，如果没有设置超时则返回None</td>
</tr>
<tr>
<td align="left">s.fileno()</td>
<td align="left">返回套接字的文件描述</td>
</tr>
<tr>
<td align="left">s.setblocking(flag)</td>
<td align="left">如果flag为0，则将套接字设置为非阻塞模式，否则将套接字设置为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td>
</tr>
<tr>
<td align="left">s.makefile()</td>
<td align="left">创建一个与该套接字相关的文件</td>
</tr>
</tbody></table>
<h3 id="Socket-编程思想"><a href="#Socket-编程思想" class="headerlink" title="Socket 编程思想"></a>Socket 编程思想</h3><p><strong>TCP 服务器</strong><br>1、创建套接字，绑定套接字到本地IP与端口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind()</span><br></pre></td></tr></table></figure>

<p>2、开始监听链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.listen()</span><br></pre></td></tr></table></figure>

<p>3、进入循环，不断接受客户端的链接请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">While <span class="literal">True</span>:</span><br><span class="line">    s.accept()</span><br></pre></td></tr></table></figure>

<p>4、接收客户端传来的数据，并且发送给对方发送数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.recv()</span><br><span class="line">s.sendall()</span><br></pre></td></tr></table></figure>

<p>5、传输完毕后，关闭套接字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<p><strong>TCP 客户端</strong><br>1、创建套接字并链接至远端地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect()</span><br></pre></td></tr></table></figure>

<p>2、链接后发送数据和接收数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.sendall()</span><br><span class="line">s.recv()</span><br></pre></td></tr></table></figure>

<p>3、传输完毕后，关闭套接字</p>
<h3 id="Socket-编程实践之服务器端代码"><a href="#Socket-编程实践之服务器端代码" class="headerlink" title="Socket 编程实践之服务器端代码"></a>Socket 编程实践之服务器端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;192.168.1.100&#x27;</span></span><br><span class="line">PORT = <span class="number">8001</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Server start at: %s:%s&#x27;</span> %(HOST, PORT)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;wait for connection...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = s.accept()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Connected by &#x27;</span>, addr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span> data</span><br><span class="line"></span><br><span class="line">        conn.send(<span class="string">&quot;server received you message.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.close()</span></span><br></pre></td></tr></table></figure>

<h3 id="Socket-编程实践之客户端代码"><a href="#Socket-编程实践之客户端代码" class="headerlink" title="Socket 编程实践之客户端代码"></a>Socket 编程实践之客户端代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">HOST = <span class="string">&#x27;192.168.1.100&#x27;</span></span><br><span class="line">PORT = <span class="number">8001</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = raw_input(<span class="string">&quot;Please input msg:&quot;</span>)</span><br><span class="line">    s.send(cmd)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment">#s.close()</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Python日期格式化（datetime、time）与 示例</title>
    <url>/2021/04/01/Python%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%88datetime%E3%80%81time%EF%BC%89%E4%B8%8E%20%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="日期格式化符号"><a href="#日期格式化符号" class="headerlink" title="日期格式化符号"></a>日期格式化符号</h4><table>
<thead>
<tr>
<th>格式符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>%a</td>
<td>星期的英文单词的缩写：如星期一， 则返回 Mon</td>
</tr>
<tr>
<td>%A</td>
<td>星期的英文单词的全拼：如星期一，返回 Monday</td>
</tr>
<tr>
<td>%b</td>
<td>月份的英文单词的缩写：如一月， 则返回 Jan</td>
</tr>
<tr>
<td>%B</td>
<td>月份的引文单词的缩写：如一月， 则返回 January</td>
</tr>
<tr>
<td>%c</td>
<td>返回datetime的字符串表示，如03/08/15 23:01:26</td>
</tr>
<tr>
<td>%d</td>
<td>返回的是当前时间是当前月的第几天</td>
</tr>
<tr>
<td>%f</td>
<td>微秒的表示： 范围: [0,999999]</td>
</tr>
<tr>
<td>%H</td>
<td>以24小时制表示当前小时</td>
</tr>
<tr>
<td>%I</td>
<td>以12小时制表示当前小时</td>
</tr>
<tr>
<td>%j</td>
<td>返回 当天是当年的第几天 范围[001,366]</td>
</tr>
<tr>
<td>%m</td>
<td>返回月份 范围[0,12]</td>
</tr>
<tr>
<td>%M</td>
<td>返回分钟数 范围 [0,59]</td>
</tr>
<tr>
<td>%P</td>
<td>返回是上午还是下午–AM or PM</td>
</tr>
<tr>
<td>%S</td>
<td>返回秒数 范围 [0,61]。。。手册说明的</td>
</tr>
<tr>
<td>%U</td>
<td>返回当周是当年的第几周 以周日为第一天</td>
</tr>
<tr>
<td>%W</td>
<td>返回当周是当年的第几周 以周一为第一天</td>
</tr>
<tr>
<td>%w</td>
<td>当天在当周的天数，范围为[0, 6]，6表示星期天</td>
</tr>
<tr>
<td>%x</td>
<td>日期的字符串表示 ：03/08/15</td>
</tr>
<tr>
<td>%X</td>
<td>时间的字符串表示 ：23:22:08</td>
</tr>
<tr>
<td>%y</td>
<td>两个数字表示的年份 15</td>
</tr>
<tr>
<td>%Y</td>
<td>四个数字表示的年份 2015</td>
</tr>
<tr>
<td>%z</td>
<td>与utc时间的间隔 （如果是本地时间，返回空字符串）</td>
</tr>
<tr>
<td>%Z</td>
<td>时区名称（如果是本地时间，返回空字符串）</td>
</tr>
</tbody></table>
<h4 id="datetime类"><a href="#datetime类" class="headerlink" title="datetime类"></a>datetime类</h4><blockquote>
<p>datetime类定义的类属性与方法</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性/方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>datetime.today()</td>
<td>返回一个表示当前本地时间的datetime对象</td>
</tr>
<tr>
<td>datetime.now([tz])</td>
<td>返回一个表示当前本地时间的datetime对象，如果提供了参数tz，则获取tz参数所指时区的本地时间</td>
</tr>
<tr>
<td>datetime.utcnow()</td>
<td>返回一个当前utc时间的datetime对象</td>
</tr>
<tr>
<td>datetime.fromtimestamp(timestamp[,tz])</td>
<td>根据时间戮创建一个datetime对象，参数tz指定时区信息</td>
</tr>
<tr>
<td>datetime.date()</td>
<td>获取date对象</td>
</tr>
<tr>
<td>datetime.time()</td>
<td>获取time对象</td>
</tr>
<tr>
<td>datetime.replace([ year[,month[,day[,hour[,minute[,second[,microsecond[,tzinfo]]]]]]]])</td>
<td>用法同date和time方法</td>
</tr>
<tr>
<td>datetime.combine(date, time)</td>
<td>根据date和time，创建一个datetime对象</td>
</tr>
<tr>
<td>datetime.strptime(date_string, format)</td>
<td>将格式字符串转换为datetime对象</td>
</tr>
</tbody></table>
<blockquote>
<p>datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)</p>
</blockquote>
<h4 id="time类"><a href="#time类" class="headerlink" title="time类"></a>time类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line">time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元组形式的时间戳</span></span><br><span class="line">time.local(time.time())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化日期的函数(基于元组的形式进行格式化)</span></span><br><span class="line">time.asctime(time.local(time.time()))</span><br><span class="line">time.strftime(<span class="built_in">format</span>[,t])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">time.strptime(<span class="built_in">str</span>,fmt=<span class="string">&#x27;%a %b %d %H:%M:%S %Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延迟执行(单位为秒)</span></span><br><span class="line">time.sleep([secs])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前日期</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期年月日</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt=datetime.now()</span><br><span class="line"><span class="built_in">print</span>(dt.year,dt.month,dt.day)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相差天数</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d1 = datetime.date(<span class="number">2015</span>,<span class="number">10</span>,<span class="number">7</span>)</span><br><span class="line">d2 = datetime.date(<span class="number">2015</span>,<span class="number">8</span>,<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>((d1-d2).days)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 今天的n天后的日期</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">delta = datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line">n_days = now + delta</span><br><span class="line"><span class="built_in">print</span>(n_days.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取秒数</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式化</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">dt_obj = datetime.datetime(<span class="number">2016</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">59</span>)</span><br><span class="line">dt_obj.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time_tuple = (<span class="number">2016</span>, <span class="number">11</span>, <span class="number">30</span>, <span class="number">13</span>, <span class="number">51</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">317</span>, <span class="number">0</span>)</span><br><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time_tuple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串解析日期</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">date_str = <span class="string">&quot;2016-11-30 13:53:59&quot;</span></span><br><span class="line">datetime.datetime.strptime(date_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>）</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">date_str = <span class="string">&quot;2016-11-30 13:53:59&quot;</span></span><br><span class="line">time.strptime(date_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># django 中 昨天、今天、明天</span></span><br><span class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> now, timedelta</span><br><span class="line">date = now().date() + timedelta(days=-<span class="number">1</span>) <span class="comment">#昨天</span></span><br><span class="line">date = now().date() + timedelta(days=<span class="number">0</span>) <span class="comment">#今天</span></span><br><span class="line">date = now().date() + timedelta(days=<span class="number">1</span>) <span class="comment">#明天</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串的时间转换为时间戳</span></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">t = <span class="string">&quot;2019-06-29 17:30:00&quot;</span></span><br><span class="line">time_struct = time.strptime(t, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <span class="comment"># 将其转换为时间数组 </span></span><br><span class="line">timestamp = <span class="built_in">int</span>(time.mktime(time_struct)) </span><br><span class="line"><span class="built_in">print</span>(timestamp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转换为指定格式日期</span></span><br><span class="line">timestamp = <span class="number">1561800600</span></span><br><span class="line">local_time = time.localtime(timestamp) </span><br><span class="line">str_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, local_time) </span><br><span class="line"><span class="built_in">print</span>(str_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间并转换为指定日期格式</span></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">now = <span class="built_in">int</span>(time.time())  <span class="comment"># 获得当前时间时间戳 </span></span><br><span class="line">time_struct = time.localtime(now) </span><br><span class="line">str_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time_struct) </span><br><span class="line"><span class="built_in">print</span>(str_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得N天前的时间的方法</span></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">n_day_ago = (datetime.datetime.now() - datetime.timedelta(days=n)) </span><br><span class="line">timestamp = <span class="built_in">int</span>(time.mktime(n_day_ago.timetuple()))  <span class="comment"># 转换为时间戳</span></span><br><span class="line">time_struct = time.localtime(timestamp) </span><br><span class="line">str_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time_struct) </span><br><span class="line"><span class="built_in">print</span>(str_time)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">str_time = n_day_ago.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(str_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当天时间范围(00:00:00到23:59:59)</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time</span><br><span class="line">dt_min = datetime.combine(datetime.today(), time.<span class="built_in">min</span>)</span><br><span class="line">dt_max = datetime.combine(datetime.today(), time.<span class="built_in">max</span>)</span><br><span class="line"><span class="built_in">print</span>(dt_min, <span class="string">&#x27;-&#x27;</span>, dt_max)</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA算法介绍及JAVA实现详解</title>
    <url>/2018/01/01/RSA%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D%E5%8F%8AJAVA%E5%AE%9E%E7%8E%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;一&gt;基础</span><br><span class="line"> </span><br><span class="line">RSA算法非常简单，概述如下：</span><br><span class="line">找两素数p和q</span><br><span class="line">取n=p*q</span><br><span class="line">取t=(p-1)*(q-1)</span><br><span class="line">取任何一个数e,要求满足e&lt;t并且e与t互素（就是最大公因数为1）</span><br><span class="line">取d*e%t==1</span><br><span class="line"> </span><br><span class="line">这样最终得到三个数： n d e</span><br><span class="line"> </span><br><span class="line">设消息为数M (M &lt;n)</span><br><span class="line">设c=(M**d)%n就得到了加密后的消息c</span><br><span class="line">设m=(c**e)%n则 m == M，从而完成对c的解密。</span><br><span class="line">注：**表示次方,上面两式中的d和e可以互换。</span><br><span class="line"> </span><br><span class="line">在对称加密中：</span><br><span class="line">n d两个数构成公钥，可以告诉别人；</span><br><span class="line">n e两个数构成私钥，e自己保留，不让任何人知道。</span><br><span class="line">给别人发送的信息使用e加密，只要别人能用d解开就证明信息是由你发送的，构成了签名机制。</span><br><span class="line">别人给你发送信息时使用d加密，这样只有拥有e的你能够对其解密。</span><br><span class="line"> </span><br><span class="line">rsa的安全性在于对于一个大数n，没有有效的方法能够将其分解</span><br><span class="line">从而在已知n d的情况下无法获得e；同样在已知n e的情况下无法</span><br><span class="line">求得d。</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;二&gt;实践</span><br><span class="line"> </span><br><span class="line">接下来我们来一个实践，看看实际的操作：</span><br><span class="line">找两个素数：</span><br><span class="line">p=47</span><br><span class="line">q=59</span><br><span class="line">这样</span><br><span class="line">n=p*q=2773</span><br><span class="line">t=(p-1)*(q-1)=2668</span><br><span class="line">取e=63，满足e&lt;t并且e和t互素</span><br><span class="line">用perl简单穷举可以获得满主 e*d%t ==1的数d：</span><br><span class="line">C:\Temp&gt;perl -e &quot;foreach $i (1..9999)&#123; print($i),last if $i*63%2668==1 &#125;&quot;</span><br><span class="line">847</span><br><span class="line">即d＝847</span><br><span class="line"> </span><br><span class="line">最终我们获得关键的</span><br><span class="line">n=2773</span><br><span class="line">d=847</span><br><span class="line">e=63</span><br><span class="line"> </span><br><span class="line">取消息M=244我们看看</span><br><span class="line"> </span><br><span class="line">加密：</span><br><span class="line"> </span><br><span class="line">c=M**d%n = 244**847%2773</span><br><span class="line">用perl的大数计算来算一下：</span><br><span class="line">C:\Temp&gt;perl -Mbigint -e &quot;print 244**847%2773&quot;</span><br><span class="line">465</span><br><span class="line">即用d对M加密后获得加密信息c＝465</span><br><span class="line"> </span><br><span class="line">解密：</span><br><span class="line"> </span><br><span class="line">我们可以用e来对加密后的c进行解密，还原M：</span><br><span class="line">m=c**e%n=465**63%2773 ：</span><br><span class="line">C:\Temp&gt;perl -Mbigint -e &quot;print 465**63%2773&quot;</span><br><span class="line">244</span><br><span class="line">即用e对c解密后获得m=244 , 该值和原始信息M相等。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;三&gt;字符串加密</span><br><span class="line"> </span><br><span class="line">把上面的过程集成一下我们就能实现一个对字符串加密解密的示例了。</span><br><span class="line">每次取字符串中的一个字符的ascii值作为M进行计算，其输出为加密后16进制</span><br><span class="line">的数的字符串形式，按3字节表示，如01F</span><br><span class="line"> </span><br><span class="line">代码如下：</span><br></pre></td></tr></table></figure>
<p>#!/usr/bin/perl -w<br>#RSA 计算过程学习程序编写的测试程序<br>#watercloud 2003-8-12<br>#<br>use strict;<br>use Math::BigInt;</p>
<p>my %RSA_CORE = (n=&gt;2773,e=&gt;63,d=&gt;847); #p=47,q=59</p>
<p>my $N=new Math::BigInt($RSA_CORE{n});<br>my $E=new Math::BigInt($RSA_CORE{e});<br>my $D=new Math::BigInt($RSA_CORE{d});</p>
<p>print “N=$N D=$D E=$E\n”;</p>
<p>sub RSA_ENCRYPT<br>{<br>my $r_mess = shift @_;<br>my ($c,$i,$M,$C,$cmess);</p>
<p>for($i=0;$i &lt; length($$r_mess);$i++)<br>{<br>$c=ord(substr($$r_mess,$i,1));<br>$M=Math::BigInt-&gt;new($c);<br>$C=$M-&gt;copy(); $C-&gt;bmodpow($D,$N);<br>$c=sprintf “%03X”,$C;<br>$cmess.=$c;<br>}<br>return $cmess;<br>}</p>
<p>sub RSA_DECRYPT<br>{<br>my $r_mess = shift @_;<br>my ($c,$i,$M,$C,$dmess);</p>
<p>for($i=0;$i &lt; length($$r_mess);$i+=3)<br>{<br>$c=substr($$r_mess,$i,3);<br>$c=hex($c);<br>$M=Math::BigInt-&gt;new($c);<br>$C=$M-&gt;copy(); $C-&gt;bmodpow($E,$N);<br>$c=chr($C);<br>$dmess.=$c;<br>}<br>return $dmess;<br>}</p>
<p>my $mess=”RSA 娃哈哈哈～～～”;<br>$mess=$ARGV[0] if @ARGV &gt;= 1;<br>print “原始串：”,$mess,”\n”;</p>
<p>my $r_cmess = RSA_ENCRYPT($mess);<br>print “加密串：”,$$r_cmess,”\n”;</p>
<p>my $r_dmess = RSA_DECRYPT($r_cmess);<br>print “解密串：”,$$r_dmess,”\n”;</p>
<p>#EOF</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试一下：</span><br><span class="line">C:\Temp&gt;perl rsa-test.pl</span><br><span class="line">N=2773 D=847 E=63</span><br><span class="line">原始串：RSA 娃哈哈哈～～～</span><br><span class="line">加密串：5CB6CD6BC58A7709470AA74A0AA74A0AA74A6C70A46C70A46C70A4</span><br><span class="line">解密串：RSA 娃哈哈哈～～～</span><br><span class="line"> </span><br><span class="line">C:\Temp&gt;perl rsa-test.pl 安全焦点（xfocus）</span><br><span class="line">N=2773 D=847 E=63</span><br><span class="line">原始串：安全焦点（xfocus）</span><br><span class="line">加密串：3393EC12F0A466E0AA9510D025D7BA0712DC3379F47D51C325D67B</span><br><span class="line">解密串：安全焦点（xfocus）</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">&lt;四&gt;提高</span><br><span class="line"> </span><br><span class="line">前面已经提到，rsa的安全来源于n足够大，我们测试中使用的n是非常小的，根本不能保障安全性，</span><br><span class="line">我们可以通过RSAKit、RSATool之类的工具获得足够大的N 及D E。</span><br><span class="line">通过工具，我们获得1024位的N及D E来测试一下：</span><br><span class="line"> </span><br><span class="line">n=0x328C74784DF31119C526D18098EBEBB943B0032B599CEE13CC2BCE7B5FCD15F90B66EC3A85F5005D</span><br><span class="line">BDCDED9BDFCB3C4C265AF164AD55884D8278F791C7A6BFDAD55EDBC4F017F9CCF1538D4C2013433B383B</span><br><span class="line">47D80EC74B51276CA05B5D6346B9EE5AD2D7BE7ABFB36E37108DD60438941D2ED173CCA50E114705D7E2</span><br><span class="line">BC511951</span><br><span class="line"> </span><br><span class="line">d=0x10001</span><br><span class="line">e=0xE760A3804ACDE1E8E3D7DC0197F9CEF6282EF552E8CEBBB7434B01CB19A9D87A3106DD28C523C2995</span><br><span class="line">4C5D86B36E943080E4919CA8CE08718C3B0930867A98F635EB9EA9200B25906D91B80A47B77324E66AFF2</span><br><span class="line">C4D70D8B1C69C50A9D8B4B7A3C9EE05FFF3A16AFC023731D80634763DA1DCABE9861A4789BD782A592D2B</span><br><span class="line">1965</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">设原始信息</span><br><span class="line">M=0x11111111111122222222222233333333333</span><br><span class="line"> </span><br><span class="line">完成这么大数字的计算依赖于大数运算库，用perl来运算非常简单：</span><br><span class="line"> </span><br><span class="line">A) 用d对M进行加密如下：</span><br><span class="line">c=M**d%n :</span><br><span class="line">C:\Temp&gt;perl -Mbigint -e &quot; $x=Math::BigInt-&gt;bmodpow(0x11111111111122222222222233</span><br><span class="line">333333333, 0x10001, 0x328C74784DF31119C526D18098EBEBB943B0032B599CEE13CC2BCE7B5F</span><br><span class="line">CD15F90B66EC3A85F5005DBDCDED9BDFCB3C4C265AF164AD55884D8278F791C7A6BFDAD55EDBC4F0</span><br><span class="line">17F9CCF1538D4C2013433B383B47D80EC74B51276CA05B5D6346B9EE5AD2D7BE7ABFB36E37108DD6</span><br><span class="line">0438941D2ED173CCA50E114705D7E2BC511951);print $x-&gt;as_hex&quot;</span><br><span class="line">0x17b287be418c69ecd7c39227ab681ac422fcc84bb35d8a632543b304de288a8d4434b73d2576bd</span><br><span class="line">45692b007f3a2f7c5f5aa1d99ef3866af26a8e876712ed1d4cc4b293e26bc0a1dc67e247715caa6b</span><br><span class="line">3028f9461a3b1533ec0cb476441465f10d8ad47452a12db0601c5e8beda686dd96d2acd59ea89b91</span><br><span class="line">f1834580c3f6d90898</span><br><span class="line"> </span><br><span class="line">即用d对M加密后信息为：</span><br><span class="line">c=0x17b287be418c69ecd7c39227ab681ac422fcc84bb35d8a632543b304de288a8d4434b73d2576bd</span><br><span class="line">45692b007f3a2f7c5f5aa1d99ef3866af26a8e876712ed1d4cc4b293e26bc0a1dc67e247715caa6b</span><br><span class="line">3028f9461a3b1533ec0cb476441465f10d8ad47452a12db0601c5e8beda686dd96d2acd59ea89b91</span><br><span class="line">f1834580c3f6d90898</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">B) 用e对c进行解密如下：</span><br><span class="line"> </span><br><span class="line">m=c**e%n ：</span><br><span class="line">C:\Temp&gt;perl -Mbigint -e &quot; $x=Math::BigInt-&gt;bmodpow(0x17b287be418c69ecd7c39227ab</span><br><span class="line">681ac422fcc84bb35d8a632543b304de288a8d4434b73d2576bd45692b007f3a2f7c5f5aa1d99ef3</span><br><span class="line">866af26a8e876712ed1d4cc4b293e26bc0a1dc67e247715caa6b3028f9461a3b1533ec0cb4764414</span><br><span class="line">65f10d8ad47452a12db0601c5e8beda686dd96d2acd59ea89b91f1834580c3f6d90898, 0xE760A</span><br><span class="line">3804ACDE1E8E3D7DC0197F9CEF6282EF552E8CEBBB7434B01CB19A9D87A3106DD28C523C29954C5D</span><br><span class="line">86B36E943080E4919CA8CE08718C3B0930867A98F635EB9EA9200B25906D91B80A47B77324E66AFF</span><br><span class="line">2C4D70D8B1C69C50A9D8B4B7A3C9EE05FFF3A16AFC023731D80634763DA1DCABE9861A4789BD782A</span><br><span class="line">592D2B1965, 0x328C74784DF31119C526D18098EBEBB943B0032B599CEE13CC2BCE7B5FCD15F90</span><br><span class="line">B66EC3A85F5005DBDCDED9BDFCB3C4C265AF164AD55884D8278F791C7A6BFDAD55EDBC4F017F9CCF</span><br><span class="line">1538D4C2013433B383B47D80EC74B51276CA05B5D6346B9EE5AD2D7BE7ABFB36E37108DD60438941</span><br><span class="line">D2ED173CCA50E114705D7E2BC511951);print $x-&gt;as_hex&quot;</span><br><span class="line">0x11111111111122222222222233333333333</span><br><span class="line">(我的P4 1.6G的机器上计算了约5秒钟）</span><br><span class="line"> </span><br><span class="line">得到用e解密后的m=0x11111111111122222222222233333333333 == M</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">C) RSA通常的实现</span><br><span class="line">RSA简洁幽雅，但计算速度比较慢，通常加密中并不是直接使用RSA 来对所有的信息进行加密，</span><br><span class="line">最常见的情况是随机产生一个对称加密的密钥，然后使用对称加密算法对信息加密，之后用</span><br><span class="line">RSA对刚才的加密密钥进行加密。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">最后需要说明的是，当前小于1024位的N已经被证明是不安全的</span><br><span class="line">自己使用中不要使用小于1024位的RSA，最好使用2048位的。</span><br></pre></td></tr></table></figure>

<hr>
<p>一个简单的RSA算法实现JAVA源代码：<br>filename:RSA.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* Created on Mar 3,</span><br><span class="line">*</span><br><span class="line">* TODO To change the template for this generated file go to</span><br><span class="line">* Window - Preferences - Java - Code Style - Code Templates</span><br><span class="line">*/</span><br><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.util.StringTokenizer;</span><br><span class="line">/**</span><br><span class="line">* @author Steve</span><br><span class="line">*</span><br><span class="line">* TODO To change the template for this generated type comment go to</span><br><span class="line">* Window - Preferences - Java - Code Style - Code Templates</span><br><span class="line">*/</span><br><span class="line">public class RSA &#123;</span><br><span class="line">    /**</span><br><span class="line">     * BigInteger.ZERO</span><br><span class="line">     */</span><br><span class="line">    private static final BigInteger ZERO = BigInteger.ZERO;</span><br><span class="line">    /**</span><br><span class="line">     * BigInteger.ONE</span><br><span class="line">     */</span><br><span class="line">    private static final BigInteger ONE = BigInteger.ONE;</span><br><span class="line">    /**</span><br><span class="line">     * Pseudo BigInteger.TWO</span><br><span class="line">     */</span><br><span class="line">    private static final BigInteger TWO = new BigInteger(&quot;2&quot;);</span><br><span class="line">    private BigInteger myKey;</span><br><span class="line">    private BigInteger myMod;</span><br><span class="line">    private int blockSize;</span><br><span class="line">    public RSA (BigInteger key, BigInteger n, int b) &#123;</span><br><span class="line">        myKey = key;</span><br><span class="line">        myMod = n;</span><br><span class="line">        blockSize = b;</span><br><span class="line">    &#125;</span><br><span class="line">    public void encodeFile (String filename) &#123;</span><br><span class="line">        byte[] bytes = new byte[blockSize / 8 + 1];</span><br><span class="line">        byte[] temp;</span><br><span class="line">        int tempLen;</span><br><span class="line">        InputStream is = null;</span><br><span class="line">        FileWriter writer = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            is = new FileInputStream(filename);</span><br><span class="line">            writer = new FileWriter(filename + &quot;.enc&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (FileNotFoundException e1)&#123;</span><br><span class="line">            System.out.println(&quot;File not found: &quot; + filename);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e1)&#123;</span><br><span class="line">            System.out.println(&quot;File not found: &quot; + filename + &quot;.enc&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * Write encoded message to &#x27;filename&#x27;.enc</span><br><span class="line">         */</span><br><span class="line">        try &#123;</span><br><span class="line">            while ((tempLen = is.read(bytes, 1, blockSize / 8)) &gt; 0) &#123;</span><br><span class="line">                for (int i = tempLen + 1; i &lt; bytes.length; ++i) &#123;</span><br><span class="line">                    bytes[i] = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                writer.write(encodeDecode(new BigInteger(bytes)) + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e1) &#123;</span><br><span class="line">            System.out.println(&quot;error writing to file&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * Close input stream and file writer</span><br><span class="line">         */</span><br><span class="line">        try &#123;</span><br><span class="line">            is.close();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e1) &#123;</span><br><span class="line">            System.out.println(&quot;Error closing file.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void decodeFile (String filename) &#123;</span><br><span class="line">        FileReader reader = null;</span><br><span class="line">        OutputStream os = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            reader = new FileReader(filename);</span><br><span class="line">            os = new FileOutputStream(filename.replaceAll(&quot;.enc&quot;, &quot;.dec&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (FileNotFoundException e1) &#123;</span><br><span class="line">            if (reader == null)</span><br><span class="line">                System.out.println(&quot;File not found: &quot; + filename);</span><br><span class="line">            else</span><br><span class="line">                System.out.println(&quot;File not found: &quot; + filename.replaceAll(&quot;.enc&quot;, &quot;dec&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedReader br = new BufferedReader(reader);</span><br><span class="line">        int offset;</span><br><span class="line">        byte[] temp, toFile;</span><br><span class="line">        StringTokenizer st = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            while (br.ready()) &#123;</span><br><span class="line">                st = new StringTokenizer(br.readLine());</span><br><span class="line">                while (st.hasMoreTokens())&#123;</span><br><span class="line">                    toFile = encodeDecode(new BigInteger(st.nextToken())).toByteArray();</span><br><span class="line">                    System.out.println(toFile.length + &quot; x &quot; + (blockSize / 8));</span><br><span class="line">                    if (toFile[0] == 0 &amp;&amp; toFile.length != (blockSize / 8)) &#123;</span><br><span class="line">                        temp = new byte[blockSize / 8];</span><br><span class="line">                        offset = temp.length - toFile.length;</span><br><span class="line">                        for (int i = toFile.length - 1; (i &lt;= 0) &amp;&amp; ((i + offset) &lt;= 0); --i) &#123;</span><br><span class="line">                            temp[i + offset] = toFile[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                        toFile = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    /*if (toFile.length != ((blockSize / 8) + 1))&#123;</span><br><span class="line">                     temp = new byte[(blockSize / 8) + 1];</span><br><span class="line">                     System.out.println(toFile.length + &quot; x &quot; + temp.length);</span><br><span class="line">                     for (int i = 1; i &lt; temp.length; i++) &#123;</span><br><span class="line">                     temp[i] = toFile[i - 1];</span><br><span class="line">                     &#125;</span><br><span class="line">                     toFile = temp;</span><br><span class="line">                     &#125;</span><br><span class="line">                     else</span><br><span class="line">                     System.out.println(toFile.length + &quot; &quot; + ((blockSize / 8) + 1));*/</span><br><span class="line">                    os.write(toFile);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e1) &#123;</span><br><span class="line">            System.out.println(&quot;Something went wrong&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * close data streams</span><br><span class="line">         */</span><br><span class="line">        try &#123;</span><br><span class="line">            os.close();</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e1) &#123;</span><br><span class="line">            System.out.println(&quot;Error closing file.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * Performs &lt;tt&gt;base&lt;/tt&gt;^&lt;sup&gt;&lt;tt&gt;pow&lt;/tt&gt;&lt;/sup&gt; within the modular</span><br><span class="line">     * domain of &lt;tt&gt;mod&lt;/tt&gt;.</span><br><span class="line">     *</span><br><span class="line">     * @param base the base to be raised</span><br><span class="line">     * @param pow the power to which the base will be raisded</span><br><span class="line">     * @param mod the modular domain over which to perform this operation</span><br><span class="line">     * @return &lt;tt&gt;base&lt;/tt&gt;^&lt;sup&gt;&lt;tt&gt;pow&lt;/tt&gt;&lt;/sup&gt; within the modular</span><br><span class="line">     * domain of &lt;tt&gt;mod&lt;/tt&gt;.</span><br><span class="line">     */</span><br><span class="line">    public BigInteger encodeDecode(BigInteger base) &#123;</span><br><span class="line">        BigInteger a = ONE;</span><br><span class="line">        BigInteger s = base;</span><br><span class="line">        BigInteger n = myKey;</span><br><span class="line">        while (!n.equals(ZERO)) &#123;</span><br><span class="line">            if(!n.mod(TWO).equals(ZERO))</span><br><span class="line">                a = a.multiply(s).mod(myMod);</span><br><span class="line">            s = s.pow(2).mod(myMod);</span><br><span class="line">            n = n.divide(TWO);</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>Redirect和Dispatcher 区别</title>
    <url>/2018/01/01/Redirect%E5%92%8CDispatcher%20%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="Redirect和Dispatcher-区别"><a href="#Redirect和Dispatcher-区别" class="headerlink" title="Redirect和Dispatcher 区别"></a>Redirect和Dispatcher 区别</h4><blockquote>
<p>使用forward是服务跳转，浏览器不知道它所请求的具体资源来源，浏览器的地址栏不会变；使用redirect，服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(&quot;test.jsp&quot;).forward(request, response);//转发到test.jsp</span><br><span class="line">response.sendRedirect(&quot;test.jsp&quot;);//重定向到test.jsp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重定向：以前的request中存放的变量全部失效，并进入一个新的request作用域。</p>
</blockquote>
<blockquote>
<p>转发：以前的request中存放的变量不会失效，就像把两个页面拼到了一起。</p>
</blockquote>
<blockquote>
<p>forward,转发页面和转发到的页面可以共享request里面的数据;redirect,不能共享数据.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总而言之：</span><br><span class="line"></span><br><span class="line">区别1：</span><br><span class="line">    redirect是重定向，会导致url路径的改变，是客户端的变化。</span><br><span class="line">    dispatcher是转向的意思，url路径不改变，是服务器端的变化。</span><br><span class="line">区别2：</span><br><span class="line">    redirect的重定向如果需要带上参数，只能是url里面加上参数自段</span><br><span class="line">    dispatcher会自动带上参数的跳转。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis使用详细教程</title>
    <url>/2019/10/28/Redis%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Redis使用详细教程"><a href="#Redis使用详细教程" class="headerlink" title="Redis使用详细教程"></a>Redis使用详细教程</h3><h4 id="一、Redis基础部分"><a href="#一、Redis基础部分" class="headerlink" title="一、Redis基础部分:"></a>一、Redis基础部分:</h4><p>1、redis介绍与安装比mysql快10倍以上 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*****************redis适用场合****************</span><br><span class="line">1.取最新N个数据的操作</span><br><span class="line">2.排行榜应用,取TOP N 操作</span><br><span class="line">3.需要精确设定过期时间的应用</span><br><span class="line">4.计数器应用</span><br><span class="line">5.Uniq操作,获取某段时间所有数据排重值</span><br><span class="line">6.实时系统,反垃圾系统7.Pub/Sub构建实时消息系统</span><br><span class="line">7.Pub/Sub构建实时消息系统8.构建队列系统</span><br><span class="line">9.缓存</span><br></pre></td></tr></table></figure>

<p>=============================================</p>
<blockquote>
<p>SET操作每秒钟 110000 次,GET操作每秒钟 81000 次,服务器配置如下<br>Linux 2.6, Xeon X3320 2.5Ghz.</p>
</blockquote>
<blockquote>
<p>stackoverflow 网站使用 Redis 做为缓存服务器。<br>同时也会将数据写到硬盘上。数据是安全的(除突然断电外,重启服务会写到dump.rdb文件中)</p>
</blockquote>
<ol>
<li><p>安装: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf redis-2.6.9.tar.gz</span><br><span class="line">cd redis-2.6.9</span><br><span class="line">make</span><br><span class="line">cd src &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>移动配置文件位置(为了便于管理)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mkdir -p /usr/local/redis/bin</span><br><span class="line">mkdir -p /usr/local/redis/etc</span><br><span class="line">mv /lamp/redis-2.6.9/redis.conf /usr/local/redis/etc</span><br><span class="line">cd /lamp/redis-2.6.9/src</span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server /usr/local/redis/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>将daemonize no 中no改为yes[yes指后台运行]</p>
</blockquote>
<ol start="4">
<li><p>启动/随机启动:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis/bin</span><br><span class="line">./redis-server /usr/local/redis/etc/redis.conf#启动redis并指定配置文件。</span><br><span class="line"></span><br><span class="line">#vi /etc/rc.local #设置随机启动。</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否启动成功 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br><span class="line">netstat -tunpl | grep 6379#查看端口是否占用。</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入客户端/退出 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis/bin</span><br><span class="line">./redis-cli#进入</span><br><span class="line">quit #退出</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭redis  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkill redis-server#关闭</span><br><span class="line">./redis-cli shutdown#关闭</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Redis安全"><a href="#Redis安全" class="headerlink" title="Redis安全"></a>Redis安全</h4><ol>
<li>Redis的安全性</li>
<li>在redis.conf配置文件增加下面这一行配置,即可把redis绑定在单个接口上：<code> bind 127.0.0.1</code></li>
<li>给redis加上较长密码(无需要记住)</li>
<li>在redis.conf配置启用认证功能。</li>
<li>SSL代理</li>
<li>禁用指定命令。</li>
</ol>
<h4 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemonize    如果需要在后台运行,把该项改为yes  </span><br><span class="line">pidfile      配置多个pid的地址 默认在/var/run/redis.pid</span><br><span class="line">bind 绑定ip,设置后只接受来自该ip的请求</span><br><span class="line">port 监听端口,默认为6379</span><br><span class="line">timeout      设置客户端连接时的超时时间,单位为秒</span><br><span class="line">loglevel     分为4级,debug、verbose、notice、warning</span><br><span class="line">logfile      配置log文件地址</span><br><span class="line">databases    设置数据库的个数,默认使用的数据库为0</span><br><span class="line">save         设置redis进行数据库镜像的频率</span><br><span class="line">rdbcompression    在进行镜像备份时,是否进行压缩</span><br><span class="line">Dbfilename        镜像备份文件的文件名</span><br><span class="line">Dir   数据库镜像备份的文件放置路径</span><br><span class="line">Slaveof     设置数据库为其他数据库的从数据库</span><br><span class="line">Masterauth 主数据库连接需要的密码验证</span><br><span class="line">Requirepass     设置登录时需要使用的密码</span><br><span class="line">Maxclients 限制同时连接的客户数量</span><br><span class="line">Maxmemory 设置redis能够使用的最大内存</span><br><span class="line">Appendonly 开启append only模式</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下了解即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Appendfsync 设置对appendonly.aof文件同步的频率</span><br><span class="line">vm-enabled 是否开启虚拟内存支持</span><br><span class="line">vm-swap-file 设置虚拟内存的交换文件路径</span><br><span class="line">vm-max-memory 设置redis使用的最大物理内存大小</span><br><span class="line">vm-page-size 设置虚拟内存的页大小</span><br><span class="line">vm-max-threads 设置VM IO同时使用的线程数量</span><br><span class="line">Glueoutputbuf 把小的输出缓存存放在一起</span><br><span class="line">hash-max-zipmap-entries 设置hash的临界值</span><br><span class="line">Activerehashing 重新hash</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>5种数据类型:字符串、哈希、链表、集合、有序集合。</p>
</blockquote>
<blockquote>
<p>支持:push/pop、add/remove 、取交集、并集、差集、排序。</p>
</blockquote>
<blockquote>
<p>redis&lt;===同步====&gt;mysql<br>同时也会将数据写到硬盘上。所以数据是安全的(除突然断电外,重启服务会写到dump.rdb文件中)</p>
</blockquote>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select num #选择库,默认在0库,共16个库</span><br><span class="line">auth liweijie #授权用户所需密码(密码就是redis.conf中配置的密码)</span><br><span class="line">flushdb #清空数据库。</span><br></pre></td></tr></table></figure>

<h5 id="String-字符串-类型"><a href="#String-字符串-类型" class="headerlink" title="String(字符串)类型:"></a>String(字符串)类型:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set name lijie #设置键name的值为lijie</span><br><span class="line">get name #获取name的值。</span><br><span class="line">keys * #查询所有的键。</span><br><span class="line">setnx name liweijie #如果键已存在则返回0,不更新,防止覆盖。</span><br><span class="line">setex haircolor 10 red #设置键的值的有效期为10秒。</span><br><span class="line">setrange email 6 lampbre.com #替换键的值从第6个字符开始换为lampbre.com</span><br><span class="line">mset name1 李大伟 name2 李小伟 #设置多个键的值。</span><br><span class="line">msetnxname1 张三 name3 李四 #判断键是否存在,不存在则设置,否则不设置返回0</span><br><span class="line">mget name1 name2 name3 #一次获取多个键的值。</span><br><span class="line">getset name1 Tom #重新设置键的值,并返回旧的键值。</span><br><span class="line">getrange email 6 18 #截取email键的值,从第6-18位间的字符。</span><br><span class="line">incr uid #每次自增1 (如果key中uid不存在,则设置并从0开始,下同)</span><br><span class="line">incrby uid 5 #每次自增5 </span><br><span class="line">incrby uid -5 #每次自减5 </span><br><span class="line">decr uid #每次自减1</span><br><span class="line">decrby uid 5 #每次自减5</span><br><span class="line">appendname1 @126.com #给name1的值,添加字符串@126.com</span><br><span class="line">strlenname1 #返回键name1的值的长度。</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Hashes-哈希-类型"><a href="#Hashes-哈希-类型" class="headerlink" title="Hashes(哈希)类型"></a>Hashes(哈希)类型</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset user:001 name liweijie #哈希设置用户user:001的name键值为liweijie</span><br><span class="line">hset user:001 age 21 #同样,增加一个age键值为21</span><br><span class="line">hsetnx user:001 age 22 #同上,但检测键是否存在。若不存在创建。</span><br><span class="line">hmset user:002 name liweijie2 age 26 sex 1 #同时设置多个键的值。</span><br><span class="line">hget user:001 name #哈希获取用户user:001的name键的值。</span><br><span class="line">hget user:001 age #同上。</span><br><span class="line">hmget user:001 name age sex #获取多个指定的键的值。</span><br><span class="line">hgetall user:001 #获取所有键的值。</span><br><span class="line">hincrbyuser:001 age -8 #在指定键上加上给定的值。</span><br><span class="line">hexists user:001 sex #检测指定的键值是否存在。</span><br><span class="line">hlen user:001 #返回指定哈希的键个数/字段个数。</span><br><span class="line">hdel user:001 sex #删除指定(user:001)哈希的指定字段或是键值。</span><br><span class="line">hkeys user:003 #返回哈希里所有字段或是键值。</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Lists-链表-类型及操作-棧或队列"><a href="#Lists-链表-类型及操作-棧或队列" class="headerlink" title="Lists(链表)类型及操作(棧或队列)"></a>Lists(链表)类型及操作(棧或队列)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush mylist &quot;world&quot; #从头部插入字符串</span><br><span class="line">lpush mylist &quot;hello&quot; #同上</span><br><span class="line">lrange mylist 0 -1 #获取从0到最后一个如[1) &quot;hello&quot; 2) &quot;world&quot;]</span><br><span class="line">rpush mylist &quot;jiejie&quot; #在尾部插入</span><br><span class="line">linsert mylist before &quot;hello&quot; &quot;this is linsert&quot;  #指定插入位置(在hello之前插入)。</span><br><span class="line">lset mylist 0 &quot;what&quot; #设置修改指定下标的值。</span><br><span class="line">lrem mylist 1 &quot;hello&quot; #删除(1个)一个值为hello的元素。(n&lt;0从尾部删除,n=0全部删除)</span><br><span class="line">lpop mylist #弹出开头元素并返回。</span><br><span class="line">rpop mylist #弹出尾部元素并返回。</span><br><span class="line">rpoplpush mylist mylist2 #从mylist尾部弹出插入到mylist2的头部。</span><br><span class="line">lindex mylist 0 #获取表下标为0的元素值。</span><br><span class="line">llen mylist #返回表元素个数(相当于count($arr  ))。</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="sets-集合-类型及操作-好友推荐、blog、tag功能"><a href="#sets-集合-类型及操作-好友推荐、blog、tag功能" class="headerlink" title="sets(集合)类型及操作(好友推荐、blog、tag功能)"></a>sets(集合)类型及操作(好友推荐、blog、tag功能)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smembers myset #查看myset集合中所有元素值。</span><br><span class="line">sadd myset &quot;hello&quot; #向mysets集合中添加一个值hello</span><br><span class="line">srem myset &quot;hello&quot; #删除myset集合中名称为hello的元素。</span><br><span class="line">spop myset #随机弹出并返回mysets中的一个元素。</span><br><span class="line">sdiff myset2 myset3 #返回myset2中的与myset3的差集(以myset2为准)。</span><br><span class="line">sdiffstore myset4 myset2 myset3 #返回myset2中的与myset3的差集,并存入myset4中去。</span><br><span class="line"></span><br><span class="line">sinter myset2 myset3 #返回myset2与myset3的交集。</span><br><span class="line">sinterstore myset5 myset2 myset3 #返回myset2与myset3的交集,并存入myset5中去。</span><br><span class="line">sunion myset2 myset3 #求并集(去重复)</span><br><span class="line">sunionstore myset6 myset2 myset3 #求并集,并存入myset6中去。</span><br><span class="line">smove myset2 myset3 &quot;three&quot; #将myset2中的three移到myset3中去。</span><br><span class="line">scard myset2 #返回元素个数。</span><br><span class="line">sismember myset2 &quot;one&quot; #判断元素one是不是myset2集合的(相当于is_array())。</span><br><span class="line">srandmember myset2 #随机返回myset2集合中的一个元素,但不删除(相当于array_rand())。</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="sorted-sets-有序集合-类型及操作-以scores排序"><a href="#sorted-sets-有序集合-类型及操作-以scores排序" class="headerlink" title="sorted sets(有序集合)类型及操作(以scores排序)"></a>sorted sets(有序集合)类型及操作(以scores排序)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd myzset 1 &quot;one&quot; #向顺序1的添加元素one</span><br><span class="line">zadd myzset 2 &quot;two&quot; #同上。</span><br><span class="line">zadd myzset 3 &quot;two&quot; #相当于更新顺序为2的值</span><br><span class="line">zrange myzset 0 -1 withscores #查看所有元素并带上排序(默认升序)。</span><br><span class="line">zrem myzset &quot;two&quot; #删除two</span><br><span class="line">zincrby myzset 2 &quot;two&quot; #将two的顺序值加上2</span><br><span class="line">zrank myzset &quot;two&quot; #返回集合中元素的索引下标值。</span><br><span class="line">zrank myzset &quot;two&quot; #返回集合中元素的索引下标值。</span><br><span class="line">zrevrank myzset two #元素反转并返回新下标值。</span><br><span class="line">zrevrange myzset 0 -1 withscores #按顺序反转(相当于降序排序)</span><br><span class="line">zrangebyscore myzset 1 10 withscores #返回顺序为1-10的元素(可做分页)。</span><br><span class="line">zcount myzset 1 10 #返回顺序在1-10之间元素的个数。</span><br><span class="line">zcount myzset 1 10 #返回顺序在1-10之间元素的个数。</span><br><span class="line">zcard myzset #返回集合中所有元素的个数。</span><br><span class="line">zremrangebyrank myzset 1 2 #删除集合中下标为1到2的元素。</span><br><span class="line">zremrangebyscore myzset 1 10 #删除集合中顺序为1到10的元素。</span><br></pre></td></tr></table></figure>

<h4 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h4><h5 id="键-值相关命令"><a href="#键-值相关命令" class="headerlink" title="键/值相关命令"></a>键/值相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys * #查询所有</span><br><span class="line">keys user* #查询指定的</span><br><span class="line">exists user:001 #判断是否存在。</span><br><span class="line">del name #删除指定的键。</span><br><span class="line">expire addr 10 #设置过期时间</span><br><span class="line">ttl addr #查询过期时间</span><br><span class="line">select 0 #选择数据库</span><br><span class="line">move age 1 #将age移到1数据库。</span><br><span class="line">get age #获取</span><br><span class="line">persist age #移除age的过期时间。</span><br><span class="line">randomkey #随机返回一个key</span><br><span class="line">rename name1 name2 #重命名键</span><br><span class="line">type myset #返回键的类型。</span><br><span class="line">ping #测试redis连接是否存活。</span><br><span class="line">echo lamp #输出一个lamp</span><br><span class="line">select 10 #选择数据库。</span><br><span class="line">quit/exit/crtl+C #退出客户端</span><br><span class="line">dbsize #返回库里的键的个数。</span><br></pre></td></tr></table></figure>

<h5 id="服务器相关命令"><a href="#服务器相关命令" class="headerlink" title="服务器相关命令"></a>服务器相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info #显示redis服务器的相关信息。</span><br><span class="line">config get */loglevel #返回所有/指定的配置信息。</span><br><span class="line">flushdb #删除当前库中的所有键/表。</span><br><span class="line">flushall #删除所有数据库中的所有键/表</span><br></pre></td></tr></table></figure>

<h3 id="二、Redis高级部分"><a href="#二、Redis高级部分" class="headerlink" title="二、Redis高级部分"></a>二、Redis高级部分</h3><h5 id="1、Redis安全性"><a href="#1、Redis安全性" class="headerlink" title="1、Redis安全性:"></a>1、Redis安全性:</h5><ol>
<li><p>用ACL控制器安全性。</p>
</li>
<li><p>给redis加上较长密码</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># requirepass foobared </span><br><span class="line">requirepass beijing</span><br></pre></td></tr></table></figure></li>
<li><p>在redis.conf配置启用认证功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一: Auth beijing</span><br><span class="line">方式二: ./redis-cli -a beijing</span><br></pre></td></tr></table></figure>
</li>
<li><p>在redis.conf配置文件增加下面这一行配置,即可把redis绑定在单个接口上(但并不是只有接受这个网卡的数据)。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1(单台机器的时候可以配置,分布式或主从复制时最好不要配置)</span><br></pre></td></tr></table></figure></li>
<li><p>SSL代理</p>
</li>
<li><p>禁用指定命令。</p>
</li>
</ol>
<h5 id="2、Redis主从复制"><a href="#2、Redis主从复制" class="headerlink" title="2、Redis主从复制"></a>2、Redis主从复制</h5><blockquote>
<p>redis只需在从服务器(slave)上配置即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof 211.122.11.11 6379 #指定master 的ip 和端口 </span><br><span class="line">masterauth beijing #这是master主机的密码 </span><br><span class="line">Info #查看主/从服务器的状态。</span><br></pre></td></tr></table></figure>
<h5 id="3、Redis事务处理"><a href="#3、Redis事务处理" class="headerlink" title="3、Redis事务处理"></a>3、Redis事务处理</h5><blockquote>
<p>Redis事务很不完善。</p>
</blockquote>
<h5 id="4、Redis持久化机制"><a href="#4、Redis持久化机制" class="headerlink" title="4、Redis持久化机制"></a>4、Redis持久化机制</h5><blockquote>
<p>两种方式</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 备份数据到磁盘(快照)[ snapshotting(快照)也是默认方式]</span><br><span class="line">save 900 1 #900秒内如果超过1个key被修改,则发起快照保存</span><br><span class="line">save 300 10 #300秒内容如超过10个key被修改,则发起快照保存</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">② 记录操作命令[ Append-only file(缩写aof)的方式](较安全持久化) </span><br><span class="line">appendonly yes #启用aof 持久化方式 </span><br><span class="line"># appendfsync always //收到写命令就立即写入磁盘,最慢,但是保证完全的持久化 </span><br><span class="line">appendfsync everysec //每秒钟写入磁盘一次,在性能和持久化方面做了很好的折中</span><br><span class="line"># appendfsync no //完全依赖os,性能最好,持久化没保证</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装Ubuntu16</title>
    <url>/2019/10/28/Redis%E5%AE%89%E8%A3%85Ubuntu16/</url>
    <content><![CDATA[<blockquote>
<p>redis是一种key-value高效的内存数据库。</p>
</blockquote>
<blockquote>
<p>redis是内存数据库，则数据读写和存储都在内存中。该操作不用写入硬盘，读写效率很高。</p>
</blockquote>
<blockquote>
<p>我们可用它作为服务器缓存，对经常读写或不经常更新的数据预先读到内存中。使用该数据时，直接从内存中读取。也可以每隔一段时间再将内存中的数据写入到硬盘。减少与硬盘读写数据的操作，效率自然可以大大提高。</p>
</blockquote>
<h3 id="Ubuntu-Redis安装"><a href="#Ubuntu-Redis安装" class="headerlink" title="Ubuntu Redis安装"></a>Ubuntu Redis安装</h3><blockquote>
<p>redis安装过程，其官网有说明：<a href="https://redis.io/download">https://redis.io/download</a></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wget http://download.redis.io/releases/redis-4.0.6.tar.gz</span><br><span class="line"># tar xzf redis-4.0.6.tar.gz</span><br><span class="line"># cd redis-4.0.6</span><br><span class="line"># make</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编译完成之后，在redis解压目录中，多了src目录</p>
</blockquote>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>
<blockquote>
<p>① 通过指定配置文件启动</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>② 通过命令<code>redis-server</code>启动，在命令后加上<code>&amp;</code>号使redis以后台程序方式运行<code>redis-server &amp;</code></p>
</blockquote>
<blockquote>
<p>客户端登陆<code>redis-cli</code><br>关闭Redis服务<code>redis-cli shutdown</code></p>
</blockquote>
<blockquote>
<p>redis数据库需要开启<code>redis-server</code>，需要安装对应的命令,执行：<code>make install</code></p>
</blockquote>
<blockquote>
<p>6个命令分别作用如下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-benchmark   压力测试工具</span><br><span class="line">redis-check-aof     检查redis持久化命令文件的完整性</span><br><span class="line">redis-check-rdb     检查redis持久化数据文件的完整性</span><br><span class="line">redis-cli                  redis客户端</span><br><span class="line">redis-sentinel         redis-sentinel是集群管理工具,主要负责主从切换。</span><br><span class="line">redis-server            redis服务器的daemon启动程序</span><br></pre></td></tr></table></figure>

<h4 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h4><blockquote>
<p>拷贝配置文件 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp ./utils/redis_init_script /etc/init.d/redisd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编辑redisd</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 服务端所处位置，需要修改</span><br><span class="line">EXEC=/usr/local/bin/redis-server</span><br><span class="line"># 客户端位置，需要修改</span><br><span class="line">CLIEXEC=/usr/local/bin/redis-cli </span><br><span class="line"># 配置文件位置，需要修改</span><br><span class="line">CONF=&quot;/etc/redis/redis.conf&quot;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>设置redis开机启动</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改redis.conf（/etc/redis下）</span><br><span class="line"># 打开后台运行选项</span><br><span class="line">daemonize yes</span><br><span class="line"># 设置日志文件路径</span><br><span class="line">logfile &quot;/var/log/redis/redis.log&quot;</span><br><span class="line">#编写脚本</span><br><span class="line">vim /etc/init.d/redis</span><br><span class="line"></span><br><span class="line"># 添加脚本的执行权限</span><br><span class="line">sudo chmod +x /etc/init.d/redis</span><br><span class="line"></span><br><span class="line"># 设置开机自动启动</span><br><span class="line">sudo update-rc.d redis defaults</span><br></pre></td></tr></table></figure>

<h4 id="出现LSB相关错误"><a href="#出现LSB相关错误" class="headerlink" title="出现LSB相关错误"></a>出现LSB相关错误</h4><blockquote>
<p>解决方法：编辑<code>/etc/init.d/redis</code>,在文件头部<code>#!/bin/sh</code>下面添加:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides: OSSEC HIDS</span><br><span class="line"># Required-Start: $network $remote_fs $syslog $time</span><br><span class="line"># Required-Stop:</span><br><span class="line"># Default-Start: 2 3 4 5</span><br><span class="line"># Default-Stop: 0 1 6</span><br><span class="line"># Short-Description: OSSEC HIDS</span><br><span class="line">### END INIT INFO</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用脚本启动服务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启redis： service redis start</span><br><span class="line">停止redis： service redis stop</span><br><span class="line">重启redis： service redis restart</span><br><span class="line">查看服务状态：service redis status</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><blockquote>
<p>Redis不支持Windows,为了方便开发和调试，需要在Windows中安装Redis，微软自己弄了Redis的Windows版本。</p>
</blockquote>
<blockquote>
<p>打开<a href="https://github.com/MSOpenTech/redis/releases%E4%B8%8B%E8%BD%BDmsi%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://github.com/MSOpenTech/redis/releases下载msi安装包。</a><br>该版本是64位。安装msi过程中，有个选项是否加入系统环境变量，记得勾上。<br>完成之后打开cmd，输入redis-server命令查看是否可以使用。不可以则重启一下即可。</p>
</blockquote>
<blockquote>
<p>直接输入redis-server命令使用的配置文件是安装目录下的redis.windows.conf文件。若提示错误 “ConnectionError: Error 10061 connecting to None:6379”，可以如下操作，打开cmd输入如下命令：<code>redis-cli shutdown</code>,再执行<code>redis-server</code>即可</p>
</blockquote>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Ubuntu</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLalchemy基础 ORM</title>
    <url>/2021/04/01/SQLalchemy%E5%9F%BA%E7%A1%80%20ORM/</url>
    <content><![CDATA[<h3 id="SQLalchemy基础"><a href="#SQLalchemy基础" class="headerlink" title="SQLalchemy基础"></a>SQLalchemy基础</h3><h4 id="一、ORM-概述"><a href="#一、ORM-概述" class="headerlink" title="一、ORM 概述"></a>一、ORM 概述</h4><ul>
<li><p>ORM 框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORM: 关系对象映射</span><br><span class="line">DBAPI: SQLAlchemy只是将类、对象转换为sql语句，交由DBAPI去执行一大堆模块集合，包含pymysql， mysqldb即各种数据库client端api插件</span><br><span class="line">Dialect: 连接数据库的配置文件，记录了连接db要使用的api模块，db主机名、</span><br><span class="line">ConnectionPooling: 数据库连接池</span><br><span class="line">Engine: orm核心</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQLAlchemy 本身无法链接数据库，是其中的 Dialect 使用第三方插件（ pymysql 等）而调用不同数据库的API来实现数据库操作</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用各种底层模块的连接方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MySQL-Python</span><br><span class="line">mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"># pymysql</span><br><span class="line">mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line"># MySQL-Connector</span><br><span class="line">mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"># cx_Oracle</span><br><span class="line">oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</span><br></pre></td></tr></table></figure></li>
<li><p>补充&gt;数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sqlalchemy.dialects.mysql import \</span><br><span class="line">        BIGINT, BINARY, BIT, BLOB, BOOLEAN, CHAR, DATE, \</span><br><span class="line">        DATETIME, DECIMAL, DECIMAL, DOUBLE, ENUM, FLOAT, INTEGER, \</span><br><span class="line">        LONGBLOB, LONGTEXT, MEDIUMBLOB, MEDIUMINT, MEDIUMTEXT, NCHAR, \</span><br><span class="line">        NUMERIC, NVARCHAR, REAL, SET, SMALLINT, TEXT, TIME, TIMESTAMP, \</span><br><span class="line">        TINYBLOB, TINYINT, TINYTEXT, VARBINARY, VARCHAR, YEAR</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="二、基本及操作"><a href="#二、基本及操作" class="headerlink" title="二、基本及操作"></a>二、基本及操作</h4><ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip insall pymyql sqlalchemy</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入的模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sqlalchemy</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line">from sqlalchemy import Column, Integer, String</span><br><span class="line">from sqlalchemy.orm import sessionmaker</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">engine = create_engine(&quot;mysql+pymysql://root:redhat@192.168.10.202/db01?charset=utf8&quot;, echo=True)</span><br><span class="line"># echo 表示是否打印执行过程生成的语句;charset要在?后面写，可以输入中文(外面写不行)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base = declarative_base() # 声明基础类</span><br><span class="line"></span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ = &#x27;user&#x27;  # 表名称</span><br><span class="line">    id = Column(Integer, primary_key=True)</span><br><span class="line">    u_id = Column(Integer, nullable=False)</span><br><span class="line">    u_name = Column(String(32), nullable=False)</span><br><span class="line">    u_pass = Column(String(32), nullable=False)</span><br><span class="line"></span><br><span class="line"># Base.metadata.create_all(engine)</span><br><span class="line"># Base.metadata.drop_all(engine)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：多次执行，不会重复创建，若DB中有该表，那么只是将该表的”表结构”映射给 class；（对表的操作，必须有该表的表结构）</p>
</blockquote>
</li>
</ul>
<ul>
<li>插入数据：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Session_cls = sessionmaker(bind=engine)  #创建与数据库的会话session class ,注意,这里返回给session的是个class,不是实例</span><br><span class="line">Session = Session_cls()  #生成session实例</span><br><span class="line"></span><br><span class="line">obj = User(name=&#x27;user1&#x27;, age=18, favo=&#x27;black&#x27;)  # 增加单条数据</span><br><span class="line">session.add_all([</span><br><span class="line">     User(name=&#x27;user2&#x27;, age=20, favo=&#x27;green&#x27;),</span><br><span class="line">     User(name=&#x27;user3&#x27;, age=30, favo=&#x27;blue&#x27;)</span><br><span class="line"> ])  ## 增加多条数据，[obj1, obj2, obj3]</span><br><span class="line">Session.commit()  ## 提交修改，此时才是真正的创建数据</span><br><span class="line"></span><br><span class="line">## 批量创建</span><br><span class="line">for i in range(10):</span><br><span class="line">    user_obj = User(u_id=i, u_name=&#x27;user-&#x27; + str(i), u_pass=&#x27;passwd-&#x27; + str(i))</span><br><span class="line">    Session.add(user_obj)</span><br><span class="line">Session.commit() </span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="三、查询中的注意问题"><a href="#三、查询中的注意问题" class="headerlink" title="三、查询中的注意问题"></a>三、查询中的注意问题</h4><ul>
<li><p>注意问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query(类名): 查询的结果为对象，每个对象对应表中的一行条目，通过obj.字段 来获取该条目相应字段的值</span><br><span class="line">all(): 讲所有查询到的对象放在一个列表中</span><br><span class="line">first(): 只取回对象列表中的第一个对象</span><br><span class="line">__repr__(): 默认情况下，没有该方法时，print(获取到的对象)，则得到的是对象的内存地址</span><br><span class="line">若有该方法，则print(获取到的对象)，则显示的是该方法的返回值，更加人性化的区别开了各个对象（条目）</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 示例代码</span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ = &#x27;user&#x27;</span><br><span class="line">    id = Column(Integer, primary_key=True)</span><br><span class="line">    u_id = Column(Integer, nullable=False)</span><br><span class="line">    u_name = Column(String(32), nullable=False)</span><br><span class="line">    u_pass = Column(String(32), nullable=False)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        obj_desc = &#x27;&lt;id:&#123;&#125;, name:&#123;&#125;, passwd:&#123;&#125;&gt;&#x27;.format(self.u_id, self.u_name, self.u_pass)</span><br><span class="line">        return obj_desc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Session_cls = sessionmaker(bind=engine)</span><br><span class="line">Session = Session_cls()</span><br><span class="line"></span><br><span class="line">obj_lst = Session.query(User).filter(User.u_name == &#x27;user-1&#x27;).all()</span><br><span class="line">obj_first = Session.query(User).filter(User.u_name == &#x27;user-1&#x27;).first()</span><br><span class="line">print(obj_lst)</span><br><span class="line">print(obj_first.name) # 获取该对象的u_name字段值</span><br><span class="line"># 没有__repr__方法：[&lt;__main__.User object at 0x0000000003EAA8D0&gt;]  print得到的是内存地址</span><br><span class="line"># 有__repr__方法： [&lt;id:1, name:user-1, passwd:passwd-1&gt;]  print得到该方法返回值</span><br></pre></td></tr></table></figure>
</li>
<li><p>多条件查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj_lst = Session.query(User).filter(User.id &gt; 3).filter(User.u_id &lt; 5).all()</span><br><span class="line">for obj in obj_lst:</span><br><span class="line">    print(obj.u_name)</span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">* 数据修改</span><br></pre></td></tr></table></figure>
<h1 id="对象赋值方式"><a href="#对象赋值方式" class="headerlink" title="对象赋值方式"></a>对象赋值方式</h1><p>obj = Session.query(User).filter(User.id &gt; 3).filter(User.u_id &lt; 5).first()<br>obj.u_name = ‘qiaogy’  # 修改即是对该对象字段重新赋值<br>Session.commit()</p>
<h1 id="sql语句方式"><a href="#sql语句方式" class="headerlink" title="sql语句方式"></a>sql语句方式</h1><p>Session.query(User).filter(User.u_name == ‘user-1’).update({User.u_name: ‘est’}, synchronize_session=False)<br>Session.query(User).filter(User.u_name == ‘关羽’).update({User.u_id: User.u_id - 100}, synchronize_session=”evaluate”)<br>Session.commit()</p>
<h1 id="evaluate：默认值，会同时修改当前session会话中的对象属性；False-表示不修改当前会话中的对象属性"><a href="#evaluate：默认值，会同时修改当前session会话中的对象属性；False-表示不修改当前会话中的对象属性" class="headerlink" title="evaluate：默认值，会同时修改当前session会话中的对象属性；False 表示不修改当前会话中的对象属性"></a>evaluate：默认值，会同时修改当前session会话中的对象属性；False 表示不修改当前会话中的对象属性</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 删除数据</span><br></pre></td></tr></table></figure>
<p>Session.query(User).filter(User.u_id &gt; 20).delete()<br>Session.commit()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 数据回滚</span><br></pre></td></tr></table></figure>
<p>fake_user = User(u_id=10, u_name=’Rain’, u_pass=’12345’)<br>Session.add(fake_user)<br>print(Session.query(User).filter(User.u_name.in_([‘Jack’, ‘rain’])).all())  # 这时看session里有你刚添加和修改的数据<br>Session.rollback()<br>print(Session.query(User).filter(User.u_name.in_([‘Jack’, ‘rain’])).all())  # 再查就发现刚才添加的数据没有了。</p>
<h1 id="没有什么暖用，因为不提交，照样不会生效，一提交，回滚也救不了"><a href="#没有什么暖用，因为不提交，照样不会生效，一提交，回滚也救不了" class="headerlink" title="没有什么暖用，因为不提交，照样不会生效，一提交，回滚也救不了"></a>没有什么暖用，因为不提交，照样不会生效，一提交，回滚也救不了</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 统计</span><br></pre></td></tr></table></figure>
<p>from sqlalchemy import func<br>ret = Session.query(User).filter(User.u_id &gt; 9).count()<br>print(ret)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 分组</span><br></pre></td></tr></table></figure>
<p>from sqlalchemy import func<br>ret = Session.query(User.u_name, func.count(User.u_name)).group_by(User.u_name).all()<br>print(ret)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 四、补充 查询问题：</span><br><span class="line">* 映射：query(table.cloumn)</span><br></pre></td></tr></table></figure>
<p>print(obj_lst)</p>
<h2 id="查询结果为：-‘user-6’-‘passwd-6’-‘user-7’-‘passwd-7’-‘user-8’-‘passwd-8’-，-每个对象的各个字段被组织成元组"><a href="#查询结果为：-‘user-6’-‘passwd-6’-‘user-7’-‘passwd-7’-‘user-8’-‘passwd-8’-，-每个对象的各个字段被组织成元组" class="headerlink" title="查询结果为：[(‘user-6’, ‘passwd-6’), (‘user-7’, ‘passwd-7’), (‘user-8’, ‘passwd-8’)]， 每个对象的各个字段被组织成元组"></a>查询结果为：[(‘user-6’, ‘passwd-6’), (‘user-7’, ‘passwd-7’), (‘user-8’, ‘passwd-8’)]， 每个对象的各个字段被组织成元组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 过滤</span><br></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>obj = Session.query(User).filter(User.id == 3).first()  # 条件为表达式格式，可以使用 &gt; &lt; 来表示范围，不能走索引<br>obj = Session.query(User).filter_by(id=3).first()  # 条件为K=V格式，不能取范围，但是可以走索引</p>
</li>
</ul>
<h2 id="filter-范围之-in-between"><a href="#filter-范围之-in-between" class="headerlink" title="filter 范围之 in_, between"></a>filter 范围之 in_, between</h2><p>obj_lst = Session.query(User.u_name).filter(User.id.between(3,5)).all()    # 范围为前闭后闭<br>obj_lst = Session.query(User.u_name).filter(<del>User.id.between(3,5)).all() # 取反<br>obj_lst = Session.query(User.u_name).filter(User.id.in_([3,4,6])).all()        # 值在指定列表中的一个<br>obj_lst = Session.query(User.u_name).filter(</del>User.id.in_([3,4,6])).all()      # 取反</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 逻辑之 and 、or</span><br></pre></td></tr></table></figure>
<p>from sqlalchemy import or_, and_<br>ret = Session.query(User).filter(and_(User.id &gt; 3, User.u_name == ‘user-8’)).all()<br>ret = session.query(User).filter(<br>    or_(User.id &gt; 1,  # 或者id大于1<br>        and_(User.name == ‘user3’, User.id &lt; 4),  # 或者名称为user3 且id小于4<br>        User.favo == ‘blue’,  # 或者颜色为蓝色<br>    )<br>).all()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 通配符 %多个字符，_单个字符</span><br></pre></td></tr></table></figure>
<p>ret = Session.query(User).filter(User.u_name.like(‘qiaog_’)).all()<br>ret = Session.query(User.u_name).filter(User.u_name.like(‘user%’)).all()<br>print(ret)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 排序、限制：</span><br></pre></td></tr></table></figure>
<p>ret = Session.query(User).order_by(User.u_id.desc()).all()<br>ret2 = Session.query(User).order_by(User.u_id.desc()).all()[1:3]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 注意：</span><br></pre></td></tr></table></figure>
<p>sqlalchemy创建的表不能修改表结构，只能重新创建<br>unique 唯一约束：即该字段值不能重复</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>SQLalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlplus 中遇到的问题</title>
    <url>/2019/01/01/SQLyog%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="SQLYog快捷键大全"><a href="#SQLYog快捷键大全" class="headerlink" title="SQLYog快捷键大全"></a>SQLYog快捷键大全</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+M   创建一个新的连接</span><br><span class="line">Ctrl+N   使用当前设置新建连接</span><br><span class="line">Ctrl+F4   断开当前连接</span><br></pre></td></tr></table></figure>

<h3 id="对象浏览器"><a href="#对象浏览器" class="headerlink" title="对象浏览器"></a>对象浏览器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F5   刷新对象浏览器(默认)</span><br><span class="line">Ctrl+B   设置焦点于对象浏览器</span><br></pre></td></tr></table></figure>

<h3 id="SQL-窗口"><a href="#SQL-窗口" class="headerlink" title="SQL 窗口"></a>SQL 窗口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+T   新建查询编辑器</span><br><span class="line">Ctrl+E   设置焦点于 SQL 窗口</span><br><span class="line">Ctrl+Y   重做 </span><br><span class="line">Ctrl+Z   撤销  </span><br><span class="line">Ctrl+X   剪切    </span><br><span class="line">Ctrl+V   粘贴 </span><br><span class="line">Ctrl+H   替换</span><br><span class="line">Ctrl+G   转到</span><br><span class="line">Ctrl+O   在 SQL 窗口打开一个 SQL 文档</span><br><span class="line">Ctrl+Shift+U  使选择内容大写</span><br><span class="line">Ctrl+Shift+L  使选择内容小写</span><br><span class="line">Ctrl+Shift+C  注释 SQL 窗口选择内容</span><br><span class="line">Ctrl+Shift+R  从选择内容删除注释</span><br><span class="line">Ctrl+Shift+T  插入模板</span><br><span class="line">Ctrl+Enter   列出所有的标签</span><br><span class="line">Ctrl+Space  列出匹配的标签</span><br></pre></td></tr></table></figure>

<h3 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F8   执行当前查询并编辑结果集</span><br><span class="line">F9   执行当前查询(默认)</span><br><span class="line">Ctrl+F9   执行选定查询(默认)</span><br><span class="line">Shift+F9     执行全部查询(默认)</span><br></pre></td></tr></table></figure>

<h3 id="粘贴-SQL-语句"><a href="#粘贴-SQL-语句" class="headerlink" title="粘贴 SQL 语句"></a>粘贴 SQL 语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alt+Shift+I  插入语句</span><br><span class="line">Alt+Shift+U  更新语句</span><br><span class="line">Alt+Shift+D  删除语句</span><br><span class="line">Alt+Shift+S  选择语句</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F11   插入更新对话框</span><br><span class="line">Ctrl+R   设置焦点于结果面板中的活动标签</span><br><span class="line">Ctrl+L   切换结果窗口/表数据以表格/文本方式显示 </span><br><span class="line">Ctrl+Alt+C    以 CSV, SQL, Excel 等导出表数据</span><br><span class="line">Ctrl+Alt+E    以 SQL 转储文件备份数据</span><br><span class="line">Ctrl+Shift+M  从 CSV 导入数据</span><br><span class="line">Ctrl+Shift+E  导出结果集</span><br><span class="line">Alt+1...n     在结果窗口中选择第n个标签</span><br></pre></td></tr></table></figure>

<h3 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+1   显示/隐藏 对象浏览器</span><br><span class="line">Ctrl+2   显示/隐藏 结果面板</span><br><span class="line">Ctrl+3   显示/隐藏 查询窗口</span><br></pre></td></tr></table></figure>

<h3 id="数据库-数据表"><a href="#数据库-数据表" class="headerlink" title="数据库/数据表"></a>数据库/数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+D   创建数据库</span><br><span class="line">F6   更改 数据库/数据表的结构/索引/视图/存储过程/函数/触发器/事件</span><br><span class="line">F2   重命名 数据表/视图/触发器/事件 </span><br><span class="line"></span><br><span class="line">Shift+Del    截断 数据库/数据表</span><br><span class="line">F7   管理索引窗口</span><br><span class="line">F10   关联/外键</span><br><span class="line">Ctrl+Alt+R   重新排序字段  </span><br><span class="line">Ctrl+Alt+T   数据表诊断</span><br><span class="line">Ctrl+Alt+F   刷新对话框</span><br><span class="line">Ctrl+Shift+Alt+S 以 HTML 格式创建数据库架构 </span><br><span class="line">Ctrl+Shift+Q  从 SQL 转储文件恢复数据库</span><br></pre></td></tr></table></figure>

<h3 id="增强工具"><a href="#增强工具" class="headerlink" title="增强工具"></a>增强工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+W   数据库同步向导</span><br><span class="line">Ctrl+Q   架构同步工具</span><br><span class="line">Ctrl+Alt+O   数据迁移工具包</span><br><span class="line">Ctrl+Alt+N    通知服务向导</span><br><span class="line">Ctrl+Alt+S    计划备份</span><br><span class="line">Ctrl+K   查询创建器   </span><br><span class="line">Ctrl+Alt+D    架构设计器</span><br></pre></td></tr></table></figure>

<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+U   添加用户</span><br><span class="line">Ctrl+Alt+U   编辑用户 </span><br><span class="line">Ctrl+Shift+W  管理用户权限</span><br></pre></td></tr></table></figure>

<h3 id="个人文件夹"><a href="#个人文件夹" class="headerlink" title="个人文件夹"></a>个人文件夹</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+Shift+F  添加当前 SQL 语句到个人文件夹</span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F1   帮助</span><br><span class="line">F12   快捷键窗口</span><br><span class="line">Ctrl+C   复制 </span><br><span class="line">Ctrl+A   全选</span><br><span class="line">Ctrl+F/F3  查找 (SQL 窗口/以文本方式显示的结果窗口和表数据)  </span><br><span class="line">Ctrl+S   保存 </span><br><span class="line">Ctrl+PgUp  切换到上一标签</span><br><span class="line">Ctrl+PgDown  切换到下一标签</span><br><span class="line">DEL   删除选定</span><br><span class="line">Alt+L   关闭标签</span><br><span class="line">Alt+F4   退出程序</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
        <tag>SQLyog</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks, Shadowsockr 安装使用</title>
    <url>/2021/10/02/Shadowsocks,%20Shadowsockr%20%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Shadowsocks-一键安装脚本（四合一）"><a href="#Shadowsocks-一键安装脚本（四合一）" class="headerlink" title="Shadowsocks  一键安装脚本（四合一）"></a>Shadowsocks  一键安装脚本（四合一）</h3><h4 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="built_in">tee</span> shadowsocks-all.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line"><span class="comment"># 启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</span></span><br><span class="line"><span class="comment"># Shadowsocks-Python 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class="line"></span><br><span class="line"><span class="comment"># ShadowsocksR 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-Go 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-libev 版：</span></span><br><span class="line">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure>

<h4 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Shadowsocks-Python 版：</span></span><br><span class="line">/etc/shadowsocks-python/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># ShadowsocksR 版：</span></span><br><span class="line">/etc/shadowsocks-r/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-Go 版：</span></span><br><span class="line">/etc/shadowsocks-go/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shadowsocks-libev 版：</span></span><br><span class="line">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>

<h4 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</span></span><br><span class="line"><span class="comment"># 使用root用户登录，运行以下命令：</span></span><br><span class="line">./shadowsocks-all.sh uninstall</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a></p>
<p>ishadow：<a href="https://d.ishadowx.com/">https://d.ishadowx.com</a></p>
<h2 id="Shadowsockr"><a href="#Shadowsockr" class="headerlink" title="Shadowsockr"></a>Shadowsockr</h2><h3 id="1-安装ssr"><a href="#1-安装ssr" class="headerlink" title="1. 安装ssr"></a>1. 安装ssr</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.djangoz.com/ssr</span><br><span class="line">sudo <span class="built_in">mv</span> ssr /usr/local/bin</span><br><span class="line">sudo <span class="built_in">chmod</span> 766 /usr/local/bin/ssr</span><br><span class="line">ssr install</span><br><span class="line">ssr config</span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般修改以下6项:</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,     //服务器ip</span><br><span class="line"><span class="string">&quot;server_port&quot;</span>:8388,     //端口</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;m&quot;</span>,    //密码</span><br><span class="line"><span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;origin&quot;</span>,    //协议插件</span><br><span class="line"><span class="string">&quot;obfs&quot;</span>:<span class="string">&quot;http_simple&quot;</span>,   //混淆插件</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>, //加密方式</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-polipo-安装"><a href="#2-polipo-安装" class="headerlink" title="2. polipo 安装"></a>2. polipo 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install polipo</span><br></pre></td></tr></table></figure>

<h5 id="修改配置文件-etc-polipo-config"><a href="#修改配置文件-etc-polipo-config" class="headerlink" title="修改配置文件/etc/polipo/config"></a>修改配置文件/etc/polipo/config</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="comment"># from the default values. See /usr/share/doc/polipo/examples/config.sample </span></span><br><span class="line"><span class="comment"># and &quot;polipo -v&quot; for variables you can tweak and further information. </span></span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">proxyAddress = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment">#proxyPort = 8123</span></span><br><span class="line"><span class="comment">#allowedClients = 192.168.31.0/24,192.168.1.0/24  #允许使用代理的客户</span></span><br><span class="line"><span class="comment">#daemonise = true</span></span><br><span class="line"></span><br><span class="line">socksParentProxy = <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="重启polipo服务"><a href="#重启polipo服务" class="headerlink" title="重启polipo服务"></a>重启polipo服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service polipo restart</span><br><span class="line">或</span><br><span class="line">/etc/init.d/polipo start</span><br></pre></td></tr></table></figure>

<h5 id="设置环境变量-bashrc"><a href="#设置环境变量-bashrc" class="headerlink" title="设置环境变量~/.bashrc"></a>设置环境变量~/.bashrc</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在~/.bashrc下添加</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:8123&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:8123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="ssr-config"><a href="#ssr-config" class="headerlink" title="ssr config"></a>ssr config</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;: &quot;149.248.34.161&quot;,</span><br><span class="line">    &quot;server_ipv6&quot;: &quot;::&quot;,</span><br><span class="line">    &quot;server_port&quot;: 2333,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;: 1080,</span><br><span class="line"></span><br><span class="line">    &quot;password&quot;: &quot;sdjiwn;zalsdlsa[pojas;dkjSDsdklas;_-SAkljsd&quot;,</span><br><span class="line">    &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;protocol&quot;: &quot;auth_sha1_v4&quot;,</span><br><span class="line">    &quot;protocol_param&quot;: &quot;&quot;,</span><br><span class="line">    &quot;obfs&quot;: &quot;plain&quot;,</span><br><span class="line">    &quot;obfs_param&quot;: &quot;&quot;,</span><br><span class="line">    &quot;speed_limit_per_con&quot;: 0,</span><br><span class="line">    &quot;speed_limit_per_user&quot;: 0,</span><br><span class="line"></span><br><span class="line">    &quot;additional_ports&quot; : &#123;&#125;, // only works under multi-user mode</span><br><span class="line">    &quot;additional_ports_only&quot; : false, // only works under multi-user mode</span><br><span class="line">    &quot;timeout&quot;: 120,</span><br><span class="line">    &quot;udp_timeout&quot;: 60,</span><br><span class="line">    &quot;dns_ipv6&quot;: false,</span><br><span class="line">    &quot;connect_verbose_info&quot;: 0,</span><br><span class="line">    &quot;redirect&quot;: &quot;&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>Ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell编程语法</title>
    <url>/2020/10/01/Shell%E7%BC%96%E7%A8%8B%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="shell-编程"><a href="#shell-编程" class="headerlink" title="shell 编程"></a>shell 编程</h2><h3 id="单引号字符串的限制"><a href="#单引号字符串的限制" class="headerlink" title="单引号字符串的限制"></a>单引号字符串的限制</h3><ol>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li>
</ol>
<h3 id="双引号的优点"><a href="#双引号的优点" class="headerlink" title="双引号的优点"></a>双引号的优点</h3><ol>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ol>
<h3 id="Linux-字符串截取（八种方法）"><a href="#Linux-字符串截取（八种方法）" class="headerlink" title="Linux 字符串截取（八种方法）"></a>Linux 字符串截取（八种方法）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设有变量</span></span><br><span class="line">var=http://www.aaa.com/123.htm</span><br><span class="line">① <span class="string">&#x27;#&#x27;</span>号截取，删除左边字符，保留右边字符</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var#*//&#125;</span> </span><br><span class="line"><span class="comment"># 其中 var 是变量名，# 号是运算符，</span></span><br><span class="line"><span class="comment"># *// 表示从左边开始删除第一个 // 号及左边的所有字符，即删除 http://，</span></span><br><span class="line"><span class="comment"># 结果是 ：www.aaa.com/123.htm</span></span><br><span class="line"></span><br><span class="line">② <span class="string">&#x27;##&#x27;</span>号截取，删除左边字符，保留右边字符</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var##*/&#125;</span> </span><br><span class="line"><span class="comment"># ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符，即删除 http://www.aaa.com/，</span></span><br><span class="line"><span class="comment"># 结果是 123.htm</span></span><br><span class="line"></span><br><span class="line">③ <span class="string">&#x27;%&#x27;</span>号截取，删除右边字符，保留左边字符</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var%/*&#125;</span> </span><br><span class="line"><span class="comment"># %/* 表示从右边开始，删除第一个 / 号及右边的字符</span></span><br><span class="line"><span class="comment"># 结果是：http://www.aaa.com</span></span><br><span class="line"></span><br><span class="line">④ <span class="string">&#x27;%%&#x27;</span>号截取，删除右边字符，保留左边字符</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var%%/*&#125;</span></span><br><span class="line"><span class="comment"># %%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符，</span></span><br><span class="line"><span class="comment"># 结果是：http:</span></span><br><span class="line"></span><br><span class="line">⑤ 从左边第几个字符开始，及字符的个数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:0:5&#125;</span></span><br><span class="line"><span class="comment"># 其中的 0 表示左边第一个字符开始，5 表示字符的总个数，</span></span><br><span class="line"><span class="comment"># 结果是：http:</span></span><br><span class="line"></span><br><span class="line">⑥ 从左边第几个字符开始，一直到结束。</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:7&#125;</span></span><br><span class="line"><span class="comment"># 其中的 7 表示左边第8个字符开始，一直到结束</span></span><br><span class="line"><span class="comment"># 结果是 ：www.aaa.com/123.htm</span></span><br><span class="line"></span><br><span class="line">⑦ 从右边第几个字符开始，及字符的个数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:0-7:3&#125;</span></span><br><span class="line"><span class="comment"># 其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数，</span></span><br><span class="line"><span class="comment"># 结果是：123</span></span><br><span class="line"></span><br><span class="line">⑧ 从右边第几个字符开始，一直到结束</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:0-7&#125;</span></span><br><span class="line"><span class="comment"># 表示从右边第七个字符开始，一直到结束，</span></span><br><span class="line"><span class="comment"># 结果是：123.htm</span></span><br><span class="line"></span><br><span class="line">注：（左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）</span><br></pre></td></tr></table></figure>

<h3 id="变量的特殊操作"><a href="#变量的特殊操作" class="headerlink" title="变量的特殊操作"></a>变量的特殊操作</h3><blockquote>
<p>BASH 中还有一些对变量的简洁、快速的操作，如 “${var}” 和 “$var” 同样是对变量的引用，对 ${var} 进行一些变化就可以产生一些新功能：</p>
</blockquote>
<table>
<thead>
<tr>
<th>变量操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>${var-default}</td>
<td>表示如果变量 $var 还没有设置，则保持 $var 没有设置的状态，并返回后面的默认值 default。</td>
</tr>
<tr>
<td>${var=default}</td>
<td>表示如果变量 $var 还没有设置，则取后面的默认值 default。</td>
</tr>
<tr>
<td>${var+otherwise}</td>
<td>表示如果变量 $var 已经设置，则返回 otherwise 的值，否则返回空( null )。</td>
</tr>
<tr>
<td>${var?err_msg}</td>
<td>表示如果变量 $var 已经设置，则返回该变量的值，否则将后面的 err_msg 输出到标准错误输出上。</td>
</tr>
</tbody></table>
<blockquote>
<p>还有下面一些用法，这些用法主要用于从文件路径字符串中提取有用信息：</p>
</blockquote>
<table>
<thead>
<tr>
<th>变量操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>${var#pattern}, ${var##pattern}</td>
<td>用于从变量 $var 中剥去最短（最长）的和 pattern 相匹配的最左侧的串。</td>
</tr>
<tr>
<td>${var%pattern}, ${var%%pattern}</td>
<td>用于从变量 $var 中剥去最短（最长）的和 pattern 相匹配的最右侧的串。</td>
</tr>
<tr>
<td>${var:pos}</td>
<td>表示去掉变量 $var 中前 pos 个字符。</td>
</tr>
<tr>
<td>${var:pos:len}</td>
<td>表示变量 $var 中去掉前 pos 个字符后的剩余字符串的前 len 个字符。</td>
</tr>
<tr>
<td>${var/pattern/replacement}</td>
<td>表示将变量 $var 中第一个出现的 pattern 模式替换为 replacement 字符串。</td>
</tr>
<tr>
<td>${var//pattern/replacement}</td>
<td>表示将变量 $var 中出现的所有 pattern 模式全部都替换为 replacment 字符串。</td>
</tr>
</tbody></table>
<h3 id="shell参数传递"><a href="#shell参数传递" class="headerlink" title="shell参数传递"></a>shell参数传递</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$IFS</td>
<td>这个变量中保存了用于分割输入参数的分割字符，默认识空格。</td>
</tr>
<tr>
<td>$HOME</td>
<td>这个变量中存储了当前用户的根目录路径。</td>
</tr>
<tr>
<td>$PATH</td>
<td>这个变量中存储了当前 Shell 的默认路径字符串。</td>
</tr>
<tr>
<td>$PS1</td>
<td>表示第一个系统提示符。</td>
</tr>
<tr>
<td>$PS2</td>
<td>表示的二个系统提示符。</td>
</tr>
<tr>
<td>$PWD</td>
<td>表示当前工作路径。</td>
</tr>
<tr>
<td>$EDITOR</td>
<td>表示系统的默认编辑器名称。</td>
</tr>
<tr>
<td>$BASH</td>
<td>表示当前 Shell 的路径字符串。</td>
</tr>
<tr>
<td>$0</td>
<td>表示当前脚本的名称</td>
</tr>
<tr>
<td>$n</td>
<td>表示传递脚本的弟n个参数</td>
</tr>
<tr>
<td>$#</td>
<td>表示传递到脚本的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>表示以一个单字符串显示所有向脚本传递的参数。如”$*”以”$1 $2 … $n”的形式输出所有参数</td>
</tr>
<tr>
<td>$$</td>
<td>表示脚本运行的当前进程ID号，常用于生成文件名唯一的临时文件。</td>
</tr>
<tr>
<td>$!</td>
<td>表示最近一个在后台运行的进程的进程号</td>
</tr>
<tr>
<td>$@</td>
<td>与$<em>相同，但是使用时加引号，比 $</em> 更安全, 并在引号中返回每个参数。 如”$@”以”$1” “$2” … “$n” 的形式输出所有参数</td>
</tr>
<tr>
<td>$-</td>
<td>表示保存之前执行的命令的最后一个参数，显示Shell使用的当前选项，与set命令功能相同。</td>
</tr>
<tr>
<td>$?</td>
<td>表示显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误</td>
</tr>
</tbody></table>
<h3 id="shell文件中-标识后面指定解释器的绝对路径"><a href="#shell文件中-标识后面指定解释器的绝对路径" class="headerlink" title="shell文件中#!标识后面指定解释器的绝对路径"></a>shell文件中#!标识后面指定解释器的绝对路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参看本机默认shell解释器：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"><span class="comment"># bash版本：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$BASH_VERSION</span></span><br><span class="line"></span><br><span class="line">在shell中执行命令，用$(命令)或者`命令` ,其中``为反引号。</span><br></pre></td></tr></table></figure>

<h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 使用expr外部程序</span><br><span class="line">② 使用$((...))</span><br><span class="line">③ 使用$[...]</span><br><span class="line">④ 使用let命令</span><br><span class="line">shell中使用shift命令可使得脚本的所有的位置参数向左移动一个位置（shift会影响到系统变量$#的值）。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 赋值运算时，等号&quot;=&quot;两边不能有空格，否则，Shell会把空格前的字符当做Shell命令。</span><br><span class="line">   在测试运算时，&quot;=&quot;、&quot;!=&quot;、&quot;-z&quot; 等符号的左右两边一定要含有空格。</span><br><span class="line">2. 空命令&quot;:&quot; 的退出状态永远是0。</span><br><span class="line">3. BASH 中的语句结尾不需要分号（&quot;;&quot;）</span><br></pre></td></tr></table></figure>

<h3 id="BASH-的基本语法"><a href="#BASH-的基本语法" class="headerlink" title="BASH 的基本语法"></a>BASH 的基本语法</h3><h4 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h4><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>==</td>
<td>相等。用于比较两个数字，相同则返回 true。</td>
</tr>
<tr>
<td>!=</td>
<td>不相等。用于比较两个数字，不相同则返回 true。</td>
</tr>
</tbody></table>
<p><strong>注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]</strong></p>
<h5 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h5><blockquote>
<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-eq</td>
<td>检测两个数是否相等，相等返回 true。</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否相等，不相等返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
</tr>
</tbody></table>
<h5 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>
</tr>
<tr>
<td>-o</td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
</tr>
</tbody></table>
<h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑的 AND</td>
</tr>
<tr>
<td>||</td>
<td>逻辑的 OR</td>
</tr>
</tbody></table>
<h5 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>检测两个字符串是否相等，相等返回 true。</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等，不相等返回 true。</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回 true。</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回 true。</td>
</tr>
<tr>
<td>str</td>
<td>检测字符串是否为空，不为空返回 true。</td>
</tr>
</tbody></table>
<h5 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h5><table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td>file 检测文件是否是块设备文件，如果是，则返回 true。</td>
</tr>
<tr>
<td>-c</td>
<td>file 检测文件是否是字符设备文件，如果是，则返回 true。</td>
</tr>
<tr>
<td>-d</td>
<td>file 检测文件是否是目录，如果是，则返回 true。</td>
</tr>
<tr>
<td>-f</td>
<td>file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>
</tr>
<tr>
<td>-g</td>
<td>file 检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
</tr>
<tr>
<td>-k</td>
<td>file 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
</tr>
<tr>
<td>-p</td>
<td>file 检测文件是否是有名管道，如果是，则返回 true。</td>
</tr>
<tr>
<td>-u</td>
<td>file 检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
</tr>
<tr>
<td>-r</td>
<td>file 检测文件是否可读，如果是，则返回 true。</td>
</tr>
<tr>
<td>-w</td>
<td>file 检测文件是否可写，如果是，则返回 true。</td>
</tr>
<tr>
<td>-x</td>
<td>file 检测文件是否可执行，如果是，则返回 true。</td>
</tr>
<tr>
<td>-s</td>
<td>file 检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
</tr>
<tr>
<td>-e</td>
<td>file 检测文件（包括目录）是否存在，如果是，则返回 true。</td>
</tr>
<tr>
<td>-O</td>
<td>file 文件 file 是属于当前用户的</td>
</tr>
<tr>
<td>-G</td>
<td>file 文件 file 的组 ID 和当前用户相同</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">比较字符串 a 和 b 是否相等：if [ $a = $b ]</span><br><span class="line">判断字符串 a 是否为空： if [ -z $a ]</span><br><span class="line">判断整数变量 a 是否大于 b ：if [ $a -gt $b ]</span><br></pre></td></tr></table></figure>

<p><strong>随机数</strong></p>
<blockquote>
<p>随机数是经常要用到的，BASH 中也提供了这个功能，<br>如下程序：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prints different random integer from 1 to 65536</span></span><br><span class="line"></span><br><span class="line">a=<span class="variable">$RANDOM</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="comment"># 这个程序可以在每次执行的时候随机的打印出一个大小在 1 到 65536 之间</span></span><br></pre></td></tr></table></figure>


<h3 id="BASH-基本流程控制语法"><a href="#BASH-基本流程控制语法" class="headerlink" title="BASH 基本流程控制语法"></a>BASH 基本流程控制语法</h3><p><strong>① if…then…else</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># if 语句用于判断和分支，其语法规则和 C语言的 if 非常相似。</span><br><span class="line"># 其几种基本结构为：</span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">statments</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">statments</span><br><span class="line">else</span><br><span class="line">statments</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">statments</span><br><span class="line">else if [ expression ]</span><br><span class="line">then</span><br><span class="line">statments</span><br><span class="line">else</span><br><span class="line">statments</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">statments</span><br><span class="line">elif [ expression ]</span><br><span class="line">then</span><br><span class="line">statments</span><br><span class="line">else</span><br><span class="line">statments</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">注：将 if 和 then 写在一行时必须在 then 前面加上分号，</span><br><span class="line">    如：if [ expression ]; then ...</span><br></pre></td></tr></table></figure>

<p><strong>② for</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for 循环结构与 C语言中有所不同，在 BASH 中 for 循环的基本结构是：</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">statments</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 其中 var 是循环控制变量，是var 需要遍历的一个集合，引用用$var，do/done 对包含了循环体，相当于 C 语言中的一对大括号。</span></span><br></pre></td></tr></table></figure>

<p><strong>③ while</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while 循环的基本结构是：</span></span><br><span class="line"><span class="keyword">while</span> [ condition ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">statments</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><strong>④ until</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># until 循环的基本结构是：</span><br><span class="line">until [ condition is TRUE ]</span><br><span class="line">do</span><br><span class="line">statments</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>⑤ case</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># BASH 中的 case 结构与 C 语言中的 switch 语句的功能比较类似，可以用于进行多项分支控制。</span><br><span class="line"># 其基本结构是：</span><br><span class="line">case &quot;$var&quot; in</span><br><span class="line">condition1 )</span><br><span class="line">  statments1;;</span><br><span class="line">condition2 )</span><br><span class="line">  statments2;;</span><br><span class="line">...</span><br><span class="line">* )</span><br><span class="line">default </span><br><span class="line">  statments;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><strong>⑥  break/continue</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">熟悉 C 语言编程的都很熟悉 break 语句和 continue 语句。</span><br><span class="line">BASH 中同样有这两条语句，而且作用和用法也和 C 语言中相同，</span><br><span class="line">break 语句可以让程序流程从当前循环体中完全跳出，</span><br><span class="line">而 continue 语句可以跳过当次循环的剩余部分并直接进入下一次循环。</span><br></pre></td></tr></table></figure>


<h3 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h3><blockquote>
<p>BASH 是一个相对简单的脚本语言，不过为了方便结构化的设计，BASH 中也提供了函数定义的功能。</p>
</blockquote>
<blockquote>
<p>BASH 中的函数定义很简单：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> my_funcname &#123;</span><br><span class="line">code block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="function"><span class="title">my_funcname</span></span>() &#123;</span><br><span class="line">code block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>BASH 中要求函数的定义必须在函数使用之前，BASH 中函数参数的定义并不需要在函数定义处就制定，而只需要在函数被调用时用 BASH 的保留变量 $1 $2 … 来引用就可以了；</p>
</blockquote>
<blockquote>
<p>BASH 的返回值可以用 return 语句来指定返回一个特定的整数，如果没有 return 语句显式的返回一个返回值，则返回值就是该函数最后一条语句执行的结果（一般为 0，如果执行失败返回错误码）。</p>
</blockquote>
<blockquote>
<p>函数的返回值在调用该函数的程序体中通过 $?  保留字来获得。</p>
</blockquote>
<blockquote>
<p>如：用函数来计算整数平方：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">square</span></span>() &#123;</span><br><span class="line"><span class="built_in">let</span> <span class="string">&quot;res = <span class="variable">$1</span> * <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">return</span> <span class="variable">$res</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square <span class="variable">$1</span></span><br><span class="line">result=$?</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<h3 id="tomcat启动脚本"><a href="#tomcat启动脚本" class="headerlink" title="tomcat启动脚本"></a>tomcat启动脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"> </span><br><span class="line">if [ $# -ne 2 ];then</span><br><span class="line">    echo &quot;输入的参数数目不正确！&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">num=$1</span><br><span class="line">cmd=$2</span><br><span class="line"> </span><br><span class="line">case $cmd in</span><br><span class="line">    &quot;start&quot;)</span><br><span class="line">    echo &quot;tomcat$num启动。。。&quot;</span><br><span class="line">    bash /usr/local/tomcat/apache-tomcat-9.0.0.M3_$num/bin/startup.sh</span><br><span class="line">    ;;</span><br><span class="line">    &quot;stop&quot;)</span><br><span class="line">    echo &quot;tomcat$num停止。。。&quot;</span><br><span class="line">    bash /usr/local/tomcat/apache-tomcat-9.0.0.M3_$num/bin/shutdown.sh</span><br><span class="line">    ;;</span><br><span class="line">    &quot;restart&quot;)</span><br><span class="line">    echo &quot;tomcat$num重启中。。。&quot;</span><br><span class="line">    bash /usr/local/tomcat/apache-tomcat-9.0.0.M3_$num/bin/shutdown.sh</span><br><span class="line">    bash /usr/local/tomcat/apache-tomcat-9.0.0.M3_$num/bin/startup.sh</span><br><span class="line">    ;;</span><br><span class="line">    &quot;show&quot;)</span><br><span class="line">    ps -ef | grep tomcat</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    echo &quot;输入的指令错误！&quot;   </span><br><span class="line">    ;;   </span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket编程 TCP、UDP实例（Python）</title>
    <url>/2018/12/23/Socket%E7%BC%96%E7%A8%8B%20TCP%E3%80%81UDP%E5%AE%9E%E4%BE%8B%EF%BC%88Python%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Socket编程-TCP、UDP实例（Python）"><a href="#Socket编程-TCP、UDP实例（Python）" class="headerlink" title="Socket编程 TCP、UDP实例（Python）"></a>Socket编程 TCP、UDP实例（Python）</h2><h3 id="TCP-示例"><a href="#TCP-示例" class="headerlink" title="TCP 示例"></a>TCP 示例</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">DATA_FILE = <span class="string">&quot;/opt/logs/data.log&quot;</span></span><br><span class="line">BUF_SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadingTCPHandler</span>(socketserver.StreamRequestHandler):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = self.request.recv(BUF_SIZE).strip()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 保存到文件</span></span><br><span class="line">                self.save_data_to_file(data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError <span class="keyword">as</span> cre:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;客户端&quot;</span> + <span class="built_in">repr</span>(self.client_address) + <span class="string">&#x27;关闭 &gt;&gt;&gt;&#x27;</span> + <span class="built_in">repr</span>(cre))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">except</span> TimeoutError:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> (Exception, OSError) <span class="keyword">as</span> exc:</span><br><span class="line">                traceback.print_exc()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;执行异常 &gt;&gt;&gt; &#x27;</span> + <span class="built_in">repr</span>(exc))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_data_to_file</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存到文件</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = <span class="string">&quot;&#123;2&#125;, &#123;0:s&#125;: &#123;1:s&#125; \n&quot;</span>.<span class="built_in">format</span>(self.client_address[<span class="number">0</span>], data, datetime.now())</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(DATA_FILE, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadingTCPServer</span>(socketserver.ThreadingTCPServer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">server_bind</span>(<span class="params">self</span>):</span><br><span class="line">        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.socket.bind(self.server_address)</span><br><span class="line">        <span class="comment"># Set TCP keepalive on an open socket.</span></span><br><span class="line">        <span class="comment">#  It activates after 120 second of idleness,</span></span><br><span class="line">        <span class="comment">#  then sends a keepalive ping once every 5 seconds,</span></span><br><span class="line">        <span class="comment">#  and closes the connection after 3 failed ping, or 15 seconds</span></span><br><span class="line">        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, <span class="number">1</span>)</span><br><span class="line">        self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, <span class="number">120</span>)</span><br><span class="line">        self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPINTVL, <span class="number">5</span>)</span><br><span class="line">        self.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPCNT, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">host_, port_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start Server: %s:%s&quot;</span> % (host_, port_))</span><br><span class="line">    server = MyThreadingTCPServer((host_, port_), ThreadingTCPHandler)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;handle server &#x27;</span> + <span class="built_in">repr</span>(exc))</span><br><span class="line">    server.server_close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    port = <span class="number">9000</span></span><br><span class="line">    start_server(host, port)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;server&quot;</span>, HOST)</span><br><span class="line">    client.connect((HOST, PORT))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        byte_test = <span class="string">b&#x27;\x01W\x19\x18\x01\x16\x14\x11\x06\x00\x02\x01\x19\n\x00\xa5\x03\x001\x11\x11\x11\x11\x11\x1f&#x27;</span></span><br><span class="line">        client.sendall(byte_test)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    client.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="UDP示例"><a href="#UDP示例" class="headerlink" title="UDP示例"></a>UDP示例</h3><h4 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">DATA_FILE = <span class="string">&quot;/opt/logs/data.log&quot;</span></span><br><span class="line">BUF_SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadingUDPHandler</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;udp服务端多进程&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.request[<span class="number">1</span>].recv(BUF_SIZE)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(datetime.now(), self.client_address, <span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(data))</span><br><span class="line">            <span class="comment"># data = self.request[0]</span></span><br><span class="line">            <span class="comment"># print(str(data))</span></span><br><span class="line">            <span class="comment"># print(self.client_address, self.request[1])</span></span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="comment"># mag =input(&#x27;&gt;&gt;&gt;:&#x27;).strip()</span></span><br><span class="line">            <span class="comment"># self.request[1].sendto(mag.encode(&#x27;utf-8&#x27;),self.client_address)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">host_, port_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start UDP Server: %s:%s&quot;</span> % (host_, port_))</span><br><span class="line">    ip_port = (host_, port_)</span><br><span class="line">    server = socketserver.ThreadingUDPServer(ip_port, ThreadingUDPHandler)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;handle server &#x27;</span> + <span class="built_in">repr</span>(e))</span><br><span class="line">    server.server_close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    port = <span class="number">9000</span></span><br><span class="line">    start_server(host, port)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;server&quot;</span>, HOST)</span><br><span class="line">    ip_port = (HOST, PORT)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        test_str = <span class="string">&#x27;测试&#x27;</span></span><br><span class="line">        byte_test = <span class="built_in">bytes</span>(test_str, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        client.sendto(byte_test, ip_port)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    client.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot集成SNMP</title>
    <url>/2022/03/01/Springboot%E9%9B%86%E6%88%90SNMP/</url>
    <content><![CDATA[<h2 id="Springboot集成SNMP"><a href="#Springboot集成SNMP" class="headerlink" title="Springboot集成SNMP"></a>Springboot集成SNMP</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.snmp4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;snmp4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、初始化SNMP"><a href="#2、初始化SNMP" class="headerlink" title="2、初始化SNMP"></a>2、初始化SNMP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class SnmpReceiver implements CommandResponder &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ServerConfig serverConfig;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SnmpService snmpService;</span><br><span class="line"></span><br><span class="line">    private Snmp snmp;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化snmp</span><br><span class="line">     */</span><br><span class="line">    private void init() throws Exception &#123;</span><br><span class="line">        ThreadPool threadPool = ThreadPool.create(serverConfig.getThreadPoolName(), serverConfig.getThreadPoolSize());</span><br><span class="line"></span><br><span class="line">        // 初始化多线程消息转发类</span><br><span class="line">        MultiThreadedMessageDispatcher dispatcher = new MultiThreadedMessageDispatcher(threadPool, new MessageDispatcherImpl());</span><br><span class="line">        String addr = String.format(&quot;%s:%s/%s&quot;, serverConfig.getProtocol(), serverConfig.getIp(), serverConfig.getPort());</span><br><span class="line">        Address listenAddress = GenericAddress.parse(addr); // 本地IP与监听端口</span><br><span class="line"></span><br><span class="line">        TransportMapping&lt;?&gt; transport = null;</span><br><span class="line">        // 创建transportMapping，对TCP与UDP协议进行处理</span><br><span class="line">        if (listenAddress instanceof UdpAddress) &#123;</span><br><span class="line">            transport = new DefaultUdpTransportMapping((UdpAddress) listenAddress);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            transport = new DefaultTcpTransportMapping((TcpAddress) listenAddress);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 创建snmp</span><br><span class="line">        snmp = new Snmp(dispatcher, transport);</span><br><span class="line">        // 其中要增加三种处理模型。如果snmp初始化使用的是Snmp(TransportMapping&lt;? extends Address&gt; transportMapping) ,就不需要增加</span><br><span class="line">        snmp.getMessageDispatcher().addMessageProcessingModel(new MPv1());</span><br><span class="line">        snmp.getMessageDispatcher().addMessageProcessingModel(new MPv2c());</span><br><span class="line">        // 当要支持snmpV3版本时，需要配置user</span><br><span class="line">        USM usm = new USM(SecurityProtocols.getInstance(), new OctetString(MPv3.createLocalEngineID()), 0);</span><br><span class="line">        UsmUser user = new UsmUser(new OctetString(serverConfig.getSecurityName()), AuthMD5.ID, new OctetString(serverConfig.getAuthPass()), PrivDES.ID, new OctetString(serverConfig.getPrivacyPass()));</span><br><span class="line">        usm.addUser(user.getSecurityName(), user);</span><br><span class="line">        SecurityModels.getInstance().addSecurityModel(usm);</span><br><span class="line">        snmp.getMessageDispatcher().addMessageProcessingModel(new MPv3());</span><br><span class="line"></span><br><span class="line">        // 监听</span><br><span class="line">        snmp.listen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动进程</span><br><span class="line">     */</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            init();</span><br><span class="line">            snmp.addCommandResponder(this);</span><br><span class="line">            log.info(&quot;开始监听SNMP-Trap信息&quot;);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 当监听到消息时，会自动调用该方法</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void processPdu(CommandResponderEvent respEvent) &#123;</span><br><span class="line">        if (respEvent == null || respEvent.getPDU() == null) &#123;</span><br><span class="line">            log.warn(&quot;未监听到消息！&quot;);</span><br><span class="line">        &#125; else if (respEvent.getPDU().getType() != PDU.TRAP) &#123;</span><br><span class="line">            log.warn(&quot;仅支持Trap消息！&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Vector&lt;? extends VariableBinding&gt; recVBs = respEvent.getPDU().getVariableBindings();</span><br><span class="line">            log.info(String.format(&quot;Type TRAP   : %s&quot;, respEvent.getPDU().getType() == PDU.TRAP));</span><br><span class="line">            log.info(String.format(&quot;Address     : %s&quot;, respEvent.getPeerAddress()));</span><br><span class="line">            log.info(String.format(&quot;Community   : %s&quot;, new String(respEvent.getSecurityName())));</span><br><span class="line">            log.info(String.format(&quot;Variable    : %s&quot;, recVBs));</span><br><span class="line"></span><br><span class="line">            ConcurrentHashMap&lt;String, Object&gt; map = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">            for (int i = 0; i &lt; recVBs.size(); i++) &#123;</span><br><span class="line">                VariableBinding recVB = recVBs.elementAt(i);</span><br><span class="line">                // map.put(recVB.getOid().toString(), recVB.getVariable().toString());</span><br><span class="line">                map.put(recVB.getOid().toString(), recVB.toValueString());</span><br><span class="line">            &#125;</span><br><span class="line">            snmpService.handlerSnmpData(map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、监听Trap消息"><a href="#3、监听Trap消息" class="headerlink" title="3、监听Trap消息"></a>3、监听Trap消息</h3><p>实现ApplicationRunner接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication(scanBasePackages = &#123;&quot;com.h3c&quot;&#125;)</span><br><span class="line">@EnableTransactionManagement</span><br><span class="line">@EnableAsync</span><br><span class="line">public class NoticeApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication app = new SpringApplication(NoticeApplication.class);</span><br><span class="line">        app.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">    // 其他省略</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SnmpReceiver snmpReceiver;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ApplicationRunner startSnmpReceiver() &#123;</span><br><span class="line">        return args -&gt; snmpReceiver.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、解析Trap消息"><a href="#4、解析Trap消息" class="headerlink" title="4、解析Trap消息"></a>4、解析Trap消息</h3><p>接收到Trap信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Type TRAP   : true</span><br><span class="line">Address     : 192.168.11.34/38952</span><br><span class="line">Community   : private</span><br><span class="line">Variable    : [1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82, 1.3.6.1.6.3.1.1.4.1.0 = 1.3.6.1.4.1.25506.4.2.26.2.6.9, 1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82, 1.3.6.1.4.1.25506.4.2.26.1.3 = 1, 1.3.6.1.4.1.25506.4.2.26.1.9 = sda, 1.3.6.1.4.1.25506.4.2.26.1.12 = 276, 1.3.6.1.4.1.25506.4.2.26.1.13 = 100, 1.3.6.1.4.1.25506.4.2.26.1.1 = cvknode1, 1.3.6.1.4.1.25506.4.2.26.1.2 = 192.168.11.34]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来的主要工作解析Variable中参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82</span><br><span class="line">1.3.6.1.6.3.1.1.4.1.0 = 1.3.6.1.4.1.25506.4.2.26.2.6.9</span><br><span class="line">1.3.6.1.2.1.1.3.0 = 7 days, 7:11:17.82</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.3 = 1</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.9 = sda</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.12 = 276</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.13 = 100</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.1 = cvknode1</span><br><span class="line">1.3.6.1.4.1.25506.4.2.26.1.2 = 192.168.11.34</span><br></pre></td></tr></table></figure>

<p>将上述的OID转为具体的消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">等级: 紧急 类型: 主机磁盘吞吐量告警 描述: 主机“cvknode1”(192.168.11.34)磁盘“sda”吞吐量(总) 超过100KBps,当前吞吐量276KBps</span><br></pre></td></tr></table></figure>

<p>在程序中定义了Trap的消息模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trapTplMap.put(&quot;1.3.6.1.4.1.25506.4.2.26.2.6.9&quot;, OidUtils.template(&quot;1.3.6.1.4.1.25506.4.2.26.1.3&quot;, &quot;主机磁盘吞吐量告警&quot;, &quot;主机“&#123;1.3.6.1.4.1.25506.4.2.26.1.1&#125;”(&#123;1.3.6.1.4.1.25506.4.2.26.1.2&#125;)磁盘“&#123;1.3.6.1.4.1.25506.4.2.26.1.9&#125;”吞吐量(总) 超过&#123;1.3.6.1.4.1.25506.4.2.26.1.13&#125;KBps,当前吞吐量&#123;1.3.6.1.4.1.25506.4.2.26.1.12&#125;KBps&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SNMP</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SNMP</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2+Spring3+Mybatis3开发环境搭建</title>
    <url>/2018/01/01/Struts2+Spring3+Mybatis3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>Struts2+Spring3+Mybatis3开发环境搭建<br><a href="http://blog.csdn.net/shan9liang/article/details/9079567">http://blog.csdn.net/shan9liang/article/details/9079567</a></p>
</blockquote>
<h3 id="Struts2-Spring3-Mybatis3开发环境搭建"><a href="#Struts2-Spring3-Mybatis3开发环境搭建" class="headerlink" title="Struts2+Spring3+Mybatis3开发环境搭建"></a>Struts2+Spring3+Mybatis3开发环境搭建</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Struts-2.3.14</span><br><span class="line">Spring-3.2.1</span><br><span class="line">MyBatis-3.2.2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在apache-tomcat-7.0.39下测试通过</p>
</blockquote>
<h4 id="入口web-xml"><a href="#入口web-xml" class="headerlink" title="入口web.xml"></a>入口web.xml</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;  </span><br><span class="line">    id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;&gt;  </span><br><span class="line">    &lt;display-name&gt;test_ssm&lt;/display-name&gt;  </span><br><span class="line">    &lt;welcome-file-list&gt;  </span><br><span class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  </span><br><span class="line">    &lt;/welcome-file-list&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 配置spring资源 --&gt;  </span><br><span class="line">    &lt;context-param&gt;  </span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </span><br><span class="line">        &lt;param-value&gt;classpath:config/applicationContext-*.xml&lt;/param-value&gt;  </span><br><span class="line">    &lt;/context-param&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 配置spring --&gt;  </span><br><span class="line">    &lt;listener&gt;  </span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </span><br><span class="line">    &lt;/listener&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 配置Struts2 --&gt;  </span><br><span class="line">    &lt;filter&gt;  </span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;  </span><br><span class="line">        &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;  </span><br><span class="line">        &lt;init-param&gt;  </span><br><span class="line">            &lt;param-name&gt;config&lt;/param-name&gt;  </span><br><span class="line">            &lt;param-value&gt;struts-default.xml,struts-plugin.xml,/config/struts.xml&lt;/param-value&gt;  </span><br><span class="line">        &lt;/init-param&gt;  </span><br><span class="line">    &lt;/filter&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;filter-mapping&gt;  </span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;  </span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </span><br><span class="line">    &lt;/filter-mapping&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/web-app&gt;  </span><br></pre></td></tr></table></figure>

<h4 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h4><blockquote>
<p>applicationContext-common.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;  </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  </span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  </span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  </span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 启用spring注解支持 --&gt;  </span><br><span class="line">    &lt;context:annotation-config /&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 配置DataSource数据源 --&gt;  </span><br><span class="line">    &lt;bean id=&quot;dataSource&quot;  </span><br><span class="line">        class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;  </span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot; /&gt;  </span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;  </span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!--创建sqlSessionFactory --&gt;  </span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:config/mabatis-config.xml&quot; /&gt;  </span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;     </span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/jialin/mapper/**/*.xml&quot; /&gt;    </span><br><span class="line">          </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 --&gt;  </span><br><span class="line"> &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;  </span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;  </span><br><span class="line">&lt;/bean&gt;   </span><br><span class="line">   </span><br><span class="line">&lt;!-- 配置事务的传播特性 --&gt;  </span><br><span class="line"> &lt;bean id=&quot;baseTransactionProxy&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot; abstract=&quot;true&quot;&gt;  </span><br><span class="line">    &lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;  </span><br><span class="line">    &lt;property name=&quot;transactionAttributes&quot;&gt;  </span><br><span class="line">        &lt;props&gt;  </span><br><span class="line">            &lt;prop key=&quot;add*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;  </span><br><span class="line">            &lt;prop key=&quot;edit*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;  </span><br><span class="line">            &lt;prop key=&quot;remove*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;  </span><br><span class="line">            &lt;prop key=&quot;insert*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;  </span><br><span class="line">            &lt;prop key=&quot;update*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;  </span><br><span class="line">            &lt;prop key=&quot;del*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;  </span><br><span class="line">            &lt;prop key=&quot;*&quot;&gt;readOnly&lt;/prop&gt;  </span><br><span class="line">        &lt;/props&gt;  </span><br><span class="line">    &lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;   </span><br><span class="line">  </span><br><span class="line">&lt;/beans&gt;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>applicationContext-beans.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;  </span><br><span class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  </span><br><span class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  </span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd  </span><br><span class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">     </span><br><span class="line">    &lt;bean id=&quot;userInfoDao&quot;  class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;  </span><br><span class="line">        scope=&quot;prototype&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;mapperInterface&quot; value=&quot;com.jialin.dao.UserInfoDao&quot; /&gt;  </span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;bean id=&quot;userInfoService&quot; class=&quot;com.jialin.service.UserInfoService&quot;  </span><br><span class="line">        scope=&quot;prototype&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;userInfoDao&quot; ref=&quot;userInfoDao&quot; /&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 为IRegisterService接口配置事务拦截器，baseTransactionProxy是事务拦截器，在Controller中获取这个对象 --&gt;  </span><br><span class="line">    &lt;bean id=&quot;IUserInfoService&quot; parent=&quot;baseTransactionProxy&quot;&gt;  </span><br><span class="line">        &lt;!-- 实现类 --&gt;  </span><br><span class="line">        &lt;property name=&quot;target&quot; ref=&quot;userInfoService&quot; /&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;bean id=&quot;userManageAction&quot; class=&quot;com.jialin.action.UserManageAction&quot;  </span><br><span class="line">        scope=&quot;prototype&quot;&gt;  </span><br><span class="line">        &lt;property name=&quot;userInfoService&quot; ref=&quot;IUserInfoService&quot; /&gt;  </span><br><span class="line">    &lt;/bean&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/beans&gt;  </span><br></pre></td></tr></table></figure>

<h4 id="Struts配置文件"><a href="#Struts配置文件" class="headerlink" title="Struts配置文件"></a>Struts配置文件</h4><blockquote>
<p>struts.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class="line">&lt;!DOCTYPE struts PUBLIC  </span><br><span class="line">    &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;  </span><br><span class="line">    &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;struts&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 将Action的创建交给spring来管理 --&gt;    </span><br><span class="line">    &lt;constant name=&quot;struts.objectFactory&quot; value=&quot;spring&quot; /&gt;    </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 更改struts2请求Action的后缀名，默认为action。若想去掉后缀，设为&quot;,&quot;即可 --&gt;  </span><br><span class="line">    &lt;constant name=&quot;struts.action.extension&quot; value=&quot;,&quot;&gt;&lt;/constant&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;package name=&quot;abstract_struts&quot; abstract=&quot;true&quot; extends=&quot;struts-default&quot;  </span><br><span class="line">        namespace=&quot;/&quot;&gt;  </span><br><span class="line">        &lt;!-- 公共东西可以放到这个抽象包下 --&gt;    </span><br><span class="line">    &lt;/package&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;!-- 包含的配置文件 --&gt;  </span><br><span class="line">    &lt;include file=&quot;/config/struts-user.xml&quot;&gt;&lt;/include&gt;  </span><br><span class="line">&lt;/struts&gt;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>struts-user.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class="line">&lt;!DOCTYPE struts PUBLIC  </span><br><span class="line">    &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;  </span><br><span class="line">    &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;struts&gt;  </span><br><span class="line">     </span><br><span class="line">    &lt;package name=&quot;MyActions&quot; extends=&quot;struts-default&quot;&gt;       </span><br><span class="line">        &lt;action name=&quot;*_*&quot; class=&quot;userManageAction&quot; method=&quot;&#123;1&#125;&quot;&gt;  </span><br><span class="line">            &lt;result name=&quot;success&quot; type=&quot;redirect&quot;&gt;/&#123;2&#125;.jsp&lt;/result&gt;  </span><br><span class="line">        &lt;/action&gt;  </span><br><span class="line">    &lt;/package&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/struts&gt;  </span><br></pre></td></tr></table></figure>

<h4 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h4><blockquote>
<p>mabatis-config.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;  </span><br><span class="line">&lt;configuration&gt;  </span><br><span class="line">  </span><br><span class="line">      &lt;typeAliases&gt;    </span><br><span class="line">            &lt;typeAlias alias=&quot;userinfo&quot; type=&quot;com.jialin.entity.UserInfo&quot;/&gt;    </span><br><span class="line">      &lt;/typeAliases&gt;    </span><br><span class="line">        </span><br><span class="line">      &lt;!-- 因为已经在applicationContext-common中指定了映射文件的位置，这里就省略了 --&gt;  </span><br><span class="line">      &lt;!-- &lt;mappers&gt;    </span><br><span class="line">            &lt;mapper resource=&quot;com/jialin/dao/registerMapper.xml&quot;/&gt;    </span><br><span class="line">      &lt;/mappers&gt;   --&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/configuration&gt;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserManageAction.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jialin.action;  </span><br><span class="line">  </span><br><span class="line">import com.jialin.entity.UserInfo;  </span><br><span class="line">import com.jialin.service.IUserInfoService;  </span><br><span class="line">  </span><br><span class="line">public class UserManageAction &#123;  </span><br><span class="line">  </span><br><span class="line">    private IUserInfoService userInfoService;  </span><br><span class="line">  </span><br><span class="line">    public IUserInfoService getUserInfoService() &#123;  </span><br><span class="line">        return userInfoService;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setUserInfoService(IUserInfoService userInfoService) &#123;  </span><br><span class="line">        this.userInfoService = userInfoService;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    private UserInfo userInfo;  </span><br><span class="line">  </span><br><span class="line">    public UserInfo getUserInfo() &#123;  </span><br><span class="line">        return userInfo;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setUserInfo(UserInfo userInfo) &#123;  </span><br><span class="line">        this.userInfo = userInfo;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">   </span><br><span class="line">    public String insertUser() &#123;  </span><br><span class="line">  </span><br><span class="line">        userInfoService.insertUser(userInfo);  </span><br><span class="line">        return &quot;success&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String editUser() &#123;  </span><br><span class="line">  </span><br><span class="line">        userInfoService.edit(userInfo);  </span><br><span class="line">        return &quot;success&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String removeUser() &#123;  </span><br><span class="line">  </span><br><span class="line">        userInfoService.remove(userInfo);  </span><br><span class="line">        return &quot;success&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getUserById() &#123;  </span><br><span class="line">        userInfoService.get(userInfo);  </span><br><span class="line">        return &quot;success&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getListByName() &#123;  </span><br><span class="line">  </span><br><span class="line">        userInfoService.getList(userInfo);  </span><br><span class="line">  </span><br><span class="line">        return &quot;success&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getAllUser() &#123;  </span><br><span class="line">        userInfoService.getAllUser();  </span><br><span class="line">        return &quot;success&quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>IUserInfoService.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jialin.service;  </span><br><span class="line">  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">import com.jialin.entity.UserInfo;  </span><br><span class="line">  </span><br><span class="line">public interface IUserInfoService &#123;  </span><br><span class="line">    public void insertUser(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public void edit(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public void remove(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public UserInfo get(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public List getList(UserInfo user);  </span><br><span class="line">      </span><br><span class="line">    public List getAllUser();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserInfoService.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jialin.service;  </span><br><span class="line">  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">import java.util.Iterator;  </span><br><span class="line">  </span><br><span class="line">import com.jialin.dao.UserInfoDao;  </span><br><span class="line">import com.jialin.entity.UserInfo;  </span><br><span class="line">  </span><br><span class="line">public class UserInfoService implements IUserInfoService &#123;  </span><br><span class="line">      </span><br><span class="line">    private UserInfoDao userInfoDao;  </span><br><span class="line">      </span><br><span class="line">  </span><br><span class="line">    public UserInfoDao getUserInfoDao() &#123;  </span><br><span class="line">        return userInfoDao;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setUserInfoDao(UserInfoDao userInfoDao) &#123;  </span><br><span class="line">        this.userInfoDao = userInfoDao;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void insertUser(UserInfo user)  </span><br><span class="line">    &#123;  </span><br><span class="line">        userInfoDao.insertUser(user);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void edit(UserInfo user) &#123;  </span><br><span class="line">        userInfoDao.edit(user);  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public void remove(UserInfo user) &#123;  </span><br><span class="line">        userInfoDao.remove(user);  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public UserInfo get(UserInfo user) &#123;  </span><br><span class="line">        UserInfo user1=userInfoDao.get(user);  </span><br><span class="line">        System.out.println(user1.getUsername());  </span><br><span class="line">        return user1;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public List getList(UserInfo user) &#123;  </span><br><span class="line">        List list=userInfoDao.getList(user);  </span><br><span class="line">          </span><br><span class="line">        for(Iterator iter=list.iterator();iter.hasNext();)  </span><br><span class="line">        &#123;  </span><br><span class="line">            UserInfo user1=(UserInfo)iter.next();  </span><br><span class="line">            System.out.println(user1.getUsername()+&quot;,&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        return list;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public List getAllUser() &#123;  </span><br><span class="line">        List list= userInfoDao.getAllUser();  </span><br><span class="line">        for(Iterator iter=list.iterator();iter.hasNext();)  </span><br><span class="line">        &#123;  </span><br><span class="line">            UserInfo user=(UserInfo)iter.next();  </span><br><span class="line">            System.out.println(user.getUsername()+&quot;,&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        return list;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>UserInfoDao.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jialin.dao;  </span><br><span class="line">  </span><br><span class="line">import java.util.List;  </span><br><span class="line">  </span><br><span class="line">import com.jialin.entity.UserInfo;  </span><br><span class="line">  </span><br><span class="line">public interface UserInfoDao &#123;  </span><br><span class="line">      </span><br><span class="line">    public void insertUser(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public void edit(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public void remove(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public UserInfo get(UserInfo user);  </span><br><span class="line">  </span><br><span class="line">    public List getList(UserInfo user);  </span><br><span class="line">      </span><br><span class="line">    public List getAllUser();  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<blockquote>
<p>UserInfo.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jialin.entity;  </span><br><span class="line">  </span><br><span class="line">public class UserInfo &#123;  </span><br><span class="line">    private int id;  </span><br><span class="line">    private String username;  </span><br><span class="line">    private String password;  </span><br><span class="line">    private String ismanager;  </span><br><span class="line">  </span><br><span class="line">    public void setIsmanager(String ismanager) &#123;  </span><br><span class="line">        this.ismanager = ismanager;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getIsmanager() &#123;  </span><br><span class="line">        return ismanager;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setUsername(String username) &#123;  </span><br><span class="line">        this.username = username;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getUsername() &#123;  </span><br><span class="line">        return username;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setPassword(String password) &#123;  </span><br><span class="line">        this.password = password;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getPassword() &#123;  </span><br><span class="line">        return password;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void setId(int id) &#123;  </span><br><span class="line">        this.id = id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int getId() &#123;  </span><br><span class="line">        return id;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="Mybaitis映射文件"><a href="#Mybaitis映射文件" class="headerlink" title="Mybaitis映射文件"></a>Mybaitis映射文件</h4><blockquote>
<p>userinfo-mapper.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    </span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;     </span><br><span class="line">    </span><br><span class="line">&lt;mapper namespace=&quot;com.jialin.dao.UserInfoDao&quot;&gt;     </span><br><span class="line">      &lt;!-- 自动生成id策略 --&gt;  </span><br><span class="line">    &lt;insert id=&quot;insertUser&quot;  parameterType=&quot;userinfo&quot;  useGeneratedKeys=&quot;true&quot;  keyProperty=&quot;id&quot;&gt;    </span><br><span class="line">            insert into userinfo(username,password,ismanager) values (#&#123;username&#125;,#&#123;password&#125;,#&#123;ismanager&#125;)    </span><br><span class="line">    &lt;/insert&gt;    </span><br><span class="line">      </span><br><span class="line">    &lt;!-- userInfoResultMap是userinfo-resultmap.xml中定义的resultmap --&gt;  </span><br><span class="line">    &lt;select id=&quot;getList&quot;  parameterType=&quot;userinfo&quot; resultType=&quot;list&quot; resultMap=&quot;userInfoResultMap&quot;&gt;  </span><br><span class="line">            select * from userinfo where username like &#x27;%&#x27; #&#123;username&#125; &#x27;%&#x27;  </span><br><span class="line">    &lt;/select&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;select id=&quot;getAllUser&quot; resultType=&quot;list&quot;  resultMap=&quot;userInfoResultMap&quot;&gt;  </span><br><span class="line">            select * from userinfo  </span><br><span class="line">    &lt;/select&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;select id=&quot;get&quot;  parameterType=&quot;userinfo&quot;  resultType=&quot;com.jialin.entity.UserInfo&quot; resultMap=&quot;userInfoResultMap&quot;&gt;  </span><br><span class="line">        &lt;![CDATA[ </span><br><span class="line">            select * from userinfo where id = #&#123;id&#125; </span><br><span class="line">        ]]&gt;  </span><br><span class="line">    &lt;/select&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;update id=&quot;edit&quot;  parameterType=&quot;userinfo&quot;&gt;  </span><br><span class="line">        update userinfo set  </span><br><span class="line">        username = #&#123;username&#125;,  </span><br><span class="line">        password = #&#123;password&#125;  </span><br><span class="line">        where id = #&#123;id&#125;  </span><br><span class="line">    &lt;/update&gt;  </span><br><span class="line">      </span><br><span class="line">    &lt;delete id=&quot;remove&quot; parameterType=&quot;userinfo&quot;&gt;  </span><br><span class="line">        delete from userinfo where id = #&#123;id&#125;  </span><br><span class="line">    &lt;/delete&gt;  </span><br><span class="line">      </span><br><span class="line">&lt;/mapper&gt;    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>userinfo-resultMap.xml</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;   </span><br><span class="line">    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;  </span><br><span class="line">&lt;mapper namespace=&quot;com.jialin.dao.UserInfoDao&quot;&gt;  </span><br><span class="line">    &lt;resultMap type=&quot;com.jialin.entity.UserInfo&quot; id=&quot;userInfoResultMap&quot;&gt;  </span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;  </span><br><span class="line">        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;  </span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;  </span><br><span class="line">        &lt;result property=&quot;ismanager&quot; column=&quot;ismanager&quot;/&gt;  </span><br><span class="line">    &lt;/resultMap&gt;  </span><br><span class="line">&lt;/mapper&gt;  </span><br></pre></td></tr></table></figure>

<h4 id="测试jsp"><a href="#测试jsp" class="headerlink" title="测试jsp"></a>测试jsp</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot;%&gt;  </span><br><span class="line"> </span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">&lt;title&gt;&lt;/title&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;  </span><br><span class="line">      </span><br><span class="line">    function insertUser()  </span><br><span class="line">    &#123;  </span><br><span class="line">        var myform=document.forms[0];  </span><br><span class="line">        myform.action=&quot;insertUser_success&quot;;  </span><br><span class="line">        myform.method=&quot;post&quot;;  </span><br><span class="line">        myform.submit();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    function getUserByName()  </span><br><span class="line">    &#123;  </span><br><span class="line">        var myform=document.forms[0];  </span><br><span class="line">        myform.action=&quot;getListByName_success&quot;;  </span><br><span class="line">        myform.method=&quot;post&quot;;  </span><br><span class="line">        myform.submit();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    function getAllUser()  </span><br><span class="line">    &#123;  </span><br><span class="line">        var myform=document.forms[0];  </span><br><span class="line">        myform.action=&quot;getAllUser_success&quot;;  </span><br><span class="line">        myform.method=&quot;post&quot;;  </span><br><span class="line">        myform.submit();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    function editUser()  </span><br><span class="line">    &#123;  </span><br><span class="line">        var myform=document.forms[0];  </span><br><span class="line">        myform.action=&quot;editUser_success&quot;;  </span><br><span class="line">        myform.method=&quot;post&quot;;  </span><br><span class="line">        myform.submit();  </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    function getUserById()  </span><br><span class="line">    &#123;  </span><br><span class="line">        var myform=document.forms[0];  </span><br><span class="line">        myform.action=&quot;getUserById_success&quot;;  </span><br><span class="line">        myform.method=&quot;post&quot;;  </span><br><span class="line">        myform.submit();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    function removeUser()  </span><br><span class="line">    &#123;  </span><br><span class="line">        var myform=document.forms[0];  </span><br><span class="line">        myform.action=&quot;removeUser_success&quot;;  </span><br><span class="line">        myform.method=&quot;post&quot;;  </span><br><span class="line">        myform.submit();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/head&gt;  </span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;h1&gt;用户管理&lt;/h1&gt;  </span><br><span class="line">    &lt;hr&gt;  </span><br><span class="line">    &lt;form name=&quot;myform&quot; &gt;  </span><br><span class="line">        id:&lt;input type=&quot;text&quot; name=&quot;userInfo.id&quot;&gt; &lt;br&gt;  </span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;userInfo.username&quot;&gt; &lt;br&gt;  </span><br><span class="line">        密码：&lt;input type=&quot;text&quot; name=&quot;userInfo.password&quot;&gt;  &lt;br&gt;  </span><br><span class="line">        是否为管理员：&lt;input type=&quot;text&quot; name=&quot;userInfo.ismanager&quot;&gt;&lt;br&gt;  </span><br><span class="line">        &lt;input type=&quot;button&quot; name=&quot;btninsert&quot; onclick=&quot;insertUser()&quot; value=&quot;增加&quot; /&gt;  </span><br><span class="line">        &lt;input type=&quot;button&quot; name=&quot;btnedit&quot; onclick=&quot;editUser()&quot; value=&quot;修改&quot; /&gt;  </span><br><span class="line">        &lt;input type=&quot;button&quot; name=&quot;btnremove&quot; onclick=&quot;removeUser()&quot; value=&quot;删除&quot;  /&gt;&lt;br&gt;  </span><br><span class="line">        &lt;input type=&quot;button&quot; name=&quot;btnget&quot; onclick=&quot;getUserById()&quot; value=&quot;按id查询&quot;  /&gt;  </span><br><span class="line">        &lt;input type=&quot;button&quot; name=&quot;btngetlist&quot; onclick=&quot;getUserByName()&quot; value=&quot;按名称查询&quot;  /&gt;  </span><br><span class="line">        &lt;input type=&quot;button&quot; name=&quot;btngetall&quot; onclick=&quot;getAllUser()&quot; value=&quot;查询全部&quot;  /&gt;  </span><br><span class="line">    &lt;/form&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor配置与使用</title>
    <url>/2021/04/01/Supervisor%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>Linux的后台进程运行有好几种方法，例如nohup，screen等，但是，如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</p>
</blockquote>
<h4 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu 下安装 supervisor</span></span><br><span class="line">apt install supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功(输出默认配置内容则成功)</span></span><br><span class="line">echo_supervisord_conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主配文件supervisord.conf</span></span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动supervisor：</span></span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看supervisord.log</span></span><br><span class="line"><span class="built_in">cat</span> /tmp/supervisord.log</span><br></pre></td></tr></table></figure>

<h4 id="supervisor指令"><a href="#supervisor指令" class="headerlink" title="supervisor指令"></a>supervisor指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisorctl update  <span class="comment"># 更新新的配置到supervisord</span></span><br><span class="line">supervisorctl reload  <span class="comment"># 重新启动配置中的所有程序</span></span><br><span class="line">supervisorctl start program_name  <span class="comment"># 启动某个进程(program_name=你配置中写的程序名称)</span></span><br><span class="line">supervisorctl  <span class="comment"># 查看正在守候的进程</span></span><br><span class="line">pervisorctl stop program_name  <span class="comment"># 停止某一进程</span></span><br><span class="line">supervisorctl restart program_name  <span class="comment"># 重启某一进程</span></span><br><span class="line">supervisorctl stop all  <span class="comment"># 停止全部进程</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><blockquote>
<p>supervisor的配置参数较多，下面介绍一下常用的参数配置，详细的配置及说明，请参考官方文档介绍。 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：分号（;）开头的配置表示注释</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ;登录管理后台的用户名</span><br><span class="line">;password=123               ;登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class="line">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class="line"></span><br><span class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line">[program:xx]</span><br><span class="line">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class="line">autostart=true       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class="line">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class="line">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class="line">redirect_stderr=true ; 把stderr重定向到stdout，默认false</span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class="line">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class="line"></span><br><span class="line">;包含其它配置文件</span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="supervisor配置示例"><a href="#supervisor配置示例" class="headerlink" title="supervisor配置示例"></a>supervisor配置示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 示例1</span><br><span class="line"># godiyun.conf:</span><br><span class="line">[program:godiyunapp]</span><br><span class="line">environment=PATH=/opt/gongdiyun/env-gdy</span><br><span class="line">command=/opt/godiyun/env/bin/gunicorn -c gunicorn_config.py cloudcenter.wsgi:application</span><br><span class="line">user=root</span><br><span class="line">directory=/opt/godiyun/godiyun</span><br><span class="line">autostart=True</span><br><span class="line">autorestart=True</span><br><span class="line">startsecs=1</span><br><span class="line">startretries=5</span><br><span class="line">autorestart=unexpected</span><br><span class="line">redirect_stderr=True</span><br><span class="line">stopsignal=QUIT</span><br><span class="line">stopwaitsecs=5</span><br><span class="line"></span><br><span class="line"># 示例2</span><br><span class="line"># celery.conf:</span><br><span class="line">[program:celeryworker]</span><br><span class="line">environment=PATH=/opt/godiyun/env</span><br><span class="line">command=/opt/godiyun/env/bin/celery -A cloudcenter worker --loglevel info --logfile /opt/logs/celery/celery_worker.log</span><br><span class="line">user=root</span><br><span class="line">directory=/opt/godiyun/godiyun</span><br><span class="line">autostart=True</span><br><span class="line">autorestart=True</span><br><span class="line">startsecs=1</span><br><span class="line">startretries=5</span><br><span class="line">autorestart=unexpected</span><br><span class="line">redirect_stderr=True</span><br><span class="line">stopsignal=INT</span><br><span class="line">stopwaitsecs=5</span><br><span class="line">numprocs=1</span><br><span class="line"></span><br><span class="line">[program:celerybeat]</span><br><span class="line">environment=PATH=/opt/godiyun/env</span><br><span class="line">command=/opt/godiyun/env/bin/celery -A cloudcenter beat --loglevel info --logfile /opt/logs/celery/celery_beat.log</span><br><span class="line">user=root</span><br><span class="line">directory=/opt/godiyun/godiyun</span><br><span class="line">autostart=True</span><br><span class="line">autorestart=True</span><br><span class="line">startsecs=1</span><br><span class="line">startretries=5</span><br><span class="line">autorestart=unexpected</span><br><span class="line">redirect_stderr=True</span><br><span class="line">stopsignal=INT</span><br><span class="line">stopwaitsecs=5</span><br><span class="line">numprocs=1</span><br><span class="line"></span><br><span class="line"># 示例3</span><br><span class="line"># liteapp.conf</span><br><span class="line">[program:liteapp]</span><br><span class="line">directory=/root/code/liteapp</span><br><span class="line">command=/root/.virtualenvs/liteapp/bin/gunicorn -c gunicorn_config.py index:app</span><br><span class="line">process_name=liteapp</span><br><span class="line">numprocs=1</span><br><span class="line">priority=999</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stdout_logfile_backups=1</span><br><span class="line">stderr_logfile_backups=1</span><br><span class="line">stdout_logfile=/var/log/liteApp.log</span><br><span class="line">stderr_logfile=/var/log/liteApp.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h4><blockquote>
<p>用supervisor启动应用时EncodingError的解决方法</p>
</blockquote>
<ul>
<li>原因<blockquote>
<p>Python3其实是默认使用unicode（UTF-8）编码的，但是当使用uWSGI来部署应用并且用supervisor作进程守护的时候，就会出现编码问题，比较典型的是用于检查的print命令报UnicodeEncodingError，内容是有字符无法用ASC II编码。<br>UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 2-5: ordinal not in range(128)</p>
</blockquote>
</li>
<li>解决<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># supervisord.conf文件的[supervisord]标签下增加一行：</span><br><span class="line">[supervisord]</span><br><span class="line">environment=LC_ALL=&#x27;en_US.UTF-8&#x27;,LANG=&#x27;en_US.UTF-8&#x27; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>重启supervisor服务之后，一切正常了</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 oracle instantclient_12_2</title>
    <url>/2019/01/01/Ubuntu%20%E5%AE%89%E8%A3%85%20oracle%20instantclient_12_2/</url>
    <content><![CDATA[<h3 id="Ubuntu-安装-oracle-instantclient-12-2"><a href="#Ubuntu-安装-oracle-instantclient-12-2" class="headerlink" title="Ubuntu 安装 oracle instantclient_12_2"></a>Ubuntu 安装 oracle instantclient_12_2</h3><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html</span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择：Instant Client for Linux x86-64</p>
</blockquote>
<h5 id="1-下载以下两个ZIP包："><a href="#1-下载以下两个ZIP包：" class="headerlink" title="1.下载以下两个ZIP包："></a>1.下载以下两个ZIP包：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">instantclient-basic-linux.x64-12.2.0.1.0.zip</span><br><span class="line">instantclient-sqlplus-linux.x64-12.2.0.1.0.zip</span><br></pre></td></tr></table></figure>

<h5 id="2-安装依赖包："><a href="#2-安装依赖包：" class="headerlink" title="2. 安装依赖包："></a>2. 安装依赖包：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># centos</span><br><span class="line">yum install -y libaio*</span><br><span class="line"># ubuntu</span><br><span class="line">apt-get install -y libaio*</span><br></pre></td></tr></table></figure>

<h5 id="3-上传到服务器并解压到相同目录下"><a href="#3-上传到服务器并解压到相同目录下" class="headerlink" title="3. 上传到服务器并解压到相同目录下"></a>3. 上传到服务器并解压到相同目录下</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip instantclient-basic-linux.x64-12.2.0.1.0.zip</span><br><span class="line">unzip instantclient-sqlplus-linux.x64-12.2.0.1.0.zip</span><br><span class="line">sudo mv instantclient_12_2 /soft/</span><br></pre></td></tr></table></figure>

<h5 id="4-添加环境变量"><a href="#4-添加环境变量" class="headerlink" title="4.添加环境变量"></a>4.添加环境变量</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ORACLE_HOME=/soft/instantclient_12_2</span><br><span class="line">export PATH=$PATH:$ORACLE_HOME</span><br><span class="line">export LD_LIBRARY_PATH=$ORACLE_HOME:$ORACLE_HOME/lib:$LD_LIBRARY_PATH</span><br><span class="line">export TNS_ADMIN=$ORACLE_HOME/network/admin</span><br><span class="line">export NLS_LANGE=&quot;SIMPLIFIED CHINESE_CHINA.ZHS16GBK&quot;</span><br></pre></td></tr></table></figure>

<h5 id="5-添加tnsnames-ora文件"><a href="#5-添加tnsnames-ora文件" class="headerlink" title="5. 添加tnsnames.ora文件"></a>5. 添加tnsnames.ora文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建目录</span><br><span class="line">/soft/instantclient_12_2/network/admin</span><br><span class="line"></span><br><span class="line"># tnsnames.ora 文件</span><br><span class="line">test =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 47.75.108.44)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">    (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = tro)))</span><br></pre></td></tr></table></figure>


<h4 id="tnsnames-ora-示例1"><a href="#tnsnames-ora-示例1" class="headerlink" title="tnsnames.ora 示例1"></a>tnsnames.ora 示例1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:oracle:thin:@(DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 10.88.190.203)(PORT = 1521))</span><br><span class="line">    (LOAD_BALANCE=yes)</span><br><span class="line">    (FAILOVER=yes)</span><br><span class="line">    (CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = xe))</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="tnsnames-ora-示例2"><a href="#tnsnames-ora-示例2" class="headerlink" title="tnsnames.ora 示例2"></a>tnsnames.ora 示例2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XE =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 10.88.190.203 )(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = xe)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 10.88.190.203)(PORT = 1521))</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 下安装RabbitMQ</title>
    <url>/2021/02/01/Ubuntu16.04%20%E4%B8%8B%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><p><strong>Ubuntu 更换阿里云软件源</strong></p>
<ol>
<li>备份<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak </span><br></pre></td></tr></table></figure></li>
<li>修改<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将source.list文件内容替换成下面的</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>更新<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>安装Erlang与RabbitMQ</strong></p>
<ol>
<li>安装erlang</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install erlang-nox</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装rabbitMQ<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>启动、停止、重启、状态rabbitMq命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmq-server start # 启动</span><br><span class="line">sudo rabbitmq-server stop # 关闭</span><br><span class="line">sudo rabbitmq-server restart # 重启</span><br><span class="line">sudo rabbitmqctl status 查看状态</span><br></pre></td></tr></table></figure>

<p><strong>问题解决</strong></p>
<blockquote>
<p>查看状态</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/rabbitmq/bin/</span><br><span class="line">sudo ./rabbitmqctl status</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Status of node &#x27;rabbit@mhiwy-ubuntu&#x27;</span><br><span class="line">Error: unable to connect to node &#x27;rabbit@mhiwy-ubuntu&#x27;: nodedown</span><br><span class="line"></span><br><span class="line">DIAGNOSTICS</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">attempted to contact: [&#x27;rabbit@mhiwy-ubuntu&#x27;]</span><br><span class="line"></span><br><span class="line">rabbit@mhiwy-ubuntu:</span><br><span class="line">  * connected to epmd (port 4369) on mhiwy-ubuntu</span><br><span class="line">  * epmd reports node &#x27;rabbit&#x27; running on port 25672</span><br><span class="line">  * TCP connection succeeded but Erlang distribution failed</span><br><span class="line">  * suggestion: hostname mismatch?</span><br><span class="line">  * suggestion: is the cookie set correctly?</span><br><span class="line">  * suggestion: is the Erlang distribution using TLS?</span><br><span class="line"></span><br><span class="line">current node details:</span><br><span class="line">- node name: &#x27;rabbitmq-cli-76@mhiwy-ubuntu&#x27;</span><br><span class="line">- home dir: /home/mhiwyf</span><br><span class="line">- cookie hash: 8wU6rmleLQn53TMnF919xQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>有错误，要修改配置，先停止服务</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/rabbitmq/bin</span><br><span class="line">invoke-rc.d rabbitmq-server stop</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mhiwyf@mhiwy-ubuntu:/usr/lib/rabbitmq/bin$ invoke-rc.d rabbitmq-server stop</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===</span><br><span class="line">Authentication is required to stop &#x27;rabbitmq-server.service&#x27;.</span><br><span class="line">Authenticating as: mhiwyf,,, (mhiwyf)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进入安装文件夹<code>/usr/lib/rabbitmq/bin</code>,  修改rabbitmqctl文件,先备份<code>cp rabbitmqctl rabbitmqctl.bak</code>, 添加一行Home配置<code>HOME=/var/lib/rabbitmq  \</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ -z &quot;$ERL_CRASH_DUMP_SECONDS&quot; ]; then</span><br><span class="line">    export ERL_CRASH_DUMP_SECONDS=0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># We specify Mnesia dir and sasl error logger since some actions</span><br><span class="line"># (e.g. forget_cluster_node --offline) require us to impersonate the</span><br><span class="line"># real node.</span><br><span class="line"></span><br><span class="line">RABBITMQ_USE_LONGNAME=$&#123;RABBITMQ_USE_LONGNAME&#125; \</span><br><span class="line">HOME=/var/lib/rabbitmq  \</span><br><span class="line">exec $&#123;ERL_DIR&#125;erl \</span><br><span class="line">    -pa &quot;$&#123;RABBITMQ_HOME&#125;/ebin&quot; \</span><br><span class="line">    -noinput +B \</span><br><span class="line">    -hidden \</span><br><span class="line">    $&#123;RABBITMQ_CTL_ERL_ARGS&#125; \</span><br><span class="line">    -boot &quot;$&#123;CLEAN_BOOT_FILE&#125;&quot; \</span><br><span class="line">    -sasl errlog_type error \</span><br><span class="line">    -mnesia dir &quot;\&quot;$&#123;RABBITMQ_MNESIA_DIR&#125;\&quot;&quot; \</span><br><span class="line">    -s rabbit_control_main \</span><br><span class="line">    -nodename $RABBITMQ_NODENAME \</span><br><span class="line">    -extra &quot;$@&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>启动管理</strong></p>
<ol>
<li><p>启用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/rabbitmq/bin</span><br><span class="line">sudo ./rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The following plugins have been enabled:</span><br><span class="line">  amqp_client</span><br><span class="line">  cowlib</span><br><span class="line">  cowboy</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@mhiwy-ubuntu... failed.</span><br><span class="line"> * Could not contact node rabbit@mhiwy-ubuntu.</span><br><span class="line">   Changes will take effect at broker restart.</span><br><span class="line"> * Options: --online  - fail if broker cannot be contacted.</span><br><span class="line">            --offline - do not try to contact broker.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>浏览器查看：127.0.0.1:15672</p>
</blockquote>
</li>
<li><p>添加用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl add_user admin admin</span><br><span class="line">sudo rabbitmqctl set_user_tags admin administrator</span><br><span class="line">sudo rabbitmqctl set_permissions -p / admin &#x27;.*&#x27; &#x27;.*&#x27; &#x27;.*&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw disable</span><br><span class="line">sudo ufw allow 25672</span><br><span class="line">sudo ufw enable</span><br><span class="line">sudo ufw reload</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下搭建sentry笔记</title>
    <url>/2021/05/02/Ubuntu16.04%E4%B8%8B%E6%90%AD%E5%BB%BAsentry%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><blockquote>
<p>先卸载可能存在的旧版本(apt官方库里的docker版本可能比较旧)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新apt包索引</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装以下包以使apt可以通过HTTPS使用存储库（repository）：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加Docker官方的GPG密钥：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用下面的命令来设置stable存储库：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置apt仓库<code>/etc/apt/sources.list</code>文件最好追加一行：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://apt.dockerproject.org/repo ubuntu-trusty main</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装 docker-engine：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install linux-image-extra-$(uname -r) linux-image-extra-virtual</span><br><span class="line">$ sudo apt install docker-engine</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装最新版本的Docker CE：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install -y docker-ce</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在生产系统上，可能会需要应该安装一个特定版本的Docker CE，而不是总是使用最新版本：<br>列出可用的版本：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择要安装的特定版本，第二列是版本字符串，第三列是存储库名称，它指示包来自哪个存储库，以及扩展它的稳定性级别。要安装一个特定的版本，将版本字符串附加到包名中，并通过等号(=)分隔它们</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install docker-ce=&lt;VERSION&gt; # 随意选择一个版本即可 </span><br></pre></td></tr></table></figure>

<blockquote>
<p>验证docker</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看docker服务是否启动：</span><br><span class="line">$ systemctl status docker</span><br><span class="line"></span><br><span class="line"># 若未启动，则启动docker服务：</span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"># 经典的hello world：</span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果没有pip 先安装pip</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure>

<h4 id="sentry部署"><a href="#sentry部署" class="headerlink" title="sentry部署"></a>sentry部署</h4><ol>
<li><p>构建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install git</span><br><span class="line">$ git clone https://github.com/getsentry/onpremise.git</span><br><span class="line">$ cd onpremise</span><br></pre></td></tr></table></figure>
</li>
<li><p>cd onpremise，执行命令生成key</p>
<blockquote>
<p>注意：以下所有的目录，都是要在onpremise下执行的</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>在这里可能会报错,如下所示</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: Couldn&#x27;t connect to Docker daemon at http://localhost:4243 - is it running?</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解决方法如下:</p>
</blockquote>
<ul>
<li><p>配置/lib/systemd/system/docker.service,<code>sudo vim /lib/systemd/system/docker.service</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里的0.0.0.0根据自己的需求配置是否只需要配置本地</span><br><span class="line">ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:4243</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置/etc/default/docker,<code>sudo vim /etc/default/docker</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;-H tcp://localhost:4243 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>DOCKER_HOST的环境变量设置,<code>sudo vim /etc/profile</code> 或者 <code>sudo vim ~/.bashrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export DOCKER_HOST=tcp://localhost:4243</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后重新执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm web config generate-secret-key</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>然后就是等待,时间比较长,大概半小时。执行完后会生成一个key,复制这个key</p>
</blockquote>
<ol start="3">
<li><p>将key添加到docker-compose文件里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim docker-compose.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 取消SENTRY_SECRET_KEY的注释，并把刚刚复制的字符串插入其中，类似如下：</span><br><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">  base:</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    build: .</span><br><span class="line">    environment:</span><br><span class="line">      # Run `docker-compose run web config generate-secret-key`</span><br><span class="line">      # to get the SENTRY_SECRET_KEY value.</span><br><span class="line">      SENTRY_SECRET_KEY: &#x27;8kn@wvg)qcm5ufg9sanfdada6qn)-0rd^%8j)@m4h=kxn(t)sv&#x27;</span><br><span class="line">      SENTRY_MEMCACHED_HOST: memcached</span><br><span class="line">      SENTRY_REDIS_HOST: redis</span><br><span class="line">      SENTRY_POSTGRES_HOST: postgres</span><br><span class="line">      SENTRY_EMAIL_HOST: smtp</span><br></pre></td></tr></table></figure>
</li>
<li><p>重建数据库,并创建sentry超级管理员用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm web upgrade</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>这里会持续大概半小时,快结束时,会创建用户,sentry新建的时候需要一个超级管理员用户：</p>
</blockquote>
<p>配图</p>
<ol start="5">
<li><p>启动所有服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问sentry</p>
</li>
</ol>
<blockquote>
<p>打开浏览器，输入url: ipaddress:9000</p>
</blockquote>
<blockquote>
<p>访问之前可以检查下容器和端口情况：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>看下当前运行的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ant 查看端口打开情况：</span><br></pre></td></tr></table></figure>

<p>登陆界面，这里会提示你的Root URL，如果不想更改继续下一步即可完成：</p>
<p>6o0.png<br>页面展示：</p>
<h4 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h4><ol>
<li>新建一个项目</li>
</ol>
<ol start="2">
<li>django中的配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install raven #先安装raven库</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#settings文件</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    .....</span><br><span class="line">    &#x27;raven.contrib.django.raven_compat&#x27;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将字符串写入</span><br><span class="line">RAVEN_CONFIG = &#123;</span><br><span class="line">    &#x27;dsn&#x27;: &#x27;http://5ca2ee80314c4749adf65f8f580c3330saodhoia.dahid***&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16、Ubuntu18 设置IP</title>
    <url>/2020/10/01/Ubuntu16%E3%80%81Ubuntu18%20%E8%AE%BE%E7%BD%AEIP/</url>
    <content><![CDATA[<h3 id="设置root账号"><a href="#设置root账号" class="headerlink" title="设置root账号"></a>设置root账号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo  passwd root</span><br></pre></td></tr></table></figure>

<h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl set-local-rtc 1 </span><br><span class="line">timedatectl set-timezone Asia/Shanghai </span><br><span class="line">timedatectl status </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl --static set-hostname murray01</span><br><span class="line">hostnamectl status</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="设置防火墙"><a href="#设置防火墙" class="headerlink" title="设置防火墙"></a>设置防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">sudo setenforce 0 <span class="comment"># 临时设置， 0代表permissive 1代表enforcing</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 永久禁用server</span></span><br><span class="line"><span class="built_in">cat</span> /etc/selinux/config &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">SELINUX=permissive  </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Ubuntu16"><a href="#Ubuntu16" class="headerlink" title="Ubuntu16"></a>Ubuntu16</h2><h3 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、修改IP地址</span></span><br><span class="line"><span class="comment"># 打开/etc/network/interfaces</span></span><br><span class="line">sudo vim /etc/network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入以下语句：</span></span><br><span class="line">auto eth0 <span class="comment">#要设置的网卡</span></span><br><span class="line">iface eth0 inet static <span class="comment">#设置静态IP；如果是使用自动IP用dhcp，后面的不用设置，一般少用</span></span><br><span class="line">address 192.168.31.100 <span class="comment">#IP地址</span></span><br><span class="line">netmask 255.255.255.0 <span class="comment">#子网掩码</span></span><br><span class="line">gateway 192.168.31.1 <span class="comment">#网关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、修改DNS</span></span><br><span class="line"><span class="comment"># 打开/etc/resolv.conf</span></span><br><span class="line">sudo vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 注意：上面设置的文件重启后会覆盖，如果要持久的保存，需要修改：</span></span><br><span class="line">sudo vim /etc/resolvconf/resolv.conf.d/base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为如下内容：</span></span><br><span class="line">search localdomain <span class="comment">#如果本Server为DNS服务器，可以加上这一句，如果不是，可以不加</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 202.98.96.68</span><br><span class="line">nameserver 61.139.2.69</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、重启服务生效</span></span><br><span class="line">sudo /etc/init.d/networking restart <span class="comment">#使网卡配置生效</span></span><br><span class="line">sudo /etc/init.d/resolvconf restart <span class="comment">#使DNS生效</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Ubuntu18"><a href="#Ubuntu18" class="headerlink" title="Ubuntu18"></a>Ubuntu18</h2><h3 id="设置静态IP-1"><a href="#设置静态IP-1" class="headerlink" title="设置静态IP"></a>设置静态IP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件可按如下内容修改</span></span><br><span class="line">sudo vim /etc/netplan/50-cloud-init.yaml</span><br><span class="line"><span class="comment"># 默认内容</span></span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:   <span class="comment"># 配置的网卡名称</span></span><br><span class="line">      dhcp4: <span class="literal">true</span>  <span class="comment"># dhcp4开启</span></span><br><span class="line">      addresses: []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容</span></span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:   <span class="comment"># 配置的网卡名称</span></span><br><span class="line">      dhcp4: no    <span class="comment"># dhcp4关闭</span></span><br><span class="line">      dhcp6: no    <span class="comment"># dhcp6关闭</span></span><br><span class="line">      addresses: [192.168.1.55/24]   <span class="comment">#设置本机IP及掩码</span></span><br><span class="line">      gateway4: 192.168.1.254   <span class="comment">#设置网关</span></span><br><span class="line">      <span class="comment">#optional: true</span></span><br><span class="line">      nameservers:</span><br><span class="line">          addresses: [114.114.114.114, 8.8.8.8, 8.8.4.4]   <span class="comment">#设置DNS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存后，执行命令 使配置生效</span></span><br><span class="line">sudo netplan apply</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 以上配置文件共11行，其中第2，3，6，7四行可以不写，测试过没有这四行，网络也能工作正常，第5行的ens33为虚拟网卡，可以使用ifconfig -a查看本机的网卡。</span><br><span class="line">2. 配置文件里在冒号：号出现的后面一定要空一格，不空格则在运行netplan apply时提示出错。</span><br><span class="line">3. 关键之关键是看清配置总共分为五个层次，逐层向后至少空一格，</span><br><span class="line">第一层－network:: </span><br><span class="line">第二层－－ ethernets:</span><br><span class="line">第三层－－－ ens33:</span><br><span class="line">第四层－－－－addresses:  [192.168.1.55/24]</span><br><span class="line">第四层－－－－gateway4:  192.168.1.254</span><br><span class="line">第四层－－－－nameservers:</span><br><span class="line">第五层－－－－－addresses: [114.114.114.114, 8.8.8.8, 8.8.4.4]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu中dpkg lock解决方案（apt、apt-get运行报错）</title>
    <url>/2020/10/01/Ubuntu%E4%B8%ADdpkg%20lock%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88apt%E3%80%81apt-get%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%89/</url>
    <content><![CDATA[<h4 id="关于Ubuntu中Could-not-get-lock-var-lib-dpkg-lock解决方案"><a href="#关于Ubuntu中Could-not-get-lock-var-lib-dpkg-lock解决方案" class="headerlink" title="关于Ubuntu中Could not get lock /var/lib/dpkg/lock解决方案"></a>关于Ubuntu中Could not get lock /var/lib/dpkg/lock解决方案</h4><hr>
<blockquote>
<p>在Ubuntu中，有时候运用sudo  apt-get install 安装软件时，会出现一下的情况</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要是因为apt还在运行，此时的解决方案:</p>
</blockquote>
<ol>
<li>找到并且杀掉所有的apt-get 和apt进程</li>
</ol>
<ul>
<li><code>ps -A | grep apt</code>找出所有的 apt 以及 apt-get 进程</li>
<li><code>$ sudo kill -9 processnumber</code><br>或者<code>$ sudo kill -SIGKILL processnumber</code></li>
</ul>
<ol start="2">
<li>删除锁定文件</li>
</ol>
<ul>
<li><p>一旦运行了apt-get 或者 apt 命令，锁定文件将会创建于<code>/var/lib/apt/lists/</code>、<code>/var/lib/dpkg/</code>、<code>/var/cache/apt/archives/</code> 中,这有助于运行中的 apt-get 或者 apt 进程能够避免被其它需要使用相同文件的用户或者系统进程所打断。当该进程执行完毕后，锁定文件将会删除。</p>
</li>
<li><p>首先运行命令<code>$ sudo rm /var/lib/dpkg/lock</code>来移除 <code>/var/lib/dpkg/</code> 文件夹下的锁定文件。然后运行<code>$ sudo dpkg --configure -a</code>强制重新配置软件包。</p>
</li>
<li><p>也可以删除 <code>/var/lib/apt/lists/</code> 以及缓存文件夹下的锁定文件</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo rm /var/lib/apt/lists/lock</span><br><span class="line">$ sudo rm /var/cache/apt/archives/lock</span><br></pre></td></tr></table></figure></li>
<li><p>更新软件包源列表<code>$ sudo apt update</code> 或者 <code>$ sudo apt-get update</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu添加应用程序到桌面（desktop）</title>
    <url>/2020/10/01/Ubuntu%E6%B7%BB%E5%8A%A0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%B0%E6%A1%8C%E9%9D%A2%EF%BC%88desktop%EF%BC%89/</url>
    <content><![CDATA[<h3 id="当前用户"><a href="#当前用户" class="headerlink" title="当前用户"></a>当前用户</h3><blockquote>
<p>用户的快捷方式放在用户目录下的.local/share/applications/文件夹里，这种快捷方式一般是在启动器上右键点击图标的锁定在启动器后自动生成的</p>
</blockquote>
<blockquote>
<p>如果只需要对当前用户创建快捷方式，那么可以打开软件，然后右键软件图标锁定在启动器，这时就可以看到.local/share/applications/目录下生成了一个以软件名开头，以.desktop为后缀的文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/user/.local/share/applications</span><br><span class="line">vim xmind.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># xmind.desktop 内容如下</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=XMind</span><br><span class="line">Icon=/home/murray/software/xmind-8-update8-linux/xmind.jpg</span><br><span class="line">Path=/home/murray/software/xmind-8-update8-linux/XMind_amd64</span><br><span class="line">Exec=/home/murray/software/xmind-8-update8-linux/XMind_amd64/XMind</span><br><span class="line">Categories=Application</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupWMClass=XMind;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=WebStorm</span><br><span class="line">Icon=/home/murray/software/WebStorm/bin/webstorm.svg</span><br><span class="line">Exec=&quot;/home/murray/software/WebStorm/bin/webstorm.sh&quot; %f</span><br><span class="line">Comment=The smartest JavaScript IDE</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=false</span><br><span class="line">StartupWMClass=jetbrains-webstorm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=WebStorm</span><br><span class="line">Comment=The smartest JavaScript IDE</span><br><span class="line">Icon=/home/murray/software/WebStorm/bin/webstorm.svg</span><br><span class="line">Path=/home/murray/software/WebStorm/</span><br><span class="line">Exec=/home/murray/software/WebStorm/bin/webstorm.sh</span><br><span class="line">Categories=Application;Development;IDE;</span><br><span class="line">Terminal=false</span><br><span class="line">StartupWMClass=jetbrains-webstorm;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Comment=The smartest Python IDE</span><br><span class="line">Name=Pycharm</span><br><span class="line">Icon=/home/murray/software/pycharm/bin/pycharm.png</span><br><span class="line">Path=/home/murray/software/pycharm</span><br><span class="line">Exec=/home/murray/software/pycharm/bin/pycharm.sh</span><br><span class="line">Categories=Application;Development;IDE;</span><br><span class="line">Terminal=false</span><br><span class="line">StartupWMClass=jetbrains-pycharm;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="所有用户"><a href="#所有用户" class="headerlink" title="所有用户"></a>所有用户</h3><blockquote>
<p>系统级的快捷方式放在/usr/share/applications/文件夹下.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/applications/</span><br><span class="line">vim xmind.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># xmind.desktop 内容如下</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=XMind</span><br><span class="line">Icon=/home/murray/software/xmind-8-update8-linux/xmind.jpg</span><br><span class="line">Path=/home/murray/software/xmind-8-update8-linux/XMind_amd64</span><br><span class="line">Exec=/home/murray/software/xmind-8-update8-linux/XMind_amd64/XMind</span><br><span class="line">Categories=Application</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupWMClass=XMind;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu防火墙ufw</title>
    <url>/2020/10/01/Ubuntu%E9%98%B2%E7%81%AB%E5%A2%99ufw/</url>
    <content><![CDATA[<h3 id="1、Ubuntu安装ufw："><a href="#1、Ubuntu安装ufw：" class="headerlink" title="1、Ubuntu安装ufw："></a>1、Ubuntu安装ufw：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br><span class="line">sudo ufw version 查看防火墙版本</span><br></pre></td></tr></table></figure>

<h3 id="2、防火墙操作："><a href="#2、防火墙操作：" class="headerlink" title="2、防火墙操作："></a>2、防火墙操作：</h3><h4 id="①-启用"><a href="#①-启用" class="headerlink" title="① 启用"></a>① 启用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw enable</span><br><span class="line">sudo ufw default deny</span><br></pre></td></tr></table></figure>
<p>作用：开启了防火墙并随系统启动同时关闭所有外部对本机的访问（本机访问外部正常）。</p>
<h4 id="②-关闭"><a href="#②-关闭" class="headerlink" title="② 关闭"></a>② 关闭</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure>

<h3 id="3、查看防火墙状态"><a href="#3、查看防火墙状态" class="headerlink" title="3、查看防火墙状态"></a>3、查看防火墙状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<h3 id="4、开启-禁用相应端口或服务"><a href="#4、开启-禁用相应端口或服务" class="headerlink" title="4、开启/禁用相应端口或服务"></a>4、开启/禁用相应端口或服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启/禁用：</span><br><span class="line">sudo ufw allow|deny [service]</span><br><span class="line"></span><br><span class="line"># 打开或关闭某个端口，例如：</span><br><span class="line">sudo ufw allow smtp 允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class="line">sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class="line">sudo ufw allow 80 允许外部访问80端口(tcp/udp)</span><br><span class="line">sudo ufw delete allow 80 禁止外部访问80 端口</span><br><span class="line"></span><br><span class="line">sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口</span><br><span class="line">sudo ufw delete allow from 192.168.1.100 删除上面的规则</span><br><span class="line"></span><br><span class="line">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53  允许所有的流量从UDP的53端口的192.168.0.1 到端口53的地址192.168.0.2</span><br><span class="line">sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 22 要拒绝所有的流量从TCP的10.0.0.0/8 到端口22的地址192.168.0.1</span><br><span class="line"></span><br><span class="line">sudo ufw deny smtp 禁止外部访问smtp服务</span><br><span class="line">sudo ufw delete allow smtp 删除上面建立的某条规则</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以允许所有RFC1918网络（局域网/无线局域网的）访问这个主机（/8,/16,/12是一种网络分级）：</span><br><span class="line">sudo ufw allow from 10.0.0.0/8</span><br><span class="line">sudo ufw allow from 172.16.0.0/12</span><br><span class="line">sudo ufw allow from 192.168.0.0/16</span><br></pre></td></tr></table></figure>

<h3 id="5、推荐设置"><a href="#5、推荐设置" class="headerlink" title="5、推荐设置"></a>5、推荐设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br><span class="line">sudo ufw enable</span><br><span class="line">sudo ufw default deny</span><br><span class="line"></span><br><span class="line">开启/关闭防火墙 (默认设置是&#x27;disable&#x27;)</span><br><span class="line">sudo  ufw enable|disable</span><br><span class="line">转换日志状态</span><br><span class="line">sudo  ufw logging on|off</span><br><span class="line">设置默认策略</span><br><span class="line">sudo  ufw default allow|deny</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime&amp;virtualenv开发python代码</title>
    <url>/2021/10/02/Vagant%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="Vagrant下载"><a href="#Vagrant下载" class="headerlink" title="Vagrant下载"></a>Vagrant下载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">地址：https://www.vagrantup.com/downloads.html</span><br><span class="line">文档：https://www.vagrantup.com/docs/</span><br></pre></td></tr></table></figure>

<h4 id="VirtuelBox下载"><a href="#VirtuelBox下载" class="headerlink" title="VirtuelBox下载"></a>VirtuelBox下载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">地址：https://www.virtualbox.org/wiki/Downloads</span><br></pre></td></tr></table></figure>

<h4 id="下载镜像Box"><a href="#下载镜像Box" class="headerlink" title="下载镜像Box"></a>下载镜像Box</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第三方box：http://www.vagrantbox.es/</span><br><span class="line">官方box：https://atlas.hashicorp.com/boxes/search</span><br></pre></td></tr></table></figure>

<h4 id="Vagrant使用"><a href="#Vagrant使用" class="headerlink" title="Vagrant使用"></a>Vagrant使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加Box镜像</span></span><br><span class="line">vagrant box add &#123;box-name&#125; &#123;box-url&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Box列表</span></span><br><span class="line">vagrant box list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Box</span></span><br><span class="line">vagrant box remove &#123;box-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Vagrant环境，执行init后，会在当前文件夹创建一个Vagrant配置文件Vagrantfile</span></span><br><span class="line">vagrant init &#123;box-name&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Vagrant</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Vagrant</span></span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Vagrant， 修改完后执行vagrant reload重启虚拟机生效配置文件。</span></span><br><span class="line">vagrant reload</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置共享文件夹，修改Vagrantfile：</span></span><br><span class="line"></span><br><span class="line">config.vm.synced_folder <span class="string">&quot;/Code/web/&quot;</span>, <span class="string">&quot;/web&quot;</span>, create:<span class="literal">true</span>,</span><br><span class="line">:owner =&gt; <span class="string">&quot;vagrant&quot;</span>,</span><br><span class="line">:group =&gt; <span class="string">&quot;www-data&quot;</span>,</span><br><span class="line">:mount_options =&gt; [<span class="string">&quot;dmode=775&quot;</span>,<span class="string">&quot;fmode=664&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置解释：</span></span><br><span class="line"><span class="comment">#  config.vm.synced_folder host_folder vagrant_folder</span></span><br><span class="line"><span class="comment"># 第一个参数是Host机的文件夹路径，如果你填写的是相对路径的话，则文件夹是相对于当前虚拟机目录。</span></span><br><span class="line"><span class="comment"># 第二个参数是虚拟机的文件夹路径，这个路径必须是绝对路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数：</span></span><br><span class="line"><span class="comment"># create：Bool值。当Host机目录不存在是，是否自动创建。</span></span><br><span class="line"><span class="comment"># group：虚拟机文件夹所属用户组。</span></span><br><span class="line"><span class="comment"># owner：虚拟机文件夹所属用户。</span></span><br><span class="line"><span class="comment"># disabled：Bool值。是否禁用。</span></span><br><span class="line"><span class="comment"># mount_options：挂载参数。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="修改端口映射"><a href="#修改端口映射" class="headerlink" title="修改端口映射"></a>修改端口映射</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑Vagrantfile</span></span><br><span class="line"><span class="comment"># 在 Vagrant.configure(&quot;2&quot;) do |config| 下面新增一行</span></span><br><span class="line">config.vm.network <span class="string">&quot;forwarded_port&quot;</span>, guest: 80, host: 8080</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="修改虚拟机内存"><a href="#修改虚拟机内存" class="headerlink" title="修改虚拟机内存"></a>修改虚拟机内存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件里有写好的配置方法，直接修改这个就行了，但是要注意把注释打开。</span></span><br><span class="line"></span><br><span class="line">config.vm.provider <span class="string">&quot;virtualbox&quot;</span> <span class="keyword">do</span> |vb|  </span><br><span class="line"><span class="comment"># Customize the amount of memory on the VM:</span></span><br><span class="line">vb.memory = <span class="string">&quot;1024&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="修改网卡设置"><a href="#修改网卡设置" class="headerlink" title="修改网卡设置"></a>修改网卡设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 编辑Vagrantfil</span><br><span class="line"># 在 Vagrant.configure(&quot;2&quot;) do |config| 下面新增一行</span><br><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.31.100&quot;</span><br></pre></td></tr></table></figure>



<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>vagrant init</td>
<td>初始化虚拟机</td>
</tr>
<tr>
<td>vagrant up</td>
<td>启动虚拟机</td>
</tr>
<tr>
<td>vagrant halt</td>
<td>关闭虚拟机</td>
</tr>
<tr>
<td>vagrant reload</td>
<td>重启虚拟机</td>
</tr>
<tr>
<td>vagrant suspend</td>
<td>挂起虚拟机</td>
</tr>
<tr>
<td>vagrant ssh</td>
<td>登录虚拟机</td>
</tr>
<tr>
<td>vagrant status</td>
<td>查看虚拟机运行状态</td>
</tr>
<tr>
<td>vagrant destroy</td>
<td>销毁虚拟机</td>
</tr>
<tr>
<td>vagrant box list</td>
<td>查看本地Box列表</td>
</tr>
<tr>
<td>vagrant box add {box-name} {box-url}</td>
<td>添加Box</td>
</tr>
<tr>
<td>vagrant box remove {box-name}</td>
<td>删除Box</td>
</tr>
<tr>
<td>vagrant package –output xxx.box</td>
<td>打包虚拟机成Box</td>
</tr>
<tr>
<td>vagrant destroy</td>
<td>删除虚拟机</td>
</tr>
</tbody></table>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 Apache/Nginx 时会出现诸如图片修改后但页面刷新仍然是旧文件的情况，</span></span><br><span class="line"><span class="comment"># 是由于静态文件缓存造成的。需要对虚拟机里的 Apache/Nginx </span></span><br><span class="line"><span class="comment"># 配置文件进行修改：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache 配置（httpd.conf 或者 apache.conf）添加：</span></span><br><span class="line">EnableSendfile off</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 配置（nginx.conf）添加：</span></span><br><span class="line">sendfile off;</span><br></pre></td></tr></table></figure>

<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><h5 id="Vagrant介绍"><a href="#Vagrant介绍" class="headerlink" title="Vagrant介绍"></a>Vagrant介绍</h5><blockquote>
<p>Vagrant 是一款用来构建虚拟开发环境的工具，常适合 php/python/ruby/java 这类语言开发 web 应用。</p>
</blockquote>
<h5 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h5><blockquote>
<p>Provider：供应商，在这里指Vagrant调用的虚拟化工具。Vagrant本身并没有能力创建虚拟机，它是调用一些虚拟化工具来创建，如VirtualBox、VMWare、Xen、Docker，甚至AWS，这些虚拟化工具只要安装好了，vagrant会自动封装在底层通过统一的命令调用。也就是说使用vagrant时你电脑上还需要安装对应的Provider，默认是免费开源的virtualbox。</p>
</blockquote>
<blockquote>
<p>Box：可被Vagrant直接使用的虚拟机镜像文件，大小根据内容的不同从200M-2G不等。针对不同的Provider，Box文件的格式是不一样的，从 vagrantcloud.com 你可以找到社区维护的box。</p>
</blockquote>
<blockquote>
<p>Vagrantfile：Vagrant根据Vagrantfile中的配置来创建虚拟机，是Vagrant的核心。在Vagrantfile文件中你需要指明使用哪个Box（可以下载好的或自己制作，或指定在线的URL地址），虚拟机使用的内存大小和CPU，需要预安装哪些软件，虚拟机的网络配置，与host的共享目录等。</p>
</blockquote>
<blockquote>
<p>Provisioner：是Vagrant的插件的一种。大部分现成的box并不是你正好想要的，通过使用你熟悉的provisioner，比如Puppet，可以在你使用vagrant up启动虚拟机时自动的安装软件、修改配置等初始化操作。当然你也可以在最先启动虚拟机后，使用vagrant ssh进去然后手动安装软件，但毕竟不是所有人都是系统管理员，写好Vagrantfile后无需人工干预马上就可以使用vm。目前支持并实现的provisioning有Puppet、Salt、Ansible、Chef这些知名的自动化运维工具，当然需要一定的使用经验；也可以使用shell provisioner，故名思议这个插件就是通过执行shell命令完成统一的作用。</p>
</blockquote>
<blockquote>
<p>Guest Additions：这个是常在下载 base box 介绍里有的，一般用来实现host到vm的端口转发、目录共享，在开发环境上都建议装上以便测试。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>Weave Scope 监控集群</title>
    <url>/2020/01/01/Weave%20Scope%20%E7%9B%91%E6%8E%A7%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方：https://www.weave.works/oss/scope/</span><br><span class="line">博文：https://www.cnblogs.com/CloudMan6/p/9118943.html</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Weave</tag>
      </tags>
  </entry>
  <entry>
    <title>XML解析</title>
    <url>/2020/06/02/XML%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h4 id="1、DOM解析"><a href="#1、DOM解析" class="headerlink" title="1、DOM解析"></a>1、DOM解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.xml;</span><br><span class="line"></span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.jdom2.Document;</span><br><span class="line">import org.jdom2.Element;</span><br><span class="line">import org.jdom2.input.SAXBuilder;</span><br><span class="line">import org.jdom2.output.XMLOutputter;</span><br><span class="line">import org.jdom2.xpath.XPath;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* JDOM生成和解析XML 为减少DOM、SAX的编码量，出现了JDOM；</span><br><span class="line">* 优点：20-80原则，极大减少了代码量。</span><br><span class="line">* 使用场合：要实现的功能简单，如解析、创建等，但在底层，JDOM还是使用SAX（最常用）、DOM、Xanan文档。</span><br><span class="line">*</span><br><span class="line">* @author MaYawei</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">public class JDOMDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        createXml(&quot;JDOM.xml&quot;);</span><br><span class="line">        parserXml(&quot;JDOM.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * JDOM生成xml</span><br><span class="line">     * @param fileName</span><br><span class="line">     */</span><br><span class="line">    public static void createXml(String fileName) &#123;</span><br><span class="line">        //创建DOC</span><br><span class="line">        Document doc = new Document();</span><br><span class="line">        //根节点</span><br><span class="line">        Element root = new Element(&quot;persons&quot;);</span><br><span class="line">        root.setAttribute(&quot;id&quot;,&quot;persons&quot;);</span><br><span class="line">        doc.addContent(root);</span><br><span class="line">        //添加子节点1</span><br><span class="line">        Element p1 = new Element(&quot;person&quot;).setAttribute(&quot;id&quot;, &quot;p1&quot;);</span><br><span class="line">        p1.addContent(new Element(&quot;name&quot;).setText(&quot;lili&quot;));</span><br><span class="line">        p1.addContent(new Element(&quot;age&quot;).setText(&quot;18&quot;));</span><br><span class="line">        root.addContent(p1);</span><br><span class="line">        //添加子节点2</span><br><span class="line">        root.addContent(new Element(&quot;person&quot;).setAttribute(&quot;id&quot;, &quot;p2&quot;)</span><br><span class="line">                .addContent(new Element(&quot;name&quot;).setText(&quot;zhangsan&quot;))</span><br><span class="line">                .addContent(new Element(&quot;age&quot;).setText(&quot;20&quot;)));</span><br><span class="line">        //添加子节点3</span><br><span class="line">        root.addContent(new Element(&quot;other&quot;).setAttribute(&quot;id&quot;, &quot;p3&quot;)</span><br><span class="line">                .addContent(new Element(&quot;name&quot;).setText(&quot;lisi&quot;))</span><br><span class="line">                .addContent(new Element(&quot;age&quot;).setText(&quot;20&quot;)));</span><br><span class="line">        //输出xml</span><br><span class="line">        XMLOutputter xmlOut = new XMLOutputter();</span><br><span class="line">        try &#123;</span><br><span class="line">            xmlOut.output(doc, new FileOutputStream(fileName));</span><br><span class="line">            //输出为String</span><br><span class="line">            //xmlOut.output(doc, System.out);</span><br><span class="line">            String outputStr = xmlOut.outputString(doc);</span><br><span class="line">            System.out.println(outputStr);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * JDOM解析xml</span><br><span class="line">     * @param fileName</span><br><span class="line">     */</span><br><span class="line">    public static void parserXml(String fileName) &#123;</span><br><span class="line">        SAXBuilder builder = new SAXBuilder();</span><br><span class="line">        try &#123;</span><br><span class="line">            Document doc = builder.build(fileName);</span><br><span class="line">            Element employees = doc.getRootElement();</span><br><span class="line">            //List&lt;Element&gt; employeeList = employees.getChildren();</span><br><span class="line">            List&lt;Element&gt; employeeList = employees.getChildren(&quot;person&quot;);//获取特定的XML节点</span><br><span class="line">            for (int i = 0; i &lt; employeeList.size(); i++) &#123;</span><br><span class="line">                Element employee = (Element) employeeList.get(i);</span><br><span class="line">                List&lt;Element&gt; employeeInfo = employee.getChildren();</span><br><span class="line">                for (int j = 0; j &lt; employeeInfo.size(); j++) &#123;</span><br><span class="line">                    System.out.println(((Element) employeeInfo.get(j)).getName()</span><br><span class="line">                            + &quot;:&quot; + ((Element) employeeInfo.get(j)).getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            employeeList.get(0).removeChild(&quot;age&quot;);</span><br><span class="line">            employeeList.get(0).addContent(new Element(&quot;hobby&quot;).setText(&quot;football&quot;));</span><br><span class="line">            for (int i = 0; i &lt; employeeList.size(); i++) &#123;</span><br><span class="line">                Element employee = (Element) employeeList.get(i);</span><br><span class="line">                List&lt;Element&gt; employeeInfo = employee.getChildren();</span><br><span class="line">                for (int j = 0; j &lt; employeeInfo.size(); j++) &#123;</span><br><span class="line">                    System.err.println(((Element) employeeInfo.get(j)).getName()</span><br><span class="line">                            + &quot;:&quot; + ((Element) employeeInfo.get(j)).getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、SAX解析"><a href="#2、SAX解析" class="headerlink" title="2、SAX解析"></a>2、SAX解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.xml;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.SAXParser;</span><br><span class="line">import javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.xml.sax.Attributes;</span><br><span class="line">import org.xml.sax.SAXException;</span><br><span class="line">import org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* SAX生成和解析XML文档</span><br><span class="line">* 为解决DOM的问题，出现了SAX。SAX事件驱动。</span><br><span class="line">* 当解析器发现元素开始、元素结束、文本、文档的开始或结束等时，发送事件，程序员编写响应这些事件的代码，保存数据。</span><br><span class="line">* 优点：不用事先调入整个文档，占用资源少；SAX解析器代码比DOM解析器代码小，适于Applet，下载。</span><br><span class="line">* 缺点：不是持久的；事件过后，若没保存数据，那么数据就丢了；</span><br><span class="line">* 无状态性；从事件中只能得到文本，但不知该文本属于哪个元素；</span><br><span class="line">* 使用场合：Applet;只需XML文档的少量内容，很少回头访问；</span><br><span class="line">* 机器内存少；</span><br><span class="line">* @author MaYawei</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">public class SAXDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        parseXml(&quot;JDOM.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void parseXml(String filepath)&#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //String xmlName = filepath.substring(filepath.lastIndexOf(File.separatorChar)+1);</span><br><span class="line">            //获取SAX分析器的工厂实例，专门负责创建SAXParser分析器</span><br><span class="line">            SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();</span><br><span class="line">            //获取SAXParser分析器的实例</span><br><span class="line">            SAXParser saxParser = saxParserFactory.newSAXParser();</span><br><span class="line">            //和其他解析方式一样，也要间接通过InputStream输入流对象获取xml信息</span><br><span class="line">            //1、直接指定绝对路径获取文件输入流对象</span><br><span class="line">            //InputStream inputStream = new FileInputStream(xmlPath);</span><br><span class="line">            //2、使用类的相对路径查找xml路径</span><br><span class="line">            //InputStream inputStream = this.getClass().getResourceAsStream(xmlName);</span><br><span class="line">            //3、也可以指定路径完成InputStream输入流的实例化操作</span><br><span class="line">            InputStream inputStream = new FileInputStream(new File(filepath));</span><br><span class="line">            //4、使用InputSource输入源作为参数也可以转换xml</span><br><span class="line">            //InputSource inputSource = new InputSource(inputStream);</span><br><span class="line"></span><br><span class="line">            //解析xml文档</span><br><span class="line">            XmlSAXHandler handler = new XmlSAXHandler(&quot;person&quot;,&quot;other&quot;);</span><br><span class="line">            saxParser.parse(inputStream,handler);//这里传递了自定义的XmlSAXHandler()管理者参数来解析xml,不像以前都是直接调用返回的Document对象</span><br><span class="line">            System.out.println(handler.getParseXmlList());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class XmlSAXHandler extends DefaultHandler &#123;</span><br><span class="line"></span><br><span class="line">    //存储正在解析的元素的数据</span><br><span class="line">    private Map&lt;String,String&gt; map=null;</span><br><span class="line">    //存储所有解析的元素的数据</span><br><span class="line">    private List&lt;Map&lt;String,String&gt;&gt; list=null;</span><br><span class="line">    //正在解析的元素的名字</span><br><span class="line">    private String currentTag=null;</span><br><span class="line">    //正在解析的元素的元素值</span><br><span class="line">    private String currentValue=null;</span><br><span class="line">    //开始解析的元素</span><br><span class="line">    private String nodeNames=null;</span><br><span class="line">    //构造</span><br><span class="line">    public XmlSAXHandler(String... args) &#123;</span><br><span class="line">        this.nodeNames = StringUtils.join(args, &quot;,&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 判读是否包含</span><br><span class="line">     * @param str</span><br><span class="line">     * @param subStr</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean isContants(String str,String subStr)&#123;</span><br><span class="line">        String[] strs = str.split(&quot;,&quot;);</span><br><span class="line">        for (String s : strs) &#123;</span><br><span class="line">            if(s.equals(subStr))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 开始解析XML文档</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void startDocument() throws SAXException &#123;</span><br><span class="line">        list=new ArrayList&lt;Map&lt;String,String&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 开始解析每个元素时都会调用</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void startElement(String uri, String localName, String qName,</span><br><span class="line">            Attributes attributes) throws SAXException &#123;</span><br><span class="line">        // 判断正在解析的元素是不是开始解析的元素</span><br><span class="line">        if (isContants(nodeNames,qName)) &#123;</span><br><span class="line">            map = new HashMap&lt;String, String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        // 判断正在解析的元素是否有属性值,如果有则将其全部取出并保存到map对象中</span><br><span class="line">        if (attributes != null &amp;&amp; map != null) &#123;</span><br><span class="line">            for (int i = 0; i &lt; attributes.getLength(); i++) &#123;</span><br><span class="line">                map.put(attributes.getQName(i), attributes.getValue(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        currentTag = qName; // 正在解析的元素</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析到每个元素的内容时会调用</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void characters(char[] ch, int start, int length) throws SAXException &#123;</span><br><span class="line">        if (currentTag != null &amp;&amp; map != null) &#123;</span><br><span class="line">            currentValue = new String(ch, start, length);</span><br><span class="line">            // 如果内容不为空和空格，也不是换行符则将该元素名和值和存入map中</span><br><span class="line">            if (currentValue != null &amp;&amp; !currentValue.trim().equals(&quot;&quot;)</span><br><span class="line">                    &amp;&amp; !currentValue.trim().equals(&quot;\n&quot;)) &#123;</span><br><span class="line">                map.put(currentTag, currentValue);</span><br><span class="line">                System.out.println(currentTag + &quot;：&quot; + currentValue);</span><br><span class="line">            &#125;</span><br><span class="line">            // 当前的元素已解析过，将其置空用于下一个元素的解析</span><br><span class="line">            currentTag = null;</span><br><span class="line">            currentValue = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析到每个元素结束时会调用</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void endElement(String uri, String localName, String qName)</span><br><span class="line">            throws SAXException &#123;</span><br><span class="line">        // 判断是否为一个节点结束的元素标签</span><br><span class="line">        if (isContants(nodeNames,qName)&amp;&amp;map!=null) &#123;</span><br><span class="line">            list.add(map);</span><br><span class="line">            map = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 结束解析文档，即解析根元素结束标签时调用</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void endDocument() throws SAXException &#123;</span><br><span class="line">        //System.err.println(&quot;---SAX：end---&quot;);</span><br><span class="line">        super.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取解析数据</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Map&lt;String, String&gt;&gt; getParseXmlList()&#123;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、DOM4J解析"><a href="#3、DOM4J解析" class="headerlink" title="3、DOM4J解析"></a>3、DOM4J解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.xml;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.Writer;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">import org.dom4j.Document;</span><br><span class="line">import org.dom4j.DocumentException;</span><br><span class="line">import org.dom4j.DocumentHelper;</span><br><span class="line">import org.dom4j.Element;</span><br><span class="line">import org.dom4j.io.SAXReader;</span><br><span class="line">import org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* DOM4J生成和解析XML文档 DOM4J 是一个非常非常优秀的Java XML</span><br><span class="line">* API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。 如今你可以看到越来越多的 Java 软件都在使用 DOM4J 来读写</span><br><span class="line">* XML，特别值得一提的是连 Sun 的 JAXM 也在用 DOM4J</span><br><span class="line">*</span><br><span class="line">* @author MaYawei</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">public class DOM4JDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        createXml(&quot;dom4j.xml&quot;);</span><br><span class="line">        parserXml(&quot;dom4j.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * DOM4J生成xml</span><br><span class="line">     * @param fileName</span><br><span class="line">     */</span><br><span class="line">    public static void createXml(String fileName) &#123;</span><br><span class="line">        Document document = DocumentHelper.createDocument();</span><br><span class="line">        Element employees = document.addElement(&quot;employees&quot;);</span><br><span class="line">        Element employee = employees.addElement(&quot;employee&quot;);</span><br><span class="line">        Element name = employee.addElement(&quot;name&quot;);</span><br><span class="line">        name.setText(&quot;zhangsan&quot;);</span><br><span class="line">        Element sex = employee.addElement(&quot;sex&quot;);</span><br><span class="line">        sex.setText(&quot;m&quot;);</span><br><span class="line">        Element age = employee.addElement(&quot;age&quot;);</span><br><span class="line">        age.setText(&quot;29&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            Writer fileWriter = new FileWriter(fileName);</span><br><span class="line">            XMLWriter xmlWriter = new XMLWriter(fileWriter);</span><br><span class="line">            xmlWriter.write(document);</span><br><span class="line">            xmlWriter.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * DOM4J解析xml</span><br><span class="line">     * @param fileName</span><br><span class="line">     */</span><br><span class="line">    public static void parserXml(String fileName) &#123;</span><br><span class="line">        File inputXml = new File(fileName);</span><br><span class="line">        SAXReader saxReader = new SAXReader();</span><br><span class="line">        try &#123;</span><br><span class="line">            Document document = saxReader.read(inputXml);</span><br><span class="line">            Element employees = document.getRootElement();</span><br><span class="line">            for (Iterator&lt;Element&gt; i = employees.elementIterator(); i.hasNext();) &#123;</span><br><span class="line">                Element employee = (Element) i.next();</span><br><span class="line">                for (Iterator&lt;Element&gt; j = employee.elementIterator(); j.hasNext();) &#123;</span><br><span class="line">                    Element node = (Element) j.next();</span><br><span class="line">                    System.out.println(node.getName() + &quot;:&quot; + node.getText());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (DocumentException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4、JDOM解析"><a href="#4、JDOM解析" class="headerlink" title="4、JDOM解析"></a>4、JDOM解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.xml;</span><br><span class="line"></span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.jdom2.Document;</span><br><span class="line">import org.jdom2.Element;</span><br><span class="line">import org.jdom2.input.SAXBuilder;</span><br><span class="line">import org.jdom2.output.XMLOutputter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* JDOM生成和解析XML 为减少DOM、SAX的编码量，出现了JDOM；</span><br><span class="line">* 优点：20-80原则，极大减少了代码量。</span><br><span class="line">* 使用场合：要实现的功能简单，如解析、创建等，但在底层，JDOM还是使用SAX（最常用）、DOM、Xanan文档。</span><br><span class="line">*</span><br><span class="line">* @author MaYawei</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">public class JDOMDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        createXml(&quot;JDOM.xml&quot;);</span><br><span class="line">        parserXml(&quot;JDOM.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * JDOM生成xml</span><br><span class="line">     * @param fileName</span><br><span class="line">     */</span><br><span class="line">    public static void createXml(String fileName) &#123;</span><br><span class="line">        //创建DOC</span><br><span class="line">        Document doc = new Document();</span><br><span class="line">        //根节点</span><br><span class="line">        Element root = new Element(&quot;persons&quot;);</span><br><span class="line">        root.setAttribute(&quot;id&quot;,&quot;persons&quot;);</span><br><span class="line">        doc.addContent(root);</span><br><span class="line">        //添加子节点1</span><br><span class="line">        Element p1 = new Element(&quot;person&quot;).setAttribute(&quot;id&quot;, &quot;p1&quot;);</span><br><span class="line">        p1.addContent(new Element(&quot;name&quot;).setText(&quot;lili&quot;));</span><br><span class="line">        p1.addContent(new Element(&quot;age&quot;).setText(&quot;18&quot;));</span><br><span class="line">        root.addContent(p1);</span><br><span class="line">        //添加子节点2</span><br><span class="line">        root.addContent(new Element(&quot;person&quot;).setAttribute(&quot;id&quot;, &quot;p2&quot;)</span><br><span class="line">                .addContent(new Element(&quot;name&quot;).setText(&quot;zhangsan&quot;))</span><br><span class="line">                .addContent(new Element(&quot;age&quot;).setText(&quot;20&quot;)));</span><br><span class="line">        //添加子节点3</span><br><span class="line">        root.addContent(new Element(&quot;other&quot;).setAttribute(&quot;id&quot;, &quot;p3&quot;)</span><br><span class="line">                .addContent(new Element(&quot;name&quot;).setText(&quot;lisi&quot;))</span><br><span class="line">                .addContent(new Element(&quot;age&quot;).setText(&quot;20&quot;)));</span><br><span class="line">        //输出xml</span><br><span class="line">        XMLOutputter xmlOut = new XMLOutputter();</span><br><span class="line">        try &#123;</span><br><span class="line">            xmlOut.output(doc, new FileOutputStream(fileName));</span><br><span class="line">            //输出为String</span><br><span class="line">            //xmlOut.output(doc, System.out);</span><br><span class="line">            String outputStr = xmlOut.outputString(doc);</span><br><span class="line">            System.out.println(outputStr);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * JDOM解析xml</span><br><span class="line">     * @param fileName</span><br><span class="line">     */</span><br><span class="line">    public static void parserXml(String fileName) &#123;</span><br><span class="line">        SAXBuilder builder = new SAXBuilder();</span><br><span class="line">        try &#123;</span><br><span class="line">            Document doc = builder.build(fileName);</span><br><span class="line">            Element employees = doc.getRootElement();</span><br><span class="line">            //List&lt;Element&gt; employeeList = employees.getChildren();</span><br><span class="line">            List&lt;Element&gt; employeeList = employees.getChildren(&quot;person&quot;);//获取特定的XML节点</span><br><span class="line">            for (int i = 0; i &lt; employeeList.size(); i++) &#123;</span><br><span class="line">                Element employee = (Element) employeeList.get(i);</span><br><span class="line">                List&lt;Element&gt; employeeInfo = employee.getChildren();</span><br><span class="line">                for (int j = 0; j &lt; employeeInfo.size(); j++) &#123;</span><br><span class="line">                    System.out.println(((Element) employeeInfo.get(j)).getName()</span><br><span class="line">                            + &quot;:&quot; + ((Element) employeeInfo.get(j)).getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            employeeList.get(0).removeChild(&quot;age&quot;);</span><br><span class="line">            employeeList.get(0).addContent(new Element(&quot;hobby&quot;).setText(&quot;football&quot;));</span><br><span class="line">            for (int i = 0; i &lt; employeeList.size(); i++) &#123;</span><br><span class="line">                Element employee = (Element) employeeList.get(i);</span><br><span class="line">                List&lt;Element&gt; employeeInfo = employee.getChildren();</span><br><span class="line">                for (int j = 0; j &lt; employeeInfo.size(); j++) &#123;</span><br><span class="line">                    System.err.println(((Element) employeeInfo.get(j)).getName()</span><br><span class="line">                            + &quot;:&quot; + ((Element) employeeInfo.get(j)).getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Xml</tag>
      </tags>
  </entry>
  <entry>
    <title>angularJs中ng-class的三种使用方式说明</title>
    <url>/2019/06/02/angularJs%E4%B8%ADng-class%E7%9A%84%E4%B8%89%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h3 id="angularJs中ng-class的三种使用方式说明"><a href="#angularJs中ng-class的三种使用方式说明" class="headerlink" title="angularJs中ng-class的三种使用方式说明"></a>angularJs中ng-class的三种使用方式说明</h3><p>在开发中，一个元素在不同的状态需要展现不同的样式，这就要改变其css属性，而实现能动态的改变其属性值，必然只能是更换其class属性，这里有三种方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 通过数据的双向绑定（不推荐）</span><br><span class="line">② 通过对象数组</span><br><span class="line">③ 通过key/value</span><br></pre></td></tr></table></figure>

<h3 id="具体说明"><a href="#具体说明" class="headerlink" title="具体说明"></a>具体说明</h3><h4 id="第一种：通过数据的双向绑定"><a href="#第一种：通过数据的双向绑定" class="headerlink" title="第一种：通过数据的双向绑定"></a>第一种：通过数据的双向绑定</h4><p>实现方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function changeClass()&#123;</span><br><span class="line">  $scope.className = &quot;change2&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;&#123;&#123;className&#125;&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="第二种：通过字符串数组的形式来改变"><a href="#第二种：通过字符串数组的形式来改变" class="headerlink" title="第二种：通过字符串数组的形式来改变"></a>第二种：通过字符串数组的形式来改变</h4><p>实现方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function changeClass()&#123;</span><br><span class="line">  $scope.className = true/false;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div ng-class=&quot;&#123;true:&#x27;zhende&#x27;,false:&#x27;jiade&#x27;&#125;[className]&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>实现很简单，就是当className为true的时候class为zhende，相反则为jiade。注意种方式有一点不好，就是只能够让一个元素拥有两种状态。</p>
<h4 id="第三种：通过key-value的方式"><a href="#第三种：通过key-value的方式" class="headerlink" title="第三种：通过key/value的方式"></a>第三种：通过key/value的方式</h4><p>实现方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function changeClass()&#123;</span><br><span class="line">  $scope.lala = true;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div ng-class=&quot;&#123;&#x27;selectClass&#x27;:select,&#x27;choiceClass&#x27;:choice,&#x27;haha&#x27;:lala&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当lala为true的时候，class则为haha，个人认为这个是比较推荐的，可以弥补第二种方式的点点遗憾</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>AngularJs</tag>
      </tags>
  </entry>
  <entry>
    <title>beego项目笔记</title>
    <url>/2021/08/08/beego%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GOROOT: go安装根目录</span><br><span class="line">GOROOT</span><br><span class="line">GOROOT/bin</span><br><span class="line"></span><br><span class="line"># GOPATH: Go全局目录</span><br><span class="line">GOPATH</span><br><span class="line">GOPATH/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="beego安装"><a href="#beego安装" class="headerlink" title="beego安装"></a>beego安装</h3><blockquote>
<p>beego的安装是典型的 Go 安装包的形式</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/astaxie/beego</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装bee工具"><a href="#安装bee工具" class="headerlink" title="安装bee工具"></a>安装bee工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/beego/bee</span><br><span class="line"><span class="comment"># 安装完之后，bee 可执行文件默认存放在 $GOPATH/bin 里面</span></span><br><span class="line"><span class="comment"># 需要把 $GOPATH/bin 添加到环境变量中</span></span><br></pre></td></tr></table></figure>


















<h3 id="参考：https-beego-me-docs"><a href="#参考：https-beego-me-docs" class="headerlink" title="参考：https://beego.me/docs/"></a>参考：<a href="https://beego.me/docs/">https://beego.me/docs/</a></h3>]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Beego</tag>
      </tags>
  </entry>
  <entry>
    <title>celery 监控与管理</title>
    <url>/2021/04/01/celery%20%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="Workers-命令行管理工具"><a href="#Workers-命令行管理工具" class="headerlink" title="Workers 命令行管理工具"></a>Workers 命令行管理工具</h4><blockquote>
<p>Workers 命令行管理工具，celery也可以用来检查和管理worker节点（和对tasks在一定程度上的管理）。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有可用的命令：</span></span><br><span class="line">celery <span class="built_in">help</span></span><br><span class="line"><span class="comment"># 或者获取指定命令的帮助：</span></span><br><span class="line">celery &lt;<span class="built_in">command</span>&gt; --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态：列出集群中的所有节点</span></span><br><span class="line">celery -A proj status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：显示一个任务的结果</span></span><br><span class="line">celery -A proj result -t tasks.add 4e196aa4-0141-4601-8138-7aa33db0f577</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除：从所有配置的任务队列中清除信息</span></span><br><span class="line">celery -A proj purge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过-Q选项来指定要清除的队列：</span></span><br><span class="line">celery -A proj purge -Q celery,foo,bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过-X选项来排除被清除的队列：</span></span><br><span class="line">celery -A proj purge -X celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控活动：列出活动的任务</span></span><br><span class="line">$ celery -A proj inspect active <span class="comment"># 这会显示所有当前正在执行的任务。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控调度：列出被调度的ETA任务。</span></span><br><span class="line">$ celery -A proj inspect scheduled <span class="comment"># worker的保留任务，因为它们设置了 eta 或者 countdown 参数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控保留：列出所有保留任务。</span></span><br><span class="line">$ celery -A proj inspect reserved <span class="comment"># 这会列出所有被worker预取的任务，还有当前正在等待执行的任务（不包含eta任务）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控撤销：列出任务撤销历史。</span></span><br><span class="line">celery -A proj inspect revoked</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控注册：列出注册的任务</span></span><br><span class="line">celery -A proj inspect registered</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控状态：显示worker统计数据</span></span><br><span class="line">celery -A proj inspect stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制enable_events:使能Event</span></span><br><span class="line">celery -A proj control enable_events</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制disable_events:禁用Events</span></span><br><span class="line">celery -A proj control disable_events</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移：将任务从一个broker迁移到另一个。</span></span><br><span class="line">celery -A proj migrate redis://localhost amqp://localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：所有的inspect和control命令都支持timeout参数，这个是等待响应的超时时间。如果因为延时而没有收到响应，就需要增加这个时间。</span></span><br></pre></td></tr></table></figure>

<h4 id="Flower"><a href="#Flower" class="headerlink" title="Flower"></a>Flower</h4><blockquote>
<p>Flower:Celery的实时web监控<br>Flower是一个Celery的基于web的实时监控和管理工具。它还在积极的开发之中，但是已经是一个很有效的工具了。它也是Celery建议使用的监控工具，废弃了Django-Admin,celerymon和基于ncurses的监控。</p>
</blockquote>
<blockquote>
<p>使用方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用pip进行安装</span><br><span class="line">pip install flower</span><br><span class="line"></span><br><span class="line"># 运行flower命令会启动一个可供你浏览的web服务器</span><br><span class="line">celery -A proj flower</span><br><span class="line"></span><br><span class="line"># 默认端口是5555，但是你可以通过 --port 参数来改变</span><br><span class="line">celery -A proj flower --port=5555</span><br><span class="line"></span><br><span class="line"># broker URL 也可以通过 --broker 参数来传递</span><br><span class="line">celery flower --broker=amqp://guest:guest@localhost:5672//</span><br><span class="line"># or</span><br><span class="line">celery flower --broker=redis://guest:guest@localhost:6379/0</span><br><span class="line"></span><br><span class="line"># 浏览器访问：</span><br><span class="line">open http://localhost:5555</span><br><span class="line"></span><br><span class="line"># Flower还有很多其它的特性，包括一些授权相关的选项。</span><br><span class="line"># 更多信息请参考官方文档：http://flower.readthedocs.io/en/latest/</span><br></pre></td></tr></table></figure>

<h4 id="celery事件-Curses监控（2-0中的新特性）"><a href="#celery事件-Curses监控（2-0中的新特性）" class="headerlink" title="celery事件:Curses监控（2.0中的新特性）"></a>celery事件:Curses监控（2.0中的新特性）</h4><blockquote>
<p>celery事件是一个简单的curses监控用来展示任务和worker的历史。你可以监控任务的结果和调用栈，它也支持一些管理命令如频率限制和关闭worker.这个工具的目的是做概念验证的，所以最有可能还是希望使用Flower.</p>
</blockquote>
<ul>
<li>启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A proj events</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>celery事件也用来开启快照相机，查看快照说明：Snapshots（<a href="http://docs.celeryproject.org/en/master/userguide/monitoring.html#monitoring-snapshots%EF%BC%89">http://docs.celeryproject.org/en/master/userguide/monitoring.html#monitoring-snapshots）</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A proj events --camera=&lt;camera-class&gt; --frequency=1.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>它有一个将事件dump到标准输出的工具:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A proj events --dump</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过使用”–help”选项查看完整的选项列表:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery events --help</span><br></pre></td></tr></table></figure>

<h4 id="参考：http-blog-csdn-net-happyanger6-article-details-51591458"><a href="#参考：http-blog-csdn-net-happyanger6-article-details-51591458" class="headerlink" title="参考：http://blog.csdn.net/happyanger6/article/details/51591458"></a>参考：<a href="http://blog.csdn.net/happyanger6/article/details/51591458">http://blog.csdn.net/happyanger6/article/details/51591458</a></h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>celery之workers</title>
    <url>/2021/04/01/celery%E4%B9%8Bworkers/</url>
    <content><![CDATA[<h4 id="Celery-Workers-配置"><a href="#Celery-Workers-配置" class="headerlink" title="Celery Workers 配置"></a>Celery Workers 配置</h4><ul>
<li><p>启动worker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在前台启动worker</span></span><br><span class="line">celery -A proj worker -l info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看worker命令的所有相关选项</span></span><br><span class="line">celery worker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以在同一台机器上启动多个worker</span></span><br><span class="line"><span class="comment"># 如果这样做,需要用包含hostname参数的节点名来使每个worke有唯一的名字。</span></span><br><span class="line">celery -A proj worker --loglevel=INFO --concurrency=10 -n worker1.%h</span><br><span class="line">celery -A proj worker --loglevel=INFO --concurrency=10 -n worker2.%h</span><br><span class="line">celery -A proj worker --loglevel=INFO --concurrency=10 -n worker3.%h</span><br><span class="line"><span class="comment"># hostname参数可以扩展成以下变量:</span></span><br><span class="line"><span class="comment"># %h:包括域名的主机名</span></span><br><span class="line"><span class="comment"># %n:只包含主机名</span></span><br><span class="line"><span class="comment"># %d:只包含域名</span></span><br><span class="line"><span class="comment"># 举例:当前的主机名是george.example.com, 则分别可以扩展成以下几种形式:</span></span><br><span class="line"><span class="comment"># worker1.%h -&gt; worker1.george.example.com</span></span><br><span class="line"><span class="comment"># worker1.%n -&gt; worker1.george</span></span><br><span class="line"><span class="comment"># worker1.%d -&gt; worker1.example.com</span></span><br><span class="line"><span class="comment"># 注意：要使用%需要使用2个%,比如%%h.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>停止worker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 终止worker是通过TERM信号实现的。</span><br><span class="line"></span><br><span class="line"># 向worker发送了shutdown命令后，worker在实际终止前会执行完当前所有正在执行的任务。所以如果这些任务很重要，你需要等待worker结束而不要采取其它极端手段（如发送KILL信号）。</span><br><span class="line"># 如果worker在一段时间后仍然没有停止，比如因为task中有死循环，你可以使用KILL信号强制终止worker.但是注意当前正在执行的任务将会丢失（除非task设置了acks_late选项）。</span><br><span class="line"># 因为KILL信号不能捕获，所以worker不能捕捉子进程的状态，需要手工确认。</span><br><span class="line"># 下面是常用的技巧:</span><br><span class="line">ps auxww | grep &#x27;celery worker&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启worker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重启一个worker，需要发送TERM信号然后启动一个新实例。</span><br><span class="line"># 在开发过程中最简单的管理workers的方法是使用&quot;celery multi&quot;:</span><br><span class="line">celery multi start 1 -A proj -l info -c4 --pidfile=/var/run/celery/%n.pid</span><br><span class="line">celery multi restart 1 --pidfile=/var/run/celery/%n.pid</span><br><span class="line"></span><br><span class="line"># 在生产环境中，需要使用初始化脚本或者其它进程管理系统(Running the worker as a daemon)。</span><br><span class="line"># 除了停止worker再启动它，还可以使用HUP信号来重启worker。</span><br><span class="line"># 但是注意worker会负责重启自己，所以使用HUP可能会引起问题，不建议在生产环境中使用。</span><br><span class="line">kill -HUP $pid</span><br><span class="line"></span><br><span class="line"># 注意: </span><br><span class="line"># 通过HUP重启worker仅适用于在后台运行的worker,因为它没有控制终端。</span><br><span class="line"># HUP在macOS上是禁用的，因为平台的限制。</span><br></pre></td></tr></table></figure>
</li>
<li><p>进程信号</p>
</li>
</ul>
<blockquote>
<p>worker主进程会处理以下信号:</p>
</blockquote>
<table>
<thead>
<tr>
<th>信号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>TERM</td>
<td>热重启，等待任务运行结束</td>
</tr>
<tr>
<td>QUIT</td>
<td>冷重启, 尽快终止进程</td>
</tr>
<tr>
<td>USR1</td>
<td>dump 所有活动线程的堆栈</td>
</tr>
<tr>
<td>USR2</td>
<td>远程调试, 查看celery.contrib.rdb</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件路径中可以使用的变量 </span></span><br><span class="line">--logfile,--pidfile,--statedb 中的文件路径参数可以包含一些被worker扩展的变量：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点名替换:</span></span><br><span class="line">%p: 节点全名.</span><br><span class="line">%h: 包含域名的主机名.</span><br><span class="line">%n: 只有主机名.</span><br><span class="line">%d: 只有域名.</span><br><span class="line">%i: Prefork 进程池中的进程索引，如果是主进程则为0.</span><br><span class="line">%I: Prefork 进程池中的进程索引，包含分隔符 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如当前的主机名是 george@foo.example.com 下面的变量将会被扩展为:</span></span><br><span class="line">--logfile=%p.log -&gt; george@foo.example.com.log</span><br><span class="line">--logfile=%h.log -&gt; foo.example.com.log</span><br><span class="line">--logfile=%n.log -&gt; george.log</span><br><span class="line">--logfile=%d -&gt; example.com.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prefork进程池索引</span></span><br><span class="line"><span class="comment"># prefork进程池索引将会根据进程实需要打开的文件扩展成不同的文件名。</span></span><br><span class="line"><span class="comment"># 这可以用来为每个子进程指定唯一的日志文件。</span></span><br><span class="line"><span class="comment"># 注意，进程池索引的数字与进程上限有关，不管进程是否退出还是设置了时间段内的每个子进程的最大任务数。所以，这个数字是进程索引而不是进程的数量或者pid。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %i: 进程池索引，主进程是 0 .</span></span><br><span class="line">Where -n worker1@example.com -c2 -f %n-%i.log将会产生以下3个日志文件:</span><br><span class="line">worker1-0.log (主进程)</span><br><span class="line">worker1-1.log (进程1)</span><br><span class="line">worker1-2.log (进程2)</span><br><span class="line"></span><br><span class="line">%I: 包含分隔符的进程索引.</span><br><span class="line">Where -n worker1@example.com -c2 -f %n%I.<span class="built_in">log</span> 将会产生以下3个日志文件:</span><br><span class="line">worker1.log (主进程)</span><br><span class="line">worker1-1.log (进程1)</span><br><span class="line">worker1-2.log (进程2)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>并发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，使用multiprocessing实现任务的并发执行，但是你也可以使用Eventlet.worker的进程和线程数量可以通过concurrency参数来改变。</span></span><br><span class="line"><span class="comment"># 默认情况下，这个数量和可用的CPU个数相同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程的数量 (multiprocessing/prefork pool)</span></span><br><span class="line"><span class="comment"># 通常情况下进程越多越好, # 但是会有一个临界点增加更多的进程会导致相反的效果。有迹象表明运行多个worker实例会比运行单个worker有更好的效果。</span></span><br><span class="line"><span class="comment"># 比如3个worker,每个worker有10个进程。需要经验来找到最适合你的worker数量, 这通常与应用、任务负载和任务运行时间和其它因素有关。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程控制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.0中的新特性</span></span><br><span class="line"><span class="comment"># 通过一个高优先级的广播消息队列，worker可以被远程控制。远程控制命令可以直接作用在所有的worker上或者指定workers列表。</span></span><br><span class="line"><span class="comment"># 命令也可以有应答，客户端可以等待应答。由于没有一个中心控制的worker,所以没有办法知道集群中有多少个workers，也没有办法估计有多少workers会返回一个应答，所以客户端有一个超时的配置－－－等待应答的截止期限---这个期限以秒为单位，默认为1秒。</span></span><br><span class="line"><span class="comment"># 如果worker在截止期限内没有收到应答，也不一定说明worker不会应答，更坏的情况是worker挂掉了，但是也有可能仅仅是因为网络延迟或者是worker在很慢的处理命令，所以可以适当的调整这个超时时间。</span></span><br><span class="line"><span class="comment"># 除了超时时间，客户端还可以指定等待的最大应答个数。如果指定了目标，这个限制会被设置为目的主机的个数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="comment"># 单一进程也支持控制命令, 但是所有的任务将会阻塞等待控制命令的执行，所以在worker忙碌时需要限制此命令的使用。</span></span><br><span class="line"><span class="comment"># 在这种情况下，必须增加客户端等待应答的超时时间.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7下搭建sentry错误日志服务器（通过docker安装sentry）</title>
    <url>/2021/05/02/centos7%E4%B8%8B%E6%90%AD%E5%BB%BAsentry%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%80%9A%E8%BF%87docker%E5%AE%89%E8%A3%85sentry%EF%BC%89/</url>
    <content><![CDATA[<h4 id="一、-docker安装"><a href="#一、-docker安装" class="headerlink" title="一、 docker安装"></a>一、 docker安装</h4><blockquote>
<p>安装准备工作：<br>卸载旧版本（旧版本的Docker称为docker或者docker-engine）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<ol>
<li><p>确保yum packages 是最新的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加稳定的源 yum repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新yum包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装docker ce</p>
<blockquote>
<p>安装(方法一)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y docker-ce</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装(方法二)</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载rpm安装包：https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm</span><br><span class="line">$ sudo yum install -y docker-ce-17.12.0.ce-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line"># 或者</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证docker已经启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>看到Hello from Docker则安装成功。</p>
</blockquote>
<ol start="8">
<li><p>安装docker-compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y epel-release</span><br><span class="line">$ sudo yum install -y python-pip</span><br><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看docker版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="二、sentry安装"><a href="#二、sentry安装" class="headerlink" title="二、sentry安装"></a>二、sentry安装</h4><blockquote>
<p>sentry 依赖的组件比较多 包括 redis、 postgresql、 outbound email</p>
</blockquote>
<blockquote>
<p>在安装sentry前请确保 docker 版本大于1.10</p>
</blockquote>
<ol>
<li><p>安装git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y git</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载docker镜像并构建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone  https://github.com/getsentry/onpremise.git</span><br><span class="line">$ cd onpremise</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>参照<a href="https://github.com/getsentry/onpremise%E4%B8%8BUp">https://github.com/getsentry/onpremise下Up</a> and Running安装。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir -p data/&#123;sentry,postgres&#125;</span><br><span class="line">$ docker-compose run --rm web config generate-secret-key</span><br><span class="line">将生成的secret-key配置到docker-compose.yml中SENTRY_SECRET_KEY中。</span><br><span class="line"># 创建表和用户</span><br><span class="line">$ docker-compose run --rm web upgrade</span><br><span class="line"># 启动所有服务</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注： 所有命令都要以sudo权限运行 否则会报错docker 未启动</p>
</blockquote>
<blockquote>
<p>注：不同版本的docker可能会在–port 参数上有报错，如果出错可以尝试-p 或者–p 同时有些会提示 –d和-rm冲突，去掉–detach即可</p>
</blockquote>
<blockquote>
<p>最后在浏览器中访问 <a href="http://localhost:9000/">http://localhost:9000/</a></p>
</blockquote>
<blockquote>
<p>注意启动顺序 woker-&gt;cron-&gt;web, 如果不启动worker和cron可能会遇到报错</p>
</blockquote>
<blockquote>
<p>配置：邮件SMTP<br>在compose下sentry.conf.py复制：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  SENTRY_EMAIL_HOST</span><br><span class="line">#  SENTRY_EMAIL_PORT</span><br><span class="line">#  SENTRY_EMAIL_USER</span><br><span class="line">#  SENTRY_SERVER_EMAIL</span><br><span class="line">#  SENTRY_EMAIL_PASSWORD</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加到docker-compose.yml中environment下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SENTRY_EMAIL_HOST: &#x27;smtp.sina.com&#x27;</span><br><span class="line">SENTRY_EMAIL_PORT: &#x27;25&#x27;</span><br><span class="line">SENTRY_EMAIL_USER: &#x27;邮箱&#x27;</span><br><span class="line">SENTRY_SERVER_EMAIL: &#x27;邮箱&#x27;</span><br><span class="line">SENTRY_EMAIL_PASSWORD: &#x27;邮箱密码&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker start</span><br><span class="line">cd ~/onpremise</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Sentry</tag>
      </tags>
  </entry>
  <entry>
    <title>cordova-plugin-camera使用</title>
    <url>/2018/02/02/cordova-plugin-camera%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="安装插件：cordova-plugin-camera"><a href="#安装插件：cordova-plugin-camera" class="headerlink" title="安装插件：cordova-plugin-camera"></a>安装插件：cordova-plugin-camera</h4><blockquote>
<p>用法：<code>navigator.camera.getPicture(cameraSuccess, cameraError, cameraOptions);</code></p>
</blockquote>
<blockquote>
<p>说明：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cameraSuccess：成功回调函数，返回类型有cameraOptions的属性destinationType指定</span><br><span class="line">cameraError：失败回调函数</span><br><span class="line">cameraOptions：参数设定，参考https://www.npmjs.com/package/cordova-plugin-camera#module_camera.CameraOptions</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot;</span><br><span class="line">          content=&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;&gt;</span><br><span class="line">    &lt;title&gt;cordova-plugin-camera&lt;/title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;link href=&quot;lib/ionic/css/ionic.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- IF using Sass (run gulp sass first), then uncomment below and remove the CSS includes above</span><br><span class="line">    &lt;link href=&quot;css/ionic.app.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- ionic/angularjs js --&gt;</span><br><span class="line">    &lt;script src=&quot;lib/ionic/js/ionic.bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- cordova script (this will be a 404 during development) --&gt;</span><br><span class="line">    &lt;script src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- your app&#x27;s js --&gt;</span><br><span class="line">    &lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-2.14.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        function loadImage() &#123;</span><br><span class="line">            //拍照并显示在屏幕</span><br><span class="line">            navigator.camera.getPicture(onLoadImageSuccess, onLoadImageFail, &#123;destinationType: Camera.DestinationType.DATA_URL&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        //拍照成功后回调</span><br><span class="line">        function onLoadImageSuccess(imageURI) &#123;</span><br><span class="line">            //这里的图片经过了base64编码</span><br><span class="line">            var src = &quot;data:image/jpeg;base64,&quot; + imageURI;</span><br><span class="line">            $(&quot;#getImage&quot;).attr(&quot;src&quot;, src);</span><br><span class="line">            $(&quot;#getImage&quot;).show();</span><br><span class="line">        &#125;</span><br><span class="line">        //所有获取图片失败都回调此函数</span><br><span class="line">        function onLoadImageFail(message) &#123;</span><br><span class="line">            navigator.notification.alert(&quot;拍照失败，原因：&quot; + message, null, &quot;警告&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        function loadImageLocal() &#123;</span><br><span class="line">            //获取本地图片并显示在屏幕</span><br><span class="line">            navigator.camera.getPicture(onLoadImageLocalSuccess, onLoadImageFail, &#123;</span><br><span class="line">                destinationType: Camera.DestinationType.FILE_URI,</span><br><span class="line">                sourceType: Camera.PictureSourceType.PHOTOLIBRARY</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        //本地图片选择成功后回调此函数</span><br><span class="line">        function onLoadImageLocalSuccess(imageURI) &#123;</span><br><span class="line">            $(&quot;#getImageLocal&quot;).attr(&quot;src&quot;, imageURI);</span><br><span class="line">            $(&quot;#getImageLocal&quot;).show();</span><br><span class="line">        &#125;</span><br><span class="line">        function loadImageUpload() &#123;</span><br><span class="line">            //拍照上传并显示在屏幕</span><br><span class="line">            navigator.camera.getPicture(onLoadImageUploadSuccess, onLoadImageFail, &#123;</span><br><span class="line">                destinationType: Camera.DestinationType.FILE_URI</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        //图片拍照成功后回调此函数</span><br><span class="line">        function onLoadImageUploadSuccess(imageURI) &#123;</span><br><span class="line">            //此处执行文件上传的操作，上传成功后执行下面代码</span><br><span class="line">            var options = new FileUploadOptions(); //文件参数选项</span><br><span class="line">            options.fileKey = &quot;file&quot;;//向服务端传递的file参数的parameter name</span><br><span class="line">            options.fileName = imageURI.substr(imageURI.lastIndexOf(&#x27;/&#x27;) + 1);//文件名</span><br><span class="line">            options.mimeType = &quot;image/jpeg&quot;;//文件格式，默认为image/jpeg</span><br><span class="line">            var ft = new FileTransfer();//文件上传类</span><br><span class="line">            ft.onprogress = function (progressEvt) &#123;//显示上传进度条</span><br><span class="line">                if (progressEvt.lengthComputable) &#123;</span><br><span class="line">                    navigator.notification.progressValue(Math.round(( progressEvt.loaded / progressEvt.total ) * 100));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            navigator.notification.progressStart(&quot;提醒&quot;, &quot;当前上传进度&quot;);</span><br><span class="line">            ft.upload(imageURI, encodeURI(&#x27;http://192.168.0.32:8888/app/upload.jfinal&#x27;), function () &#123;</span><br><span class="line">                navigator.notification.progressStop();//停止进度条</span><br><span class="line">                $(&quot;#getImageUpload&quot;).attr(&quot;src&quot;, imageURI);</span><br><span class="line">                $(&quot;#getImageUpload&quot;).show();</span><br><span class="line">                navigator.notification.alert(&quot;文件上传成功！&quot;, null, &quot;提醒&quot;);</span><br><span class="line">            &#125;, null, options);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;cordova-plugin-file-transfer&lt;/h1&gt;</span><br><span class="line"> </span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;拍照&quot; onclick=&quot;loadImage();&quot;/&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; id=&quot;getImage&quot; style=&quot;display: none;width: 120px;height: 120px;&quot;/&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"> </span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;本地图片&quot; onclick=&quot;loadImageLocal();&quot;/&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; id=&quot;getImageLocal&quot; style=&quot;display: none;width: 120px;height: 120px;&quot;/&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"> </span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;拍照上传&quot; onclick=&quot;loadImageUpload();&quot;/&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; id=&quot;getImageUpload&quot; style=&quot;display: none;width: 120px;height: 120px;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>带有裁剪框的编辑CameraOptions：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quality:50,</span><br><span class="line">destinationType: Camera.DestinationType.FILE_URL ,</span><br><span class="line">sourceType : 0,</span><br><span class="line">//====关键设置=======================================</span><br><span class="line">allowEdit:true, //出现裁剪框</span><br><span class="line">targetWidth:100,//图片裁剪高度</span><br><span class="line">targetHeight:100 &#125;);//图片裁剪高度</span><br><span class="line"> //======关键设置=========================================</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Codova</tag>
      </tags>
  </entry>
  <entry>
    <title>django migrations 初始化数据</title>
    <url>/2021/04/01/django%20migrations%20%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h4 id="创建migrations文件-0002-initial-data-py"><a href="#创建migrations文件-0002-initial-data-py" class="headerlink" title="创建migrations文件 0002_initial_data.py"></a>创建migrations文件 0002_initial_data.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> get_user_model</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password</span><br><span class="line"><span class="keyword">from</span> central.models <span class="keyword">import</span> UUser</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_data</span>(<span class="params">apps, schema_editor</span>):</span><br><span class="line">    user_model = get_user_model()</span><br><span class="line"></span><br><span class="line">    username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    password = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    user = user_model.objects.<span class="built_in">filter</span>(username=username)</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        user.update(password=make_password(password=password))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        user = user_model.objects.create_superuser(username, password, is_admin=<span class="literal">True</span>)</span><br><span class="line">        user = UUser.objects.get_or_create(user=user, name=username)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Migration</span>(migrations.Migration):</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">&#x27;central&#x27;</span>, <span class="string">&#x27;0001_initial&#x27;</span>),  <span class="comment"># central 是App名称</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(init_data), <span class="comment"># 要执行的操作</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="执行迁移文件"><a href="#执行迁移文件" class="headerlink" title="执行迁移文件"></a>执行迁移文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>django silk 性能监测工具</title>
    <url>/2021/04/01/django%20silk%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%B5%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h4><p>Django: 1.11, 2.0<br>Python: 2.7, 3.4, 3.5, 3.6</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>django-silk地址: `https://github.com/jazzband/django-silk`
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -U django-silk</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol>
<li>在settings.py文件中加入如下内容</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;silk&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;silk.middleware.SilkyMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>在url.py中加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urlpatterns += [url(r&#x27;^silk/&#x27;, include(&#x27;silk.urls&#x27;, namespace=&#x27;silk&#x27;))]</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成silk用的相关数据库表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line"></span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>如果settings.py中没有配置过STATIC_ROOT，在执行”python manage.py collectstatic”的时候，有可能会报错，提示缺少STATIC_ROOT配置。加上即可。如：STATIC_ROOT = BASE_DIR。</p>
</blockquote>
<ol start="4">
<li>启动项目：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>访问项目网址/silk（如：<a href="http://127.0.0.1:8080/silk%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0silk%E8%87%AA%E5%B8%A6%E7%9A%84%E9%A1%B5%E9%9D%A2">http://127.0.0.1:8080/silk），可以看到silk自带的页面</a></p>
</blockquote>
<blockquote>
<p>通过页面，我们可以看到很多GET、POST请求，以及各种数字。代表silk可以记录的数据</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所用时间（Time taken）</span><br><span class="line">数查询（Num. queries）</span><br><span class="line">查询花费的时间（Time spent on queries）</span><br><span class="line">请求/响应标头（Request/Response headers）</span><br><span class="line">请求/响应正文（Request/Response bodies）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想查看查询的过程哪个环节耗费了多少时间，请进入Profiling。需要我们在setting.py中配置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用Python的内置cProfile分析器</span><br><span class="line">SILKY_PYTHON_PROFILER = True</span><br><span class="line"># 生成.prof文件，silk产生的程序跟踪记录，详细记录来执行来哪个文件，哪一行，用了多少时间等信息</span><br><span class="line">SILKY_PYTHON_PROFILER_BINARY = True</span><br><span class="line"># .prof文件保存路径（最好不要像我这样设置在项目目录中）</span><br><span class="line"># 如果没有本设置，prof文件将默认保存在MEDIA_ROOT里</span><br><span class="line">SILKY_PYTHON_PROFILER_RESULT_PATH = os.path.join(BASE_DIR, &#x27;logs&#x27;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>经过上述设置后，每次请求都会生成一个prof文件，而且名称无意义。所以我们进行性能分析时一定要及时分析，否则回头再找prof文件，就会比较麻烦，不过，也没有那么麻烦。 这些信息在页面中也可以查看，不是必须要生成prof文件。 </p>
</blockquote>
<blockquote>
<p>.prof是二进制文本文件，一般的编辑器看不到可读内容。所以我们需要借助一些工具。可以使用的是SNAKEVIZ。</p>
</blockquote>
<h3 id="Snakeviz"><a href="#Snakeviz" class="headerlink" title="Snakeviz"></a>Snakeviz</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install -U snakeviz</span></span><br></pre></td></tr></table></figure>

<h4 id="查看prof"><a href="#查看prof" class="headerlink" title="查看prof"></a>查看prof</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># snakeviz /path/to/your/program.prof</span></span><br></pre></td></tr></table></figure>

<h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><blockquote>
<p>记录profiling的时候，我们需要给每个请求起个名字，作为标识</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from silk.profiling.profiler import silk_profile</span><br><span class="line">...</span><br><span class="line">@silk_profile(name=&#x27;View Blog Post&#x27;)  # name=你自己设置的请求标识</span><br><span class="line">def post(request, post_id):</span><br><span class="line">    p = Post.objects.get(pk=post_id)</span><br><span class="line">    return render_to_response(&#x27;post.html&#x27;, &#123;</span><br><span class="line">        &#x27;post&#x27;: p</span><br><span class="line">    &#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>还有一种方法，可以查看具体某一个数据库操作的性能</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def post(request, post_id):</span><br><span class="line">    with silk_profile(name=&#x27;View Blog Post #%d&#x27;%self.pk):</span><br><span class="line">    p = Post.objects.get(pk=post_id)</span><br><span class="line">    return render_to_response(&#x27;post.html&#x27;, &#123;</span><br><span class="line">        &#x27;post&#x27;: p</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后就可以探索了。 </p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>Silk</tag>
      </tags>
  </entry>
  <entry>
    <title>django中问题解决</title>
    <url>/2021/04/01/django%E4%B8%AD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h4 id="上传文件问题"><a href="#上传文件问题" class="headerlink" title="上传文件问题"></a>上传文件问题</h4><ul>
<li><p>问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unsupported media type \&quot;multipart/form-data; boundary=--------------------------340430569531240491567848\&quot; in request.</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from rest_framework.parsers import MultiPartParser, FormParser, JSONParser</span><br><span class="line"></span><br><span class="line">class SampleView(APIView):</span><br><span class="line">    parser_classes = (MultiPartParser,FormParser,JSONParser)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>django模糊条件查询</title>
    <url>/2021/04/01/django%E6%A8%A1%E7%B3%8A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h4 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__exact 精确等于 like &#x27;aaa&#x27;</span><br><span class="line">__iexact 精确等于 忽略大小写 ilike &#x27;aaa&#x27;</span><br><span class="line">__contains 包含 like &#x27;%aaa%&#x27;</span><br><span class="line">__icontains 包含 忽略大小写 ilike &#x27;%aaa%&#x27;，但是对于sqlite来说，contains的作用效果等同于icontains。</span><br><span class="line">__gt 大于</span><br><span class="line">__gte 大于等于</span><br><span class="line">__lt 小于</span><br><span class="line">__lte 小于等于</span><br><span class="line">__in 存在于一个list范围内</span><br><span class="line">__startswith 以…开头</span><br><span class="line">__istartswith 以…开头 忽略大小写</span><br><span class="line">__endswith 以…结尾</span><br><span class="line">__iendswith 以…结尾，忽略大小写</span><br><span class="line">__range 在…范围内</span><br><span class="line">__year 日期字段的年份</span><br><span class="line">__month 日期字段的月份</span><br><span class="line">__day 日期字段的日</span><br><span class="line">__isnull=True/False</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>django项目增量打包</title>
    <url>/2021/04/01/django%E9%A1%B9%E7%9B%AE%E5%A2%9E%E9%87%8F%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="django-项目增量打包"><a href="#django-项目增量打包" class="headerlink" title="django 项目增量打包"></a>django 项目增量打包</h2><h3 id="增量文件获取"><a href="#增量文件获取" class="headerlink" title="增量文件获取"></a>增量文件获取</h3><p>①<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/django%E5%A2%9E%E9%87%8F%E6%89%93%E5%8C%85-1.png"></p>
<p>②<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/django%E5%A2%9E%E9%87%8F%E6%89%93%E5%8C%85-2.png"></p>
<p>③<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/django%E5%A2%9E%E9%87%8F%E6%89%93%E5%8C%85-3.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 镜像导入和导出</title>
    <url>/2020/01/01/docker%20%E9%95%9C%E5%83%8F%E5%AF%BC%E5%85%A5%E5%92%8C%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h4 id="gitlab-的docker使用"><a href="#gitlab-的docker使用" class="headerlink" title="gitlab 的docker使用"></a>gitlab 的docker使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab docker</span><br></pre></td></tr></table></figure>

<h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3000:80 twang2218/gitlab-ce-zh:9.0.3</span><br><span class="line">docker run -d -p 8080:80 gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>

<h4 id="容器导入导出"><a href="#容器导入导出" class="headerlink" title="容器导入导出"></a>容器导入导出</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker export &lt;CONTAINER ID&gt; &gt; 文件.tar</span><br><span class="line"></span><br><span class="line">docker import - 仓库名 &lt; 文件.tar</span><br></pre></td></tr></table></figure>

<h4 id="镜像备份恢复："><a href="#镜像备份恢复：" class="headerlink" title="镜像备份恢复："></a>镜像备份恢复：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o 文件.tar 仓库名</span><br><span class="line">或 </span><br><span class="line">docker save 镜像 &gt; 文件.tar</span><br><span class="line"></span><br><span class="line">docker load &lt; 文件.tar</span><br><span class="line">或</span><br><span class="line">docker load -i 文件.tar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose笔记</title>
    <url>/2020/01/01/docker-compose%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1-Docker容器之间的通信"><a href="#1-Docker容器之间的通信" class="headerlink" title="1. Docker容器之间的通信"></a>1. Docker容器之间的通信</h3><blockquote>
<p>参考：<a href="https://developerworks.github.io/2014/09/04/docker-communicate-with-containers/">https://developerworks.github.io/2014/09/04/docker-communicate-with-containers/</a></p>
</blockquote>
<h4 id="通过网络端口通信"><a href="#通过网络端口通信" class="headerlink" title="通过网络端口通信"></a>通过网络端口通信</h4><blockquote>
<p>默认情况容器和主机之间的网络通信是封闭的, 如果要让容器能够被外部网络访问, 需要在启动容器的时候指定要开放的端口, 这样我们就能通过主机的网络访问容器内提供的的服务了.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@localhost:/# docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>命令行分解:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p 标志指定了端口映射,形式为: &lt;主机端口&gt;:&lt;容器端口&gt;, 注意不要弄反了.</span><br><span class="line">-d 标志表示让容器在后台运行</span><br><span class="line">training/webapp 表示镜像名称</span><br><span class="line">python app.py 表示要在容器内运行的SHELL命令</span><br></pre></td></tr></table></figure>

<p><strong>端口绑定模式</strong></p>
<blockquote>
<p>本文把docker服务所在的操作系统成为宿主系统, 通过-p标志绑定端口又如下几种方式:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 容器端口绑定到宿主系统特定接口的特定端口上</span></span><br><span class="line">-p 127.0.0.1:5000:5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定到宿主系统的随机端口上(49000~49900)</span></span><br><span class="line">-p 127.0.0.1::5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定到宿主系统的所有接口上(0.0.0.0)</span></span><br><span class="line">-p 5000:5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以指定协议(TCP或UDP,等)</span></span><br><span class="line">-p 127.0.0.1:5000:5000/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 标记可以使用多次,同时绑定多个端口</span></span><br><span class="line">-p 127.0.0.1:5000:5000 -p 127.0.0.1:5001:5001</span><br></pre></td></tr></table></figure>

<p><strong>容器链接</strong></p>
<blockquote>
<p>网络端口不是容器之间相互链接的唯一方式, Docker 还有一个链接系统能够把多个容器链接到一起.通过Linking, 容器之间能够相互发现,并能够安全地传输信息.<br>当创建Linking时,实际上是在源容器和目标容器之间建立了一根管道(Conduit). 要创建Linking,需要使用–link标志, 首先创建一个新容器,其中包含我们要访问的数据库:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从镜像training/postgres创建一个叫做db的容器, 其中包含PostgreSQL数据库.</span></span><br><span class="line">docker run -d --name db training/postgres:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个web容器,并链接到db容器</span></span><br><span class="line">docker run -d -P --name web --<span class="built_in">link</span> db:db training/webapp python app.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要建立容器之间的链接,必须在启动时通过参数--name $container_name给容器命名,例如:</span></span><br><span class="line">docker run -d -P --name web training/webapp python app.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># --link 标志的形式如下:</span></span><br><span class="line">--<span class="built_in">link</span> name:<span class="built_in">alias</span> <span class="comment"># 其中 name 为被链接的容器名称 alias 为链接的别名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们启动db容器的时候并没有指定-P或-p参数,在这个例子中,web容器作为接受者(recipient)把自己的信息暴露给作为source(源)的db, Docker在两个容器之间创建了一个安全的隧道,这是链接的巨大优势, 通过连接,我们不需要向外部网络暴露端口.</p>
</blockquote>
<h3 id="2-Dockerfile-测试"><a href="#2-Dockerfile-测试" class="headerlink" title="2. Dockerfile 测试"></a>2. Dockerfile 测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 项目结构</span><br><span class="line">compose_demo/</span><br><span class="line">├── docker</span><br><span class="line">│   ├── docker-compose.yml</span><br><span class="line">│   ├── requirements.txt</span><br><span class="line">│   └── web</span><br><span class="line">│       └── Dockerfile</span><br><span class="line">└── src</span><br><span class="line">    └──  app.py</span><br><span class="line"></span><br><span class="line"># Dockerfile</span><br><span class="line">FROM python:3.6</span><br><span class="line"> </span><br><span class="line">ADD ./docker /docker</span><br><span class="line">WORKDIR /src</span><br><span class="line">ADD ./src /src</span><br><span class="line">RUN pip install -i https://pypi.douban.com/simple -r /docker/requirements.txt</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br><span class="line"></span><br><span class="line"># docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build:</span><br><span class="line">      context: ../</span><br><span class="line">      dockerfile: ./docker/web/Dockerfile</span><br><span class="line">    image: &quot;compose_demo&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    environment:</span><br><span class="line">      REDASH_HOST: &quot;redis&quot;</span><br><span class="line">    links:</span><br><span class="line">      - redis:redis</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:latest&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明（自我总结）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Dockerfile 中 `./` 是相对执行命令时所在的目录（根路径），即在`compose-demo`下执行，并且不支持`../`路径</span><br><span class="line"></span><br><span class="line">2. docker-compose 中 context 指定 根路径， `../` 代表 `compose-demo/` 路径</span><br><span class="line"></span><br><span class="line">3. 创建：`docker-compose -f docker/docker-compose.yml -p compose build`, 运行：`docker-compose -f docker/docker-compose.yml -p compose up`， </span><br><span class="line">其中-p指定项目名，若不指定，则默认上级目录名。</span><br></pre></td></tr></table></figure>

<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># superset docker-compose.yml</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3.2-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/superset/redis:/data</span><br><span class="line"></span><br><span class="line">#  postgres:</span><br><span class="line">#    image: postgres:10-alpine</span><br><span class="line">#    restart: always</span><br><span class="line">#    environment:</span><br><span class="line">#      POSTGRES_DB: superset</span><br><span class="line">#      POSTGRES_PASSWORD: superset</span><br><span class="line">#      POSTGRES_USER: superset</span><br><span class="line">#    volumes:</span><br><span class="line">#      - /data/superset/postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    #network_mode: host</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: superset</span><br><span class="line">      MYSQL_DATABASE: superset</span><br><span class="line">      MYSQL_USER: superset</span><br><span class="line">      MYSQL_PASSWORD: superset</span><br><span class="line">    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/superset/mysql/db:/var/lib/mysql:rw</span><br><span class="line">      - /data/superset/mysql/conf:/etc/mysql/conf.d:ro</span><br><span class="line"></span><br><span class="line">  superset:</span><br><span class="line">    build:</span><br><span class="line">      context: ../../</span><br><span class="line">      dockerfile: contrib/docker/Dockerfile-prd</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_OR_POSTGRES: &#x27;mysql&#x27;</span><br><span class="line">      #SQLALCHEMY_DATABASE_URI: &#x27;postgresql://superset:superset@postgres:5432/superset&#x27;</span><br><span class="line">      SQLALCHEMY_DATABASE_URI: &#x27;mysql://superset:superset@mysql:3306/superset&#x27;</span><br><span class="line">      REDIS_HOST: redis</span><br><span class="line">      REDIS_PORT: 6379</span><br><span class="line">      SUPERSET_ENV: production</span><br><span class="line">      MAPBOX_API_KEY: &#x27;pk.eyJ1IjoibWF5dyIsImEiOiJjanVucGpzeDYxd3o2NDluNzBiMHp2NDV2In0.LkVxSkUU1q4_GYbA891Wjw&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - 8088:8088</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  postgres:</span><br><span class="line">    external: false</span><br><span class="line">  redis:</span><br><span class="line">    external: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="compose配置"><a href="#compose配置" class="headerlink" title="compose配置"></a>compose配置</h3><p>Service 配置参考：<a href="https://deepzz.com/post/docker-compose-file.html">https://deepzz.com/post/docker-compose-file.html</a></p>
<h3 id="参考示例-redash之docker-compose-yml"><a href="#参考示例-redash之docker-compose-yml" class="headerlink" title="参考示例(redash之docker-compose.yml)"></a>参考示例(redash之docker-compose.yml)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is an example configuration for Docker Compose. Make sure to atleast update</span><br><span class="line"># the cookie secret &amp; postgres database password.</span><br><span class="line">#</span><br><span class="line"># Some other recommendations:</span><br><span class="line"># 1. To persist Postgres data, assign it a volume host location.</span><br><span class="line"># 2. Split the worker service to adhoc workers and scheduled queries workers.</span><br><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">  server:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    image: redash/redash:v5.0.2</span><br><span class="line">    command: server</span><br><span class="line">    depends_on:</span><br><span class="line">      - postgres</span><br><span class="line">      - redis</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">#    volumes:</span><br><span class="line">#      - &quot;.:/app&quot;</span><br><span class="line">    environment:</span><br><span class="line">      PYTHONUNBUFFERED: 0</span><br><span class="line">      REDASH_LOG_LEVEL: &quot;INFO&quot;</span><br><span class="line">      REDASH_REDIS_URL: &quot;redis://redis:6379/0&quot;</span><br><span class="line">      REDASH_DATABASE_URL: &quot;postgresql://postgres@postgres/postgres&quot;</span><br><span class="line">      REDASH_COOKIE_SECRET: &quot;1q2w3e4r&quot;</span><br><span class="line">      REDASH_WEB_WORKERS: 4</span><br><span class="line">#      #邮箱</span><br><span class="line">#      REDASH_MAIL_SERVER: &quot;smtp.163.com&quot;</span><br><span class="line">#      REDASH_MAIL_PORT: 465</span><br><span class="line">#      REDASH_MAIL_USE_TLS: &quot;false&quot;</span><br><span class="line">#      REDASH_MAIL_USE_SSL: &quot;true&quot;</span><br><span class="line">#      REDASH_MAIL_USERNAME: &quot;mhiwyf@163.com&quot;</span><br><span class="line">#      REDASH_MAIL_PASSWORD: &quot;1q2w3e&quot;</span><br><span class="line">#      REDASH_MAIL_DEFAULT_SENDER: &quot;mhiwyf@163.com&quot;</span><br><span class="line">#      REDASH_HOST: &quot;http://localhost&quot;</span><br><span class="line"></span><br><span class="line">    restart: always</span><br><span class="line">  worker:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    image: redash/redash:v5.0.2</span><br><span class="line">    command: scheduler</span><br><span class="line">    environment:</span><br><span class="line">      PYTHONUNBUFFERED: 0</span><br><span class="line">      REDASH_LOG_LEVEL: &quot;INFO&quot;</span><br><span class="line">      REDASH_REDIS_URL: &quot;redis://redis:6379/0&quot;</span><br><span class="line">      REDASH_DATABASE_URL: &quot;postgresql://postgres@postgres/postgres&quot;</span><br><span class="line">      QUEUES: &quot;queries,scheduled_queries,celery&quot;</span><br><span class="line">      WORKERS_COUNT: 2</span><br><span class="line">    restart: always</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3.0-alpine</span><br><span class="line">    restart: always</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:9.5.6-alpine</span><br><span class="line">    volumes:</span><br><span class="line">      - /opt/postgres-data:/var/lib/postgresql/data</span><br><span class="line">    restart: always</span><br><span class="line">  nginx:</span><br><span class="line">    image: redash/nginx:latest</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - server</span><br><span class="line">    links:</span><br><span class="line">      - server:redash</span><br><span class="line">    restart: always</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="zeus-docker-compose-yml"><a href="#zeus-docker-compose-yml" class="headerlink" title="zeus docker-compose.yml"></a>zeus docker-compose.yml</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ----------------------------- 1 ----------------------------- #</span><br><span class="line">FROM python:3.6.2-alpine</span><br><span class="line"></span><br><span class="line">MAINTAINER Murray &quot;ma.yawei@h3c.com&quot;</span><br><span class="line">ADD zeus.tar.gz /</span><br><span class="line">#RUN mv /zeus /zeus</span><br><span class="line"></span><br><span class="line">WORKDIR /zeus</span><br><span class="line"></span><br><span class="line">COPY requirements.txt /zeus</span><br><span class="line"></span><br><span class="line">RUN echo &#x27;https://mirrors.tuna.tsinghua.edu.cn/alpine/v3.6/main&#x27; &gt; /etc/apk/repositories</span><br><span class="line">RUN apk upgrade &amp;&amp; apk add --no-cache gcc python-dev python3-dev musl-dev mariadb-dev build-base jpeg-dev zlib-dev libffi-dev postgresql-dev linux-headers</span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.douban.com/simple</span><br><span class="line">#RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">#RUN python manage.py migrate</span><br><span class="line">#RUN python manage.py createcachetable neon_key_value</span><br><span class="line">#RUN python manage.py genesis</span><br><span class="line"></span><br><span class="line">#CMD [&quot;gunicorn&quot;, &quot;-c&quot;, &quot;gunicorn_config.py&quot;, &quot;zeus.wsgi:application&quot;]</span><br><span class="line">#CMD [&quot;uwsgi&quot;, &quot;--ini&quot;, &quot;/zeus/uwsgi.ini&quot;]</span><br><span class="line">#ENTRYPOINT [&quot;/app/bin/docker-entrypoint&quot;]</span><br><span class="line">#CMD [&quot;server&quot;]</span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------- 2 ----------------------------- #</span><br><span class="line">#FROM python:3.5-slim</span><br><span class="line">#</span><br><span class="line">#RUN echo &#x27;deb http://mirrors.163.com/debian/ stable main&#x27; &gt;&gt; /etc/apt/sources.list &amp;&amp; echo &#x27;deb http://http.us.debian.org/debian stable main&#x27; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">#RUN apt-get update &amp;&amp; apt-get install -y gcc default-libmysqlclient-dev vim</span><br><span class="line">#</span><br><span class="line">#WORKDIR /app/zeus</span><br><span class="line">#COPY requirements.txt .</span><br><span class="line">#RUN pip install --no-cache-dir -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txt</span><br><span class="line">#</span><br><span class="line">#COPY . .</span><br><span class="line">#</span><br><span class="line">#RUN python manage.py resetdb</span><br><span class="line">#RUN python manage.py migate</span><br><span class="line">#RUN python manage.py createcachetable neon_key_value</span><br><span class="line">#RUN python manage.py genesis</span><br><span class="line">#</span><br><span class="line">#EXPOSE 9000</span><br><span class="line">#CMD [&quot;gunicorn&quot;, &quot;-c&quot;, &quot;gunicorn_config.py&quot;, &quot;zeus.wsgi:application&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用操作</title>
    <url>/2019/01/19/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="重命名镜像名"><a href="#重命名镜像名" class="headerlink" title="重命名镜像名"></a>重命名镜像名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag 旧镜像名:标签  新镜像名:标签</span><br></pre></td></tr></table></figure>

<h3 id="Docker-容器镜像删除"><a href="#Docker-容器镜像删除" class="headerlink" title="Docker 容器镜像删除"></a>Docker 容器镜像删除</h3><ol>
<li>停止所有的container，这样才能够删除其中的images：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>如果想要删除所有container的话再加一个指令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>查看当前有些什么images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除images，通过image的id来指定删除谁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi &lt;image id&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>想要删除untagged images，也就是那些id为<None>的image的话可以用</p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要删除全部image的话</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<h3 id="docker加入root用户"><a href="#docker加入root用户" class="headerlink" title="docker加入root用户"></a>docker加入root用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户到docker用户组</span></span><br><span class="line">sudo gpasswd -a &lt;user name&gt; docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务器</span></span><br><span class="line">reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="制作基础镜像"><a href="#制作基础镜像" class="headerlink" title="制作基础镜像"></a>制作基础镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 制作 base image</span></span><br><span class="line">FROM scratch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="容器导入导出"><a href="#容器导入导出" class="headerlink" title="容器导入导出"></a>容器导入导出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker export &lt;CONTAINER ID&gt; &gt; 文件.tar</span><br><span class="line"></span><br><span class="line">docker import - 仓库名 &lt; 文件.tar</span><br></pre></td></tr></table></figure>

<h3 id="镜像备份恢复："><a href="#镜像备份恢复：" class="headerlink" title="镜像备份恢复："></a>镜像备份恢复：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o 文件.tar 仓库名</span><br><span class="line">或 </span><br><span class="line">docker save 镜像 &gt; 文件.tar</span><br><span class="line"></span><br><span class="line">docker load &lt; 文件.tar</span><br><span class="line">或</span><br><span class="line">docker load -i 文件.tar</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Registry的部署</title>
    <url>/2019/03/19/docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h3 id="Registry的部署"><a href="#Registry的部署" class="headerlink" title="Registry的部署"></a>Registry的部署</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载镜像</span><br><span class="line">docker pull registry</span><br><span class="line"></span><br><span class="line"># 运行容器</span><br><span class="line">docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry</span><br><span class="line"></span><br><span class="line"># 添加信任</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"># 添加insecure-registries</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://qgikhnmb.mirror.aliyuncs.com&quot;, &quot;http://hub-mirror.c.163.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;127.0.0.1:5000&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">curl -H &quot;Content-Type: application/json&quot; http://127.0.0.1:5000/v2/_catalog</span><br><span class="line"># 返回 &#123;&quot;repositories&quot;:[]&#125;， 说明部署成功了。</span><br><span class="line"></span><br><span class="line"># push镜像</span><br><span class="line">docker pull hello-world</span><br><span class="line">docker tag hello-world:latest 127.0.0.1:5000/hello-world:latest</span><br><span class="line">docker push 127.0.0.1/hello-world:latest</span><br><span class="line"></span><br><span class="line"># 输出如下</span><br><span class="line"># The push refers to repository [127.0.0.1:5000/hello-world]</span><br><span class="line"># af0b15c8625b: Pushed </span><br><span class="line"># latest: digest: sha256:92c7f9c92844bbbb5d0a101b22f7c2a7949e40f8ea90c8b3bc396879d95e899a size: 524</span><br><span class="line"></span><br><span class="line"># 浏览器查看本地registry：</span><br><span class="line">http://127.0.0.1:5000/v2/_catalog</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置国内官方镜像（Docker守护进程配置加速器）</title>
    <url>/2020/01/01/docker%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%EF%BC%88Docker%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h3 id="方式一：通过命令行启动Docker"><a href="#方式一：通过命令行启动Docker" class="headerlink" title="方式一：通过命令行启动Docker"></a>方式一：通过命令行启动Docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">$ docker --registry-mirror=https://registry.docker-cn.com daemon</span><br></pre></td></tr></table></figure>

<h3 id="方式二：通过配置文件启动Docker"><a href="#方式二：通过配置文件启动Docker" class="headerlink" title="方式二：通过配置文件启动Docker"></a>方式二：通过配置文件启动Docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Docker版本在1.12或更高,修改/etc/docker/daemon.json 文件并添加上 registry-mirrors 键值</span><br><span class="line"></span><br><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://qgikhnmb.mirror.aliyuncs.com&quot;, &quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搭建私有仓库"><a href="#搭建私有仓库" class="headerlink" title="搭建私有仓库"></a>搭建私有仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载register镜像</span></span><br><span class="line">docker pull register</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line"><span class="comment"># 默认情况下，仓库存放于容器的/tmp/registry目录下，这样如果容器被删除，则存放于容器中的镜像也会丢失</span></span><br><span class="line"><span class="comment"># 因此一般情况下会指定本地一个目录挂载到容器的/var/lib/registry下。</span></span><br><span class="line">docker run --name=private-register -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置docker</span></span><br><span class="line"><span class="comment"># Docker从1.3.X之后默认docker registry使用的是https，所以当用docker pull命令下载远程镜像时，如果远程docker registry是非https的时候就会报上面的错误。</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>, <span class="string">&quot;https://qgikhnmb.mirror.aliyuncs.com&quot;</span>, <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.31.202:5000&quot;</span>],</span><br><span class="line">  <span class="string">&quot;iptables&quot;</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>find -mtime来找某某时间点之前的文件</title>
    <url>/2020/10/01/find%20-mtime%E6%9D%A5%E6%89%BE%E6%9F%90%E6%9F%90%E6%97%B6%E9%97%B4%E7%82%B9%E4%B9%8B%E5%89%8D%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h3><p>在unix或linux环境中经常会用到find -mtime这样的写法来找某某时间点之前的文件，至于如何写find -mtime +N/-N/N，，画下了这个图，以便理解和记忆：<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/8RnaFD4kQrA6XJV.png"><br>从图上可以看出，以当前时间点开始算起，+表示往左，从该时间点开始再继续往更早推，可以称作xx以外；-表示往右，从该时间点算起往后的时间推，可以称作xx以内；没有加减号表示据此此前第N天</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>go文件命名规范</title>
    <url>/2020/08/08/go%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><ol>
<li>如果文件名是以 “.” 或者 “_” 开头的话编译的时候会被忽略</li>
<li>文件名如果是 suffix_test.go are 只会在运行go test的时候才会被编译和运行</li>
<li>文件名支持系统和architecture来指定系统的编译。文件名支持如下的格式:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*_GOOS</span><br><span class="line">*_GOARCH</span><br><span class="line">*_GOOS_GOARCH</span><br></pre></td></tr></table></figure>
例如 name_linux.go 只会在 linux 编译, name_amd64.go 只会在 amd64 系统编译. 当然你也可以不用文件名，而是在文件顶端加上这一句 //+build amd64</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>golang的命名需要使用驼峰命名法，且不能出现下划线</li>
<li>golang中根据首字母的大小写来确定可以访问的权限。<em>无论是方法名、常量、变量名还是结构体的名称，如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用</em></li>
<li>结构体中属性名的大写，<em>如果属性名小写则在数据解析（如json解析,或将结构体作为请求或访问参数）时无法解析</em><br>例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type User struct &#123;</span><br><span class="line">    name string</span><br><span class="line">    age  int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    user:=User&#123;&quot;Tom&quot;,18&#125;</span><br><span class="line">    if userJSON,err:=json.Marshal(user);err==nil&#123;</span><br><span class="line">        fmt.Println(string(userJSON))   //数据无法解析</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结构体中的字段名为小写，导致无法数据解析。因此一般建议结构体中的字段大写</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ol>
<li><p>平台区分</p>
<blockquote>
<p>文件名_平台 <br><br> 例： file_windows.go, file_unix.go <br><br> 可选为：windows, unix, posix, plan9, darwin, bsd, linux, freebsd, nacl, netbsd, openbsd, solaris, dragonfly, bsd, notbsd， android，stubs</p>
</blockquote>
</li>
<li><p>测试单元</p>
<blockquote>
<p>文件名test.go或者 文件名平台_test.go <br><br> 例： path_test.go, path_windows_test.go<br> 注意：只有在<code>go test</code>时执行。</p>
</blockquote>
</li>
<li><p>版本区分(猜测)</p>
<blockquote>
<p>文件名_版本号等。<br> 例：trap_windows_1.4.go</p>
</blockquote>
</li>
<li><p>CPU类型区分, 汇编用的多</p>
<blockquote>
<p>文件名_(平台:可选)_CPU类型.<br> 例：vdso_linux_amd64.go<br> 可选：amd64, none, 386, arm, arm64, mips64, s390,mips64x,ppc64x, nonppc64x, s390x, x86,amd64p32</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>gunicorn_config.py示例</title>
    <url>/2021/04/01/gunicorn_config.py%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<blockquote>
<p>注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False</p>
</blockquote>
<h4 id="gunicorn-config-py"><a href="#gunicorn-config-py" class="headerlink" title="gunicorn_config.py"></a>gunicorn_config.py</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sample Gunicorn configuration file.</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Server socket</span><br><span class="line">#</span><br><span class="line">#   bind - The socket to bind.</span><br><span class="line">#</span><br><span class="line">#       A string of the form: &#x27;HOST&#x27;, &#x27;HOST:PORT&#x27;, &#x27;unix:PATH&#x27;.</span><br><span class="line">#       An IP is a valid HOST.</span><br><span class="line">#</span><br><span class="line">#   backlog - The number of pending connections. This refers</span><br><span class="line">#       to the number of clients that can be waiting to be</span><br><span class="line">#       served. Exceeding this number results in the client</span><br><span class="line">#       getting an error when attempting to connect. It should</span><br><span class="line">#       only affect servers under significant load.</span><br><span class="line">#</span><br><span class="line">#       Must be a positive integer. Generally set in the 64-2048</span><br><span class="line">#       range.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">bind = &#x27;0.0.0.0:5000&#x27;</span><br><span class="line">backlog = 2048</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Worker processes</span><br><span class="line">#</span><br><span class="line">#   workers - The number of worker processes that this server</span><br><span class="line">#       should keep alive for handling requests.</span><br><span class="line">#</span><br><span class="line">#       A positive integer generally in the 2-4 x $(NUM_CORES)</span><br><span class="line">#       range. You&#x27;ll want to vary this a bit to find the best</span><br><span class="line">#       for your particular application&#x27;s work load.</span><br><span class="line">#</span><br><span class="line">#   worker_class - The type of workers to use. The default</span><br><span class="line">#       sync class should handle most &#x27;normal&#x27; types of work</span><br><span class="line">#       loads. You&#x27;ll want to read</span><br><span class="line">#       http://docs.gunicorn.org/en/latest/design.html#choosing-a-worker-type</span><br><span class="line">#       for information on when you might want to choose one</span><br><span class="line">#       of the other worker classes.</span><br><span class="line">#</span><br><span class="line">#       A string referring to a Python path to a subclass of</span><br><span class="line">#       gunicorn.workers.base.Worker. The default provided values</span><br><span class="line">#       can be seen at</span><br><span class="line">#       http://docs.gunicorn.org/en/latest/settings.html#worker-class</span><br><span class="line">#</span><br><span class="line">#   worker_connections - For the eventlet and gevent worker classes</span><br><span class="line">#       this limits the maximum number of simultaneous clients that</span><br><span class="line">#       a single process can handle.</span><br><span class="line">#</span><br><span class="line">#       A positive integer generally set to around 1000.</span><br><span class="line">#</span><br><span class="line">#   timeout - If a worker does not notify the master process in this</span><br><span class="line">#       number of seconds it is killed and a new worker is spawned</span><br><span class="line">#       to replace it.</span><br><span class="line">#</span><br><span class="line">#       Generally set to thirty seconds. Only set this noticeably</span><br><span class="line">#       higher if you&#x27;re sure of the repercussions for sync workers.</span><br><span class="line">#       For the non sync workers it just means that the worker</span><br><span class="line">#       process is still communicating and is not tied to the length</span><br><span class="line">#       of time required to handle a single request.</span><br><span class="line">#</span><br><span class="line">#   keepalive - The number of seconds to wait for the next request</span><br><span class="line">#       on a Keep-Alive HTTP connection.</span><br><span class="line">#</span><br><span class="line">#       A positive integer. Generally set in the 1-5 seconds range.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">workers = 2</span><br><span class="line">worker_class = &#x27;sync&#x27;</span><br><span class="line">worker_connections = 1000</span><br><span class="line">timeout = 30</span><br><span class="line">keepalive = 2</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   spew - Install a trace function that spews every line of Python</span><br><span class="line">#       that is executed when running the server. This is the</span><br><span class="line">#       nuclear option.</span><br><span class="line">#</span><br><span class="line">#       True or False</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">spew = False</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Server mechanics</span><br><span class="line">#</span><br><span class="line">#   daemon - Detach the main Gunicorn process from the controlling</span><br><span class="line">#       terminal with a standard fork/fork sequence.</span><br><span class="line">#</span><br><span class="line">#       True or False</span><br><span class="line">#</span><br><span class="line">#   pidfile - The path to a pid file to write</span><br><span class="line">#</span><br><span class="line">#       A path string or None to not write a pid file.</span><br><span class="line">#</span><br><span class="line">#   user - Switch worker processes to run as this user.</span><br><span class="line">#</span><br><span class="line">#       A valid user id (as an integer) or the name of a user that</span><br><span class="line">#       can be retrieved with a call to pwd.getpwnam(value) or None</span><br><span class="line">#       to not change the worker process user.</span><br><span class="line">#</span><br><span class="line">#   group - Switch worker process to run as this group.</span><br><span class="line">#</span><br><span class="line">#       A valid group id (as an integer) or the name of a user that</span><br><span class="line">#       can be retrieved with a call to pwd.getgrnam(value) or None</span><br><span class="line">#       to change the worker processes group.</span><br><span class="line">#</span><br><span class="line">#   umask - A mask for file permissions written by Gunicorn. Note that</span><br><span class="line">#       this affects unix socket permissions.</span><br><span class="line">#</span><br><span class="line">#       A valid value for the os.umask(mode) call or a string</span><br><span class="line">#       compatible with int(value, 0) (0 means Python guesses</span><br><span class="line">#       the base, so values like &quot;0&quot;, &quot;0xFF&quot;, &quot;0022&quot; are valid</span><br><span class="line">#       for decimal, hex, and octal representations)</span><br><span class="line">#</span><br><span class="line">#   tmp_upload_dir - A directory to store temporary request data when</span><br><span class="line">#       requests are read. This will most likely be disappearing soon.</span><br><span class="line">#</span><br><span class="line">#       A path to a directory where the process owner can write. Or</span><br><span class="line">#       None to signal that Python should choose one on its own.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">daemon = False</span><br><span class="line">pidfile = None</span><br><span class="line">umask = 0</span><br><span class="line">user = None</span><br><span class="line">group = None</span><br><span class="line">tmp_upload_dir = None</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   Logging</span><br><span class="line">#</span><br><span class="line">#   logfile - The path to a log file to write to.</span><br><span class="line">#</span><br><span class="line">#       A path string. &quot;-&quot; means log to stdout.</span><br><span class="line">#</span><br><span class="line">#   loglevel - The granularity of log output</span><br><span class="line">#</span><br><span class="line">#       A string of &quot;debug&quot;, &quot;info&quot;, &quot;warning&quot;, &quot;error&quot;, &quot;critical&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">errorlog = &#x27;-&#x27;</span><br><span class="line">loglevel = &#x27;info&#x27;</span><br><span class="line">accesslog = &#x27;-&#x27;</span><br><span class="line">access_log_format = &#x27;%(h)s %(l)s %(u)s %(t)s &quot;%(r)s&quot; %(s)s %(b)s &quot;%(f)s&quot; &quot;%(a)s&quot;&#x27;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Process naming</span><br><span class="line">#</span><br><span class="line">#   proc_name - A base to use with setproctitle to change the way</span><br><span class="line">#       that Gunicorn processes are reported in the system process</span><br><span class="line">#       table. This affects things like &#x27;ps&#x27; and &#x27;top&#x27;. If you&#x27;re</span><br><span class="line">#       going to be running more than one instance of Gunicorn you&#x27;ll</span><br><span class="line">#       probably want to set a name to tell them apart. This requires</span><br><span class="line">#       that you install the setproctitle module.</span><br><span class="line">#</span><br><span class="line">#       A string or None to choose a default of something like &#x27;gunicorn&#x27;.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">proc_name = None</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Server hooks</span><br><span class="line">#</span><br><span class="line">#   post_fork - Called just after a worker has been forked.</span><br><span class="line">#</span><br><span class="line">#       A callable that takes a server and worker instance</span><br><span class="line">#       as arguments.</span><br><span class="line">#</span><br><span class="line">#   pre_fork - Called just prior to forking the worker subprocess.</span><br><span class="line">#</span><br><span class="line">#       A callable that accepts the same arguments as after_fork</span><br><span class="line">#</span><br><span class="line">#   pre_exec - Called just prior to forking off a secondary</span><br><span class="line">#       master process during things like config reloading.</span><br><span class="line">#</span><br><span class="line">#       A callable that takes a server instance as the sole argument.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">def post_fork(server, worker):</span><br><span class="line">    server.log.info(&quot;Worker spawned (pid: %s)&quot;, worker.pid)</span><br><span class="line"></span><br><span class="line">def pre_fork(server, worker):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def pre_exec(server):</span><br><span class="line">    server.log.info(&quot;Forked child, re-executing.&quot;)</span><br><span class="line"></span><br><span class="line">def when_ready(server):</span><br><span class="line">    server.log.info(&quot;Server is ready. Spawning workers&quot;)</span><br><span class="line"></span><br><span class="line">def worker_int(worker):</span><br><span class="line">    worker.log.info(&quot;worker received INT or QUIT signal&quot;)</span><br><span class="line"></span><br><span class="line">    ## get traceback info</span><br><span class="line">    import threading, sys, traceback</span><br><span class="line">    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])</span><br><span class="line">    code = []</span><br><span class="line">    for threadId, stack in sys._current_frames().items():</span><br><span class="line">        code.append(&quot;\n# Thread: %s(%d)&quot; % (id2name.get(threadId,&quot;&quot;),</span><br><span class="line">            threadId))</span><br><span class="line">        for filename, lineno, name, line in traceback.extract_stack(stack):</span><br><span class="line">            code.append(&#x27;File: &quot;%s&quot;, line %d, in %s&#x27; % (filename,</span><br><span class="line">                lineno, name))</span><br><span class="line">            if line:</span><br><span class="line">                code.append(&quot;  %s&quot; % (line.strip()))</span><br><span class="line">    worker.log.debug(&quot;\n&quot;.join(code))</span><br><span class="line"></span><br><span class="line">def worker_abort(worker):</span><br><span class="line">    worker.log.info(&quot;worker received SIGABRT signal&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>java native方法及JNI实例</title>
    <url>/2018/01/01/java%20native%E6%96%B9%E6%B3%95%E5%8F%8AJNI%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="1-参考文献："><a href="#1-参考文献：" class="headerlink" title="1.参考文献："></a>1.参考文献：</h3><p><a href="http://blog.csdn.net/youjianbo_han_87/article/details/2586375">http://blog.csdn.net/youjianbo_han_87/article/details/2586375</a><br><a href="http://blog.csdn.net/yangjiali014/article/details/1633017">http://blog.csdn.net/yangjiali014/article/details/1633017</a><br><a href="http://blog.chinaunix.net/space.php?uid=7437948&amp;do=blog&amp;id=2054823">http://blog.chinaunix.net/space.php?uid=7437948&amp;do=blog&amp;id=2054823</a><br><a href="http://www.iteye.com/topic/72543">http://www.iteye.com/topic/72543</a><br><a href="http://www.enet.com.cn/article/2007/1029/A20071029886398.shtml">http://www.enet.com.cn/article/2007/1029/A20071029886398.shtml</a><br><a href="http://blog.csdn.net/heqingrong623/article/details/3906350">http://blog.csdn.net/heqingrong623/article/details/3906350</a></p>
<p>参考1:用JNI调用C或C++动态联接库原来如此简单</p>
<p>参考2：JNI技术实践小结</p>
<p>参考3：jni简单实例</p>
<h3 id="2-概述"><a href="#2-概述" class="headerlink" title="2.概述"></a>2.概述</h3><p>今天在看Java多线程编程的时候，发现Thread这个类中有多个native方法，以前从来没有见过这种方法，因此对于比较好奇，查阅了一些资料，现在整理一下，以作备忘。</p>
<h4 id="2-1-native关键字用法"><a href="#2-1-native关键字用法" class="headerlink" title="2.1.native关键字用法"></a>2.1.native关键字用法</h4><p>native是与C++联合开发的时候用的！<br>使用native关键字说明这个方法是原生函数，也就是这个方法是用C/C++语言实现的，并且被编译成了DLL，由java去调用。<br>这些函数的实现体在DLL中，JDK的源代码中并不包含，你应该是看不到的。对于不同的平台它们也是不同的。<br>这也是java的底层机制，实际上java就是在不同的平台上调用不同的native方法实现对操作系统的访问的。</p>
<p>总而言之：</p>
<ul>
<li>native 是用做java 和其他语言（如c++）进行协作时使用的，也就是native 后的函数的实现不是用java写的。</li>
<li>既然都不是java，那就别管它的源代码了，我们只需要知道这个方法已经被实现即可。</li>
<li>native的意思就是通知操作系统， 这个函数你必须给我实现，因为我要使用。 所以native关键字的函数都是操作系统实现的， java只能调用。</li>
<li>java是跨平台的语言，既然是跨了平台，所付出的代价就是牺牲一些对底层的控制，而java要实现对底层的控制，就需要一些其他语言的帮助，这个就是native的作用了</li>
</ul>
<h4 id="2-2JNI简介"><a href="#2-2JNI简介" class="headerlink" title="2.2JNI简介"></a>2.2JNI简介</h4><p>native方法是通过java中的JNI实现的。<br>JNI是Java Native Interface的 缩写。从Java 1.1开始，Java Native Interface (JNI)标准成为java平台的一部分，它允许Java代码和其他语言写的代码进行交互。<br>JNI一开始是为了本地已编译语言，尤其是C和C++而设计 的，但是它并不妨碍你使用其他语言，只要调用约定受支持就可以了。<br>使用java与本地已编译的代码交互，通常会丧失平台可移植性。但是，有些情况下这样做是可以接受的，甚至是必须的，比如，使用一些旧的库，与硬件、操作系统进行交互，或者为了提高程序的性能。JNI标准至少保证本地代码能工作在任何Java 虚拟机实现下。</p>
<p>目前java与dll交互的技术主要有3种：jni，jawin和jacob。Jni（Java Native Interface）是sun提供的java与系统中的原生方法交互的技术（在windows\linux系统中，实现java与native method互调）。<br>目前只能由c/c++实现。后两个都是sourceforge上的开源项目，同时也都是基于jni技术的windows系统上的一个应用库。<br>Jacob（Java-Com Bridge）提供了java程序调用microsoft的com对象中的方法的能力。而除了com对象外，jawin（Java/Win32 integration project）还可以win32-dll动态链接库中的方法。<br>就功能而言：jni &gt;&gt; jawin&gt;jacob，其大致的结构如下图：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-1.png"></p>
<p>就易用性而言，正好相反：jacob&gt;jawin&gt;&gt;jni。<br>Jvm封装了各种操作系统实际的差异性的同时，提供了jni技术，使得开发者可以通过java程序（代码）调用到操作系统相关的技术实现的库函数，从而与其他技术和系统交互，使用其他技术实现的系统的功能；同时其他技术和系统也可以通过jni提供的相应原生接口开调用java应用系统内部实现的功能。</p>
<p>在windows系统上，一般可执行的应用程序都是基于native的PE结构，windows上的jvm也是基于native结构实现的。Java应用体系都是构建于jvm之上。</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-2.png"></p>
<p>Jni对于应用本身来说，可以看做一个代理模式。对于开发者来说，需要使用c/c++来实现一个代理程序（jni程序）来实际操作目标原生函数，java程序中则是jvm通过加载并调用此jni程序来间接地调用目标原生函数。</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-3.png"></p>
<h4 id="2-3JN的书写步骤"><a href="#2-3JN的书写步骤" class="headerlink" title="2.3JN的书写步骤"></a>2.3JN的书写步骤</h4><ul>
<li>编写带有native声明的方法的java类，生成.java文件</li>
<li>使用javac命令编译所编写的java类，生成.class文件</li>
<li>使用javah -jni java类名生成扩展名为h的头文件，也即生成.h文件</li>
<li>使用C/C++（或者其他编程想语言）实现本地方法，创建.h文件的实现，也就是创建.cpp文件实现.h文件中的方法</li>
<li>将C/C++编写的文件生成动态连接库，生成dll文件</li>
</ul>
<h3 id="3-JNI实例"><a href="#3-JNI实例" class="headerlink" title="3.JNI实例"></a>3.JNI实例</h3><p>下列是所有操作都是在目录：D:\JNI 下进行的，这样做的好处是便于控制。还有另外一个要求是我们的java类不含包名，当前我只测试成功不含包名的类型。</p>
<h4 id="3-1-编写带有native声明的方法的java类：HelloWorld-java"><a href="#3-1-编写带有native声明的方法的java类：HelloWorld-java" class="headerlink" title="3.1.编写带有native声明的方法的java类：HelloWorld.java"></a>3.1.编写带有native声明的方法的java类：HelloWorld.java</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HelloWorld &#123;  </span><br><span class="line">    public native void displayHelloWorld();// java native方法申明  </span><br><span class="line">  </span><br><span class="line">    static &#123;  </span><br><span class="line">        System.loadLibrary(&quot;HelloWorldImpl&quot;);// 装入动态链接库，&quot;HelloWorldImpl&quot;是要装入的动态链接库名称。  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        // TODO Auto-generated method stub  </span><br><span class="line">        HelloWorld helloWorld = new HelloWorld();  </span><br><span class="line">        helloWorld.displayHelloWorld();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="3-2-使用javac命令编译所编写的java类"><a href="#3-2-使用javac命令编译所编写的java类" class="headerlink" title="3.2.使用javac命令编译所编写的java类"></a>3.2.使用javac命令编译所编写的java类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:\JNI&gt;javac HelloWorld.java  </span><br></pre></td></tr></table></figure>
<p>执行完上述命令以后生成D:\JNI\HelloWorld.class文件</p>
<h4 id="3-3-使用javah-jni-java类名生成扩展名为h的头文件"><a href="#3-3-使用javah-jni-java类名生成扩展名为h的头文件" class="headerlink" title="3.3.使用javah -jni java类名生成扩展名为h的头文件"></a>3.3.使用javah -jni java类名生成扩展名为h的头文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:\JNI&gt;javah -jni HelloWorld  </span><br></pre></td></tr></table></figure>
<p>执行完上述命令以后生成D:\JNI\HelloWorld.h文件，该文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* DO NOT EDIT THIS FILE - it is machine generated */  </span><br><span class="line">#include &lt;jni.h&gt;  </span><br><span class="line">/* Header for class HelloWorld */  </span><br><span class="line">  </span><br><span class="line">#ifndef _Included_HelloWorld  </span><br><span class="line">#define _Included_HelloWorld  </span><br><span class="line">#ifdef __cplusplus  </span><br><span class="line">extern &quot;C&quot; &#123;  </span><br><span class="line">#endif  </span><br><span class="line">/* </span><br><span class="line"> * Class:     HelloWorld </span><br><span class="line"> * Method:    displayHelloWorld </span><br><span class="line"> * Signature: ()V </span><br><span class="line"> */  </span><br><span class="line">JNIEXPORT void JNICALL Java_HelloWorld_displayHelloWorld  </span><br><span class="line">  (JNIEnv *, jobject);  </span><br><span class="line">  </span><br><span class="line">#ifdef __cplusplus  </span><br><span class="line">&#125;  </span><br><span class="line">#endif  </span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>这里我们可以这样理解：这个h文件相当于我们在java里面的接口，这里声明了一个 Java_HelloWorld_displayHelloWorld (JNIEnv *, jobject);方法，然后在我们的本地方法里面实现这个方法，也就是说我们在编写C/C++程序的时候所使用的方法名必须和这里的一致</p>
<h4 id="3-4-使用C-C-实现本地方法"><a href="#3-4-使用C-C-实现本地方法" class="headerlink" title="3.4.使用C/C++实现本地方法"></a>3.4.使用C/C++实现本地方法</h4><p>创建HelloWorldImpl.cpp，代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;HelloWorld.h&quot;  </span><br><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;jni.h&gt;  </span><br><span class="line">/* </span><br><span class="line"> * Class:     HelloWorld </span><br><span class="line"> * Method:    displayHelloWorld </span><br><span class="line"> * Signature: ()V </span><br><span class="line"> */  </span><br><span class="line">JNIEXPORT void JNICALL Java_HelloWorld_displayHelloWorld  </span><br><span class="line">  (JNIEnv *, jobject)  </span><br><span class="line"> &#123;  </span><br><span class="line">    printf(&quot;Hello World!\n&quot;);  </span><br><span class="line">    return;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="3-5-将C-C-编写的文件生成动态连接库"><a href="#3-5-将C-C-编写的文件生成动态连接库" class="headerlink" title="3.5.将C/C++编写的文件生成动态连接库"></a>3.5.将C/C++编写的文件生成动态连接库</h4><p>将D:\Program Files\Java\jdk1.6.0_26\include\jni.h和D:\Program Files\Java\jdk1.6.0_26\include\win32\jni_md.h这两个文件拷贝到D:\JNI\目录下。与HelloWorldImpl.cpp同目录，目录结构如下图所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-4.png"></p>
<h4 id="3-6-执行-cl-LD-D-JNI-HelloWorldImpl-cpp-得到HelloWorldImpl-dll文件"><a href="#3-6-执行-cl-LD-D-JNI-HelloWorldImpl-cpp-得到HelloWorldImpl-dll文件" class="headerlink" title="3.6 执行 cl/LD D:\JNI\HelloWorldImpl.cpp  得到HelloWorldImpl.dll文件"></a>3.6 执行 cl/LD D:\JNI\HelloWorldImpl.cpp  得到HelloWorldImpl.dll文件</h4><p>我使用的是visual studio 2010，要使用其中的cl命令，必须打开visual studio 命令行，如下图所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-5.png"></p>
<p>然后再命令行中输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cl/LD D:\JNI\HelloWorldImpl.cpp    </span><br></pre></td></tr></table></figure>
<p>具体如下图所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-6.png"></p>
<p>执行完上述命令以后，我们在C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC可以看到生成的四个文件，分别是：<br>﻿﻿HelloWorldImpl.dll<br>HelloWorldImpl.exp<br>HelloWorldImpl.lib<br>HelloWorldImpl.obj<br>将其中的HelloWorldImpl.dll拷贝到D:\JNI\目录下。</p>
<h4 id="3-7-执行class得到结果"><a href="#3-7-执行class得到结果" class="headerlink" title="3.7.执行class得到结果"></a>3.7.执行class得到结果</h4><p>在cmd中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:\JNI&gt;java HelloWorld  </span><br></pre></td></tr></table></figure>

<p>具体如下图所示：</p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java-native-7.png"></p>
<h3 id="4-在eclipse下运行"><a href="#4-在eclipse下运行" class="headerlink" title="4.在eclipse下运行"></a>4.在eclipse下运行</h3><h4 id="4-1在eclipse下创建一个叫做jnitest的project"><a href="#4-1在eclipse下创建一个叫做jnitest的project" class="headerlink" title="4.1在eclipse下创建一个叫做jnitest的project"></a>4.1在eclipse下创建一个叫做jnitest的project</h4><h4 id="4-2添加一个同3-1一样的HelloWorld-java"><a href="#4-2添加一个同3-1一样的HelloWorld-java" class="headerlink" title="4.2添加一个同3.1一样的HelloWorld.java"></a>4.2添加一个同3.1一样的HelloWorld.java</h4><h4 id="4-3保存HelloWorld-java以后在jnitest-bin目录下会生成HelloWorld-class。"><a href="#4-3保存HelloWorld-java以后在jnitest-bin目录下会生成HelloWorld-class。" class="headerlink" title="4.3保存HelloWorld.java以后在jnitest\bin目录下会生成HelloWorld.class。"></a>4.3保存HelloWorld.java以后在jnitest\bin目录下会生成HelloWorld.class。</h4><h4 id="4-4根据根据HelloWorld-class生成HelloWorld-h文件"><a href="#4-4根据根据HelloWorld-class生成HelloWorld-h文件" class="headerlink" title="4.4根据根据HelloWorld.class生成HelloWorld.h文件"></a>4.4根据根据HelloWorld.class生成HelloWorld.h文件</h4><h4 id="4-5创建HelloWorldImpl-cpp来实现HelloWorld-h中的方法"><a href="#4-5创建HelloWorldImpl-cpp来实现HelloWorld-h中的方法" class="headerlink" title="4.5创建HelloWorldImpl.cpp来实现HelloWorld.h中的方法"></a>4.5创建HelloWorldImpl.cpp来实现HelloWorld.h中的方法</h4><h4 id="4-6使用Visual-studio-2010生成HelloWorldImpl-dll"><a href="#4-6使用Visual-studio-2010生成HelloWorldImpl-dll" class="headerlink" title="4.6使用Visual studio 2010生成HelloWorldImpl.dll"></a>4.6使用Visual studio 2010生成HelloWorldImpl.dll</h4><h4 id="4-7在Eclipse中运行HelloWorld程序，报错如下："><a href="#4-7在Eclipse中运行HelloWorld程序，报错如下：" class="headerlink" title="4.7在Eclipse中运行HelloWorld程序，报错如下："></a>4.7在Eclipse中运行HelloWorld程序，报错如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: no HelloWorldImpl in java.library.path  </span><br><span class="line">    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1738)  </span><br><span class="line">    at java.lang.Runtime.loadLibrary0(Runtime.java:823)  </span><br><span class="line">    at java.lang.System.loadLibrary(System.java:1028)  </span><br><span class="line">    at HelloWorld.&lt;clinit&gt;(HelloWorld.java:6)  </span><br></pre></td></tr></table></figure>
<h4 id="4-8将HelloWorldImpl-dll拷贝到C-Windows-System32"><a href="#4-8将HelloWorldImpl-dll拷贝到C-Windows-System32" class="headerlink" title="4.8将HelloWorldImpl.dll拷贝到C:\Windows\System32"></a>4.8将HelloWorldImpl.dll拷贝到C:\Windows\System32</h4><h4 id="4-9再次执行HelloWorld程序，程序正常运行，console输出”Hello-World-”"><a href="#4-9再次执行HelloWorld程序，程序正常运行，console输出”Hello-World-”" class="headerlink" title="4.9再次执行HelloWorld程序，程序正常运行，console输出”Hello World!”"></a>4.9再次执行HelloWorld程序，程序正常运行，console输出”Hello World!”</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java加密与数字证书</title>
    <url>/2018/01/01/java%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="数字摘要"><a href="#数字摘要" class="headerlink" title="数字摘要"></a>数字摘要</h2><p>数字摘要就是采用单项Hash函数将需要加密的明文”摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹，HASH值或摘要值 ，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。</p>
<p>目前常用的摘要算法为MD5、SHA1、SHA256等。其中MD5系列算法已经破解，一般不再建议使用。 </p>
<p>MD5：Message-Digest Algorithm 5； </p>
<p>SHA1：Secure Hash Algorithm；</p>
<h2 id="密钥加密技术"><a href="#密钥加密技术" class="headerlink" title="密钥加密技术"></a>密钥加密技术</h2><p>以用钥匙锁门为例，钥匙我们可以看做密钥，锁门的过程可以看做加密过程，锁门过程中所用到的原理就是加密算法</p>
<h3 id="私用密钥（对称加密）"><a href="#私用密钥（对称加密）" class="headerlink" title="私用密钥（对称加密）"></a>私用密钥（对称加密）</h3><p>采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密，这种加密方法称为对称加密，也称为单密钥加密。它的最大优势是加/解密速度快，适合于对大数据量进行加密，但密钥管理困难。</p>
<h3 id="公共密钥（非对称加密）"><a href="#公共密钥（非对称加密）" class="headerlink" title="公共密钥（非对称加密）"></a>公共密钥（非对称加密）</h3><p>使用不同的密钥来分别完成加密和解密操作，一个公开发布，即公开密钥，另一个由用户自己秘密保存，即私用密钥。信息发送者用公开密钥去加密，而信息接收者则用私用密钥去解密。公钥机制灵活，但加密和解密速度却比对称密钥加密慢得多。<br>非对称加密的典型应用是数字签名，加密密钥。</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>数字签名就是附加在数据单元上的一些数据,或是对数据单元所作的密码变换。这种数据或变换允许数据单元的接收者用以确认数据单元的来源和数据单元的完整性并保护数据,防止被人(例如接收者)进行伪造。</p>
<ul>
<li>签名过程：发送报文时，发送方用一个哈希函数从报文文本中生成报文摘要,然后用自己的私人密钥对这个摘要进行加密，这个加密后的摘要将作为报文的数字签名和报文一起发送给接收方。</li>
<li>验签过程：接收方首先用与发送方一样的哈希函数从接收到的原始报文中计算出报文摘要，接着再用发送方的公用密钥来对报文附加的数字签名进行解密，如果这两个摘要相同、那么接收方就能确认该数字签名是发送方的。</li>
</ul>
<p>数字签名有两种功效：一是能确定消息确实是由发送方签名并发出来的；二是数字签名能确定消息的完整性。<br>数字签名是非对称密钥加密技术与数字摘要技术的应用。</p>
<p>下面是欧姆社系列图书《漫画密码》截图<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-1.png"></p>
<hr>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-2.png"></p>
<h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>数字证书提供了一种在Internet上验证通信实体身份的方式，其作用类似于司机的驾驶执照或日常生活中的身份证。它是由权威机构CA发行，人们可以在网上用它来识别对方的身份。最简单的证书包含一个公开密钥、名称以及证书授权中心的数字签名，此外，数字证书只在特定的时间段内有效。 </p>
<p>数字证书是一个经证书授权中心数字签名的包含公钥拥有者信息以及公钥的文件。<br><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-4.png"></p>
<h2 id="X-509标准"><a href="#X-509标准" class="headerlink" title="X.509标准"></a>X.509标准</h2><p>X.509是由国际电信联盟（ITU-T）制定的数字证书标准。</p>
<h3 id="扩展文件："><a href="#扩展文件：" class="headerlink" title="扩展文件："></a>扩展文件：</h3><ul>
<li>.cer, .crt - 通常被用于二进制的DER文件格式(同于.der),不过也被用于Base64编码的文件 (例如 .pem),保存证书的公钥</li>
<li>.P7B - 同于 .p7c</li>
<li>.P7C - PKCS#7证书格式，仅仅包含证书和CRL列表信息，没有私钥。</li>
<li>.PFX - 同于 .p12</li>
<li>.P12 -PKCS#12文件,包含证书（公钥）和私钥（受密码保护），已经完整的证书链信</li>
<li>.jks - JAVA的keytools证书工具支持的证书私钥格式</li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="keytool"><a href="#keytool" class="headerlink" title="keytool"></a>keytool</h3><p>keytool 是个密钥和证书管理工具，它将密钥和证书储存在一个所谓的密钥仓库中。</p>
<ul>
<li>密钥实体（Key entity）：密钥（secret key）又或者是私钥和配对公钥（采用非对称加密）</li>
<li>可信任的证书实体（trusted certificate entries）：只包含公钥</li>
</ul>
<p>keytool常用命令:</p>
<table>
<thead>
<tr>
<th>command</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>-genkey</td>
<td>生成密钥</td>
</tr>
<tr>
<td>-alias</td>
<td>指定密钥别名</td>
</tr>
<tr>
<td>-keystore</td>
<td>指定密钥库的名称</td>
</tr>
<tr>
<td>-storepass</td>
<td>指定密钥库的密码</td>
</tr>
<tr>
<td>-validity</td>
<td>指定证书有效期</td>
</tr>
<tr>
<td>-keyalg</td>
<td>指定密钥的算法，默认采用DSA</td>
</tr>
<tr>
<td>-keysize</td>
<td>指定密钥长度</td>
</tr>
<tr>
<td>-keypass</td>
<td>指定别名对应密钥的密码(私钥的密码)</td>
</tr>
<tr>
<td>-dname</td>
<td>指定证书所有者信息</td>
</tr>
<tr>
<td>-list</td>
<td>显示密钥库中的证书信息</td>
</tr>
<tr>
<td>-v</td>
<td>显示密钥库中的证书详细信息</td>
</tr>
<tr>
<td>-file</td>
<td>指定证书的路径名称</td>
</tr>
<tr>
<td>-delete</td>
<td>删除密钥库中某条目</td>
</tr>
<tr>
<td>-printcert</td>
<td>查看导出的证书信息</td>
</tr>
<tr>
<td>-keypasswd</td>
<td>修改密钥库中指定条目口令</td>
</tr>
<tr>
<td>-export</td>
<td>将别名指定的证书导出到文件</td>
</tr>
<tr>
<td>-import</td>
<td>将已签名数字证书导入密钥库</td>
</tr>
</tbody></table>
<p>修改密钥别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -changealias -alias ORIGALIAS -destalias NEWALIAS -keystore x.keystore </span><br><span class="line">输入密钥库口令:密钥库密码 </span><br><span class="line">输入&lt;ORIGALIAS&gt;的密钥口令:密钥密码</span><br></pre></td></tr></table></figure>

<p>导出证书 </p>
<blockquote>
<p>keystore中的private key实体不包含公钥，可以通过导出到证书，再从证书中得到公钥：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -export -alias ALIAS -keystore KEYSTORE -file PATH </span><br><span class="line">输入密钥库口令:密钥库密码</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><h3 id="密钥库准备"><a href="#密钥库准备" class="headerlink" title="密钥库准备"></a>密钥库准备</h3><p>使用keytool工具生成一个密钥实体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias origalias -keystore x.keystore</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/java%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6-4.png"></p>
<p>然后需要将密钥实体导出成证书，包含对应的公钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -export -alias origalias -keystore x.keystore -file origalias.cer</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">	private static String STOREPATH = &quot;C:/Users/Hang/x.keystore&quot;;</span><br><span class="line">	private static String STOREPASS = &quot;123456&quot;;</span><br><span class="line">	private static String KEYALIAS = &quot;origalias&quot;;</span><br><span class="line">	private static String KEYPASS = &quot;111111&quot;;</span><br><span class="line">	private static String CERTPATH = &quot;C:/Users/Hang/origalias.cer&quot;;</span><br><span class="line">	private static String CERTPASS = &quot;111111&quot;;</span><br><span class="line">	private static String SignAlg = &quot;SHA256withRSA&quot;;</span><br><span class="line">	</span><br><span class="line">	/*</span><br><span class="line">	抛出异常：KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException, NoSuchProviderException, UnrecoverableKeyException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, SignatureException</span><br><span class="line">	*/</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		//根据密钥库类型JKS得到密钥库实例</span><br><span class="line">		KeyStore keyStore = KeyStore.getInstance(&quot;JKS&quot;,&quot;SUN&quot;);</span><br><span class="line">		InputStream in = new FileInputStream(STOREPATH);</span><br><span class="line">		keyStore.load(in, STOREPASS.toCharArray());</span><br><span class="line">	</span><br><span class="line">		//根据alias从keystone中取出密钥对</span><br><span class="line">		PrivateKey privateKey = null;</span><br><span class="line">		if(keyStore.isKeyEntry(KEYALIAS))&#123;</span><br><span class="line">			privateKey = (PrivateKey) keyStore.getKey(KEYALIAS, KEYPASS.toCharArray());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		//使用命令导出密钥的证书`keytool -export -alias origalias -keystore x.keystore -file origalias.jks`</span><br><span class="line">		</span><br><span class="line">		//加载证书</span><br><span class="line">		//证书格式为X509</span><br><span class="line">	    CertificateFactory certificateFactory = CertificateFactory.getInstance(&quot;X.509&quot;);</span><br><span class="line">	    //读取证书文件的输入流</span><br><span class="line">	    InputStream certin = new FileInputStream(CERTPATH);</span><br><span class="line">	    Certificate certificate = certificateFactory.generateCertificate(certin);</span><br><span class="line">	    //从证书中得到公钥</span><br><span class="line">	    PublicKey publicKey = certificate.getPublicKey();</span><br><span class="line">	    </span><br><span class="line">	    System.out.println(&quot;私钥：\r\n&quot;+privateKey);</span><br><span class="line">	    System.out.println(&quot;公钥：\r\n&quot;+publicKey);</span><br><span class="line">	    </span><br><span class="line">	    String source = &quot;X.509是由国际电信联盟（ITU-T）制定的数字证书标准。&quot;;</span><br><span class="line">	    Cipher cipher = Cipher.getInstance(&quot;RSA&quot;);</span><br><span class="line">	    cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">	    cipher.update(&quot;数字签名是 非对称密钥加密技术与数字摘要技术的应用。\r\n&quot;.getBytes(&quot;UTF-8&quot;));  </span><br><span class="line">	    byte[] cipherByte = cipher.doFinal(source.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">	    </span><br><span class="line">	    cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">	    byte[] decrpytByte = cipher.doFinal(cipherByte);</span><br><span class="line">	    System.out.println(new String(decrpytByte,&quot;UTF-8&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="签名验签"><a href="#签名验签" class="headerlink" title="签名验签"></a>签名验签</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>签名验签中使用的还是上面代码中的公钥和私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Signature signature = Signature.getInstance(SignAlg);</span><br><span class="line">	signature.initSign(privateKey);</span><br><span class="line">	signature.update(&quot;数字签名是 非对称密钥加密技术与数字摘要技术的应用。\r\n&quot;.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">	signature.update(source.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">	byte[] signByte = signature.sign();</span><br><span class="line">	    </span><br><span class="line">	signature.initVerify(certificate);</span><br><span class="line">	//certificate 和 publicKey都可以验签</span><br><span class="line">	signature.update(&quot;数字签名是 非对称密钥加密技术与数字摘要技术的应用。\r\n&quot;.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">	signature.update(source.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">	boolean verified = signature.verify(signByte);</span><br><span class="line">	System.out.println(verified);**</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>java技术栈</title>
    <url>/2018/01/01/java%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java技术栈</span><br><span class="line">1 java基础：</span><br><span class="line">1.1 算法</span><br><span class="line">·    1.1 排序算法：直接插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序、基数排序</span><br><span class="line">·    1.2 二叉查找树、红黑树、B树、B+树、LSM树（分别有对应的应用，数据库、HBase）</span><br><span class="line">·    1.3 BitSet解决数据重复和是否存在等问题</span><br><span class="line">1.2 基本</span><br><span class="line">·    2.1 字符串常量池的迁移</span><br><span class="line">·    2.2 字符串KMP算法</span><br><span class="line">·    2.3 equals和hashcode</span><br><span class="line">·    2.4 泛型、异常、反射</span><br><span class="line">·    2.5 string的hash算法</span><br><span class="line">·    2.6 hash冲突的解决办法：拉链法</span><br><span class="line">·    2.7 foreach循环的原理</span><br><span class="line">·    2.8 static、final、transient等关键字的作用</span><br><span class="line">·    2.9 volatile关键字的底层实现原理</span><br><span class="line">·    2.10 Collections.sort方法使用的是哪种排序方法</span><br><span class="line">·    2.11 Future接口，常见的线程池中的FutureTask实现等</span><br><span class="line">·    2.12 string的intern方法的内部细节，jdk1.6和jdk1.7的变化以及内部cpp代码StringTable的实现</span><br><span class="line">1.3 设计模式</span><br><span class="line">·    单例模式</span><br><span class="line">·    工厂模式</span><br><span class="line">·    装饰者模式</span><br><span class="line">·    观察者设计模式</span><br><span class="line">·    ThreadLocal设计模式</span><br><span class="line">1.4 正则表达式</span><br><span class="line">·    4.1 捕获组和非捕获组</span><br><span class="line">·    4.2 贪婪，勉强，独占模式</span><br><span class="line">1.5 java内存模型以及垃圾回收算法</span><br><span class="line">· 5.1 类加载机制，也就是双亲委派模型</span><br><span class="line">· 5.2 java内存分配模型（默认HotSpot）</span><br><span class="line">线程共享的：堆区、永久区 线程独享的：虚拟机栈、本地方法栈、程序计数器</span><br><span class="line">· 5.3 内存分配机制：年轻代（Eden区、两个Survivor区）、年老代、永久代以及他们的分配过程</span><br><span class="line">· 5.4 强引用、软引用、弱引用、虚引用与GC</span><br><span class="line">· 5.5 happens-before规则</span><br><span class="line">· 5.6 指令重排序、内存栅栏</span><br><span class="line">· 5.7 Java 8的内存分代改进</span><br><span class="line">· 5.8 垃圾回收算法：</span><br><span class="line">标记-清除（不足之处：效率不高、内存碎片）</span><br><span class="line">复制算法（解决了上述问题，但是内存只能使用一半，针对大部分对象存活时间短的场景，引出了一个默认的8:1:1的改进，缺点是仍然需要借助外界来解决可能承载不下的问题）</span><br><span class="line">标记整理</span><br><span class="line">· 5.8 常用垃圾收集器：</span><br><span class="line">新生代：Serial收集器、ParNew收集器、Parallel Scavenge 收集器</span><br><span class="line">老年代：Serial Old收集器、Parallel Old收集器、CMS（Concurrent Mark Sweep）收集器、 G1 收集器（跨新生代和老年代）</span><br><span class="line">· 5.9 常用gc的参数：-Xmn、-Xms、-Xmx、-XX:MaxPermSize、-XX:SurvivorRatio、-XX:-PrintGCDetails</span><br><span class="line">· 5.10 常用工具： jps、jstat、jmap、jstack、图形工具jConsole、Visual VM、MAT</span><br><span class="line"> </span><br><span class="line">1.6 锁以及并发容器的源码</span><br><span class="line">·    6.1 synchronized和volatile理解</span><br><span class="line">·    6.2 Unsafe类的原理，使用它来实现CAS。因此诞生了AtomicInteger系列等</span><br><span class="line">·    6.3 CAS可能产生的ABA问题的解决，如加入修改次数、版本号</span><br><span class="line">·    6.4 同步器AQS的实现原理</span><br><span class="line">·    6.5 独占锁、共享锁；可重入的独占锁ReentrantLock、共享锁 实现原理</span><br><span class="line">·    6.6 公平锁和非公平锁</span><br><span class="line">·    6.7 读写锁 ReentrantReadWriteLock的实现原理</span><br><span class="line">·    6.8 LockSupport工具</span><br><span class="line">·    6.9 Condition接口及其实现原理</span><br><span class="line">·    6.10 HashMap、HashSet、ArrayList、LinkedList、HashTable、ConcurrentHashMap、TreeMap的实现原理</span><br><span class="line">·    6.11 HashMap的并发问题</span><br><span class="line">·    6.12 ConcurrentLinkedQueue的实现原理</span><br><span class="line">·    6.13 Fork/Join框架</span><br><span class="line">·    6.14 CountDownLatch和CyclicBarrier</span><br><span class="line">1.7 线程池源码</span><br><span class="line">·    7.1 内部执行原理</span><br><span class="line">·    7.2 各种线程池的区别</span><br><span class="line"> </span><br><span class="line">2 web方面：</span><br><span class="line">2.1 SpringMVC的架构设计</span><br><span class="line">·    1.1 servlet开发存在的问题：映射问题、参数获取问题、格式化转换问题、返回值处理问题、视图渲染问题</span><br><span class="line">·    1.2 SpringMVC为解决上述问题开发的几大组件及接口：HandlerMapping、HandlerAdapter、HandlerMethodArgumentResolver、HttpMessageConverter、Converter、GenericConverter、HandlerMethodReturnValueHandler、ViewResolver、MultipartResolver</span><br><span class="line">·    1.3 DispatcherServlet、容器、组件三者之间的关系</span><br><span class="line">·    1.4 叙述SpringMVC对请求的整体处理流程</span><br><span class="line">·    1.5 SpringBoot</span><br><span class="line">2.2 SpringAOP源码</span><br><span class="line">· 2.1 AOP的实现分类：编译期、字节码加载前、字节码加载后三种时机来实现AOP</span><br><span class="line">· 2.2 深刻理解其中的角色：AOP联盟、aspectj、jboss AOP、Spring自身实现的AOP、Spring嵌入aspectj。特别是能用代码区分后两者</span><br><span class="line">· 2.3 接口设计：</span><br><span class="line">AOP联盟定义的概念或接口：Pointcut（概念，没有定义对应的接口）、Joinpoint、Advice、MethodInterceptor、MethodInvocation</span><br><span class="line">SpringAOP针对上述Advice接口定义的接口及其实现类：BeforeAdvice、AfterAdvice、MethodBeforeAdvice、AfterReturningAdvice；针对aspectj对上述接口的实现AspectJMethodBeforeAdvice、AspectJAfterReturningAdvice、AspectJAfterThrowingAdvice、AspectJAfterAdvice。</span><br><span class="line">SpringAOP定义的定义的AdvisorAdapter接口：将上述Advise转化为MethodInterceptor</span><br><span class="line">SpringAOP定义的Pointcut接口：含有两个属性ClassFilter（过滤类）、MethodMatcher（过滤方法）</span><br><span class="line">SpringAOP定义的ExpressionPointcut接口：实现中会引入aspectj的pointcut表达式</span><br><span class="line">SpringAOP定义的PointcutAdvisor接口（将上述Advice接口和Pointcut接口结合起来）</span><br><span class="line">· 2.4 SpringAOP的调用流程</span><br><span class="line">· 2.5 SpringAOP自己的实现方式（代表人物ProxyFactoryBean）和借助aspectj实现方式区分</span><br><span class="line">2.3 Spring事务体系源码以及分布式事务Jotm Atomikos源码实现</span><br><span class="line">·    3.1 jdbc事务存在的问题</span><br><span class="line">·    3.2 Hibernate对事务的改进</span><br><span class="line">·    3.3 针对各种各样的事务，Spring如何定义事务体系的接口，以及如何融合jdbc事务和Hibernate事务的</span><br><span class="line">·    3.4 三种事务模型包含的角色以及各自的职责</span><br><span class="line">·    3.5 事务代码也业务代码分离的实现（AOP+ThreadLocal来实现）</span><br><span class="line">·    3.6 Spring事务拦截器TransactionInterceptor全景</span><br><span class="line">·    3.7 X/Open DTP模型，两阶段提交，JTA接口定义</span><br><span class="line">·    3.8 Jotm、Atomikos的实现原理</span><br><span class="line">·    3.9 事务的传播属性</span><br><span class="line">·    3.10 PROPAGATION_REQUIRES_NEW、PROPAGATION_NESTED的实现原理以及区别</span><br><span class="line">·    3.11 事物的挂起和恢复的原理</span><br><span class="line">2.4 数据库隔离级别</span><br><span class="line">·    4.1 Read uncommitted：读未提交</span><br><span class="line">·    4.2 Read committed ： 读已提交</span><br><span class="line">·    4.3 Repeatable read：可重复读</span><br><span class="line">·    4.4 Serializable ：串行化</span><br><span class="line">2.5 数据库</span><br><span class="line">· 5.1 数据库性能的优化</span><br><span class="line">· 5.2 深入理解mysql的Record Locks、Gap Locks、Next-Key Locks</span><br><span class="line">例如下面的在什么情况下会出现死锁：</span><br><span class="line">start transaction; DELETE FROM t WHERE id =6; INSERT INTO t VALUES(6); commit;</span><br><span class="line">· 5.3 insert into select语句的加锁情况</span><br><span class="line">· 5.4 事务的ACID特性概念</span><br><span class="line">· 5.5 innodb的MVCC理解</span><br><span class="line">· 5.6 undo redo binlog</span><br><span class="line">o    1 undo redo 都可以实现持久化，他们的流程是什么？为什么选用redo来做持久化？</span><br><span class="line">o    2 undo、redo结合起来实现原子性和持久化，为什么undo log要先于redo log持久化？</span><br><span class="line">o    3 undo为什么要依赖redo？</span><br><span class="line">o    4 日志内容可以是物理日志，也可以是逻辑日志？他们各自的优点和缺点是？</span><br><span class="line">o    5 redo log最终采用的是物理日志加逻辑日志，物理到page，page内逻辑。还存在什么问题？怎么解决？Double Write</span><br><span class="line">o    6 undo log为什么不采用物理日志而采用逻辑日志？</span><br><span class="line">o    7 为什么要引入Checkpoint？</span><br><span class="line">o    8 引入Checkpoint后为了保证一致性需要阻塞用户操作一段时间，怎么解决这个问题？（这个问题还是很有普遍性的，redis、ZooKeeper都有类似的情况以及不同的应对策略）又有了同步Checkpoint和异步Checkpoint</span><br><span class="line">o    9 开启binlog的情况下，事务内部2PC的一般过程（含有2次持久化，redo log和binlog的持久化）</span><br><span class="line">o    10 解释上述过程，为什么binlog的持久化要在redo log之后，在存储引擎commit之前？</span><br><span class="line">o    11 为什么要保持事务之间写入binlog和执行存储引擎commit操作的顺序性？（即先写入binlog日志的事务一定先commit）</span><br><span class="line">o    12 为了保证上述顺序性，之前的办法是加锁prepare_commit_mutex，但是这极大的降低了事务的效率，怎么来实现binlog的group commit？</span><br><span class="line">o    13 怎么将redo log的持久化也实现group commit？至此事务内部2PC的过程，2次持久化的操作都可以group commit了，极大提高了效率</span><br><span class="line">2.6 ORM框架: mybatis、Hibernate</span><br><span class="line">·    6.1 最原始的jdbc-&gt;Spring的JdbcTemplate-&gt;hibernate-&gt;JPA-&gt;SpringDataJPA的演进之路</span><br><span class="line">2.7 SpringSecurity、shiro、SSO（单点登录）</span><br><span class="line">·    7.1 Session和Cookie的区别和联系以及Session的实现原理</span><br><span class="line">·    7.2 SpringSecurity的认证过程以及与Session的关系</span><br><span class="line">·    7.3 CAS实现SSO（详见Cas（01）——简介）</span><br><span class="line"> </span><br><span class="line">2.8 日志</span><br><span class="line">·    8.1 jdk自带的logging、log4j、log4j2、logback</span><br><span class="line">·    8.2 门面commons-logging、slf4j</span><br><span class="line">·    8.3 上述6种混战时的日志转换</span><br><span class="line">2.9 datasource</span><br><span class="line">·    9.1 c3p0</span><br><span class="line">·    9.2 druid</span><br><span class="line">·    9.3 JdbcTemplate执行sql语句的过程中对Connection的使用和管理</span><br><span class="line">2.10 HTTPS的实现原理</span><br><span class="line"> </span><br><span class="line">3 分布式、java中间件、web服务器等方面：</span><br><span class="line">3.1 ZooKeeper源码</span><br><span class="line">·    1.1 客户端架构</span><br><span class="line">·    1.2 服务器端单机版和集群版，对应的请求处理器</span><br><span class="line">·    1.3 集群版session的建立和激活过程</span><br><span class="line">·    1.4 Leader选举过程</span><br><span class="line">·    1.5 事务日志和快照文件的详细解析</span><br><span class="line">·    1.6 实现分布式锁、分布式ID分发器</span><br><span class="line">·    1.7 实现Leader选举</span><br><span class="line">·    1.8 ZAB协议实现一致性原理</span><br><span class="line">3.2 序列化和反序列化框架</span><br><span class="line">·    2.1 Avro研究</span><br><span class="line">·    2.2 Thrift研究</span><br><span class="line">·    2.3 Protobuf研究</span><br><span class="line">·    2.4 Protostuff研究</span><br><span class="line">·    2.5 Hessian</span><br><span class="line">3.3 RPC框架dubbo源码</span><br><span class="line">·    3.1 dubbo扩展机制的实现，对比SPI机制</span><br><span class="line">·    3.2 服务的发布过程</span><br><span class="line">·    3.3 服务的订阅过程</span><br><span class="line">·    3.4 RPC通信的设计</span><br><span class="line">3.4 NIO模块以及对应的Netty和Mina、thrift源码</span><br><span class="line">·    4.1 TCP握手和断开及有限状态机</span><br><span class="line">·    4.2 backlog</span><br><span class="line">·    4.3 BIO NIO</span><br><span class="line">·    4.4 阻塞/非阻塞的区别、同步/异步的区别</span><br><span class="line">·    4.5 阻塞IO、非阻塞IO、多路复用IO、异步IO</span><br><span class="line">·    4.6 Reactor线程模型</span><br><span class="line">·    4.7 jdk的poll、epoll与底层poll、epoll的对接实现</span><br><span class="line">·    4.8 Netty自己的epoll实现</span><br><span class="line">·    4.9 内核层poll、epoll的大致实现</span><br><span class="line">·    4.10 epoll的边缘触发和水平触发</span><br><span class="line">·    4.11 Netty的EventLoopGroup设计</span><br><span class="line">·    4.12 Netty的ByteBuf设计</span><br><span class="line">·    4.13 Netty的ChannelHandler</span><br><span class="line">·    4.13 Netty的零拷贝</span><br><span class="line">·    4.14 Netty的线程模型，特别是与业务线程以及资源释放方面的理解</span><br><span class="line">3.5 消息队列kafka、RocketMQ、Notify、Hermes</span><br><span class="line">·    5.1 kafka的文件存储设计</span><br><span class="line">·    5.2 kafka的副本复制过程</span><br><span class="line">·    5.3 kafka副本的leader选举过程</span><br><span class="line">·    5.4 kafka的消息丢失问题</span><br><span class="line">·    5.5 kafka的消息顺序性问题</span><br><span class="line">·    5.6 kafka的isr设计和过半对比</span><br><span class="line">·    5.7 kafka本身做的很轻量级来保持高效，很多高级特性没有：事务、优先级的消息、消息的过滤，更重要的是服务治理不健全，一旦出问题，不能直观反应出来，不太适合对数据要求十分严苛的企业级系统，而适合日志之类并发量大但是允许少量的丢失或重复等场景</span><br><span class="line">·    5.8 Notify、RocketMQ的事务设计</span><br><span class="line">·    5.9 基于文件的kafka、RocketMQ和基于数据库的Notify和Hermes</span><br><span class="line">·    5.10 设计一个消息系统要考虑哪些方面</span><br><span class="line">·    5.11 丢失消息、消息重复、高可用等话题</span><br><span class="line">3.6 数据库的分库分表mycat</span><br><span class="line">3.7 NoSql数据库mongodb</span><br><span class="line">3.8 KV键值系统memcached redis</span><br><span class="line">·    8.1 redis对客户端的维护和管理，读写缓冲区</span><br><span class="line">·    8.2 redis事务的实现</span><br><span class="line">·    8.3 Jedis客户端的实现</span><br><span class="line">·    8.4 JedisPool以及ShardedJedisPool的实现</span><br><span class="line">·    8.5 redis epoll实现，循环中的文件事件和时间事件</span><br><span class="line">·    8.6 redis的RDB持久化，save和bgsave</span><br><span class="line">·    8.7 redis AOF命令追加、文件写入、文件同步到磁盘</span><br><span class="line">·    8.8 redis AOF重写，为了减少阻塞时间采取的措施</span><br><span class="line">·    8.9 redis的LRU内存回收算法</span><br><span class="line">·    8.10 redis的master slave复制</span><br><span class="line">·    8.11 redis的sentinel高可用方案</span><br><span class="line">·    8.12 redis的cluster分片方案</span><br><span class="line">3.9 web服务器tomcat、ngnix的设计原理</span><br><span class="line">·    9.1 tomcat的整体架构设计</span><br><span class="line">·    9.2 tomcat对通信的并发控制</span><br><span class="line">·    9.3 http请求到达tomcat的整个处理流程</span><br><span class="line">3.10 ELK日志实时处理查询系统</span><br><span class="line">·    10.1 Elasticsearch、Logstash、Kibana</span><br><span class="line">3.11 服务方面</span><br><span class="line">·    11.1 SOA与微服务</span><br><span class="line">·    11.2 服务的合并部署、多版本自动快速切换和回滚</span><br><span class="line">详见基于Java容器的多应用部署技术实践</span><br><span class="line">·    11.3 服务的治理：限流、降级</span><br><span class="line">具体见 张开涛大神的架构系列</span><br><span class="line">服务限流：令牌桶、漏桶</span><br><span class="line">服务降级、服务的熔断、服务的隔离：netflix的hystrix组件</span><br><span class="line">· 11.4 服务的线性扩展</span><br><span class="line">无状态的服务如何做线性扩展：</span><br><span class="line">如一般的web应用，直接使用硬件或者软件做负载均衡，简单的轮训机制</span><br><span class="line">有状态服务如何做线性扩展：</span><br><span class="line">如Redis的扩展：一致性hash，迁移工具</span><br><span class="line">· 11.5 服务链路监控和报警：CAT、Dapper、Pinpoint</span><br><span class="line">3.12 Spring Cloud</span><br><span class="line">·    12.1 Spring Cloud Zookeeper:用于服务注册和发现</span><br><span class="line">·    12.2 Spring Cloud Config:分布式配置</span><br><span class="line">·    12.2 Spring Cloud Netflix Eureka：用于rest服务的注册和发现</span><br><span class="line">·    12.3 Spring Cloud Netflix Hystrix：服务的隔离、熔断和降级</span><br><span class="line">·    12.4 Spring Cloud Netflix Zuul:动态路由，API Gateway</span><br><span class="line">3.13 分布式事务</span><br><span class="line">·    13.1 JTA分布式事务接口定义，对此与Spring事务体系的整合</span><br><span class="line">·    13.2 TCC分布式事务概念</span><br><span class="line">·    13.3 TCC分布式事务实现框架案例1：tcc-transaction</span><br><span class="line">·    13.3.1 TccCompensableAspect切面拦截创建ROOT事务</span><br><span class="line">·    13.3.2 TccTransactionContextAspect切面使远程RPC调用资源加入到上述事务中，作为一个参与者</span><br><span class="line">·    13.3.3 TccCompensableAspect切面根据远程RPC传递的TransactionContext的标记创建出分支事务</span><br><span class="line">·    13.3.4 全部RPC调用完毕，ROOT事务开始提交或者回滚，执行所有参与者的提交或回滚</span><br><span class="line">·    13.3.5 所有参与者的提交或者回滚，还是通过远程RPC调用，provider端开始执行对应分支事务的confirm或者cancel方法</span><br><span class="line">·    13.3.6 事务的存储，集群共享问题13.3.7 事务的恢复，避免集群重复恢复</span><br><span class="line">·    13.4 TCC分布式事务实现框架案例2：ByteTCC</span><br><span class="line">·    13.4.1 JTA事务管理实现，类比Jotm、Atomikos等JTA实现</span><br><span class="line">·    13.4.2 事务的存储和恢复，集群是否共享问题调用方创建CompensableTransaction事务，并加入资源</span><br><span class="line">·    13.4.3 CompensableMethodInterceptor拦截器向spring事务注入CompensableInvocation资源</span><br><span class="line">·    13.4.4 Spring的分布式事务管理器创建作为协调者CompensableTransaction类型事务，和当前线程进行绑定，同时创建一个jta事务</span><br><span class="line">·    13.4.5 在执行sql等操作的时候，所使用的jdbc等XAResource资源加入上述jta事务</span><br><span class="line">·    13.4.6 dubbo RPC远程调用前，CompensableDubboServiceFilter创建出一个代理XAResource，加入上述 CompensableTransaction类型事务，并在RPC调用过程传递TransactionContext参与方创建分支的CompensableTransaction事务，并加入资源，然后提交jta事务</span><br><span class="line">·    13.4.7 RPC远程调用来到provider端，CompensableDubboServiceFilter根据传递过来的TransactionContext创建出对应的CompensableTransaction类型事务</span><br><span class="line">·    13.4.8 provider端，执行时遇见@Transactional和@Compensable，作为一个参与者开启try阶段的事务，即创建了一个jta事务</span><br><span class="line">·    13.4.9 provider端try执行完毕开始准备try的提交，仅仅是提交上述jta事务，返回结果到RPC调用端调用方决定回滚还是提交</span><br><span class="line">·    13.4.10 全部执行完毕后开始事务的提交或者回滚，如果是提交则先对jta事务进行提交（包含jdbc等XAResource资源的提交），提交成功后再对CompensableTransaction类型事务进行提交，如果jta事务提交失败，则需要回滚CompensableTransaction类型事务。</span><br><span class="line">·    13.4.11 CompensableTransaction类型事务的提交就是对CompensableInvocation资源和RPC资源的提交，分别调用每一个CompensableInvocation资源的confirm，以及每一个RPC资源的提交CompensableInvocation资源的提交</span><br><span class="line">·    13.4.12 此时每一个CompensableInvocation资源的confirm又会准备开启一个新的事务，当前线程的CompensableTransaction类型事务已存在，所以这里开启事务仅仅是创建了一个新的jta事务而已</span><br><span class="line">·    13.4.13 针对此，每一个CompensableInvocation资源的confirm开启的事务，又开始重复上述过程，对于jdbc等资源都加入新创建的jta事务中，而RPC资源和CompensableInvocation资源仍然加入到当前线程绑定的CompensableTransaction类型事务</span><br><span class="line">·    13.4.14 当前CompensableInvocation资源的confirm开启的事务执行完毕后，开始执行commit,此时仍然是执行jta事务的提交，提交完毕，一个CompensableInvocation资源的confirm完成，继续执行下一个CompensableInvocation资源的confirm，即又要重新开启一个新的jta事务RPC资源的提交（参与方CompensableTransaction事务的提交）</span><br><span class="line">·    13.4.15 当所有CompensableInvocation资源的confirm执行完毕，开始执行RPC资源的commit，会进行远程调用，执行远程provider分支事务的提交，远程调用过程会传递事务id</span><br><span class="line">·    13.4.16 provider端，根据传递过来的事务id找到对应的CompensableTransaction事务，开始执行提交操作，提交操作完成后返回响应结束</span><br><span class="line">·    13.4.17 协调者收到响应后继续执行下一个RPC资源的提交，当所有RPC资源也完成相应的提交，则协调者算是彻底完成该事务</span><br><span class="line">3.14 一致性算法</span><br><span class="line">· 14.1 raft（详见Raft算法赏析）</span><br><span class="line">o    14.1.1 leader选举过程，leader选举约束，要包含所有commited entries，实现上log比过半的log都最新即可</span><br><span class="line">o    14.1.2 log复制过程，leader给所有的follower发送AppendEntries RPC请求，过半follower回复ok，则可提交该entry，然后向客户端响应OK</span><br><span class="line">o    14.1.3 在上述leader收到过半复制之后，挂了，则后续leader不能直接对这些之前term的过半entry进行提交（这一部分有详细的案例来证明，并能说出根本原因），目前做法是在当前term中创建空的entry，然后如果这些新创建的entry被大部分复制了，则此时就可以对之前term的过半entry进行提交了</span><br><span class="line">o    14.1.4 leader一旦认为某个term可以提交了，则更新自己的commitIndex，同时应用entry到状态机中，然后在下一次与follower的heartbeat通信中，将leader的commitIndex带给follower，让他们进行更新，同时应用entry到他们的状态机中</span><br><span class="line">o    14.1.5 从上述流程可以看到，作为client来说，可能会出现这样的情况：leader认为某次client的请求可以提交了（对应的entry已经被过半复制了），此时leader挂了，还没来得及给client回复，也就是说对client来说，请求虽然失败了，但是请求对应的entry却被持久化保存了，但是有的时候却是请求失败了（过半都没复制成功）没有持久化成功，也就是说请求失败了，服务器端可能成功了也可能失败了。所以这时候需要在client端下功夫，即cleint端重试的时候仍然使用之前的请求数据进行重试，而不是采用新的数据进行重试，服务器端也必须要实现幂等。</span><br><span class="line">o    14.1.6 Cluster membership changes</span><br><span class="line">· 14.2 ZooKeeper使用的ZAB协议（详见ZooKeeper的一致性算法赏析）</span><br><span class="line">o    14.2.1 leader选举过程。要点：对于不同状态下的server的投票的收集，投票是需要选举出一个包含所有日志的server来作为leader</span><br><span class="line">o    14.2.2 leader和follower数据同步过程，全量同步、差异同步、日志之间的纠正和截断，来保证和leader之间的一致性。以及follower加入已经完成选举的系统，此时的同步的要点：阻塞leader处理写请求，完成日志之间的差异同步，还要处理现有进行中的请求的同步，完成同步后，解除阻塞。</span><br><span class="line">o    14.2.3 广播阶段，即正常处理客户端的请求，过半响应即可回复客户端。</span><br><span class="line">o    14.2.4 日志的恢复和持久化。持久化：每隔一定数量的事务日志持久化一次，leader选举前持久化一次。恢复：简单的认为已写入日志的的事务请求都算作已提交的请求（不管之前是否已过半复制），全部执行commit提交。具体的恢复是：先恢复快照日志，然后再应用相应的事务日志</span><br><span class="line">· 14.3 paxos（详见paxos算法证明过程）</span><br><span class="line">o  14.3.1 paxos的运作过程：</span><br><span class="line">Phase 1: (a) 一个proposer选择一个编号为n的议案，向所有的acceptor发送prepare请求</span><br><span class="line">Phase 1: (b) 如果acceptor已经响应的prepare请求中议案编号都比n小，则它承诺不再响应prepare请求或者accept请求中议案编号小于n的， 并且找出已经accept的最大议案的value返回给该proposer。如果已响应的编号比n大，则直接忽略该prepare请求。</span><br><span class="line">Phase 2：(a) 如果proposer收到了过半的acceptors响应，那么将提出一个议案（n，v）,v就是上述所有acceptor响应中最大accept议案的value，或者是proposer自己的value。然后将该议案发送给所有的acceptor。这个请求叫做accept请求，这一步才是所谓发送议案请求，而前面的prepare请求更多的是一个构建出最终议案(n,v)的过程。</span><br><span class="line">Phase 2：(b) acceptor接收到编号为n的议案，如果acceptor还没有对大于n的议案的prepare请求响应过，则acceptor就accept该议案，否则拒绝</span><br><span class="line">o  14.3.2 paxos的证明过程：</span><br><span class="line">1 足够多的问题</span><br><span class="line">2 acceptor的初始accept</span><br><span class="line">3 P2-对结果要求</span><br><span class="line">4 P2a-对acceptor的accept要求</span><br><span class="line">5 P2b-对proposer提出议案的要求（结果上要求）</span><br><span class="line">6 P2c-对proposer提出议案的要求（做法上要求）</span><br><span class="line">7 引出prepare过程和P1a</span><br><span class="line">8 8 优化prepare</span><br><span class="line">o  14.3.3 base paxos和multi-paxos</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">4 大数据方向</span><br><span class="line">4.1 Hadoop</span><br><span class="line">·    1.1 UserGroupInformation源码解读：JAAS认证、user和group关系的维护</span><br><span class="line">·    1.2 RPC通信的实现</span><br><span class="line">·    1.3 代理用户的过程</span><br><span class="line">·    1.4 kerberos认证</span><br><span class="line">4.2 MapReduce</span><br><span class="line">·    2.1 MapReduce理论及其对应的接口定义</span><br><span class="line">4.3 HDFS</span><br><span class="line">·    3.1 MapFile、SequenceFile</span><br><span class="line">·    3.2 ACL</span><br><span class="line">4.4 YARN、Mesos 资源调度</span><br><span class="line">4.5 oozie</span><br><span class="line">·    5.1 oozie XCommand设计</span><br><span class="line">·    5.2 DagEngine的实现原理</span><br><span class="line">4.6 Hive</span><br><span class="line">·    6.1 HiveServer2、metatore的thrift RPC通信设计</span><br><span class="line">·    6.2 Hive的优化过程</span><br><span class="line">·    6.3 HiveServer2的认证和授权</span><br><span class="line">·    6.4 metastore的认证和授权</span><br><span class="line">·    6.5 HiveServer2向metatore的用户传递过程</span><br><span class="line">4.7 Hbase</span><br><span class="line">·    7.1 Hbase的整体架构图</span><br><span class="line">·    7.2 Hbase的WAL和MVCC设计</span><br><span class="line">·    7.3 client端的异步批量flush寻找RegionServer的过程</span><br><span class="line">·    7.4 Zookeeper上HBase节点解释</span><br><span class="line">·    7.5 Hbase中的mini、major合并</span><br><span class="line">·    7.6 Region的高可用问题对比kafka分区的高可用实现</span><br><span class="line">·    7.7 RegionServer RPC调用的隔离问题</span><br><span class="line">·    7.8 数据从内存刷写到HDFS的粒度问题</span><br><span class="line">·    7.9 rowKey的设计</span><br><span class="line">·    7.10 MemStore与LSM</span><br><span class="line">4.8 Spark</span><br><span class="line">·    8.1 不同的部署方式</span><br><span class="line">·    8.2 SparkSql的实现方式</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java线程介绍</title>
    <url>/2018/01/01/java%E7%BA%BF%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="1、new-Thread"><a href="#1、new-Thread" class="headerlink" title="1、new Thread"></a>1、new Thread</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line"> @Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>new Thread的弊端如下：<br>a. 每次new Thread新建对象性能差。<br>b. 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom(内存溢出)。<br>c. 缺乏更多功能，如定时执行、定期执行、线程中断。<br>相比new Thread，Java提供的四种线程池的好处在于：<br>a. 重用存在的线程，减少对象创建、消亡的开销，性能佳。<br>b. 可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。<br>c. 提供定时执行、定期执行、单线程、并发数控制等功能。</p>
</blockquote>
<h3 id="2、Java-线程池"><a href="#2、Java-线程池" class="headerlink" title="2、Java 线程池"></a>2、Java 线程池</h3><blockquote>
<p>Java通过Executors提供四种线程池，分别为：</p>
</blockquote>
<blockquote>
<p>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
</blockquote>
<blockquote>
<p>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>
</blockquote>
<blockquote>
<p>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</p>
</blockquote>
<blockquote>
<p>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>
</blockquote>
<p>(1). newCachedThreadPool</p>
<blockquote>
<p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。示例代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">final int index = i;</span><br><span class="line">try &#123;</span><br><span class="line">Thread.sleep(index * 1000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">cachedThreadPool.execute(new Runnable() &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p>
</blockquote>
<p> (2). newFixedThreadPool</p>
<blockquote>
<p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。示例代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">final int index = i;</span><br><span class="line">fixedThreadPool.execute(new Runnable() &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">Thread.sleep(2000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。<br>定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。可参考PreloadDataCache。</p>
</blockquote>
<p>(3) newScheduledThreadPool</p>
<blockquote>
<p>创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);</span><br><span class="line">scheduledThreadPool.schedule(new Runnable() &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;delay 3 seconds&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 3, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<p>表示延迟3秒执行。<br>定期执行示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(&quot;delay 1 seconds, and excute every 3 seconds&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 1, 3, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>表示延迟1秒后每3秒执行一次。<br>ScheduledExecutorService比Timer更安全，功能更强大，后面会有一篇单独进行对比。</p>
</blockquote>
<p>(4)、newSingleThreadExecutor</p>
<blockquote>
<p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。示例代码如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">final int index = i;</span><br><span class="line">singleThreadExecutor.execute(new Runnable() &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">Thread.sleep(2000);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果依次输出，相当于顺序执行各个任务。<br>现行大多数GUI程序都是单线程的。Android中单线程可用于数据库操作，文件操作，应用批量安装，应用批量删除等不适合并发但可能IO阻塞性及影响UI线程响应的操作。</p>
</blockquote>
<h3 id="线程池的作用："><a href="#线程池的作用：" class="headerlink" title="线程池的作用："></a>线程池的作用：</h3><blockquote>
<p>线程池作用就是限制系统中执行线程的数量。根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；少了浪费了系统资源，多了造成系统拥挤效率不高。用线程池控制线程数量，其他线程排队等候。一个任务执行完毕，再从队列的中取最前面的任务开始执行。若队列中没有等待进程，线程池的这一资源处于等待。当一个新任务需要运行时，如果线程池 中有等待的工作线程，就可以开始运行了；否则进入等待队列。</p>
</blockquote>
<h3 id="为什么要用线程池"><a href="#为什么要用线程池" class="headerlink" title="为什么要用线程池:"></a>为什么要用线程池:</h3><ol>
<li>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。<br>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。</li>
</ol>
<h3 id="比较重要的几个类："><a href="#比较重要的几个类：" class="headerlink" title="比较重要的几个类："></a>比较重要的几个类：</h3><blockquote>
<p>ExecutorService：真正的线程池接口。<br><br>ScheduledExecutorService：能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。<br><br>ThreadPoolExecutor：ExecutorService的默认实现。<br><br>ScheduledThreadPoolExecutor：继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</p>
</blockquote>
<p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。</p>
<ol>
<li>newSingleThreadExecutor<br>创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</li>
<li>newFixedThreadPool<br>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</li>
<li>newCachedThreadPool<br>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，<br>那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</li>
<li>newScheduledThreadPool<br>创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</li>
</ol>
<h3 id="3、SpringMVC整合TaskExecutor线程池的配置-使用"><a href="#3、SpringMVC整合TaskExecutor线程池的配置-使用" class="headerlink" title="3、SpringMVC整合TaskExecutor线程池的配置/使用"></a>3、SpringMVC整合TaskExecutor线程池的配置/使用</h3><p>①配置jdbc.properties添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#------------ Task ------------</span><br><span class="line">task.core_pool_size=5</span><br><span class="line">task.max_pool_size=50</span><br><span class="line">task.queue_capacity=1000</span><br><span class="line">task.keep_alive_seconds=60</span><br></pre></td></tr></table></figure>
<p>②配置Spring的applicationContext.xml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;taskExecutor&quot; class=&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;&gt;</span><br><span class="line">	&lt;!-- 核心线程数 --&gt;	 </span><br><span class="line">	&lt;property name=&quot;corePoolSize&quot; value=&quot;$&#123;task.core_pool_size&#125;&quot; /&gt;</span><br><span class="line">	&lt;!-- 最大线程数 --&gt;  </span><br><span class="line">	&lt;property name=&quot;maxPoolSize&quot; value=&quot;$&#123;task.max_pool_size&#125;&quot; /&gt;</span><br><span class="line">	&lt;!-- 队列最大长度 --&gt;</span><br><span class="line">	&lt;property name=&quot;queueCapacity&quot; value=&quot;$&#123;task.queue_capacity&#125;&quot; /&gt;</span><br><span class="line">	&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --&gt;</span><br><span class="line">	&lt;property name=&quot;keepAliveSeconds&quot; value=&quot;$&#123;task.keep_alive_seconds&#125;&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 注解式 --&gt;</span><br><span class="line">&lt;task:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>
<p>③在实现层Impl声明并注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Resource(name = &quot;taskExecutor&quot;)</span><br><span class="line">    private TaskExecutor taskExecutor;</span><br><span class="line">④在方法里调用：</span><br><span class="line">try &#123;</span><br><span class="line">	taskExecutor.execute(new Runnable() &#123;</span><br><span class="line">		public void run() &#123;</span><br><span class="line">			//这里编写处理业务代码</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>jsonp说明</title>
    <url>/2019/06/02/jsonp%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>JSON是JavaScript Object Notation的缩写，是一种轻量的、可读的基于文本的数据交换开放标准。源于JavsScript编程语言中对简单数据结构和关联数组的展示功能。它是仅含有数据对和简单括号结构的纯文本，因此可通过许多途径进行JSON消息的传递。</p>
<ol>
<li>JSONP定义<br>JSONP是英文JSON with Padding的缩写，是一个非官方的协议。它允许在服务器端生成script tags返回至客户端，通过javascript callback的形式来实现站点访问。 JSONP是一种script tag的注入，将server返回的response添加到页面实现特定功能。</li>
</ol>
<p>2.JSONP由来<br>要解释JSONP的来由，先要说一下浏览器的”同源策略(SOP:Same Origin Policy)”。 简而言之，就是浏览器限制脚本程序只能和同协议、同域名、同端口的脚本进行交互，这包括共享和传递变量等。cookie的传递也是遵从同样策略。这就造成一些涉及到多个服务器的应用在整合时一些麻烦。跨域访问的问题造成A站点的Ajax代码无法访问B站点的数据。<br>     如何解决跨域访问呢？那就要借助浏览器的一个特性：尽管浏览器不允许页面中的脚本程序跨域读取数据，但却允许HTML引用跨域的资源，如图片，CSS和脚本程序。对于脚本程序的引用比较特殊，它被浏览器解析以后，就和本地的脚本程序别无二致且可立即进行解释并执行。如在B站点的一个js文件，一个简单的提示框：alert（”This is Victor！”）;。在A站点引用这个js，这个脚本就会在B站点的应用中执行，显示一个alert信息。由于站外脚本的引用是通过script tag来实现的，而脚本程序又可通过DOM的方式可以对HTML页面的所有标签进行控制（包括动态的创建script标签），这就可以实现通过调用站外程序对本地资源进行更改了。另外，通过<script> 标记的使用，就可从服务端直接返回可执行的JavaScript函数调用或者JSON数据。</p>
<ol start="3">
<li>JSONP原理与实现<br> 首先在客户端注册一个callback, 然后把callback的名字传给服务器。此时，服务器先生成 JSON数据。然后以JavaScript 语法的方式，生成一个function, function名字就是传递上来的参数jsonp.<br> 然后，将JSON数据直接以入参的方式，放置到function中，这样就生成了一段 js 语法的文档，返回给客户端。<br> 最后，在客户端浏览器中解析script标签，并执行返回的JavaScript文档，此时数据作为参数，传入到了客户端预先定义好的回调函数里(动态执行回调函数) 。</li>
</ol>
<p>其实 JSONP是个很简单的一个东西。主要是利用了 <script/>标签对javascript文档的动态解析来实现。（其实也可以用eval函数） 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;</span><br><span class="line">    pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/commons/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">function testJson()&#123;</span><br><span class="line">    var ip = $(&#x27;#ip&#x27;).val();</span><br><span class="line">    if(ip.length!=0)&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:&quot;GET&quot;,</span><br><span class="line">            url:&quot;http://api.k780.com:88/?app=ip.get&amp;ip=&quot;+ip+&quot;&amp;appkey=14841&amp;sign=6971f83ee124d889d7a1379611c1ae5b&amp;format=json&quot;,</span><br><span class="line">            dataType:&quot;jsonp&quot;,</span><br><span class="line">            jsonp:&quot;jsoncallback&quot;,</span><br><span class="line">            success: function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                $.each(data,function(idx,item)&#123;</span><br><span class="line">                    if(idx==&quot;success&quot;)&#123;</span><br><span class="line">                        //alert(item);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(idx==&quot;result&quot;)&#123;</span><br><span class="line">                        $.each(item,function(idx1,item1)&#123;</span><br><span class="line">                            if(idx1==&quot;area_style_areanm&quot;)&#123;</span><br><span class="line">                            $(&quot;#info&quot;).html(&quot;归属地：&quot;+item1);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            error:</span><br><span class="line">                function(xhr,e1,e2)&#123;</span><br><span class="line">                alert(&quot;获取数据失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $(&quot;#btn&quot;).empty();//清空信息</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;获取IP归属地&lt;/h3&gt;&lt;br/&gt;</span><br><span class="line">&lt;form &gt;</span><br><span class="line">请输入ip:&lt;input type=&quot;text&quot; id =&quot;ip&quot; name = &quot;ip&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;获得数据&quot; onclick=&quot;javascript:testJson();&quot; &gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;div id=&quot;info&quot;&gt;&lt;/div&gt;&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Jsonp</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s yaml文件详解</title>
    <url>/2021/06/29/k8s%20yaml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="k8s-yaml文件详解"><a href="#k8s-yaml文件详解" class="headerlink" title="k8s yaml文件详解"></a>k8s yaml文件详解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1             <span class="comment">#指定api版本，此值必须在kubectl apiversion中  </span></span><br><span class="line">kind: Pod                  <span class="comment">#指定创建资源的角色/类型  </span></span><br><span class="line">metadata:                  <span class="comment">#资源的元数据/属性  </span></span><br><span class="line">  name: web04-pod          <span class="comment">#资源的名字，在同一个namespace中必须唯一  </span></span><br><span class="line">  labels:                  <span class="comment">#设定资源的标签，详情请见http://blog.csdn.net/liyingke112/article/details/77482384</span></span><br><span class="line">    k8s-app: apache  </span><br><span class="line">    version: v1  </span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">&quot;true&quot;</span>  </span><br><span class="line">  annotations:             <span class="comment">#自定义注解列表  </span></span><br><span class="line">    - name: String         <span class="comment">#自定义注解名字  </span></span><br><span class="line">spec:<span class="comment">#specification of the resource content 指定该资源的内容  </span></span><br><span class="line">  restartPolicy: Always    <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器  </span></span><br><span class="line">  nodeSelector:            <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1  </span></span><br><span class="line">    zone: node1  </span><br><span class="line">  containers:  </span><br><span class="line">  - name: web04-pod        <span class="comment">#容器的名字  </span></span><br><span class="line">    image: web:apache      <span class="comment">#容器使用的镜像地址  </span></span><br><span class="line">    imagePullPolicy: Never <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都检查</span></span><br><span class="line">                           <span class="comment"># Never，每次都不检查（不管本地是否有）</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;sh&#x27;</span>]        <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT  </span></span><br><span class="line">    args: [<span class="string">&quot;<span class="subst">$(str)</span>&quot;</span>]       <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数  </span></span><br><span class="line">    <span class="built_in">env</span>:                   <span class="comment">#指定容器中的环境变量  </span></span><br><span class="line">    - name: str            <span class="comment">#变量的名字  </span></span><br><span class="line">      value: <span class="string">&quot;/etc/run.sh&quot;</span> <span class="comment">#变量的值  </span></span><br><span class="line">    resources:             <span class="comment">#资源管理，请求请见http://blog.csdn.net/liyingke112/article/details/77452630</span></span><br><span class="line">      requests:            <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行  </span></span><br><span class="line">        cpu: 0.1           <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">        memory: 32Mi       <span class="comment">#内存使用量  </span></span><br><span class="line">      limits:              <span class="comment">#资源限制  </span></span><br><span class="line">        cpu: 0.5  </span><br><span class="line">        memory: 32Mi  </span><br><span class="line">    ports:  </span><br><span class="line">    - containerPort: 80    <span class="comment">#容器开发对外的端口</span></span><br><span class="line">      name: httpd          <span class="comment">#名称</span></span><br><span class="line">      protocol: TCP  </span><br><span class="line">    livenessProbe:         <span class="comment">#pod内容器健康检查的设置，详情请见http://blog.csdn.net/liyingke112/article/details/77531584</span></span><br><span class="line">      httpGet:             <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常  </span></span><br><span class="line">        path: /            <span class="comment">#URI地址  </span></span><br><span class="line">        port: 80  </span><br><span class="line">        <span class="comment">#host: 127.0.0.1   #主机地址  </span></span><br><span class="line">        scheme: HTTP  </span><br><span class="line">      initialDelaySeconds: 180 <span class="comment">#表明第一次检测在容器启动后多长时间后开始  </span></span><br><span class="line">      timeoutSeconds: 5    <span class="comment">#检测的超时时间  </span></span><br><span class="line">      periodSeconds: 15    <span class="comment">#检查间隔时间  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常  </span></span><br><span class="line">      <span class="comment">#  command:  </span></span><br><span class="line">      <span class="comment">#    - cat  </span></span><br><span class="line">      <span class="comment">#    - /tmp/health  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康   </span></span><br><span class="line">      <span class="comment">#  port: number   </span></span><br><span class="line">    lifecycle:             <span class="comment">#生命周期管理  </span></span><br><span class="line">      postStart:           <span class="comment">#容器运行之前运行的任务  </span></span><br><span class="line">        <span class="built_in">exec</span>:  </span><br><span class="line">          <span class="built_in">command</span>:  </span><br><span class="line">            - <span class="string">&#x27;sh&#x27;</span>  </span><br><span class="line">            - <span class="string">&#x27;yum upgrade -y&#x27;</span>  </span><br><span class="line">      preStop:             <span class="comment">#容器关闭之前运行的任务  </span></span><br><span class="line">        <span class="built_in">exec</span>:  </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;service httpd stop&#x27;</span>]  </span><br><span class="line">    volumeMounts:          <span class="comment">#详情请见http://blog.csdn.net/liyingke112/article/details/76577520</span></span><br><span class="line">    - name: volume         <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应    </span></span><br><span class="line">      mountPath: /data     <span class="comment">#挂载到容器的某个路径下  </span></span><br><span class="line">      readOnly: True  </span><br><span class="line">  volumes:                 <span class="comment">#定义一组挂载设备  </span></span><br><span class="line">  - name: volume           <span class="comment">#定义一个挂载设备的名字  </span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;  </span></span><br><span class="line">    hostPath:  </span><br><span class="line">      path: /opt           <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>Yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s 部署（二进制）</title>
    <url>/2021/06/29/k8s%20%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Ubuntu18-之-k8s-部署（二进制）"><a href="#Ubuntu18-之-k8s-部署（二进制）" class="headerlink" title="Ubuntu18 之 k8s 部署（二进制）"></a>Ubuntu18 之 k8s 部署（二进制）</h3><h4 id="1-环境规划"><a href="#1-环境规划" class="headerlink" title="1. 环境规划"></a>1. 环境规划</h4><table>
<thead>
<tr>
<th>环境</th>
<th>主机名</th>
<th>Host</th>
<th>k8s组件</th>
</tr>
</thead>
<tbody><tr>
<td>ubuntu-18.04</td>
<td>murray01 (master1)</td>
<td>192.168.31.202</td>
<td>etcd、flanneld、kube-apiserver、kube-controller-manager、kube-scheduler、docker 、etcd</td>
</tr>
<tr>
<td>ubuntu-18.04</td>
<td>murray02 (node1)</td>
<td>192.168.31.203</td>
<td>etcd、flanneld、kubelet、kube-proxy、docker、etcd</td>
</tr>
<tr>
<td>ubuntu-18.04</td>
<td>murray03 (node2)</td>
<td>192.168.31.204</td>
<td>etcd、flanneld、kubelet、kube-proxy、docker、etcd</td>
</tr>
</tbody></table>
<blockquote>
<p>设置时区和时间信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统一时区和时间信息</span></span><br><span class="line">timedatectl set-local-rtc 1 </span><br><span class="line">timedatectl set-timezone Asia/Shanghai </span><br><span class="line">timedatectl status </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主机名</span></span><br><span class="line">hostnamectl --static set-hostname murray01</span><br><span class="line">hostnamectl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">sudo setenforce 0 <span class="comment"># 临时设置， 0代表permissive 1代表enforcing</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 永久禁用</span></span><br><span class="line"><span class="built_in">cat</span> /etc/selinux/config &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">SELINUX=permissive  </span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-Docker-安装"><a href="#2-Docker-安装" class="headerlink" title="2. Docker 安装"></a>2. Docker 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">sudo apt install -y docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置国内镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://qgikhnmb.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt; /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-自签证书"><a href="#3-自签证书" class="headerlink" title="3. 自签证书"></a>3. 自签证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line"><span class="built_in">chmod</span> +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line"><span class="built_in">mv</span> cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br><span class="line"><span class="built_in">mv</span> cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/kubernetes/&#123;bin,cfg,ssl&#125;</span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------创建CA密钥对------------</span></span><br><span class="line"><span class="built_in">cat</span> &gt; ca-config.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;signing&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;default&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;profiles&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;kubernetes&quot;: &#123;</span></span><br><span class="line"><span class="string">         &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class="line"><span class="string">         &quot;usages&quot;: [</span></span><br><span class="line"><span class="string">            &quot;signing&quot;,</span></span><br><span class="line"><span class="string">            &quot;key encipherment&quot;,</span></span><br><span class="line"><span class="string">            &quot;server auth&quot;,</span></span><br><span class="line"><span class="string">            &quot;client auth&quot;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ca-config.json：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</span></span><br><span class="line"><span class="comment"># signing：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；</span></span><br><span class="line"><span class="comment"># server auth：表示client可以用该 CA 对server提供的证书进行验证；</span></span><br><span class="line"><span class="comment"># client auth：表示server可以用该CA对client提供的证书进行验证；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; ca-csr.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class="line"><span class="string">    &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">        &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;names&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class="line"><span class="string">            &quot;L&quot;: &quot;Beijing&quot;,</span></span><br><span class="line"><span class="string">            &quot;ST&quot;: &quot;Beijing&quot;,</span></span><br><span class="line"><span class="string">             &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class="line"><span class="string">            &quot;OU&quot;: &quot;System&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;CN&quot;：Common Name， 组件从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------创建集群通信密钥对------------</span></span><br><span class="line"><span class="built_in">cat</span> &gt; server-csr.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class="line"><span class="string">    &quot;hosts&quot;: [</span></span><br><span class="line"><span class="string">      &quot;127.0.0.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;192.168.31.202&quot;,</span></span><br><span class="line"><span class="string">      &quot;192.168.31.203&quot;,</span></span><br><span class="line"><span class="string">      &quot;192.168.31.204&quot;,</span></span><br><span class="line"><span class="string">      &quot;10.10.10.1&quot;,</span></span><br><span class="line"><span class="string">      &quot;kubernetes&quot;,</span></span><br><span class="line"><span class="string">      &quot;kubernetes.default&quot;,</span></span><br><span class="line"><span class="string">      &quot;kubernetes.default.svc&quot;,</span></span><br><span class="line"><span class="string">      &quot;kubernetes.default.svc.cluster&quot;,</span></span><br><span class="line"><span class="string">      &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">        &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;names&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class="line"><span class="string">            &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class="line"><span class="string">            &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class="line"><span class="string">            &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class="line"><span class="string">            &quot;OU&quot;: &quot;System&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------创建admin密钥对------------</span></span><br><span class="line"><span class="built_in">cat</span> &gt; admin-csr.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;CN&quot;: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">  &quot;hosts&quot;: [],</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">    &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;names&quot;: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class="line"><span class="string">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class="line"><span class="string">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class="line"><span class="string">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class="line"><span class="string">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------创建kube-proxy密钥对------------</span></span><br><span class="line"><span class="built_in">cat</span> &gt; kube-proxy-csr.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span></span><br><span class="line"><span class="string">  &quot;hosts&quot;: [],</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class="line"><span class="string">    &quot;size&quot;: 2048</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;names&quot;: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class="line"><span class="string">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class="line"><span class="string">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class="line"><span class="string">      &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class="line"><span class="string">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝上面证书到其他设备</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>对应组件所需要的密钥对</p>
</blockquote>
<table>
<thead>
<tr>
<th>组件</th>
<th>使用的证书</th>
</tr>
</thead>
<tbody><tr>
<td>etcd</td>
<td>ca.pem, server.pem, server-key.pem</td>
</tr>
<tr>
<td>flannel</td>
<td>ca.pem, server.pem, server-key.pem</td>
</tr>
<tr>
<td>kube-apiserver</td>
<td>ca.pem, ca-key.pem</td>
</tr>
<tr>
<td>kubelet</td>
<td>ca.pem, server.pem, server-key.pem</td>
</tr>
<tr>
<td>kube-proxy</td>
<td>ca.pem, kube-proxy.pem, kube-proxy-key.pem</td>
</tr>
<tr>
<td>kubectl</td>
<td>ca.pem, admin.pem, admin-key.pem</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca.pem：自签的CA证书。</span><br><span class="line">ca-key.pem：自签的CA私钥。</span><br><span class="line">server.pem：k8s集群通信使用的公钥。</span><br><span class="line">server-key.pem：k8s集群通信使用的私钥。</span><br><span class="line">kube-proxy.pem：kube-proxy组件应用的公钥，并用于生成kube-proxy kubeconfig文件用于进行授权认证。</span><br><span class="line">kube-proxy-key.pem：kube-proxy组件应用的私钥。</span><br><span class="line">admin.pem，admin-key.pem：k8s的node端想要远程使用kubectl所使用的密钥对。</span><br></pre></td></tr></table></figure>

<h4 id="4-部署ETCD集群"><a href="#4-部署ETCD集群" class="headerlink" title="4. 部署ETCD集群"></a>4. 部署ETCD集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载etcd二进制文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/kubernetes &amp;&amp; <span class="built_in">cd</span> /opt/kubernetes</span><br><span class="line">wget https://github.com/etcd-io/etcd/releases/download/v3.3.12/etcd-v3.3.12-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxf etcd-v3.3.12-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> /opt/kubernetes/etcd-v3.3.12-linux-amd64/&#123;etcd,etcdctl&#125; /opt/kubernetes/bin/</span><br><span class="line"><span class="built_in">rm</span> -rf etcd-v3.3.12-linux-amd64*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改etcd配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /opt/kubernetes/cfg/etcd &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">#[Member]</span></span><br><span class="line"><span class="string">ETCD_NAME=&quot;etcd01&quot;</span></span><br><span class="line"><span class="string">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot; #数据目录</span></span><br><span class="line"><span class="string">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.31.202:2380&quot; #集群沟通端口2380</span></span><br><span class="line"><span class="string">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.31.202:2379,https://192.168.31.202:4001&quot; #客户端沟通端口2379</span></span><br><span class="line"><span class="string">#ETCD_WAL_DIR=&quot;&quot;</span></span><br><span class="line"><span class="string">#ETCD_SNAPSHOT_COUNT=&quot;10000&quot;</span></span><br><span class="line"><span class="string">#ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;</span></span><br><span class="line"><span class="string">#ETCD_ELECTION_TIMEOUT=&quot;1000&quot;</span></span><br><span class="line"><span class="string">#ETCD_MAX_SNAPSHOTS=&quot;5&quot;</span></span><br><span class="line"><span class="string">#ETCD_MAX_WALS=&quot;5&quot;</span></span><br><span class="line"><span class="string">#ETCD_CORS=&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#[Clustering]</span></span><br><span class="line"><span class="string">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.31.202:2380&quot; #集群通告地址</span></span><br><span class="line"><span class="string">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.31.202:2379,https://192.168.31.202:4001&quot; #客户端通告地址</span></span><br><span class="line"><span class="string">ETCD_INITIAL_CLUSTER=&quot;etcd01=https://192.168.31.202:2380,etcd02=https://192.168.31.203:2380,etcd03=https://192.168.31.204:2380&quot;</span></span><br><span class="line"><span class="string">ETCD_INITIAL_CLUSTER_TOKEN=&quot;k8s-etcd-cluster&quot;</span></span><br><span class="line"><span class="string">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot; #新创建集群，existing表示加入已有集群</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改启动文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /lib/systemd/system//etcd.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/etcd</span><br><span class="line"></span><br><span class="line">ExecStart=/opt/kubernetes/bin/etcd \</span><br><span class="line">--name=<span class="variable">$&#123;ETCD_NAME&#125;</span> \</span><br><span class="line">--data-dir=<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span> \</span><br><span class="line">--listen-peer-urls=<span class="variable">$&#123;ETCD_LISTEN_PEER_URLS&#125;</span> \</span><br><span class="line">--listen-client-urls=<span class="variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>,http://127.0.0.1:2379 \</span><br><span class="line">--advertise-client-urls=<span class="variable">$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125;</span> \</span><br><span class="line">--initial-advertise-peer-urls=<span class="variable">$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125;</span> \</span><br><span class="line">--initial-cluster=<span class="variable">$&#123;ETCD_INITIAL_CLUSTER&#125;</span> \</span><br><span class="line">--initial-cluster-token=<span class="variable">$&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125;</span> \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--cert-file=/opt/kubernetes/ssl/server.pem \</span><br><span class="line">--key-file=/opt/kubernetes/ssl/server-key.pem \</span><br><span class="line">--peer-cert-file=/opt/kubernetes/ssl/server.pem \</span><br><span class="line">--peer-key-file=/opt/kubernetes/ssl/server-key.pem \</span><br><span class="line">--trusted-ca-file=/opt/kubernetes/ssl/ca.pem \</span><br><span class="line">--peer-trusted-ca-file=/opt/kubernetes/ssl/ca.pem</span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动和开机启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证运行状况</span></span><br><span class="line">netstat -lntup|grep etcd</span><br><span class="line"><span class="comment">#tcp        0      0 192.168.31.202:2379     0.0.0.0:*               LISTEN      835/etcd            </span></span><br><span class="line"><span class="comment">#tcp        0      0 127.0.0.1:2379          0.0.0.0:*               LISTEN      835/etcd            </span></span><br><span class="line"><span class="comment">#tcp        0      0 192.168.31.202:2380     0.0.0.0:*               LISTEN      835/etcd            </span></span><br><span class="line"><span class="comment">#tcp        0      0 192.168.31.202:4001     0.0.0.0:*               LISTEN      835/etcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看etcd集群状态：</span></span><br><span class="line">/opt/kubernetes/bin/etcdctl \</span><br><span class="line"> --ca-file=/opt/kubernetes/ssl/ca.pem --cert-file=/opt/kubernetes/ssl/server.pem --key-file=/opt/kubernetes/ssl/server-key.pem \</span><br><span class="line"> --endpoints=<span class="string">&quot;https://192.168.31.202:2379,https://192.168.31.203:2379,https://192.168.31.204:2379&quot;</span> \</span><br><span class="line"> cluster-health</span><br><span class="line"><span class="comment">#member 37b58561d4c5b508 is healthy: got healthy result from https://192.168.31.202:2379</span></span><br><span class="line"><span class="comment">#member 3df4f43216142d65 is healthy: got healthy result from https://192.168.31.204:2379</span></span><br><span class="line"><span class="comment">#member beb6e6a8efba2870 is healthy: got healthy result from https://192.168.31.203:2379</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>备注</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ETCD_NAME                           # 节点名称</span><br><span class="line">ETCD_DATA_DIR                       # 数据目录</span><br><span class="line">ETCD_LISTEN_PEER_URLS               # 集群通信监听地址</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS             # 客户端访问监听地址</span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS    # 集群通告地址</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS          # 客户端通告地址</span><br><span class="line">ETCD_INITIAL_CLUSTER                # 集群节点地址</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN          # 集群 Token</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE          # 加入集群的当前状态，new 是新集群，existing 表示加入已有</span><br></pre></td></tr></table></figure>


<h4 id="5-部署flanneld网络"><a href="#5-部署flanneld网络" class="headerlink" title="5. 部署flanneld网络"></a>5. 部署flanneld网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Flannel二进制包</span></span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/</span><br><span class="line">wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxf flannel-v0.11.0-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> /opt/kubernetes/flannel-v0.11.0-linux-amd64/&#123;flanneld,mk-docker-opts.sh&#125; /opt/kubernetes/bin/</span><br><span class="line"><span class="built_in">rm</span> -rf flannel-v0.11.0-linux-amd64*</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入分配的子网段到etcd，供flanneld使用</span></span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/ssl/ &amp;&amp; /opt/kubernetes/bin/etcdctl \</span><br><span class="line">--ca-file=/opt/kubernetes/ssl/ca.pem --cert-file=/opt/kubernetes/ssl/server.pem  --key-file=/opt/kubernetes/ssl/server-key.pem \</span><br><span class="line">--endpoints=<span class="string">&quot;https://192.168.31.202:2379,https://192.168.31.203:2379,https://192.168.31.204:2379&quot;</span> \</span><br><span class="line"><span class="built_in">set</span> /flannel/network/config <span class="string">&#x27;&#123; &quot;Network&quot;:  &quot;172.17.0.0/16&quot;, &quot;Backend&quot;: &#123;&quot;Type&quot;:  &quot;vxlan&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Flannel cfg</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/opt/kubernetes/cfg/flanneld &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">FLANNEL_OPTIONS=&quot;--etcd-endpoints=https://192.168.31.202:2379,https://192.168.31.203:2379,https://192.168.31.204:2379 --etcd-prefix=/flannel/network --etcd-cafile=/opt/kubernetes/ssl/ca.pem --etcd-certfile=/opt/kubernetes/ssl/server.pem --etcd-keyfile=/opt/kubernetes/ssl/server-key.pem&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd管理Flannel</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/flanneld.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network-online.target network.target</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/flanneld</span><br><span class="line"></span><br><span class="line">ExecStart=/opt/kubernetes/bin/flanneld --ip-masq <span class="variable">$FLANNEL_OPTIONS</span>              </span><br><span class="line">ExecStartPost=/opt/kubernetes/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/subnet.env</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Docker启动指定子网段</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/docker.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"><span class="comment">#BindsTo=containerd.service</span></span><br><span class="line"><span class="comment">#After=network-online.target firewalld.service containerd.service</span></span><br><span class="line"><span class="comment">#Requires=docker.socket</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/run/flannel/subnet.env</span><br><span class="line"></span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class="line">ExecStart=/usr/bin/dockerd  <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">Delegate=<span class="built_in">yes</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">TasksMax=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">TimeoutSec=0</span><br><span class="line"><span class="comment">#RestartSec=2</span></span><br><span class="line"><span class="comment">#Restart=always</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line">systemctl restart flanneld</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看etcd存储的信息</span></span><br><span class="line">/opt/kubernetes/bin/etcdctl --ca-file=/opt/kubernetes/ssl/ca.pem --cert-file=/opt/kubernetes/ssl/server.pem  --key-file=/opt/kubernetes/ssl/server-key.pem --endpoints=<span class="string">&quot;https://192.168.31.202:2379,https://192.168.31.203:2379,https://192.168.31.204:2379&quot;</span> <span class="built_in">ls</span> /flannel/network/subnets</span><br><span class="line"><span class="comment">#/flannel/network/subnets/172.17.66.0-24</span></span><br><span class="line"><span class="comment">#/flannel/network/subnets/172.17.29.0-24</span></span><br><span class="line"><span class="comment">#/flannel/network/subnets/172.17.28.0-24</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看etcd存储的信息(单节点)</span></span><br><span class="line">/opt/kubernetes/bin/etcdctl --ca-file=/opt/kubernetes/ssl/ca.pem --cert-file=/opt/kubernetes/ssl/server.pem  --key-file=/opt/kubernetes/ssl/server-key.pem --endpoints=<span class="string">&quot;https://192.168.31.202:2379,https://192.168.31.203:2379,https://192.168.31.204:2379&quot;</span> get /flannel/network/subnets/172.17.66.0-24</span><br><span class="line"><span class="comment">#&#123;&quot;PublicIP&quot;:&quot;192.168.31.202&quot;,&quot;BackendType&quot;:&quot;vxlan&quot;,&quot;BackendData&quot;:&#123;&quot;VtepMAC&quot;:&quot;76:12:cd:05:2c:f0&quot;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-创建Node节点所需的kubeconfig文件"><a href="#6-创建Node节点所需的kubeconfig文件" class="headerlink" title="6. 创建Node节点所需的kubeconfig文件"></a>6. 创建Node节点所需的kubeconfig文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载kubectl二进制文件</span></span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/bin &amp;&amp; wget https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl &amp;&amp; <span class="built_in">chmod</span> +x /opt/kubernetes/bin/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------创建 TLS Bootstrapping Token(master节点的apiserver使用)------</span></span><br><span class="line"><span class="built_in">export</span> BOOTSTRAP_TOKEN=$(<span class="built_in">head</span> -c 16 /dev/urandom | <span class="built_in">od</span> -An -t x | <span class="built_in">tr</span> -d <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">cat</span> &gt; /opt/kubernetes/cfg/token.csv &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------kubelet kubeconfig-----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kubelet bootstrapping kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">&quot;https://192.168.31.202:6443&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数，创建集群证书。kubernetes在这只是一个名称，真正的集群指向是由--server指定的。</span></span><br><span class="line"><span class="comment"># --certificate-authority：使用公钥进行证书认证。</span></span><br><span class="line"><span class="comment"># --embed-certs=true：表示使用公钥进行认证，并将公钥证书写入到bootstrap.kubeconfig中去。</span></span><br><span class="line"><span class="comment"># --server：表示集群kube-apiserver的地址。</span></span><br><span class="line"><span class="comment"># --kubeconfig：基于bootstrap.kubeconfig文件创建。</span></span><br><span class="line">/opt/kubernetes/bin/kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line"><span class="comment"># --token：客户端使用token认证来让集群master认可，也可以使用CA认证方式，master的apiserver配置文件中需要加入token文件的路径。</span></span><br><span class="line"><span class="comment"># --kubeconfig：基于bootstrap.kubeconfig文件创建。</span></span><br><span class="line">/opt/kubernetes/bin/kubectl config set-credentials kubelet-bootstrap \</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line"><span class="comment"># --cluster：指定集群</span></span><br><span class="line"><span class="comment"># --user：指定认证的用户，后端node节点使用这个用户进行通信，需要在主节点上对这个用户进行授权后，node节点才能加入到集群中来。</span></span><br><span class="line">/opt/kubernetes/bin/kubectl config set-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubelet-bootstrap \</span><br><span class="line">  --kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line"><span class="comment"># 默认使用kubelet-bootstrap用户进行认证，来使用名为default的环境项来作为配置。如果配置了多个环境项，可以通过切换不同的环境项名字来访问到不同的集群环境。</span></span><br><span class="line">/opt/kubernetes/bin/kubectl config use-context default --kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------kube-proxy kubeconfig-----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-proxy kubeconfig文件</span></span><br><span class="line"><span class="comment"># 用于客户端的kube-proxy进程通信master时进行的认证</span></span><br><span class="line">/opt/kubernetes/bin/kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">/opt/kubernetes/bin/kubectl config set-credentials kube-proxy \</span><br><span class="line">  --client-certificate=/opt/kubernetes/ssl/kube-proxy.pem \</span><br><span class="line">  --client-key=/opt/kubernetes/ssl/kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">/opt/kubernetes/bin/kubectl config set-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">/opt/kubernetes/bin/kubectl config use-context default --kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝生成的kubeconfig文件*.kubeconfig到各node节点的/opt/kubernetes/cfg/目录下</span></span><br><span class="line">scp /opt/kubernetes/cfg/*.kubeconfig cfg/token.csv root@192.168.31.203:/opt/kubernetes/cfg/</span><br><span class="line">scp /opt/kubernetes/cfg/*.kubeconfig cfg/token.csv root@192.168.31.204:/opt/kubernetes/cfg/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-获取kubernetes二进制包"><a href="#7-获取kubernetes二进制包" class="headerlink" title="7. 获取kubernetes二进制包"></a>7. 获取kubernetes二进制包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载kubectl二进制文件</span></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes &amp;&amp; wget https://storage.googleapis.com/kubernetes-release/release/v1.14.0/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">tar zxf kubernetes-server-linux-amd64.tar.gz &amp;&amp; <span class="built_in">mv</span> kubernetes/server/bin/&#123;kube-apiserver,kube-scheduler,kube-controller-manager,kubelet,kubeadm,kube-proxy&#125; /opt/kubernetes/bin/</span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/ &amp;&amp; <span class="built_in">rm</span> -rf kubernetes-server-linux-amd64.tar.gz &amp;&amp; <span class="built_in">ls</span> /opt/kubernetes/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># node</span></span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes &amp;&amp; wget https://storage.googleapis.com/kubernetes-release/release/v1.14.0/kubernetes-node-linux-amd64.tar.gz</span><br><span class="line">tar zxf kubernetes-node-linux-amd64.tar.gz &amp;&amp; <span class="built_in">mv</span> kubernetes/node/bin/&#123;kubeadm,kubelet,kube-proxy&#125; </span><br><span class="line">/opt/kubernetes/bin/</span><br><span class="line"><span class="built_in">cd</span> /opt/kubernetes/ &amp;&amp; <span class="built_in">rm</span> -rf kubernetes-node-linux-amd64.tar.gz &amp;&amp; <span class="built_in">ls</span> /opt/kubernetes/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="8-master节点部署"><a href="#8-master节点部署" class="headerlink" title="8. master节点部署"></a>8. master节点部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master bin</span></span><br><span class="line"><span class="built_in">ls</span> /opt/kubernetes/bin</span><br><span class="line"><span class="comment"># etcd  etcdctl  flanneld  kubeadm  kube-apiserver  kube-controller-manager  kubectl  kubelet  kube-proxy  kube-scheduler  mk-docker-opts.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kube-apiserver</span></span><br><span class="line"><span class="built_in">export</span> MASTER_ADDRESS=<span class="variable">$&#123;1:-&quot;192.168.31.202&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> ETCD_SERVERS=<span class="variable">$&#123;2:-&quot;https://192.168.31.202:2379,https://192.168.31.203:2379,https://192.168.31.204:2379&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定etcd数据访问地址，apiserver的IP地址以及其他安全方面的配置</span></span><br><span class="line"><span class="comment"># --service-cluster-ip-range：表示service服务的clusterIP的子网范围。</span></span><br><span class="line"><span class="comment"># --enable-bootstrap-token-auth：开启bootstrap相关认证，需要在后端node节点通过bootstrap认证后才能加入到集群。</span></span><br><span class="line"><span class="comment"># --token-auth-file：token认证文件路径。</span></span><br><span class="line"><span class="comment"># --service-node-port-range：service服务随机端口的范围。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;/opt/kubernetes/cfg/kube-apiserver &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBE_APISERVER_OPTS=&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--etcd-servers=$&#123;ETCD_SERVERS&#125; \</span></span><br><span class="line"><span class="string">--insecure-bind-address=127.0.0.1 \</span></span><br><span class="line"><span class="string">--bind-address=$&#123;MASTER_ADDRESS&#125; \</span></span><br><span class="line"><span class="string">--insecure-port=8080 \</span></span><br><span class="line"><span class="string">--secure-port=6443 \</span></span><br><span class="line"><span class="string">--advertise-address=$&#123;MASTER_ADDRESS&#125; \</span></span><br><span class="line"><span class="string">--allow-privileged=true \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.10.10.0/24 \</span></span><br><span class="line"><span class="string">--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction \</span></span><br><span class="line"><span class="string">--authorization-mode=RBAC,Node \</span></span><br><span class="line"><span class="string">--kubelet-https=true \</span></span><br><span class="line"><span class="string">--enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">--token-auth-file=/opt/kubernetes/cfg/token.csv \</span></span><br><span class="line"><span class="string">--service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \</span></span><br><span class="line"><span class="string">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \</span></span><br><span class="line"><span class="string">--client-ca-file=/opt/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \</span></span><br><span class="line"><span class="string">--etcd-cafile=/opt/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--etcd-certfile=/opt/kubernetes/ssl/server.pem \</span></span><br><span class="line"><span class="string">--etcd-keyfile=/opt/kubernetes/ssl/server-key.pem&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd管理kube-apiserver</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/kube-apiserver.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-apiserver <span class="variable">$KUBE_APISERVER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">systemctl restart kube-apiserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置controller-manager</span></span><br><span class="line"><span class="built_in">export</span> MASTER_ADDRESS=<span class="variable">$&#123;1:-&quot;127.0.0.1&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;/opt/kubernetes/cfg/kube-controller-manager &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--master=$&#123;MASTER_ADDRESS&#125;:8080 \</span></span><br><span class="line"><span class="string">--leader-elect=true \</span></span><br><span class="line"><span class="string">--address=127.0.0.1 \</span></span><br><span class="line"><span class="string">--service-cluster-ip-range=10.10.10.0/24 \</span></span><br><span class="line"><span class="string">--cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \</span></span><br><span class="line"><span class="string">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \</span></span><br><span class="line"><span class="string">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \</span></span><br><span class="line"><span class="string">--root-ca-file=/opt/kubernetes/ssl/ca.pem&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd 管理 kube-controller-manager</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/kube-controller-manager.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-controller-manager <span class="variable">$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">systemctl restart kube-controller-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kube-scheduler</span></span><br><span class="line"><span class="built_in">export</span> MASTER_ADDRESS=<span class="variable">$&#123;1:-&quot;127.0.0.1&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志相关配置，设置apiserver的IP地址</span></span><br><span class="line"><span class="comment"># --leader-elect：如果多个master节点上的相关服务同时生效，则会有同步与一致性问题，所以多master节点中的kube-scheduler服务只能是主备的关系，kukubernetes采用租赁锁（lease-lock）实现leader的选举，具体到kube-scheduler，设置启动参数&quot;--leader-elect=true&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;/opt/kubernetes/cfg/kube-scheduler &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBE_SCHEDULER_OPTS=&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--master=$&#123;MASTER_ADDRESS&#125;:8080 \</span></span><br><span class="line"><span class="string">--leader-elect&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd 管理 kube-schedule</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/kube-scheduler.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-scheduler</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-scheduler <span class="variable">$KUBE_SCHEDULER_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">systemctl restart kube-scheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/opt/kubernetes/bin/&#x27;</span> &gt;&gt;/etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为险起见打开一下防火墙让node节点能够访问到master</span></span><br><span class="line">iptables -I INPUT -s 192.168.31.0/24 -j ACCEPT</span><br><span class="line">iptables-save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动master节点服务</span></span><br><span class="line"><span class="comment"># 先启动kube-apiserver，kube-controller-manager、kube-scheduler随意</span></span><br><span class="line">systemctl start kube-apiserver.service</span><br><span class="line">systemctl start kube-controller-manager.service</span><br><span class="line">systemctl start kube-scheduler.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">/opt/kubernetes/kubectl get cs</span><br><span class="line"><span class="comment">#controller-manager   Healthy   ok                  </span></span><br><span class="line"><span class="comment">#scheduler            Healthy   ok                  </span></span><br><span class="line"><span class="comment">#etcd-1               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   </span></span><br><span class="line"><span class="comment">#etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;   </span></span><br><span class="line"><span class="comment">#etcd-2               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125; </span></span><br></pre></td></tr></table></figure>

<h4 id="9-运行Node组件"><a href="#9-运行Node组件" class="headerlink" title="9. 运行Node组件"></a>9. 运行Node组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node bin</span></span><br><span class="line"><span class="built_in">ls</span> /opt/kubernetes/bin</span><br><span class="line"><span class="comment"># etcd  etcdctl  flanneld  kubeadm  kubectl  kubelet  kube-proxy  mk-docker-opts.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># node1节点运行kubelet组件</span></span><br><span class="line"><span class="built_in">export</span> NODE_ADDRESS=<span class="variable">$&#123;1:-&quot;192.168.31.203&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> DNS_SERVER_IP=<span class="variable">$&#123;2:-&quot;10.10.10.2&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet</span></span><br><span class="line"><span class="comment"># 指定当前节点IP地址，设定bootstrap-kubeconfig文件路径</span></span><br><span class="line"><span class="comment"># --kubeconfig：指定kubelet的kubeconfig路径。</span></span><br><span class="line"><span class="comment"># --cluster-dns：指定集群dns。</span></span><br><span class="line"><span class="comment"># --experimental-bootstrap-kubeconfig：指定bootstrap的kubeconfig路径。</span></span><br><span class="line"><span class="comment"># --pod-infra-container-image：指定node节点上部署容器时所需要的根pause。</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">cat</span> &gt;/opt/kubernetes/cfg/kubelet &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_OPTS=&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--address=$&#123;NODE_ADDRESS&#125; \</span></span><br><span class="line"><span class="string">--hostname-override=$&#123;NODE_ADDRESS&#125; \</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">--experimental-bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">--cert-dir=/opt/kubernetes/ssl \</span></span><br><span class="line"><span class="string">--allow-privileged=true \</span></span><br><span class="line"><span class="string">--cluster-dns=$&#123;DNS_SERVER_IP&#125; \</span></span><br><span class="line"><span class="string">--cluster-domain=cluster.local \</span></span><br><span class="line"><span class="string">--fail-swap-on=false \</span></span><br><span class="line"><span class="string">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd管理kubelet</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/kubelet.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kubelet</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kubelet <span class="variable">$KUBELET_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># node1节点运行kube-proxy组件</span></span><br><span class="line"><span class="built_in">export</span> NODE_ADDRESS=<span class="variable">$&#123;1:-&quot;192.168.31.203&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kube-proxy</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/opt/kubernetes/cfg/kube-proxy &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBE_PROXY_OPTS=&quot;--logtostderr=true \</span></span><br><span class="line"><span class="string">--v=4 \</span></span><br><span class="line"><span class="string">--hostname-override=$&#123;NODE_ADDRESS&#125; \</span></span><br><span class="line"><span class="string">--kubeconfig=/opt/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd管理kube-proxy</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/lib/systemd/system/kube-proxy.service &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Proxy</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy</span><br><span class="line">ExecStart=/opt/kubernetes/bin/kube-proxy <span class="variable">$KUBE_PROXY_OPTS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl restart kube-proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="10-bootstrap用户认证授权，执行绑定node角色用户"><a href="#10-bootstrap用户认证授权，执行绑定node角色用户" class="headerlink" title="10. bootstrap用户认证授权，执行绑定node角色用户"></a>10. bootstrap用户认证授权，执行绑定node角色用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进行用户认证绑定</span></span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap</span><br><span class="line"><span class="comment">#clusterrolebinding &quot;kubelet-bootstrap&quot; created</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行认证后，重启kubelet，查看是否正常运作，在master节点上查看是否有节点请求加入到集群中</span></span><br><span class="line">kubectl get csr</span><br><span class="line"><span class="comment"># NAME                                                   AGE       REQUESTOR           CONDITION</span></span><br><span class="line"><span class="comment"># node-csr-LoHfvwUWihlIqXHP0XM20PGD7GkBwy_pnRHO63lIsOg   10h       kubelet-bootstrap   Pending</span></span><br><span class="line"><span class="comment"># node-csr-q2HI8zVaD85Bz8awqNsyochDotz0UmxSkJmKI9qAecc   11h       kubelet-bootstrap   Pending</span></span><br></pre></td></tr></table></figure>

<h4 id="11-node节点加入集群，查询集群状态"><a href="#11-node节点加入集群，查询集群状态" class="headerlink" title="11. node节点加入集群，查询集群状态"></a>11. node节点加入集群，查询集群状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在master节点上查看请求加入到集群的node节点</span></span><br><span class="line">kubectl get csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将请求的节点加入到集群中</span></span><br><span class="line">kubectl certificate approve node-csr-LoHfvwUWihlIqXHP0XM20PGD7GkBwy_pnRHO63lIsOg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询集群状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment">#NAME             STATUS     AGE       VERSION</span></span><br><span class="line"><span class="comment">#192.168.31.203   NotReady   1s        v1.14.0</span></span><br><span class="line"><span class="comment">#192.168.31.204   Ready      27s       v1.14.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 组件状态</span></span><br><span class="line">kubectl get cs</span><br><span class="line"><span class="comment"># NAME                 STATUS    MESSAGE              ERROR</span></span><br><span class="line"><span class="comment"># controller-manager   Healthy   ok                   </span></span><br><span class="line"><span class="comment"># scheduler            Healthy   ok                   </span></span><br><span class="line"><span class="comment"># etcd-0               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span></span><br><span class="line"><span class="comment"># etcd-1               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;   </span></span><br><span class="line"><span class="comment"># etcd-2               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;  </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="12-启动一个测试示例"><a href="#12-启动一个测试示例" class="headerlink" title="12. 启动一个测试示例"></a>12. 启动一个测试示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl run nginx --image=nginx  --replicas=3</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl expose deployment nginx --port=88  --target-port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">kubectl get svc nginx</span><br></pre></td></tr></table></figure>

<h4 id="服务开启"><a href="#服务开启" class="headerlink" title="服务开启"></a>服务开启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart etcd</span><br><span class="line">systemctl restart flanneld</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">systemctl restart kube-apiserver</span><br><span class="line">systemctl restart kube-controller-manager</span><br><span class="line">systemctl restart kube-scheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># node</span></span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl restart kube-proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ubuntu开放端口"><a href="#ubuntu开放端口" class="headerlink" title="ubuntu开放端口"></a>ubuntu开放端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放指定的端口,服务器重启失效</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables-save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则持续化操作，使用 iptables-persistent</span></span><br><span class="line">sudo netfilter-persistent save</span><br><span class="line">sudo netfilter-persistent reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-istio安装</title>
    <url>/2021/06/29/k8s-istio%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h1><p>下载地址 <a href="https://github.com/istio/istio/releases/tag/1.7.6">https://github.com/istio/istio/releases/tag/1.7.6</a></p>
<p><code>下面全部操作都在master上执行</code></p>
<p>v1.8.3安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载</span><br><span class="line">wget https://github.com/istio/istio/releases/download/1.8.3/istio-1.8.3-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">#解压缩</span><br><span class="line">tar -zxvf istio-1.8.3-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">#将istioctl移动到/usr/local/bin</span><br><span class="line">mv istio-1.8.3/bin/istioctl /usr/local/bin/</span><br><span class="line"></span><br><span class="line">#查看istioctl版本</span><br><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line">#安装istio</span><br><span class="line">istioctl install --set profile=demo -y</span><br><span class="line">#default命名空间自动注入</span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">#查看pod情况：</span><br><span class="line">kubectl get pods -n istio-system</span><br></pre></td></tr></table></figure>

<p>v1.9.0安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载</span><br><span class="line">wget https://github.com/istio/istio/releases/download/1.9.0/istio-1.9.0-linux-amd64.tar.gz</span><br><span class="line">#或者</span><br><span class="line">wget http://10.7.102.125:8000/downloads/install-k8s/istio/istio-1.9.0-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">#解压缩</span><br><span class="line">tar -zxvf istio-1.9.0-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">#将istioctl移动到/usr/local/bin</span><br><span class="line">mv istio-1.9.0/bin/istioctl /usr/local/bin/</span><br><span class="line"></span><br><span class="line">#查看istioctl版本</span><br><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line">#安装istio前，提前准备好istio镜像并导入</span><br><span class="line">istioctl install --set profile=demo --set values.global.imagePullPolicy=IfNotPresent -y </span><br><span class="line"></span><br><span class="line">#default命名空间自动注入</span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line"></span><br><span class="line">#离线安装如果机器不能上网需要修改istio的configmap镜像拉取策略</span><br><span class="line">kubectl get cm -n istio-system</span><br><span class="line">[root@grpxxzxsapt007 istio-1.9.0]# kubectl get cm -n istio-system</span><br><span class="line">NAME                     DATA   AGE</span><br><span class="line">istio                    2      22m</span><br><span class="line">istio-sidecar-injector   2      22m</span><br><span class="line"></span><br><span class="line">#修改configmap中istio-sidecar-injector的镜像拉取imagePullPolicy的Always改为IfNotPresent</span><br><span class="line">#或者可以尝试命令istioctl install --set profile=demo --set values.global.imagePullPolicy=IfNotPresent -y </span><br><span class="line">kubectl edit cm -n istio-system istio-sidecar-injector</span><br></pre></td></tr></table></figure>



<h3 id="部署应用Bookinfo。"><a href="#部署应用Bookinfo。" class="headerlink" title="部署应用Bookinfo。"></a>部署应用Bookinfo。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line">#如果安装失败使用下面命令重试</span><br><span class="line">kubectl replace --force -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line">#验证Bookinfo应用运行正常。</span><br><span class="line">#执行如下命令后应该会返回&lt;title&gt;Simple Bookstore App&lt;/title&gt;。</span><br><span class="line"></span><br><span class="line">kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;) -c ratings -- curl productpage:9080/productpage | grep -o &quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span><br><span class="line"></span><br><span class="line">#为应用定义ingress gateway:</span><br><span class="line">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line">#确认gateway已经成功创建：</span><br><span class="line">kubectl get gateway</span><br><span class="line"></span><br><span class="line">#执行以下命令查看istio-ingressgateway服务的外部IP</span><br><span class="line">kubectl get svc istio-ingressgateway -n istio-system </span><br><span class="line"></span><br><span class="line">NAME                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">istio-ingressgateway   LoadBalancer   10.105.16.230   &lt;pending&gt;     15021:32665/TCP,80:31962/TCP,443:31827/TCP,31400:30210/TCP,15443:30519/TCP   34h</span><br><span class="line">#访问masterIP+80端口对应暴露的31962</span><br><span class="line">http://10.7.102.125:31962/productpage</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="部署kiali监控"><a href="#部署kiali监控" class="headerlink" title="部署kiali监控"></a>部署kiali监控</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装 Kiali and the other addons and wait for them to be deployed. 如果不成功多试几次</span><br><span class="line">#如果机器不能上网，出现每次拉取镜像的情况修改samples/addons/kiali.yaml文件的拉取策略为IfNotPresent</span><br><span class="line"></span><br><span class="line">kubectl apply -f samples/addons</span><br><span class="line">kubectl rollout status deployment/kiali -n istio-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看kaili</span><br><span class="line">kubectl get pods -n istio-system|grep kiali</span><br><span class="line">kiali-7476977cf9-bgl7d                  1/1     Running   0          55m</span><br><span class="line"></span><br><span class="line">kubectl port-forward --address 0.0.0.0 &#123;Kiali pod 名称&#125; 20001 -n istio-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考官网安装成 <a href="https://istio.io/latest/docs/setup/getting-started/#download">https://istio.io/latest/docs/setup/getting-started/#download</a></p>
<hr>
<h4 id="kubectl命令总结"><a href="#kubectl命令总结" class="headerlink" title="kubectl命令总结"></a>kubectl命令总结</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#重新创建</span><br><span class="line">kubectl replace --force -f ./deploy.yaml</span><br><span class="line"></span><br><span class="line">#创建namespace</span><br><span class="line">kubectl create namespace my-namespace</span><br><span class="line"></span><br><span class="line">#修改pod配置</span><br><span class="line">kubectl edit pod details-v1-c44b64d7-55lgm</span><br><span class="line"></span><br><span class="line">#实时查看pod状态</span><br><span class="line">watch kubectl get pod</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="istio的卸载"><a href="#istio的卸载" class="headerlink" title="istio的卸载"></a>istio的卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除addons</span><br><span class="line">kubectl delete -f samples/addons</span><br><span class="line">istioctl manifest generate --set profile=demo | kubectl delete --ignore-not-found=true -f -</span><br><span class="line"></span><br><span class="line">#删除命名空间</span><br><span class="line">kubectl delete namespace istio-system</span><br><span class="line"></span><br><span class="line">#删除注入标记</span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="bookinfo卸载"><a href="#bookinfo卸载" class="headerlink" title="bookinfo卸载"></a>bookinfo卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">samples/bookinfo/platform/kube/cleanup.sh</span><br><span class="line"></span><br><span class="line">kubectl get virtualservices   #-- there should be no virtual services</span><br><span class="line">kubectl get destinationrules  #-- there should be no destination rules</span><br><span class="line">kubectl get gateway           #-- there should be no gateway</span><br><span class="line">kubectl get pods              #-- the Bookinfo pods should be deleted</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-离线安装</title>
    <url>/2021/06/29/k8s-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="安装k8s集群-准备工作"><a href="#安装k8s集群-准备工作" class="headerlink" title="安装k8s集群-准备工作"></a>安装k8s集群-准备工作</h1><p>注意事项:</p>
<blockquote>
<p>1.安装k8s前请先安装好docker，具体安装方法参考文档&lt;&lt;docker生产安装.md&gt;&gt;。<br>2.文档中IP地址为示意地址，安装时请替换为实际生产地址。<br>3.本文档不要一次性执行一个命令框（灰色框）内的全部命令，应按照步骤说明分步执行。</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>规划机器。操作系统：CentOS Linux release 7.9.2009 (Core)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.1.11 master</span><br><span class="line">192.168.1.12 node1</span><br><span class="line">192.168.1.13 node2</span><br></pre></td></tr></table></figure>

<p>拷贝文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拷贝文件都3台机器</span><br><span class="line">scp -r tars root@192.168.1.11:/root/</span><br><span class="line">scp -r tars root@192.168.1.12:/root/</span><br><span class="line">scp -r tars root@192.168.1.13:/root/</span><br></pre></td></tr></table></figure>

<p>设置hostname</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#机器192.168.2.11执行</span></span><br><span class="line">hostnamectl --static set-hostname  master</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.2.12执行</span></span><br><span class="line">hostnamectl --static set-hostname  node1</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.2.13执行</span></span><br><span class="line">hostnamectl --static set-hostname  node2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#所有机器上执行，hosts文件追加本地解析记录</span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;  /etc/hosts</span><br><span class="line">192.168.1.11    master</span><br><span class="line">192.168.1.12    node1</span><br><span class="line">192.168.1.13    node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p><em>以下命令在所有机器执行</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi step1-initServer.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#### 关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">#### 关闭Swap</span><br><span class="line">swapoff -a</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line">echo &quot;vm.swappiness = 0&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">#### 关闭selinux</span><br><span class="line">sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config</span><br><span class="line"></span><br><span class="line">#### 设置启动参数</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">#### 安装docker</span><br><span class="line"></span><br><span class="line">#离线安装参考《docker生产安装》</span><br><span class="line">tar -zxvf tars/docker-18.06.3-ce.tgz </span><br><span class="line">cp docker/* /usr/bin/</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/systemd/system/docker.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="line"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="line"># for containers run by docker</span><br><span class="line">ExecStart=/usr/bin/dockerd --selinux-enabled=false</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="line"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"># Uncomment TasksMax if your systemd version supports it.</span><br><span class="line"># Only systemd 226 and above support this version.</span><br><span class="line">#TasksMax=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br><span class="line">Delegate=yes</span><br><span class="line"># kill only the docker process, not all processes in the cgroup</span><br><span class="line">KillMode=process</span><br><span class="line"># restart the docker process if it exits prematurely</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#加执行权限</span><br><span class="line">chmod +x /etc/systemd/system/docker.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">#启动</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">#设置开机启动</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"></span><br><span class="line">#查看docker服务状态</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">#设置docker</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;10.7.92.101:5000&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">#导入镜像脚本</span><br><span class="line">docker load &lt; ./tars/1.tar</span><br><span class="line">docker load &lt; ./tars/2.tar</span><br><span class="line">docker load &lt; ./tars/3.tar</span><br><span class="line">docker load &lt; ./tars/4.tar</span><br><span class="line">docker load &lt; ./tars/5.tar</span><br><span class="line">docker load &lt; ./tars/6.tar</span><br><span class="line">docker load &lt; ./tars/7.tar</span><br><span class="line">docker load &lt; ./tars/9.tar</span><br><span class="line">docker load &lt; ./tars/10.tar</span><br><span class="line">docker load &lt; ./tars/11.tar</span><br><span class="line">docker load &lt; ./tars/12.tar</span><br><span class="line">docker load &lt; ./tars/13.tar</span><br><span class="line">docker load &lt; ./tars/14.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#离线安装kubelet-1.19.7,kubeadm-1.19.7,kubectl-1.19.7</span><br><span class="line">rpm -ivh ./tars/k8s/*.rpm</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

<p><em>以下命令在master机器执行</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi initMaster.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &#x27;please input master ip(ex:192.168.68.131) :&#x27;</span><br><span class="line">read masterIp</span><br><span class="line"></span><br><span class="line"># 初始化master，添加--image-repository参数，默认镜像下载会失败</span><br><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=$masterIp \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.19.7 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --ignore-preflight-errors=all</span><br><span class="line"></span><br><span class="line">#如果init成功执行如下命令</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line"># 安装网络</span><br><span class="line">kubectl apply -f tars/calico.yaml</span><br><span class="line">sleep 120s</span><br><span class="line"></span><br><span class="line">#查看集群</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line">#安装dashboard</span><br><span class="line">kubectl create -f tars/recommended.yaml</span><br><span class="line">sleep 120s</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">#命令获取token</span><br><span class="line">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-部署ingress</title>
    <url>/2021/06/29/k8s-%E9%83%A8%E7%BD%B2ingress/</url>
    <content><![CDATA[<h3 id="ingress部署"><a href="#ingress部署" class="headerlink" title="ingress部署"></a>ingress部署</h3><ol>
<li>部署ingress-nginx</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载ingress-nginx的yaml文件</span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</span><br><span class="line"></span><br><span class="line">#删除目录</span><br><span class="line">kubectl create -f mandatory.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意：mandatory.yaml中Deployment 设置hostNetwork为true</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">prometheus.io/port:</span> <span class="string">&quot;10254&quot;</span></span><br><span class="line">        <span class="attr">prometheus.io/scrape:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># hostNetwork设置为true</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># wait up to five minutes for the drain of connections</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h3 id="部署nginx"><a href="#部署nginx" class="headerlink" title="部署nginx"></a>部署nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建web</span><br><span class="line"> kubectl create deploy web --image=nginx:1.18-alpine</span><br><span class="line">#暴露端口</span><br><span class="line"> kubectl expose deployment web --port=80 --target-port=80 --type=ClusterIP</span><br><span class="line">#查看状态</span><br><span class="line"> kubectl get pod |grep web</span><br><span class="line"> kubectl get svc |grep web</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  name: web</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - nodePort: 31532</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: web</span><br><span class="line">  type: ClusterIP</span><br></pre></td></tr></table></figure>

<h3 id="创建ingress规则"><a href="#创建ingress规则" class="headerlink" title="创建ingress规则"></a>创建ingress规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ingress-web.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: demo-ingress</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: demo.example.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - backend:</span><br><span class="line">              serviceName: web</span><br><span class="line">              servicePort: 80</span><br><span class="line">              </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>Ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-高可用集群安装全教程</title>
    <url>/2021/06/29/k8s-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E5%85%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="1准备虚拟机，准备3台虚拟机"><a href="#1准备虚拟机，准备3台虚拟机" class="headerlink" title="1准备虚拟机，准备3台虚拟机"></a>1准备虚拟机，准备3台虚拟机</h3><p>规划机器。操作系统：CentOS Linux release 7.9.2009 (Core)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.68.164 master01</span><br><span class="line">192.168.68.165 master02</span><br><span class="line">192.168.68.167 master03</span><br></pre></td></tr></table></figure>

<p>拷贝文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拷贝文件都3台机器</span><br><span class="line">scp -r install-k8s/ root@192.168.68.164:/root/</span><br><span class="line">scp -r install-k8s/ root@192.168.68.165:/root/</span><br><span class="line">scp -r install-k8s/ root@192.168.68.167:/root/</span><br></pre></td></tr></table></figure>

<p>设置hostname</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#机器192.168.68.164执行</span></span><br><span class="line">hostnamectl --static set-hostname  master01</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.68.165执行</span></span><br><span class="line">hostnamectl --static set-hostname  master02</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.68.167执行</span></span><br><span class="line">hostnamectl --static set-hostname  master03</span><br></pre></td></tr></table></figure>

<h3 id="2虚拟机设置"><a href="#2虚拟机设置" class="headerlink" title="2虚拟机设置"></a>2虚拟机设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#执行初始化脚本</span><br><span class="line">sh step1-initServer.sh</span><br></pre></td></tr></table></figure>

<h3 id="3安装docker并安装haproxy和keepalive"><a href="#3安装docker并安装haproxy和keepalive" class="headerlink" title="3安装docker并安装haproxy和keepalive"></a>3安装docker并安装haproxy和keepalive</h3><h4 id="创建-HAProxy-启动脚本"><a href="#创建-HAProxy-启动脚本" class="headerlink" title="创建 HAProxy 启动脚本"></a>创建 HAProxy 启动脚本</h4><blockquote>
<p>该步骤在 <code>master01 master02 master03</code> 执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/kubernetes/lb</span><br><span class="line">vi /usr/local/kubernetes/lb/start-haproxy.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容如下</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 修改为你自己的 Master 地址</span></span><br><span class="line">MasterIP1=192.168.68.164</span><br><span class="line">MasterIP2=192.168.68.165</span><br><span class="line">MasterIP3=192.168.68.167</span><br><span class="line"><span class="comment"># 这是 kube-apiserver 默认端口，不用修改</span></span><br><span class="line">MasterPort=6443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器将 HAProxy 的 6444 端口暴露出去</span></span><br><span class="line">docker run -d --restart=always --name HAProxy-K8S -p 6444:6444 \</span><br><span class="line">        -e MasterIP1=<span class="variable">$MasterIP1</span> \</span><br><span class="line">        -e MasterIP2=<span class="variable">$MasterIP2</span> \</span><br><span class="line">        -e MasterIP3=<span class="variable">$MasterIP3</span> \</span><br><span class="line">        -e MasterPort=<span class="variable">$MasterPort</span> \</span><br><span class="line">        wise2c/haproxy-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x start-haproxy.sh</span><br></pre></td></tr></table></figure>

<h4 id="创建-Keepalived-启动脚本"><a href="#创建-Keepalived-启动脚本" class="headerlink" title="创建 Keepalived 启动脚本"></a>创建 Keepalived 启动脚本</h4><blockquote>
<p>该步骤在 <code>master01 master02 master03</code> 执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/kubernetes/lb</span><br><span class="line">vi /usr/local/kubernetes/lb/start-keepalived.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容如下</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 修改为你自己的虚拟 IP 地址</span></span><br><span class="line">VIRTUAL_IP=192.168.68.200</span><br><span class="line"><span class="comment"># 虚拟网卡设备名</span></span><br><span class="line">INTERFACE=ens33</span><br><span class="line"><span class="comment"># 虚拟网卡的子网掩码</span></span><br><span class="line">NETMASK_BIT=24</span><br><span class="line"><span class="comment"># HAProxy 暴露端口，内部指向 kube-apiserver 的 6443 端口</span></span><br><span class="line">CHECK_PORT=6444</span><br><span class="line"><span class="comment"># 路由标识符</span></span><br><span class="line">RID=10</span><br><span class="line"><span class="comment"># 虚拟路由标识符</span></span><br><span class="line">VRID=160</span><br><span class="line"><span class="comment"># IPV4 多播地址，默认 224.0.0.18</span></span><br><span class="line">MCAST_GROUP=224.0.0.18</span><br><span class="line"></span><br><span class="line">docker run -itd --restart=always --name=Keepalived-K8S \</span><br><span class="line">        --net=host --cap-add=NET_ADMIN \</span><br><span class="line">        -e VIRTUAL_IP=<span class="variable">$VIRTUAL_IP</span> \</span><br><span class="line">        -e INTERFACE=<span class="variable">$INTERFACE</span> \</span><br><span class="line">        -e CHECK_PORT=<span class="variable">$CHECK_PORT</span> \</span><br><span class="line">        -e RID=<span class="variable">$RID</span> \</span><br><span class="line">        -e VRID=<span class="variable">$VRID</span> \</span><br><span class="line">        -e NETMASK_BIT=<span class="variable">$NETMASK_BIT</span> \</span><br><span class="line">        -e MCAST_GROUP=<span class="variable">$MCAST_GROUP</span> \</span><br><span class="line">        wise2c/keepalived-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x start-keepalived.sh</span><br></pre></td></tr></table></figure>

<h3 id="4安装kubeadm-kubelet-kubectl"><a href="#4安装kubeadm-kubelet-kubectl" class="headerlink" title="4安装kubeadm kubelet kubectl"></a>4安装kubeadm kubelet kubectl</h3><h3 id="5初始化-master01-并安装calico网络"><a href="#5初始化-master01-并安装calico网络" class="headerlink" title="5初始化 master01 并安装calico网络"></a>5初始化 master01 并安装calico网络</h3><h3 id="6其它两台-master加入到集群"><a href="#6其它两台-master加入到集群" class="headerlink" title="6其它两台 master加入到集群"></a>6其它两台 master加入到集群</h3><h3 id="7安装-dashboard"><a href="#7安装-dashboard" class="headerlink" title="7安装 dashboard"></a>7安装 dashboard</h3>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s常用指令</title>
    <url>/2020/06/29/k8s%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="k8s操作"><a href="#k8s操作" class="headerlink" title="k8s操作"></a>k8s操作</h2><h4 id="k8s指令"><a href="#k8s指令" class="headerlink" title="k8s指令"></a>k8s指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建RC</span><br><span class="line">kubectl create -f &lt;xxx-rc.yaml&gt;</span><br><span class="line"></span><br><span class="line"># 获取RC</span><br><span class="line">kubectl get rc</span><br><span class="line"></span><br><span class="line"># 删除rc</span><br><span class="line">kubectl delete rc &lt;rc_name&gt;</span><br><span class="line"></span><br><span class="line"># 获取pod</span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"># 获取某个命名空间的pod</span><br><span class="line">kubectl get pods --namespace=default # 默认的命名空间为 default</span><br><span class="line"></span><br><span class="line"># 获取nodes</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"># 获取node的详细信息</span><br><span class="line">kubectl describe node &lt;node_name&gt;</span><br><span class="line"></span><br><span class="line"># 获取pod的详细信息</span><br><span class="line">kubectl describe pod &lt;pod_name&gt;</span><br><span class="line"></span><br><span class="line"># 创建副本数量,如3</span><br><span class="line">kubectl scale rc &lt;pod_name&gt; --replicas=3</span><br><span class="line"></span><br><span class="line"># 创建deployment</span><br><span class="line">kubectl create -f &lt;deployment.yaml&gt;</span><br><span class="line"></span><br><span class="line"># 查看deployment</span><br><span class="line">kubectl get deploymnets</span><br><span class="line"></span><br><span class="line"># 查看Replicas Set</span><br><span class="line">kubectl get rs</span><br><span class="line"></span><br><span class="line"># 查看endpoint</span><br><span class="line">kubectl get endpoints</span><br><span class="line"></span><br><span class="line"># 查看service的详细信息</span><br><span class="line">kubectl get svc &lt;xxx-service&gt; -o yaml</span><br><span class="line"></span><br><span class="line"># 查看namspaces</span><br><span class="line">kubectl get namespaces</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-操作命令"><a href="#1-操作命令" class="headerlink" title="1. 操作命令"></a>1. 操作命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看指令用API</span></span><br><span class="line">kubectl explain &lt;<span class="built_in">source</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看api-version</span></span><br><span class="line">kubectl api-versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看到所有nodes节点的IP和状态(一般该命令在master执行)。</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已经创建的pods</span></span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个pod内部详情</span></span><br><span class="line">kubectl get pods &lt;pod_name&gt; -o yaml</span><br><span class="line">kubectl describe pods &lt;pod_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个pod的日志</span></span><br><span class="line">kubectl logs &lt;pod_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统中的services</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群中的所有deployment(官方推荐使用deployment来替代rc)</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Replication Controller</span></span><br><span class="line">kubectl get rc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ReplicaSet</span></span><br><span class="line">kubectl get rs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群情况(一般该命令在master执行)</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看事件</span></span><br><span class="line">kubectl get events</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统中的secret</span></span><br><span class="line">kubectl get secret</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看集群中的所有namespace</span></span><br><span class="line">kubectl get namespace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用yaml创建pod, 不仅可以创建pod，还可以创建rc,deployment,service等。</span></span><br><span class="line">kubectl create -f &lt;xxx.yaml&gt;</span><br><span class="line">kubectl apply -f &lt;xxx.yaml&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据label筛选查看pods (label一般都是写在yaml文件中)</span></span><br><span class="line">kubectl get pods -l app=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pods,如果还pod有类似deployment，rc保护，那么会删除失败。</span></span><br><span class="line">kubectl delete pods &lt;pod_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集群运行应用程序（nginx）</span></span><br><span class="line">kubectl run nginxdemo --image=nginx --replicas=3 --labels=<span class="string">&#x27;app=nginx&#x27;</span> --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建服务service，对外暴露端口88</span></span><br><span class="line">kubectl expose deployment nginx --port=88  --target-port=80 --<span class="built_in">type</span>=NodePort --name=nginx-svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># pod副本的扩容与缩容</span></span><br><span class="line">kubectl scale deployment nginxdemo --replicas=10 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看扩容进度</span></span><br><span class="line">kubectl rollout status deployment nginxdemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除资源</span></span><br><span class="line"><span class="comment"># pod与rs不能直接删除，因为他们被deployment控制，即使删除某一个pod或rs，deployment会立刻创建新的pod，来与配置中副本对应。</span></span><br><span class="line"><span class="comment"># 要删除pod和rs，只能删除对用的deployment，使用kubectl delete 可以删除deployment 和 svc。</span></span><br><span class="line">kubectl delete deployment nginxdemo</span><br><span class="line">kubectl delete svc nginxdemo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行容器的命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> &lt;pod-name&gt; <span class="built_in">date</span> <span class="comment">#执行Pod的date命令，默认使用第一个容器</span></span><br><span class="line">kubectl <span class="built_in">exec</span> &lt;pod-name&gt; -c &lt;container-name&gt; <span class="built_in">date</span> <span class="comment"># 执行Pod中某个容器的date命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti &lt;pod-name&gt; -c &lt;container-name&gt; /bin/bash <span class="comment"># 通过bash获取Pod中某个容器的TTY</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的日志</span></span><br><span class="line">kubectl logs &lt;pod-name&gt; <span class="comment"># 查看容器输出到stdout的日志</span></span><br><span class="line">kubectl logs -f &lt;pod-name&gt; -c &lt;container-name&gt; <span class="comment"># 跟踪查看容器日志</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-yaml文件详解</title>
    <url>/2020/06/29/k8s%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="k8s-yaml文件详解"><a href="#k8s-yaml文件详解" class="headerlink" title="k8s yaml文件详解"></a>k8s yaml文件详解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1             <span class="comment">#指定api版本，此值必须在kubectl apiversion中  </span></span><br><span class="line">kind: Pod                  <span class="comment">#指定创建资源的角色/类型  </span></span><br><span class="line">metadata:                  <span class="comment">#资源的元数据/属性  </span></span><br><span class="line">  name: web04-pod          <span class="comment">#资源的名字，在同一个namespace中必须唯一  </span></span><br><span class="line">  labels:                  <span class="comment">#设定资源的标签，详情请见http://blog.csdn.net/liyingke112/article/details/77482384</span></span><br><span class="line">    k8s-app: apache  </span><br><span class="line">    version: v1  </span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">&quot;true&quot;</span>  </span><br><span class="line">  annotations:             <span class="comment">#自定义注解列表  </span></span><br><span class="line">    - name: String         <span class="comment">#自定义注解名字  </span></span><br><span class="line">spec:<span class="comment">#specification of the resource content 指定该资源的内容  </span></span><br><span class="line">  restartPolicy: Always    <span class="comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器  </span></span><br><span class="line">  nodeSelector:            <span class="comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1  </span></span><br><span class="line">    zone: node1  </span><br><span class="line">  containers:  </span><br><span class="line">  - name: web04-pod        <span class="comment">#容器的名字  </span></span><br><span class="line">    image: web:apache      <span class="comment">#容器使用的镜像地址  </span></span><br><span class="line">    imagePullPolicy: Never <span class="comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，</span></span><br><span class="line">                           <span class="comment"># Always，每次都检查</span></span><br><span class="line">                           <span class="comment"># Never，每次都不检查（不管本地是否有）</span></span><br><span class="line">                           <span class="comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取</span></span><br><span class="line">    <span class="built_in">command</span>: [<span class="string">&#x27;sh&#x27;</span>]        <span class="comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT  </span></span><br><span class="line">    args: [<span class="string">&quot;<span class="subst">$(str)</span>&quot;</span>]       <span class="comment">#启动容器的命令参数，对应Dockerfile中CMD参数  </span></span><br><span class="line">    <span class="built_in">env</span>:                   <span class="comment">#指定容器中的环境变量  </span></span><br><span class="line">    - name: str            <span class="comment">#变量的名字  </span></span><br><span class="line">      value: <span class="string">&quot;/etc/run.sh&quot;</span> <span class="comment">#变量的值  </span></span><br><span class="line">    resources:             <span class="comment">#资源管理，请求请见http://blog.csdn.net/liyingke112/article/details/77452630</span></span><br><span class="line">      requests:            <span class="comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行  </span></span><br><span class="line">        cpu: 0.1           <span class="comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）</span></span><br><span class="line">        memory: 32Mi       <span class="comment">#内存使用量  </span></span><br><span class="line">      limits:              <span class="comment">#资源限制  </span></span><br><span class="line">        cpu: 0.5  </span><br><span class="line">        memory: 32Mi  </span><br><span class="line">    ports:  </span><br><span class="line">    - containerPort: 80    <span class="comment">#容器开发对外的端口</span></span><br><span class="line">      name: httpd          <span class="comment">#名称</span></span><br><span class="line">      protocol: TCP  </span><br><span class="line">    livenessProbe:         <span class="comment">#pod内容器健康检查的设置，详情请见http://blog.csdn.net/liyingke112/article/details/77531584</span></span><br><span class="line">      httpGet:             <span class="comment">#通过httpget检查健康，返回200-399之间，则认为容器正常  </span></span><br><span class="line">        path: /            <span class="comment">#URI地址  </span></span><br><span class="line">        port: 80  </span><br><span class="line">        <span class="comment">#host: 127.0.0.1   #主机地址  </span></span><br><span class="line">        scheme: HTTP  </span><br><span class="line">      initialDelaySeconds: 180 <span class="comment">#表明第一次检测在容器启动后多长时间后开始  </span></span><br><span class="line">      timeoutSeconds: 5    <span class="comment">#检测的超时时间  </span></span><br><span class="line">      periodSeconds: 15    <span class="comment">#检查间隔时间  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常  </span></span><br><span class="line">      <span class="comment">#  command:  </span></span><br><span class="line">      <span class="comment">#    - cat  </span></span><br><span class="line">      <span class="comment">#    - /tmp/health  </span></span><br><span class="line">      <span class="comment">#也可以用这种方法  </span></span><br><span class="line">      <span class="comment">#tcpSocket: //通过tcpSocket检查健康   </span></span><br><span class="line">      <span class="comment">#  port: number   </span></span><br><span class="line">    lifecycle:             <span class="comment">#生命周期管理  </span></span><br><span class="line">      postStart:           <span class="comment">#容器运行之前运行的任务  </span></span><br><span class="line">        <span class="built_in">exec</span>:  </span><br><span class="line">          <span class="built_in">command</span>:  </span><br><span class="line">            - <span class="string">&#x27;sh&#x27;</span>  </span><br><span class="line">            - <span class="string">&#x27;yum upgrade -y&#x27;</span>  </span><br><span class="line">      preStop:             <span class="comment">#容器关闭之前运行的任务  </span></span><br><span class="line">        <span class="built_in">exec</span>:  </span><br><span class="line">          <span class="built_in">command</span>: [<span class="string">&#x27;service httpd stop&#x27;</span>]  </span><br><span class="line">    volumeMounts:          <span class="comment">#详情请见http://blog.csdn.net/liyingke112/article/details/76577520</span></span><br><span class="line">    - name: volume         <span class="comment">#挂载设备的名字，与volumes[*].name 需要对应    </span></span><br><span class="line">      mountPath: /data     <span class="comment">#挂载到容器的某个路径下  </span></span><br><span class="line">      readOnly: True  </span><br><span class="line">  volumes:                 <span class="comment">#定义一组挂载设备  </span></span><br><span class="line">  - name: volume           <span class="comment">#定义一个挂载设备的名字  </span></span><br><span class="line">    <span class="comment">#meptyDir: &#123;&#125;  </span></span><br><span class="line">    hostPath:  </span><br><span class="line">      path: /opt           <span class="comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>django杂记</title>
    <url>/2021/04/01/django%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin.py startproject &lt;proj_name&gt;  <span class="comment"># 创建django项目</span></span><br><span class="line">django-admin.py startapp &lt;app_name&gt;  <span class="comment"># 创建app name</span></span><br><span class="line"><span class="comment"># 注：Django规定，如果要使用模型，必须要创建一个app</span></span><br></pre></td></tr></table></figure>
<h4 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser  # 创建超级用户</span><br></pre></td></tr></table></figure>

<h4 id="mysql-数据库配置"><a href="#mysql-数据库配置" class="headerlink" title="mysql 数据库配置"></a>mysql 数据库配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># settings.py 配置</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,  # 或者使用 mysql.connector.django</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;test&#x27;,</span><br><span class="line">        &#x27;USER&#x27;: &#x27;test&#x27;,</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;123456&#x27;,</span><br><span class="line">        &#x27;HOST&#x27;:&#x27;localhost&#x27;,</span><br><span class="line">        &#x27;PORT&#x27;:&#x27;3306&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="django-迁移文件"><a href="#django-迁移文件" class="headerlink" title="django 迁移文件"></a>django 迁移文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成迁移文件</span><br><span class="line">python manage.py makemigrations &lt;app_name&gt; -n &lt;desc_change&gt;</span><br><span class="line"># 创建表结构</span><br><span class="line">python manage.py migrate &lt;app_name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py runserver </span><br><span class="line">python manage.py runserver 8080</span><br><span class="line">python manage.py runserver 0:8080</span><br></pre></td></tr></table></figure>

<h4 id="django-orm-查询"><a href="#django-orm-查询" class="headerlink" title="django orm 查询"></a>django orm 查询</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ORM详解</span></span><br><span class="line">http://www.cnblogs.com/mosson/p/5806823.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># django聚函数</span></span><br><span class="line">http://blog.csdn.net/ayocross/article/details/68951413?utm_source=itdadao&amp;utm_medium=referral</span><br><span class="line"></span><br><span class="line"><span class="comment"># django orm 函数：</span></span><br><span class="line">https://www.cnblogs.com/ajianbeyourself/p/3604332.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="django解决跨域请求的问题"><a href="#django解决跨域请求的问题" class="headerlink" title="django解决跨域请求的问题"></a>django解决跨域请求的问题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line"><span class="comment"># 安装django-cors-headers</span></span><br><span class="line">pip install django-cors-headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置settings.py文件</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line"> ] </span><br><span class="line"></span><br><span class="line">MIDDLEWARE_CLASSES = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>, <span class="comment"># 注意顺序</span></span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跨域增加忽略</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = True</span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">&#x27;*&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CORS_ALLOW_METHODS = (</span><br><span class="line">    <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OPTIONS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VIEW&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CORS_ALLOW_HEADERS = (</span><br><span class="line">    <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X_FILENAME&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-encoding&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dnt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-csrftoken&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="django-导出依赖"><a href="#django-导出依赖" class="headerlink" title="django 导出依赖"></a>django 导出依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<h4 id="Python-获取文件路径-path、filename"><a href="#Python-获取文件路径-path、filename" class="headerlink" title="Python 获取文件路径 path、filename"></a>Python 获取文件路径 path、filename</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前文件绝对路径</span></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># 当前文件的文件夹路径</span></span><br><span class="line"><span class="built_in">print</span>(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"><span class="comment"># 当前文件的文件名</span></span><br><span class="line"><span class="built_in">print</span>(os.path.basename(os.path.dirname(os.path.abspath(__file__))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ubuntu安装python-mysqldb模块"><a href="#ubuntu安装python-mysqldb模块" class="headerlink" title="ubuntu安装python mysqldb模块"></a>ubuntu安装python mysqldb模块</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装pip</span><br><span class="line">apt-get install python-pip</span><br><span class="line"></span><br><span class="line"># 安装python-dev（否则安装mysql模块报错）</span><br><span class="line">apt-get install python-dev</span><br><span class="line"></span><br><span class="line"># 安装mysqldb模块</span><br><span class="line">pip install MySQL-python</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 文件是否存在</span><br><span class="line">os.path.exists(srcFilePath)</span><br><span class="line"></span><br><span class="line"># 文件拷贝</span><br><span class="line">shutil.copyfile(srcFilePath,dstFilePath)</span><br><span class="line">        </span><br><span class="line"># 删除文件夹</span><br><span class="line">shutil.rmtree(dstDir)</span><br><span class="line"></span><br><span class="line"># 文件夹拷贝</span><br><span class="line">shutil.copytree(srcDir, dstDir) # dstDir 存在则抛异常</span><br><span class="line">shutil.copytree(srcDir, dstDir, ignore=ignore_patterns(&#x27;*.pyc&#x27;, &#x27;tmp*&#x27;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件夹复制加强版</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copytree</span>(<span class="params">src, dst, symlinks=<span class="literal">False</span></span>):</span><br><span class="line">    names = os.listdir(src)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dst):</span><br><span class="line">        os.makedirs(dst)</span><br><span class="line">    errors = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        srcname = os.path.join(src, name)</span><br><span class="line">        dstname = os.path.join(dst, name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> symlinks <span class="keyword">and</span> os.path.islink(srcname):</span><br><span class="line">                linkto = os.readlink(srcname)</span><br><span class="line">                os.symlink(linkto, dstname)</span><br><span class="line">            <span class="keyword">elif</span> os.path.isdir(srcname):</span><br><span class="line">                copytree(srcname, dstname, symlinks)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.isdir(dstname):</span><br><span class="line">                    os.rmdir(dstname)</span><br><span class="line">                <span class="keyword">elif</span> os.path.isfile(dstname):</span><br><span class="line">                    os.remove(dstname)</span><br><span class="line">                shutil.copy2(srcname, dstname)</span><br><span class="line">        <span class="keyword">except</span> (IOError, os.error) <span class="keyword">as</span> why:</span><br><span class="line">            errors.append((srcname, dstname, <span class="built_in">str</span>(why)))</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">            errors.extend(err.args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        shutil.copystat(src, dst)</span><br><span class="line">    <span class="keyword">except</span> WindowsError:</span><br><span class="line">        <span class="comment"># can&#x27;t copy file access times on Windows</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> why:</span><br><span class="line">        errors.extend((src, dst, <span class="built_in">str</span>(why)))</span><br><span class="line">    <span class="keyword">if</span> errors:</span><br><span class="line">        <span class="keyword">raise</span> shutil.Error(errors)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="解决-ImportError-No-module-named-问题"><a href="#解决-ImportError-No-module-named-问题" class="headerlink" title="解决 ImportError: No module named 问题"></a>解决 ImportError: No module named 问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决 python脚本里导入自建文件的出现 ImportError: No module named的问题</span></span><br><span class="line"><span class="comment"># 相对路径在pycharm等ide中能够正确识别包的位置</span></span><br><span class="line"><span class="comment"># 在终端中运行时就会出现ImportError: No module named</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;package_name&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群安装部署</title>
    <url>/2021/06/29/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="安装k8s集群-准备工作"><a href="#安装k8s集群-准备工作" class="headerlink" title="安装k8s集群-准备工作"></a>安装k8s集群-准备工作</h1><p>注意事项:</p>
<blockquote>
<p>1.安装k8s前请先安装好docker，具体安装方法参考文档&lt;&lt;docker生产安装.md&gt;&gt;。<br>2.文档中IP地址为示意地址，安装时请替换为实际生产地址。<br>3.本文档不要一次性执行一个命令框（灰色框）内的全部命令，应按照步骤说明分步执行。</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>规划机器。操作系统：CentOS Linux release 7.9.2009 (Core)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.1.11 master</span><br><span class="line">192.168.1.12 node1</span><br><span class="line">192.168.1.13 node2</span><br></pre></td></tr></table></figure>

<p>提前准备docker镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拉取镜像</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-proxy:v1.19.7</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.19.7</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-scheduler:v1.19.7</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-controller-manager:v1.19.7 </span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/etcd:3.4.13-0 </span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/coredns:1.7.0</span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker pull calico/node:v3.17.2</span><br><span class="line">docker pull calico/pod2daemon-flexvol:v3.17.2</span><br><span class="line">docker pull calico/cni:v3.17.2           </span><br><span class="line">docker pull calico/kube-controllers:v3.17.2</span><br><span class="line">docker pull kubernetesui/dashboard:v2.0.0-rc7</span><br><span class="line">docker pull kubernetesui/metrics-scraper:v1.0.4</span><br><span class="line"></span><br><span class="line">#保存镜像</span><br><span class="line">docker save -o  ./tars/1.tar registry.aliyuncs.com/google_containers/kube-proxy:v1.19.7</span><br><span class="line">docker save -o  ./tars/2.tar registry.aliyuncs.com/google_containers/kube-apiserver:v1.19.7</span><br><span class="line">docker save -o  ./tars/3.tar registry.aliyuncs.com/google_containers/kube-scheduler:v1.19.7</span><br><span class="line">docker save -o  ./tars/4.tar registry.aliyuncs.com/google_containers/kube-controller-manager:v1.19.7 </span><br><span class="line">docker save -o  ./tars/5.tar registry.aliyuncs.com/google_containers/etcd:3.4.13-0 </span><br><span class="line">docker save -o  ./tars/6.tar registry.aliyuncs.com/google_containers/coredns:1.7.0</span><br><span class="line">docker save -o  ./tars/7.tar registry.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker save -o  ./tars/9.tar calico/node:v3.17.2</span><br><span class="line">docker save -o  ./tars/10.tar calico/pod2daemon-flexvol:v3.17.2</span><br><span class="line">docker save -o  ./tars/11.tar calico/cni:v3.17.2           </span><br><span class="line">docker save -o  ./tars/12.tar calico/kube-controllers:v3.17.2</span><br><span class="line">docker save -o  ./tars/13.tar kubernetesui/dashboard:v2.0.0-rc7</span><br><span class="line">docker save -o  ./tars/14.tar kubernetesui/metrics-scraper:v1.0.4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拷贝文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拷贝文件都3台机器</span><br><span class="line">scp -r tars root@192.168.1.11:/root/</span><br><span class="line">scp -r tars root@192.168.1.12:/root/</span><br><span class="line">scp -r tars root@192.168.1.13:/root/</span><br></pre></td></tr></table></figure>

<p>设置hostname</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#机器192.168.2.11执行</span></span><br><span class="line">hostnamectl --static set-hostname  master</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.2.12执行</span></span><br><span class="line">hostnamectl --static set-hostname  node1</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.2.13执行</span></span><br><span class="line">hostnamectl --static set-hostname  node2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#所有机器上执行，hosts文件追加本地解析记录</span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;  /etc/hosts</span><br><span class="line">192.168.1.11    master</span><br><span class="line">192.168.1.12    node1</span><br><span class="line">192.168.1.13    node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p><em>以下命令在所有机器执行</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">#### 关闭Swap</span><br><span class="line">swapoff -a</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line">echo &quot;vm.swappiness = 0&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">#### 关闭selinux</span><br><span class="line">sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config</span><br><span class="line"></span><br><span class="line">#### 设置启动参数</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>
<h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#离线安装参考《docker生产安装》</span><br><span class="line"></span><br><span class="line">#在线安装</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line">yum install -y docker-ce-18.06.3.ce-3.el7</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>设置docker的cgroupdriver为systemd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set up the Docker daemon</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>导入提前准备好的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入镜像脚本</span><br><span class="line">docker load &lt; ./tars/1.tar</span><br><span class="line">docker load &lt; ./tars/2.tar</span><br><span class="line">docker load &lt; ./tars/3.tar</span><br><span class="line">docker load &lt; ./tars/4.tar</span><br><span class="line">docker load &lt; ./tars/5.tar</span><br><span class="line">docker load &lt; ./tars/6.tar</span><br><span class="line">docker load &lt; ./tars/7.tar</span><br><span class="line">docker load &lt; ./tars/9.tar</span><br><span class="line">docker load &lt; ./tars/10.tar</span><br><span class="line">docker load &lt; ./tars/11.tar</span><br><span class="line">docker load &lt; ./tars/12.tar</span><br><span class="line">docker load &lt; ./tars/13.tar</span><br><span class="line">docker load &lt; ./tars/14.tar</span><br></pre></td></tr></table></figure>

<h4 id="安装kubeadm-kubelet-kubectl"><a href="#安装kubeadm-kubelet-kubectl" class="headerlink" title="安装kubeadm,kubelet,kubectl"></a>安装kubeadm,kubelet,kubectl</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet-1.19.7 kubeadm-1.19.7 kubectl-1.19.7</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>kubeadm部署k8s</title>
    <url>/2020/09/29/kubeadm%E9%83%A8%E7%BD%B2k8s/</url>
    <content><![CDATA[<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="https://rainbowrise.github.io/images/ydnote/2019/k8s.png" alt="K8S架构图"></p>
<p><img src="https://rainbowrise.github.io/images/ydnote/2019/k8s_architecture.png" alt="K8S架构图"></p>
<h3 id="Kubernetes常用资源对象"><a href="#Kubernetes常用资源对象" class="headerlink" title="Kubernetes常用资源对象"></a>Kubernetes常用资源对象</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Kubernetes常用资源对象</span><br><span class="line">① Node – 集群节点</span><br><span class="line">② Pod – 集群中运行的最小单位</span><br><span class="line">③ Namespace – 命名空间</span><br><span class="line">④ Service - 服务</span><br><span class="line">⑤ Deployment – 无状态pod集合</span><br><span class="line">⑥ StatefulSet – 有状态pod集合</span><br><span class="line">⑦ DaemonSet – 守护进程pod集合(每个node上都会运行pod)</span><br><span class="line">⑧ Volume – 持久化存储卷</span><br><span class="line">⑨ PersistentVolume – 持久化存储卷声明</span><br><span class="line">⑩ Ingress – 访问权(端口转发&amp;负载均衡)</span><br><span class="line"></span><br><span class="line">与资源对象交互方式:</span><br><span class="line">kubectl get pods -o wide --all-namespaces</span><br><span class="line">kubectl get svc -o wide --all-namespaces</span><br><span class="line">kubectl get pods -n default</span><br><span class="line">kubectl apply -f nginx.yml</span><br><span class="line"></span><br><span class="line">定义对象:YAML文件，yaml中常用的项:</span><br><span class="line">apiVersion</span><br><span class="line">kind</span><br><span class="line">metadata</span><br><span class="line">spec</span><br><span class="line"></span><br><span class="line">更多YAML资源定义示例参考:</span><br><span class="line">https://kubernetes.io/docs/concepts/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 统一时区和时间信息</span><br><span class="line">timedatectl set-local-rtc 1 </span><br><span class="line">timedatectl set-timezone Asia/Shanghai </span><br><span class="line">timedatectl status </span><br><span class="line"></span><br><span class="line"># 修改主机名</span><br><span class="line"># 找到preserve_hostname: false 改为 preserve_hostname: true</span><br><span class="line">sudo vim /etc/cloud/cloud.cfg</span><br><span class="line"></span><br><span class="line">#修改主机名(永久)</span><br><span class="line">sudo vim /etc/hostname  # 修改主机名</span><br><span class="line">sudo vim /etc/hosts  # 定义hosts文件</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">ufw disable</span><br><span class="line"></span><br><span class="line"># 关闭selinux</span><br><span class="line">sudo setenforce 0  # 临时设置， 0代表permissive 1代表enforcing</span><br><span class="line"> </span><br><span class="line"># 永久禁用</span><br><span class="line">cat /etc/selinux/config &lt;&lt;EOF</span><br><span class="line">SELINUX=permissive  </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="Kubernetes集群部署-单主集群"><a href="#Kubernetes集群部署-单主集群" class="headerlink" title="Kubernetes集群部署[单主集群]"></a>Kubernetes集群部署[单主集群]</h3><blockquote>
<p>手工部署Kubernetes是一个很艰巨的活，Kubernetes包含众多组件，你需要了解网络配置、Docker的安装与使用、镜像仓库的构建、角色证书的创建、Kubernetes的基本原理和构成、Kubernetes应用程序的yaml文件编写等。</p>
</blockquote>
<blockquote>
<p>Kubernetes提供了一种自动化部署的工具: kubeadm。 通过该工具能够通过几条简单的命令和配置完成环境的搭建。<br>Google将部署K8S所需的组件都封装成Docker镜像，kubeadm通过集成的YAML文件服务化运行这些镜像从而完成组件间的部署与连接。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ⑴ 系统环境准备(关闭防火墙、关闭SWAP需在每台机器上执行)</span></span><br><span class="line">Master Ubuntu 18.04 192.168.31.111</span><br><span class="line">Node01 Ubuntu 18.04 192.168.31.112</span><br><span class="line">Node02 Ubuntu 18.04 192.168.31.113</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭SWAP</span></span><br><span class="line">swapoff -a ; sed -i <span class="string">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab</span><br><span class="line">vim /etc/fstab fstab <span class="comment"># 注释带有&quot;swap&quot;字样的行并重新启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑵ 安装Docker(需在每台机器上执行)</span></span><br><span class="line">FYI: https://docs.docker.com/install/linux/docker-ce/ubuntu/</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-io</span></span><br><span class="line">apt install -y docker docker.io</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># docker-ce</span></span><br><span class="line">① sudo apt-get update</span><br><span class="line">② sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">③ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">④ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">⑤ sudo apt-get update</span><br><span class="line">⑥ sudo apt-get install docker-ce</span><br><span class="line">⑦ 验证docker是否安装成功: docker version</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑶ 拉取K8S组件镜像并重新Tag(需在每台机器上执行)</span></span><br><span class="line">方式一： kubeadm使用默认image-repository初始化</span><br><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd:3.3.10</span><br><span class="line">docker pull coredns/coredns:1.3.1</span><br><span class="line">docker pull rancher/coreos-flannel:v0.10.0-amd64</span><br><span class="line">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker pull mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-proxy:v1.14.1 k8s.gcr.io/kube-proxy:v1.14.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-scheduler:v1.14.1 k8s.gcr.io/kube-scheduler:v1.14.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-apiserver:v1.14.1 k8s.gcr.io/kube-apiserver:v1.14.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-controller-manager:v1.14.1 k8s.gcr.io/kube-controller-manager:v1.14.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/etcd:3.3.10 k8s.gcr.io/etcd:3.3.10</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag docker.io/coredns/coredns:1.3.1  k8s.gcr.io/coredns:1.3.1</span><br><span class="line">docker tag rancher/coreos-flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/defaultbackend-amd64:1.5 k8s.gcr.io/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line">docker rmi mirrorgooglecontainers/kube-apiserver:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-controller-manager:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-scheduler:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1.14.1</span><br><span class="line">docker rmi mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker rmi mirrorgooglecontainers/etcd:3.3.10</span><br><span class="line">docker rmi coredns/coredns:1.3.1</span><br><span class="line">docker rmi rancher/coreos-flannel:v0.10.0-amd64</span><br><span class="line">docker rmi mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker rmi mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line">方式二： kubeadm使用mirrorgooglecontainers仓库（--image-repository=mirrorgooglecontainers）初始化</span><br><span class="line">docker pull coredns/coredns:1.3.1</span><br><span class="line">docker pull rancher/coreos-flannel:v0.10.0-amd64</span><br><span class="line">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker pull mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line">docker tag docker.io/coredns/coredns:1.3.1  mirrorgooglecontainers/coredns:1.3.1</span><br><span class="line">docker tag rancher/coreos-flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line">docker rmi coredns/coredns:1.3.1</span><br><span class="line">docker rmi rancher/coreos-flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑷ 安装kubeadm, kubelet and kubectl (需在每台机器上执行)</span></span><br><span class="line">FYI: https://kubernetes.io/docs/setup/independent/install-kubeadm/</span><br><span class="line"></span><br><span class="line">① apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">② curl -x <span class="string">&quot;http://127.0.0.1:8123&quot;</span> -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">③ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">deb https://apt.kubernetes.io/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">④ apt-get update</span><br><span class="line">⑤ apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">⑥ apt-mark hold kubelet kubeadm kubectl</span><br><span class="line">⑦ 验证是否安装成功，输出如下结果则表明安装成功</span><br><span class="line">kubectl version</span><br><span class="line">kubeadm version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⑸ 初始化集群、网络插件部署、节点加入集群</span></span><br><span class="line">FYI: https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;Master节点执行&gt; （使用polipo代理会出现问题）</span></span><br><span class="line">① kubeadm init --pod-network-cidr=173.18.0.0/16 --kubernetes-version=v1.14.1 --apiserver-advertise-address=192.168.31.111 --image-repository=mirrorgooglecontainers</span><br><span class="line"><span class="comment"># 出现kubelet报错（cni相关的错误）执行更新</span></span><br><span class="line">apt-get update &amp; apt-get upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存该条命令执行后输出的结果，用于Node节点加入集群</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.31.111:6443 --token 8mkpzy.rvymuw1brst7t7gp \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3172e30a39357a38f1f9a5ec87c8f36e6b758864b2ea2779ebe935546e780e33 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：如果忘记了，重新获取的命令</span></span><br><span class="line"><span class="comment"># kubeadm token create --print-join-command --ttl 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成CA授权码</span></span><br><span class="line"><span class="comment"># openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#x27;s/^.* //&#x27;</span></span><br><span class="line"></span><br><span class="line">② kubectl 配置</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">   </span><br><span class="line">③ 安装flannel</span><br><span class="line"><span class="comment"># mkdir -p /data/k8s/ &amp;&amp; cd /data/k8s/ &amp;&amp; curl https://raw.githubusercontent.com/coreos/flannel/v0.11.0/Documentation/kube-flannel.yml -O kube-flannel.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最新版kube-flannel.yml</span></span><br><span class="line">curl https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml -O kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改Network为173.18.0.0/16 与 pod-network-cidr=173.18.0.0/16一致</span></span><br><span class="line">vim kube-flannel.yml</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;每个Node节点执行&gt;</span></span><br><span class="line">④ kubeadm <span class="built_in">join</span> 192.168.31.111:6443 --token 8mkpzy.rvymuw1brst7t7gp \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:3172e30a39357a38f1f9a5ec87c8f36e6b758864b2ea2779ebe935546e780e33 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 至此K8S集群已经搭建完成。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下POD不会创建在Master节点上，如果出于资源利用的考虑，可以通过以下命令使POD能够创建在Master节点上:</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试示例</span></span><br><span class="line">kubectl run nginx --image=nginx  --replicas=3</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl expose deployment nginx --port=88  --target-port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">kubectl get svc nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置dashboard"><a href="#配置dashboard" class="headerlink" title="配置dashboard"></a>配置dashboard</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ⑹ 部署Kubernetes DashBoard</span><br><span class="line">FYI: https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</span><br><span class="line"></span><br><span class="line">① curl https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml -O kubernetes-dashboard.yaml</span><br><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">② kubectl proxy --address=&#x27;0.0.0.0&#x27; --port=8001 --accept-hosts=&#x27;^*$&#x27; &amp;</span><br><span class="line">③ 访问 http://MASTERIP:：/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</span><br><span class="line"></span><br><span class="line"># 说明: 也可以NodePort来访问</span><br><span class="line"># Google默认提供的dashboard YAML配置中服务(Service)没有使用NodePort这种类型，为了便于记忆访问URL，将YAML配置修改如下:</span><br><span class="line"># ------------------- Dashboard Service ------------------- #</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 32222</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line">访问 http://MASTERIP:32222/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="部署Nginx-Ingress-服务发现与负载均衡"><a href="#部署Nginx-Ingress-服务发现与负载均衡" class="headerlink" title="部署Nginx Ingress(服务发现与负载均衡)"></a>部署Nginx Ingress(服务发现与负载均衡)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">⑺ 部署Nginx Ingress(服务发现与负载均衡)</span><br><span class="line">fyi: https://kubernetes.github.io/ingress-nginx/deploy/</span><br><span class="line"></span><br><span class="line">① curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml -O mandatory.yaml</span><br><span class="line">kubectl apply -f mandatory.yaml</span><br><span class="line"></span><br><span class="line">② curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/baremetal/service-nodeport.yaml -O service-nodeport.yaml</span><br><span class="line">kubectl apply -f service-nodeport.yaml</span><br><span class="line"></span><br><span class="line">③ 验证Ingress</span><br><span class="line">创建右边Ingress对象后，</span><br><span class="line">即可通过http://edtech.h3c.com/sso 来访问</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://rainbowrise.github.io/images/ydnote/2019/k8s-1.jpg" alt="Ingress的yaml修改"></p>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl -f -u kubelet</span><br></pre></td></tr></table></figure>

<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 问题：</span><br><span class="line"># kubectl get nodes</span><br><span class="line">Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of &quot;crypto/rsa: verification error&quot; while trying to verify candidate authority certificate &quot;kubernetes&quot;)</span><br><span class="line"></span><br><span class="line"># 解决：</span><br><span class="line">执行脚本</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 问题：</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">NAME        STATUS     ROLES    AGE   VERSION</span><br><span class="line">ubuntu-m    NotReady   master   55m   v1.14.1</span><br><span class="line"></span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-f5d4745f9-nlnzz            0/1     Pending   0          58m</span><br><span class="line">kube-system   coredns-f5d4745f9-qk24m            0/1     Pending   0          58m</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决：</span></span><br><span class="line"><span class="comment"># 可以看到节点还没有Ready，dns的两个pod也没不正常，还需要安装网络配置。</span></span><br><span class="line"><span class="comment"># flannel下载地址 https://github.com/coreos/flannel/releases</span></span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.11.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#flannel 默认会使用主机的第一张网卡，如果你有多张网卡，需要通过配置单独指定。修改 kube-flannel.yml 中的以下部分</span></span><br><span class="line">containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.11.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=enp0s3   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="dashboard登录"><a href="#dashboard登录" class="headerlink" title="dashboard登录"></a>dashboard登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立账号与授权</span></span><br><span class="line"><span class="comment"># 参考： https://github.com/kubernetes/dashboard/wiki/Creating-sample-user</span></span><br><span class="line"><span class="comment"># 建立dashboard-rbac.yaml文件， 内容如下：</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行安装(所建立的账号为admin-user)：</span></span><br><span class="line">kubectl create -f dashboard-rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看账号是否成功建立：</span></span><br><span class="line">kubectl get sa --all-namespaces | grep admin-user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得登录授权码（获得登录授权的Token）</span></span><br><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># token内容拷贝下来，然后进入Web界面的token，复制到Enter Token，点击&quot;登录&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要删除，需要将sa和clusterrolebindings里的账号同时删除。</span></span><br><span class="line">kubectl delete -f dashboard-rbac.yaml</span><br><span class="line"><span class="comment"># 或执行下面指令</span></span><br><span class="line">kubectl delete sa/admin-user --namespace kube-system</span><br><span class="line">kubectl delete clusterrolebindings/admin-user --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若显示跳过按钮</span></span><br><span class="line"><span class="comment"># 在kubernetes-dashboard.yaml的Deployment中添加enable-skip-login=true， 如下</span></span><br><span class="line">args:</span><br><span class="line">  - --auto-generate-certificates</span><br><span class="line">  - --enable-skip-login=<span class="literal">true</span></span><br><span class="line">  - --disable-settings-authorizer=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 参数参考：https://github.com/kubernetes/dashboard/wiki/Dashboard-arguments</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错namespaces is forbidden:xxx</span></span><br><span class="line"><span class="comment"># 需要创建kubernetes-dashboard账号， yaml文件如下：</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://rainbowrise.github.io/images/ydnote/2019/k8s-2.png"></p>
<h4 id="kubernete-1-5-2"><a href="#kubernete-1-5-2" class="headerlink" title="kubernete 1.5.2"></a>kubernete 1.5.2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y kubelet=1.5.2 kubeadm kubectl=1.5.2</span><br><span class="line"></span><br><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1.15.2</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1.15.2</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1.15.2</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.15.2</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd:3.3.17</span><br><span class="line">docker pull coredns/coredns:1.6.4</span><br><span class="line">docker pull rancher/coreos-flannel:v0.11.0</span><br><span class="line">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker pull mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-proxy:v1.15.2 k8s.gcr.io/kube-proxy:v1.15.2</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-scheduler:v1.15.2 k8s.gcr.io/kube-scheduler:v1.15.2</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-apiserver:v1.15.2 k8s.gcr.io/kube-apiserver:v1.15.2</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-controller-manager:v1.15.2 k8s.gcr.io/kube-controller-manager:v1.15.2</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/etcd:3.3.17 k8s.gcr.io/etcd:3.3.17</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag docker.io/coredns/coredns:1.6.4  k8s.gcr.io/coredns:1.6.4</span><br><span class="line">docker tag rancher/coreos-flannel:v0.11.0 quay.io/coreos/flannel:v0.11.0</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/defaultbackend-amd64:1.5 k8s.gcr.io/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line">docker rmi mirrorgooglecontainers/kube-apiserver:v1.15.2</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-controller-manager:v1.15.2</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-scheduler:v1.15.2</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1.15.2</span><br><span class="line">docker rmi mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker rmi mirrorgooglecontainers/etcd:3.3.17</span><br><span class="line">docker rmi coredns/coredns:1.6.4</span><br><span class="line">docker rmi rancher/coreos-flannel:v0.11.0</span><br><span class="line">docker rmi mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker rmi mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="kubernete-v1-6-0"><a href="#kubernete-v1-6-0" class="headerlink" title="kubernete v1.6.0"></a>kubernete v1.6.0</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y kubelet=1.6.0 kubeadm kubectl=1.6.0</span><br><span class="line"></span><br><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1.16.0-rc.2</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1.16.0-beta.0</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1.16.0-beta.1</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1.16.0-rc.2</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd:3.3.17</span><br><span class="line">docker pull coredns/coredns:1.6.4</span><br><span class="line">docker pull rancher/coreos-flannel:v0.11.0</span><br><span class="line">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker pull mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-proxy:v1.16.0-rc.2 k8s.gcr.io/kube-proxy:v1.16.0-rc.2</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-scheduler:v1.16.0-beta.1 k8s.gcr.io/kube-scheduler:v1.16.0-beta.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-apiserver:v1.16.0-rc.2 k8s.gcr.io/kube-apiserver:v1.16.0-rc.2</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kube-controller-manager:v1.16.0-beta.0 k8s.gcr.io/kube-controller-manager:v1.16.0-beta.0</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/etcd:3.3.17 k8s.gcr.io/etcd:3.3.17</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag docker.io/coredns/coredns:1.6.4  k8s.gcr.io/coredns:1.6.4</span><br><span class="line">docker tag rancher/coreos-flannel:v0.11.0 quay.io/coreos/flannel:v0.11.0</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker tag docker.io/mirrorgooglecontainers/defaultbackend-amd64:1.5 k8s.gcr.io/defaultbackend-amd64:1.5</span><br><span class="line"></span><br><span class="line">docker rmi mirrorgooglecontainers/kube-apiserver:v1.16.0-rc.2</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-controller-manager:v1.16.0-beta.0</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-scheduler:v1.16.0-beta.1</span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1.16.0-rc.2</span><br><span class="line">docker rmi mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker rmi mirrorgooglecontainers/etcd:3.3.17</span><br><span class="line">docker rmi coredns/coredns:1.6.4</span><br><span class="line">docker rmi rancher/coreos-flannel:v0.11.0</span><br><span class="line">docker rmi mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="line">docker rmi mirrorgooglecontainers/defaultbackend-amd64:1.5</span><br><span class="line"></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Lantern</title>
    <url>/2018/11/23/lantern/</url>
    <content><![CDATA[<h3 id="蓝灯（lantern），-我的邀请码：LJVPVX"><a href="#蓝灯（lantern），-我的邀请码：LJVPVX" class="headerlink" title="蓝灯（lantern）， 我的邀请码：LJVPVX"></a>蓝灯（lantern）， 我的邀请码：LJVPVX</h3><ul>
<li><p>总的来说还算不错的VPN，简单方便。当然也有其他比较好用的VPN，如SSR，SSR可以免费试用，也可以自己搭建服务器。SSR搭建教程可以参考：<a href="https://www.youtube.com/watch?v=h0sQGvuWcTg">https://www.youtube.com/watch?v=h0sQGvuWcTg</a> （需要翻墙观看）。</p>
</li>
<li><p>言归正传，购买蓝灯或者续费需要邀请码。蓝灯邀请码，使用者和邀请码拥有者都会多1个月或者3个月的期限（前提你是蓝灯的专业版使用者，这需要购买）。购买时使用邀请码，购买者和拥有者都可以多获得1个月或者3个月的免费时长。这里附上我的邀请码：LJVPVX 。蓝灯下载下载地址： <a href="https://github.com/getlantern/forum">https://github.com/getlantern/forum</a></p>
</li>
<li><p>需要说明的是一个账号最多能授权三个设备，蓝灯支持Android手机设备和PC设备，因此安卓手机可以使用蓝灯，但是目前IOS尚未推出蓝灯客户端。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>Lantern</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 查看SOCKET使用情况</title>
    <url>/2020/10/01/linux%20%E6%9F%A5%E7%9C%8BSOCKET%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h4 id="linux-查看SOCKET使用情况"><a href="#linux-查看SOCKET使用情况" class="headerlink" title="linux 查看SOCKET使用情况"></a>linux 查看SOCKET使用情况</h4><p>Linux系统中，查看SOCKET使用情况可以使用ss命令。</p>
<ol>
<li><p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss ［参数］</span><br><span class="line">ss ［参数］ ［过滤］</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令功能：</p>
</li>
</ol>
<blockquote>
<p>ss（Socket Statistics的缩写）命令可以用来获取socket统计信息，此命令输出的结果类似于netstat输出的内容，但它能显示更多更详细的TCP连接状态的信息，且比 netstat更快速高效。它使用了TCP协议栈中tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得ss命令快捷高效。在没有tcp_diag，ss也可以正常运行。</p>
</blockquote>
<ol start="3">
<li>命令参数：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h， --help 帮助信息</span><br><span class="line">-V， --version 程序版本信息</span><br><span class="line">-n， --numeric 不解析服务名称</span><br><span class="line">-r， --resolve 解析主机名</span><br><span class="line">-a， --all 显示所有套接字（sockets）</span><br><span class="line">-l， --listening 显示监听状态的套接字（sockets）</span><br><span class="line">-o， --options 显示计时器信息</span><br><span class="line">-e， --extended 显示详细的套接字（sockets）信息</span><br><span class="line">-m， --memory 显示套接字（socket）的内存使用情况</span><br><span class="line">-p， --processes 显示使用套接字（socket）的进程</span><br><span class="line">-i， --info 显示 TCP内部信息</span><br><span class="line">-s， --summary 显示套接字（socket）使用概况</span><br><span class="line">-4， --ipv4 仅显示IPv4的套接字（sockets）</span><br><span class="line">-6， --ipv6 仅显示IPv6的套接字（sockets）</span><br><span class="line">-0， --packet 显示 PACKET 套接字（socket）</span><br><span class="line">-t， --tcp 仅显示 TCP套接字（sockets）</span><br><span class="line">-u， --udp 仅显示 UCP套接字（sockets）</span><br><span class="line">-d， --dccp 仅显示 DCCP套接字（sockets）</span><br><span class="line">-w， --raw 仅显示 RAW套接字（sockets）</span><br><span class="line">-x， --unix 仅显示 Unix套接字（sockets）</span><br><span class="line">-f， --family=FAMILY 显示 FAMILY类型的套接字（sockets），FAMILY可选，支持 unix， inet， inet6， link， netlink</span><br><span class="line">-A， --query=QUERY， --socket=QUERY</span><br><span class="line">QUERY ：= &#123;all|inet|tcp|udp|raw|unix|packet|netlink&#125;［，QUERY］</span><br><span class="line">-D， --diag=FILE 将原始TCP套接字（sockets）信息转储到文件</span><br><span class="line">-F， --filter=FILE 从文件中都去过滤器信息</span><br><span class="line">FILTER ：= ［ state TCP-STATE ］ ［ EXPRESSION ］</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用指令</title>
    <url>/2020/10/01/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="linux常用指令"><a href="#linux常用指令" class="headerlink" title="linux常用指令"></a>linux常用指令</h3><blockquote>
<p>参考：<a href="https://www.runoob.com/linux/linux-comm-bzip2.html">https://www.runoob.com/linux/linux-comm-bzip2.html</a></p>
</blockquote>
<h4 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> &lt;<span class="built_in">dir</span>&gt;  <span class="comment"># 建立目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p &lt;dir1&gt;/&lt;dir2&gt;/.../&lt;dirn&gt;  <span class="comment"># 建立多层目录 </span></span><br><span class="line"><span class="built_in">rmdir</span> document_name  <span class="comment"># 删除空目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;path&gt;  <span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">pwd</span>  <span class="comment"># 查看所在目录</span></span><br><span class="line"><span class="built_in">du</span> -sh  <span class="comment"># 查看当前目录大小</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> &lt;file_name&gt;  <span class="comment"># 新建空文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf &lt;file_or_dir&gt;  <span class="comment"># 强制删除文件或目录，包含子目录及内容，慎用</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment"># 显示目录文件列表(-a：增加显示隐含目录；-l：显示详细信息；r表示反向排序，t表示按时间排序)</span></span><br><span class="line">more &lt;file&gt;  <span class="comment"># 查看文档</span></span><br><span class="line">less &lt;file&gt;  <span class="comment"># 查看文档</span></span><br><span class="line"><span class="built_in">head</span> -n &lt;file&gt;  <span class="comment"># 查看文档，查看一个文件的最前n行</span></span><br><span class="line"><span class="built_in">tail</span> -n &lt;file&gt;  <span class="comment"># 查看文档，查看一个文件的最后n行</span></span><br><span class="line"><span class="built_in">cat</span> &lt;file&gt;  <span class="comment"># 查看文档，从第一个字节开始正向查看文件的内容</span></span><br><span class="line"><span class="built_in">tac</span> &lt;file&gt;  <span class="comment"># 查看文档，从最后一行开始反向查看一个文件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> &lt;org_file&gt; &lt;file_target&gt; <span class="comment"># 复制文件(-r：包含目录，-a：所有文件)</span></span><br></pre></td></tr></table></figure>

<h4 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 建立hard链接</span><br><span class="line">ln &lt;org_file&gt; &lt;link_file&gt;  # 建立hard链接(-d：创建目录链接);</span><br><span class="line"></span><br><span class="line"># 建立符号链接</span><br><span class="line">ln -s &lt;org_file&gt; &lt;link_file&gt;  # 建立符号链接</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep str /tmp/test  在文件 &#x27;/tmp/test&#x27; 中查找 &quot;str&quot;</span><br><span class="line">grep ^str /tmp/test 在文件 &#x27;/tmp/test&#x27; 中查找以 &quot;str&quot; 开始的行</span><br><span class="line">grep [0-9] /tmp/test 查找 &#x27;/tmp/test&#x27; 文件中所有包含数字的行</span><br><span class="line">grep str -r /tmp/*  在目录 &#x27;/tmp&#x27; 及其子目录中查找 &quot;str&quot;</span><br><span class="line">diff file1 file2 找出两个文件的不同处</span><br><span class="line">sdiff file1 file2 以对比的方式显示两个文件的不同</span><br></pre></td></tr></table></figure>

<h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件:"></a>查找文件:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -rn &lt;key_word&gt; &lt;file_path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找文件：(1)find (2)locate 命令名</span></span><br><span class="line">find / -name file  <span class="comment"># 从 &#x27;/&#x27; 开始进入根文件系统查找文件和目录</span></span><br><span class="line">find / -user user  <span class="comment"># 查找属于用户 &#x27;user&#x27; 的文件和目录</span></span><br><span class="line">find /usr/bin -<span class="built_in">type</span> f -atime +100 <span class="comment"># 查找在过去100天内未被使用过的执行文件</span></span><br><span class="line">find /usr/bin -<span class="built_in">type</span> f -mtime -10 <span class="comment"># 查找在10天内被创建或者修改过的文件</span></span><br><span class="line">find -name <span class="string">&#x27;*.[ch]&#x27;</span> | xargs grep -E <span class="string">&#x27;expr&#x27;</span> <span class="comment"># 在当前目录及其子目录所有.c和.h文件中查找 &#x27;expr&#x27;</span></span><br><span class="line">find -<span class="built_in">type</span> f -print0 | xargs -r0 grep -F <span class="string">&#x27;expr&#x27;</span> <span class="comment"># 在当前目录及其子目录的常规文件中查找 &#x27;expr&#x27;</span></span><br><span class="line">find -maxdepth 1 -<span class="built_in">type</span> f | xargs grep -F <span class="string">&#x27;expr&#x27;</span> <span class="comment"># 在当前目录中查找 &#x27;expr&#x27;</span></span><br><span class="line">find / -<span class="built_in">type</span> f -size +1024000k -<span class="built_in">exec</span> <span class="built_in">du</span> -h &#123;&#125; \  <span class="comment"># 全盘查找大于1G的文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -size +10000k -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \; | awk <span class="string">&#x27;&#123; print $8 &quot;: &quot; $5 &#125;&#x27;</span>  <span class="comment"># 查找当前目录下大于10MB的文件</span></span><br><span class="line"></span><br><span class="line">locate \*.ps <span class="comment"># 寻找以 &#x27;.ps&#x27; 结尾的文件，先运行 &#x27;updatedb&#x27; 命令</span></span><br></pre></td></tr></table></figure>
<h4 id="压缩解压类"><a href="#压缩解压类" class="headerlink" title="压缩解压类"></a>压缩解压类</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar压缩</span></span><br><span class="line">tar -cvf archive.tar file  <span class="comment"># 把file打包成 archive.tar</span></span><br><span class="line">tar -cvf archive.tar file <span class="built_in">dir</span> <span class="comment"># 把 file、dir 打包成 archive.tar</span></span><br><span class="line">tar -tf archive.tar  <span class="comment"># 显示包中的内容</span></span><br><span class="line">tar -xvf archive.tar <span class="comment"># 释放包</span></span><br><span class="line">tar -xvf archive.tar -C /tmp <span class="comment"># 把压缩包释放到/tmp目录下</span></span><br><span class="line"></span><br><span class="line">tar -zcvf archive.tar.gz file  <span class="comment"># 把file打包成 archive.tar.gz</span></span><br><span class="line">tar -zcvf archive.tar.gz file <span class="built_in">dir</span>  <span class="comment"># 把file、dir打包成 archive.tar.gz</span></span><br><span class="line">tar -tf archive.tar.gz  <span class="comment"># 显示包中的内容</span></span><br><span class="line">tar -zxvf archive.tar.gz  <span class="comment"># 释放包</span></span><br><span class="line">tar -zxvf archive.tar.gz -C /tmp  <span class="comment"># 把压缩包释放到/tmp目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bzip2压缩</span></span><br><span class="line">bzip2 file  <span class="comment"># 压缩 file</span></span><br><span class="line">bunzip2 archive.bz2  <span class="comment"># 解压 archive.bz2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip压缩</span></span><br><span class="line">gzip file  <span class="comment"># 压缩 file</span></span><br><span class="line">gzip -9 file  <span class="comment"># 最大程度压缩 file</span></span><br><span class="line">gunzip file.gz  <span class="comment"># 解压 file.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zip压缩</span></span><br><span class="line">zip archive.zip file  <span class="comment"># 创建zip格式的压缩包</span></span><br><span class="line">zip -r archive.zip file <span class="built_in">dir</span>  <span class="comment"># 把文件和目录压缩成zip格式的压缩包</span></span><br><span class="line">unzip archive.zip  <span class="comment"># 解压zip格式的压缩包到当前目录</span></span><br><span class="line">unzip archive.zip -d /tmp/  <span class="comment"># 解压zip格式的压缩包到 /tmp 目录</span></span><br><span class="line">unzip -o archive.zip -d /tmp/  <span class="comment"># 覆盖不提示,解压zip格式的压缩包到 /tmp 目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tar命令：tar [-cxtzjvfpPN] 文件与目录</span></span><br><span class="line"><span class="comment"># tar命令参数：</span></span><br><span class="line"><span class="comment">#  -c：建立一个压缩文件的参数指令</span></span><br><span class="line"><span class="comment">#  -x：解开一个压缩文件的参数指令</span></span><br><span class="line"><span class="comment">#  -t：查看 tarfile 里面的文件</span></span><br><span class="line"><span class="comment">#  -z：是否同时具有 gzip 的属性，亦即是否需要用 gzip 压缩</span></span><br><span class="line"><span class="comment">#  -j：是否同时具有 bzip2 的属性?亦即是否需要用 bzip2 压缩</span></span><br><span class="line"><span class="comment">#  -v：压缩的过程中显示文件</span></span><br><span class="line"><span class="comment">#  -f：使用档名，在 f 之后要立即接档名。</span></span><br><span class="line"><span class="comment">#  -p：使用原文件的原来属性(属性不会依据使用者而变)</span></span><br><span class="line"><span class="comment">#  -P：可以使用绝对路径来压缩</span></span><br><span class="line"><span class="comment">#  -N：比后面接的日期(yyyy/mm/dd)，还要新的才会被打包进新建的文件中</span></span><br><span class="line"><span class="comment">#  –exclude FILE：在压缩的过程中，不要将 FILE 打包</span></span><br></pre></td></tr></table></figure>

<h4 id="yum-软件工具"><a href="#yum-软件工具" class="headerlink" title="yum 软件工具"></a>yum 软件工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install [package]  <span class="comment"># 下载并安装rpm包</span></span><br><span class="line">yum localinstall [package.rpm]  <span class="comment"># 安装rpm包，使用自己的软件仓库解决所有依赖关系</span></span><br><span class="line">yum -y update  <span class="comment"># 更新当前系统中安装的所有rpm包</span></span><br><span class="line">yum update [package]  <span class="comment"># 更新一个rpm包</span></span><br><span class="line">yum remove [package]  <span class="comment"># 删除一个rpm包</span></span><br><span class="line">yum list  <span class="comment"># 列出当前系统中安装的所有包</span></span><br><span class="line">yum search [package]  <span class="comment"># 在rpm仓库中搜寻软件包</span></span><br><span class="line">yum clean [package]  <span class="comment"># 清除缓存目录（/var/cache/yum）下的软件包</span></span><br><span class="line">yum clean headers  <span class="comment"># 删除所有头文件</span></span><br><span class="line">yum clean all  <span class="comment"># 删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure>
<h3 id="apt-软件工"><a href="#apt-软件工" class="headerlink" title="apt 软件工"></a>apt 软件工</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install package_name  <span class="comment"># 安装/更新一个 deb 包 </span></span><br><span class="line">apt-cdrom install package_name  <span class="comment"># 从光盘安装/更新一个 deb 包 </span></span><br><span class="line">apt-get update  <span class="comment"># 升级列表中的软件包 </span></span><br><span class="line">apt-get upgrade  <span class="comment"># 升级所有已安装的软件 </span></span><br><span class="line">apt-get remove package_name  <span class="comment"># 从系统删除一个deb包 </span></span><br><span class="line">apt-get check  <span class="comment"># 确认依赖的软件仓库正确 </span></span><br><span class="line">apt-get clean  <span class="comment"># 从下载的软件包中清理缓存 </span></span><br><span class="line">apt-cache search searched-package  <span class="comment"># 返回包含所要搜索字符串的软件包名称</span></span><br></pre></td></tr></table></figure>

<h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0   <span class="comment"># 显示一个以太网卡的配置</span></span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0  <span class="comment"># 配置网卡的IP地址</span></span><br><span class="line">ifdown eth0  <span class="comment"># 禁用 &#x27;eth0&#x27; 网络设备</span></span><br><span class="line">ifup eth0  <span class="comment"># 启用 &#x27;eth0&#x27; 网络设备</span></span><br><span class="line">iwconfig eth1  <span class="comment"># 显示一个无线网卡的配置</span></span><br><span class="line">iwlist scan  <span class="comment"># 显示无线网络</span></span><br><span class="line">ip addr show  <span class="comment"># 显示网卡的IP地址</span></span><br></pre></td></tr></table></figure>

<h4 id="lsof指令"><a href="#lsof指令" class="headerlink" title="lsof指令"></a>lsof指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof  filename  <span class="comment"># 显示打开指定文件的所有进程</span></span><br><span class="line">lsof -a  <span class="comment"># 表示两个参数都必须满足时才显示结果</span></span><br><span class="line">lsof -c string  <span class="comment"># 显示COMMAND列中包含指定字符的进程所有打开的文件</span></span><br><span class="line">lsof -u username  <span class="comment"># 显示所属user进程打开的文件</span></span><br><span class="line">lsof -g gid  <span class="comment"># 显示归属gid的进程情况</span></span><br><span class="line">lsof +d /DIR/  <span class="comment"># 显示目录下被进程打开的文件</span></span><br><span class="line">lsof +D /DIR/  <span class="comment"># 同上，但是会搜索目录下的所有目录，时间相对较长</span></span><br><span class="line">lsof -d FD  <span class="comment"># 显示指定文件描述符的进程</span></span><br><span class="line">lsof -n  <span class="comment"># 不将IP转换为hostname，缺省是不加上-n参数</span></span><br><span class="line">lsof -i  <span class="comment"># 用以显示符合条件的进程情况</span></span><br><span class="line">lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</span><br><span class="line">    46 --&gt; IPv4 or IPv6</span><br><span class="line">    protocol --&gt; TCP or UDP</span><br><span class="line">    hostname --&gt; Internet host name</span><br><span class="line">    hostaddr --&gt; IPv4地址</span><br><span class="line">    service --&gt; /etc/service中的 service name</span><br><span class="line">    port --&gt; 端口号</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su -  # 切换到root权限（与su有区别）</span><br><span class="line">shutdown -h now  # 关机</span><br><span class="line">shutdown -r now  # 重启</span><br><span class="line">top  # 罗列使用CPU资源最多的linux任务（输入q退出）</span><br><span class="line">pstree  # 以树状图显示程序</span><br><span class="line">man ping  # 查看参考手册（例如ping 命令）</span><br><span class="line">passwd  # 修改密码</span><br><span class="line">df -h  # 显示磁盘的使用情况</span><br><span class="line">du -h # 文件或目录的大小</span><br><span class="line">cal -3  # 显示前一个月，当前月以及下一个月的月历</span><br><span class="line">cal 10 1988  # 显示指定月，年的月历</span><br><span class="line">netstat –apn | grep &lt;port&gt;  # 查询某端口是否被占用</span><br></pre></td></tr></table></figure>
<h4 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小企鹅输入法：fcitx </span></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt install -y fcitx-table-wbpy</span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install -y fcitx</span><br></pre></td></tr></table></figure>

<h4 id="查看SELinux状态"><a href="#查看SELinux状态" class="headerlink" title="查看SELinux状态"></a>查看SELinux状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看SELinux状态</span><br><span class="line">/usr/sbin/sestatus -v # 如果SELinux status参数为enabled，即为开启状态</span><br><span class="line"># 或</span><br><span class="line">getenforce # 也可以用这个命令检查</span><br><span class="line"></span><br><span class="line"># 关闭SELinux</span><br><span class="line"># 临时关闭（不用重启机器）：</span><br><span class="line">setenforce 0 # 设置SELinux 成为 permissive模式</span><br><span class="line"># setenforce 1  # 设置SELinux 成为 enforcing模式</span><br><span class="line"></span><br><span class="line"># 修改配置文件需要重启机器：</span><br><span class="line"># 修改/etc/selinux/config 文件</span><br><span class="line">SELINUX=disabled  # 将 SELINUX=enforcing 改为 SELINUX=disabled</span><br><span class="line"></span><br><span class="line"># SELinux有三种模式：enforcing、permissive、 disable.</span><br><span class="line"># enforcing模式就是应用SELinux所设定的Policy, 所有违反Policy的规则(Rules)都会被SELinux拒绝</span><br><span class="line"># permissive和enforcing的区别就在于它还是会遵循SELinux的Policy,但是对于违反规则的操作只会予以记录而并不会拒绝操作</span><br><span class="line"># disable 顾名思义就是完全禁用SELinux</span><br></pre></td></tr></table></figure>

<h4 id="更改文件夹或文件属性"><a href="#更改文件夹或文件属性" class="headerlink" title="更改文件夹或文件属性"></a>更改文件夹或文件属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更改所属：</span><br><span class="line">chown -R www:www  /home/test/</span><br><span class="line"># 更改权限：</span><br><span class="line">chmod -R 755 /home/test # 更改test以及其子目录权限（-R递归）</span><br></pre></td></tr></table></figure>

<h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -Rf /home/user/* /root/temp/ # 将 /home/user目录下的所有东西拷到/root/temp/下而不拷贝user目录本身。</span><br><span class="line">cp -Rf /home/user /root/temp/ # 将 /home/user目录下的所有东西拷到/root/temp/下包括拷贝user目录本身。</span><br></pre></td></tr></table></figure>

<h4 id="查看线程"><a href="#查看线程" class="headerlink" title="查看线程"></a>查看线程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep &lt;app&gt;</span><br><span class="line">pstack &lt;线程号&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Linux-工具（神器）"><a href="#Linux-工具（神器）" class="headerlink" title="Linux 工具（神器）"></a>Linux 工具（神器）</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>ag</td>
<td>比grep、ack更快的递归搜索文件内容。</td>
<td><code>ag &quot;aaa bbb&quot;</code></td>
</tr>
<tr>
<td>tig</td>
<td>字符模式下交互查看git项目，可以替代git命令。</td>
<td><code>tig init</code></td>
</tr>
<tr>
<td>mycli</td>
<td>mysql客户端，支持语法高亮和命令补全，可替代mysql命令。</td>
<td><code>mycli -h127.0.0.1 -uroot -p</code></td>
</tr>
<tr>
<td>jq</td>
<td>json文件处理以及格式化显示，支持高亮，可以替换python -m json.tool。</td>
<td></td>
</tr>
<tr>
<td>shellcheck</td>
<td>shell脚本静态检查工具，能够识别语法错误以及不规范的写法。</td>
<td><code>shellcheck demo.sh</code></td>
</tr>
<tr>
<td>fzf</td>
<td>命令行下模糊搜索工具，能够交互式智能搜索并选取文件或者内容，配合终端ctrl-r历史命令搜索简直完美。</td>
<td></td>
</tr>
<tr>
<td>PathPicker(fpp)</td>
<td>在命令行输出中自动识别目录和文件，支持交互式，配合git非常有用。</td>
<td>`git diff HEAD~8 –stat</td>
</tr>
<tr>
<td>htop</td>
<td>提供更美观、更方便的进程监控工具，替代top命令。</td>
<td><code>htop</code></td>
</tr>
<tr>
<td>glances</td>
<td>更强大的 htop / top 代替者。</td>
<td><code>glances</code></td>
</tr>
<tr>
<td>axel</td>
<td>多线程下载工具，下载文件时可以替代curl、wget。</td>
<td><code>axel -n 20 http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1511.iso</code></td>
</tr>
<tr>
<td>sz/rz</td>
<td>交互式文件传输，在多重跳板机下传输文件非常好用，不用一级一级传输。</td>
<td></td>
</tr>
<tr>
<td>cloc</td>
<td>代码统计工具，能够统计代码的空行数、注释行、编程语言。</td>
<td></td>
</tr>
<tr>
<td>tmux</td>
<td>终端复用工具，替代screen、nohup。</td>
<td></td>
</tr>
<tr>
<td>script/scriptreplay</td>
<td>终端会话录制。</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j详细配置</title>
    <url>/2018/01/01/log4j%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="Slf4j简单日志输出"><a href="#Slf4j简单日志输出" class="headerlink" title="Slf4j简单日志输出"></a>Slf4j简单日志输出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLog</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(TestLog.class);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;This is debug message&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;This is info message&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;This is warn message&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;This is error message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Log4j配置详解"><a href="#Log4j配置详解" class="headerlink" title="Log4j配置详解"></a>Log4j配置详解</h3><blockquote>
<p>Log4J的配置文件(Configuration File) 就是用来设置记录器的级别、存放器和布局的，它可接key=value格式的设置或xml格式的设置信息。通过配置，可以创建出Log4J的运行环境。</p>
</blockquote>
<h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><blockquote>
<p>Log4J配置文件的基本格式如下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置根Logger</span><br><span class="line">log4j.rootLogger  =   [ level ]   ,  appenderName1 ,  appenderName2 ,  …</span><br><span class="line"> </span><br><span class="line">#配置日志信息输出目的地Appender</span><br><span class="line">log4j.appender.appenderName  =  fully.qualified.name.of.appender.class</span><br><span class="line">  log4j.appender.appenderName.option1  =  value1</span><br><span class="line">  …</span><br><span class="line">  log4j.appender.appenderName.optionN  =  valueN </span><br><span class="line"> </span><br><span class="line">#配置日志信息的格式（布局）</span><br><span class="line">log4j.appender.appenderName.layout  =  fully.qualified.name.of.layout.class</span><br><span class="line">  log4j.appender.appenderName.layout.option1  =  value1</span><br><span class="line">  …</span><br><span class="line">  log4j.appender.appenderName.layout.optionN  =  valueN</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中 [level] 是日志输出级别，共有5级：</span><br><span class="line">FATAL       0 </span><br><span class="line">ERROR      3 </span><br><span class="line">WARN       4 </span><br><span class="line">INFO          6 </span><br><span class="line">DEBUG      7</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Appender 为日志输出目的地，Log4j提供的appender有以下几种：</span><br><span class="line">org.apache.log4j.ConsoleAppender（控制台），</span><br><span class="line">org.apache.log4j.FileAppender（文件），</span><br><span class="line">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</span><br><span class="line">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</span><br><span class="line">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br><span class="line"> </span><br><span class="line">Layout：日志输出格式，Log4j提供的layout有以下几种：</span><br><span class="line">org.apache.log4j.HTMLLayout（以HTML表格形式布局），</span><br><span class="line">org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</span><br><span class="line">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span><br><span class="line">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span><br><span class="line"> </span><br><span class="line">打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:</span><br><span class="line">    %m   输出代码中指定的消息</span><br><span class="line">  %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</span><br><span class="line">  %r   输出自应用启动到输出该log信息耗费的毫秒数</span><br><span class="line">  %c   输出所属的类目，通常就是所在类的全名</span><br><span class="line">  %t   输出产生该日志事件的线程名</span><br><span class="line">  %n   输出一个回车换行符，Windows平台为&quot;/r/n&quot;，Unix平台为&quot;/n&quot;</span><br><span class="line">  %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy MMM dd HH:mm:ss ,SSS&#125;，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921 </span><br><span class="line">  %l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。</span><br><span class="line"></span><br><span class="line">举例：Testlog4.main(TestLog4.java: 10 )</span><br></pre></td></tr></table></figure>
<h4 id="2-在代码中初始化Logger"><a href="#2-在代码中初始化Logger" class="headerlink" title="2. 在代码中初始化Logger"></a>2. 在代码中初始化Logger</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）在程序中调用BasicConfigurator.configure()方法：给根记录器增加一个ConsoleAppender，输出格式通过PatternLayout设为&quot;%-4r [%t] %-5p %c %x - %m%n&quot;，还有根记录器的默认级别是Level.DEBUG.</span><br><span class="line">2）配置放在文件里，通过命令行参数传递文件名字，通过PropertyConfigurator.configure(args[x])解析并配置；</span><br><span class="line">3）配置放在文件里，通过环境变量传递文件名等信息，利用log4j默认的初始化过程解析并配置；</span><br><span class="line">4）配置放在文件里，通过应用服务器配置传递文件名等信息，利用一个特殊的servlet来完成配置。</span><br></pre></td></tr></table></figure>

<h4 id="3-为不同的-Appender-设置日志输出级别："><a href="#3-为不同的-Appender-设置日志输出级别：" class="headerlink" title="3. 为不同的 Appender 设置日志输出级别："></a>3. 为不同的 Appender 设置日志输出级别：</h4><blockquote>
<p>当调试系统时，我们往往注意的只是异常级别的日志输出，但是通常所有级别的输出都是放在一个文件里的，如果日志输出的级别是BUG！？那就慢慢去找吧。<br>这时我们也许会想要是能把异常信息单独输出到一个文件里该多好啊。当然可以，Log4j已经提供了这样的功能，我们只需要在配置中修改Appender的Threshold 就能实现,比如下面的例子：</p>
</blockquote>
<p><strong>[配置文件]</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### set log levels ###</span><br><span class="line">log4j.rootLogger = debug ,  stdout ,  D ,  E</span><br><span class="line"> </span><br><span class="line">### 输出到控制台 ###</span><br><span class="line">log4j.appender.stdout = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target = System.out</span><br><span class="line">log4j.appender.stdout.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern =  %d&#123;ABSOLUTE&#125; %5p %c&#123; 1 &#125;:%L - %m%n</span><br><span class="line"> </span><br><span class="line">### 输出到日志文件 ###</span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = logs/log.log</span><br><span class="line">log4j.appender.D.Append = true</span><br><span class="line">log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志</span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line"> </span><br><span class="line">### 保存异常信息到单独文件 ###</span><br><span class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.D.File = logs/error.log ## 异常日志文件名</span><br><span class="line">log4j.appender.D.Append = true</span><br><span class="line">log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!</span><br><span class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></pre></td></tr></table></figure>

<p><strong>[代码中使用]</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  public   class  TestLog4j  &#123;</span><br><span class="line">     public   static   void  main(String[] args)  &#123;</span><br><span class="line">        PropertyConfigurator.configure( &quot; D:/Code/conf/log4j.properties &quot; );</span><br><span class="line">        Logger logger  =  Logger.getLogger(TestLog4j. class );</span><br><span class="line">        logger.debug( &quot; debug &quot; );</span><br><span class="line">        logger.error( &quot; error &quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行一下，看看异常信息是不是保存在了一个单独的文件error.log中</p>
</blockquote>
<h3 id="log4j-properties-使用"><a href="#log4j-properties-使用" class="headerlink" title="log4j.properties 使用"></a>log4j.properties 使用</h3><h4 id="一-参数意义说明"><a href="#一-参数意义说明" class="headerlink" title="一.参数意义说明"></a>一.参数意义说明</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出级别的种类</span><br><span class="line">ERROR、WARN、INFO、DEBUG</span><br><span class="line">ERROR 为严重错误 主要是程序的错误</span><br><span class="line">WARN 为一般警告，比如session丢失</span><br><span class="line">INFO 为一般要显示的信息，比如登录登出</span><br><span class="line">DEBUG 为程序的调试信息</span><br><span class="line"></span><br><span class="line">配置日志信息输出目的地</span><br><span class="line">log4j.appender.appenderName = fully.qualified.name.of.appender.class</span><br><span class="line">1.org.apache.log4j.ConsoleAppender（控制台）</span><br><span class="line">2.org.apache.log4j.FileAppender（文件）</span><br><span class="line">3.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</span><br><span class="line">4.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</span><br><span class="line">5.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br><span class="line"></span><br><span class="line">配置日志信息的格式</span><br><span class="line">log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class</span><br><span class="line">1.org.apache.log4j.HTMLLayout（以HTML表格形式布局），</span><br><span class="line">2.org.apache.log4j.PatternLayout（可以灵活地指定布局模式），</span><br><span class="line">3.org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span><br><span class="line">4.org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span><br><span class="line"></span><br><span class="line">控制台选项</span><br><span class="line">Threshold=DEBUG:指定日志消息的输出最低层次。</span><br><span class="line">ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。</span><br><span class="line">Target=System.err：默认情况下是：System.out,指定输出控制台</span><br><span class="line">FileAppender 选项</span><br><span class="line">Threshold=DEBUF:指定日志消息的输出最低层次。</span><br><span class="line">ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。</span><br><span class="line">File=mylog.txt:指定消息输出到mylog.txt文件。</span><br><span class="line">Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。</span><br><span class="line">RollingFileAppender 选项</span><br><span class="line">Threshold=DEBUG:指定日志消息的输出最低层次。</span><br><span class="line">ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。</span><br><span class="line">File=mylog.txt:指定消息输出到mylog.txt文件。</span><br><span class="line">Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。</span><br><span class="line">MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。</span><br><span class="line">MaxBackupIndex=2:指定可以产生的滚动文件的最大数。</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-4r %-5p %d&#123;yyyy-MM-dd HH:mm:ssS&#125; %c %m%n</span><br><span class="line"></span><br><span class="line">日志信息格式中几个符号所代表的含义：</span><br><span class="line">-X号: X信息输出时左对齐；</span><br><span class="line">%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,</span><br><span class="line">%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy MMM dd HH:mm:ss,SSS&#125;，输出类似：2002年10月18日 22：10：28，921</span><br><span class="line">%r: 输出自应用启动到输出该log信息耗费的毫秒数</span><br><span class="line">%c: 输出日志信息所属的类目，通常就是所在类的全名</span><br><span class="line">%t: 输出产生该日志事件的线程名</span><br><span class="line">%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)</span><br><span class="line">%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。</span><br><span class="line">%%: 输出一个&quot;%&quot;字符</span><br><span class="line">%F: 输出日志消息产生时所在的文件名称</span><br><span class="line">%L: 输出代码中的行号</span><br><span class="line">%m: 输出代码中指定的消息,产生的日志具体信息</span><br><span class="line">%n: 输出一个回车换行符，Windows平台为&quot;/r/n&quot;，Unix平台为&quot;/n&quot;输出日志信息换行</span><br><span class="line"></span><br><span class="line">可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：</span><br><span class="line">1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。</span><br><span class="line">2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，&quot;-&quot;号指定左对齐。</span><br><span class="line">3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。</span><br><span class="line">4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。</span><br></pre></td></tr></table></figure>

<h4 id="二-文件配置"><a href="#二-文件配置" class="headerlink" title="二.文件配置"></a>二.文件配置</h4><blockquote>
<p>文件配置Sample1</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,A1,R</span><br><span class="line">#log4j.rootLogger=INFO,A1,R</span><br><span class="line"># ConsoleAppender 输出</span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n</span><br><span class="line"># File 输出 一天一个文件,输出路径可以定制,一般在根路径下</span><br><span class="line">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.R.File=blog_log.txt</span><br><span class="line">log4j.appender.R.MaxFileSize=500KB</span><br><span class="line">log4j.appender.R.MaxBackupIndex=10</span><br><span class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.R.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c] [%p] - %m%n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件配置Sample2</p>
</blockquote>
<blockquote>
<p>下面给出的Log4J配置文件实现了输出到控制台，文件，回滚文件，发送日志邮件，输出到数据库日志表，自定义标签等全套功能。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,CONSOLE,A1,im</span><br><span class="line">#DEBUG,CONSOLE,FILE,ROLLING_FILE,MAIL,DATABASE</span><br><span class="line">log4j.addivity.org.apache=true</span><br><span class="line">###################</span><br><span class="line"># Console Appender</span><br><span class="line">###################</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Threshold=DEBUG</span><br><span class="line">log4j.appender.CONSOLE.Target=System.out</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n </span><br><span class="line">#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d&#123;DATE&#125;[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n</span><br><span class="line">#####################</span><br><span class="line"># File Appender</span><br><span class="line">#####################</span><br><span class="line">log4j.appender.FILE=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.FILE.File=file.log</span><br><span class="line">log4j.appender.FILE.Append=false</span><br><span class="line">log4j.appender.FILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n </span><br><span class="line"># Use this layout for LogFactor 5 analysis</span><br><span class="line">########################</span><br><span class="line"># Rolling File</span><br><span class="line">########################</span><br><span class="line">log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.ROLLING_FILE.Threshold=ERROR</span><br><span class="line">log4j.appender.ROLLING_FILE.File=rolling.log</span><br><span class="line">log4j.appender.ROLLING_FILE.Append=true</span><br><span class="line">log4j.appender.ROLLING_FILE.MaxFileSize=10KB</span><br><span class="line">log4j.appender.ROLLING_FILE.MaxBackupIndex=1</span><br><span class="line">log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span><br><span class="line">####################</span><br><span class="line"># Socket Appender</span><br><span class="line">####################</span><br><span class="line">log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.SOCKET.RemoteHost=localhost</span><br><span class="line">log4j.appender.SOCKET.Port=5001</span><br><span class="line">log4j.appender.SOCKET.LocationInfo=true</span><br><span class="line"># Set up for Log Facter 5</span><br><span class="line">log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.SOCET.layout.ConversionPattern=[start]%d&#123;DATE&#125;[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n</span><br><span class="line">########################</span><br><span class="line"># Log Factor 5 Appender</span><br><span class="line">########################</span><br><span class="line">log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender</span><br><span class="line">log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000</span><br><span class="line">########################</span><br><span class="line"># SMTP Appender</span><br><span class="line">#######################</span><br><span class="line">log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender</span><br><span class="line">log4j.appender.MAIL.Threshold=FATAL</span><br><span class="line">log4j.appender.MAIL.BufferSize=10</span><br><span class="line">log4j.appender.MAIL.From=chenyl@yeqiangwei.com</span><br><span class="line">log4j.appender.MAIL.SMTPHost=mail.hollycrm.com</span><br><span class="line">log4j.appender.MAIL.Subject=Log4J Message</span><br><span class="line">log4j.appender.MAIL.To=chenyl@yeqiangwei.com</span><br><span class="line">log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span><br><span class="line">########################</span><br><span class="line"># JDBC Appender</span><br><span class="line">#######################</span><br><span class="line">log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender</span><br><span class="line">log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test</span><br><span class="line">log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver</span><br><span class="line">log4j.appender.DATABASE.user=root</span><br><span class="line">log4j.appender.DATABASE.password=</span><br><span class="line">log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES (&#x27;[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n&#x27;)</span><br><span class="line">log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span><br><span class="line">log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.A1.File=SampleMessages.log4j</span><br><span class="line">log4j.appender.A1.DatePattern=yyyyMMdd-HH&#x27;.log4j&#x27;</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout</span><br><span class="line">###################</span><br><span class="line">#自定义Appender</span><br><span class="line">###################</span><br><span class="line">log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender</span><br><span class="line">log4j.appender.im.host = mail.cybercorlin.net</span><br><span class="line">log4j.appender.im.username = username</span><br><span class="line">log4j.appender.im.password = password</span><br><span class="line">log4j.appender.im.recipient = corlin@yeqiangwei.com</span><br><span class="line">log4j.appender.im.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.im.layout.ConversionPattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</span><br></pre></td></tr></table></figure>

<h4 id="三-高级使用"><a href="#三-高级使用" class="headerlink" title="三.高级使用"></a>三.高级使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实验目的：</span><br><span class="line">1.把FATAL级错误写入2000NT日志</span><br><span class="line">2. WARN，ERROR，FATAL级错误发送email通知管理员</span><br><span class="line">3.其他级别的错误直接在后台输出</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实验步骤：<br>输出到2000NT日志</p>
</blockquote>
<ol>
<li><p>把Log4j压缩包里的NTEventLogAppender.dll拷到WINNT/SYSTEM32目录下</p>
</li>
<li><p>写配置文件log4j.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在2000系统日志输出</span><br><span class="line">log4j.logger.NTlog=FATAL, A8</span><br><span class="line"># APPENDER A8</span><br><span class="line">log4j.appender.A8=org.apache.log4j.nt.NTEventLogAppender</span><br><span class="line">log4j.appender.A8.Source=JavaTest</span><br><span class="line">log4j.appender.A8.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A8.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Logger logger2 = Logger.getLogger(&quot;NTlog&quot;); //要和配置文件中设置的名字相同</span><br><span class="line">logger2.debug(&quot;debug!!!&quot;);</span><br><span class="line">logger2.info(&quot;info!!!&quot;);</span><br><span class="line">logger2.warn(&quot;warn!!!&quot;);</span><br><span class="line">logger2.error(&quot;error!!!&quot;);</span><br><span class="line">//只有这个错误才会写入2000日志</span><br><span class="line">logger2.fatal(&quot;fatal!!!&quot;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>发送email通知管理员：</p>
</blockquote>
<ol>
<li><p>首先下载JavaMail和JAF</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://java.sun.com/j2ee/ja/javamail/index.html</span><br><span class="line">http://java.sun.com/beans/glasgow/jaf.html</span><br><span class="line">在项目中引用mail.jar和activation.jar。</span><br></pre></td></tr></table></figure>
</li>
<li><p>写配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将日志发送到email</span><br><span class="line">log4j.logger.MailLog=WARN,A5</span><br><span class="line"> #  APPENDER A5</span><br><span class="line">log4j.appender.A5=org.apache.log4j.net.SMTPAppender</span><br><span class="line">log4j.appender.A5.BufferSize=5</span><br><span class="line">log4j.appender.A5.To=chunjie@yeqiangwei.com</span><br><span class="line">log4j.appender.A5.From=error@yeqiangwei.com</span><br><span class="line">log4j.appender.A5.Subject=ErrorLog</span><br><span class="line">log4j.appender.A5.SMTPHost=smtp.263.net</span><br><span class="line">log4j.appender.A5.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A5.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//把日志发送到mail</span><br><span class="line">Logger logger3 = Logger.getLogger(&quot;MailLog&quot;);</span><br><span class="line">logger3.warn(&quot;warn!!!&quot;);</span><br><span class="line">logger3.error(&quot;error!!!&quot;);</span><br><span class="line">logger3.fatal(&quot;fatal!!!&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在后台输出所有类别的错误：</p>
</blockquote>
</li>
<li><p>写配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在后台输出</span><br><span class="line">log4j.logger.console=DEBUG, A1</span><br><span class="line"># APPENDER A1</span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2．调用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Logger logger1 = Logger.getLogger(&quot;console&quot;);</span><br><span class="line">logger1.debug(&quot;debug!!!&quot;);</span><br><span class="line">logger1.info(&quot;info!!!&quot;);</span><br><span class="line">logger1.warn(&quot;warn!!!&quot;);</span><br><span class="line">logger1.error(&quot;error!!!&quot;);</span><br><span class="line">logger1.fatal(&quot;fatal!!!&quot;);</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>全部配置文件：log4j.properties</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在后台输出</span><br><span class="line">log4j.logger.console=DEBUG, A1</span><br><span class="line"># APPENDER A1</span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br><span class="line"></span><br><span class="line"># 在2000系统日志输出</span><br><span class="line">log4j.logger.NTlog=FATAL, A8</span><br><span class="line"># APPENDER A8</span><br><span class="line">log4j.appender.A8=org.apache.log4j.nt.NTEventLogAppender</span><br><span class="line">log4j.appender.A8.Source=JavaTest</span><br><span class="line">log4j.appender.A8.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A8.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br><span class="line"></span><br><span class="line"># 将日志发送到email</span><br><span class="line">log4j.logger.MailLog=WARN,A5</span><br><span class="line"> #  APPENDER A5</span><br><span class="line">log4j.appender.A5=org.apache.log4j.net.SMTPAppender</span><br><span class="line">log4j.appender.A5.BufferSize=5</span><br><span class="line">log4j.appender.A5.To=chunjie@yeqiangwei.com</span><br><span class="line">log4j.appender.A5.From=error@yeqiangwei.com</span><br><span class="line">log4j.appender.A5.Subject=ErrorLog</span><br><span class="line">log4j.appender.A5.SMTPHost=smtp.263.net</span><br><span class="line">log4j.appender.A5.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A5.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>全部代码：Log4jTest.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> import org.apache.log4j.*;  </span><br><span class="line"> //import org.apache.log4j.nt.*;  </span><br><span class="line"> //import org.apache.log4j.net.*;  </span><br><span class="line"> /** </span><br><span class="line">  * @author yanxu </span><br><span class="line">  */  </span><br><span class="line"> public class Log4jTest  </span><br><span class="line"> &#123;  </span><br><span class="line">  public static void main(String args[])  </span><br><span class="line">  &#123;  </span><br><span class="line">   PropertyConfigurator.configure(&quot;log4j.properties&quot;);  </span><br><span class="line">   //在后台输出  </span><br><span class="line">   Logger logger1 = Logger.getLogger(&quot;console&quot;);  </span><br><span class="line">   logger1.debug(&quot;debug!!!&quot;);  </span><br><span class="line">   logger1.info(&quot;info!!!&quot;);  </span><br><span class="line">   logger1.warn(&quot;warn!!!&quot;);  </span><br><span class="line">   logger1.error(&quot;error!!!&quot;);  </span><br><span class="line">   logger1.fatal(&quot;fatal!!!&quot;); </span><br><span class="line">//在NT系统日志输出  </span><br><span class="line">   Logger logger2 = Logger.getLogger(&quot;NTlog&quot;);  </span><br><span class="line">   //NTEventLogAppender nla = new NTEventLogAppender();  </span><br><span class="line">   logger2.debug(&quot;debug!!!&quot;);  </span><br><span class="line">   logger2.info(&quot;info!!!&quot;);  </span><br><span class="line">   logger2.warn(&quot;warn!!!&quot;);  </span><br><span class="line">   logger2.error(&quot;error!!!&quot;);  </span><br><span class="line">   //只有这个错误才会写入2000日志  </span><br><span class="line">   logger2.fatal(&quot;fatal!!!&quot;); </span><br><span class="line">//把日志发送到mail  </span><br><span class="line">   Logger logger3 = Logger.getLogger(&quot;MailLog&quot;);  </span><br><span class="line">   //SMTPAppender sa = new SMTPAppender();  </span><br><span class="line">   logger3.warn(&quot;warn!!!&quot;);  </span><br><span class="line">   logger3.error(&quot;error!!!&quot;);  </span><br><span class="line">   logger3.fatal(&quot;fatal!!!&quot;);  </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb基本指令</title>
    <url>/2018/08/28/mongo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一、数据库常用命令</span><br><span class="line"></span><br><span class="line">1、Help查看命令提示</span><br><span class="line">help</span><br><span class="line">db.help();</span><br><span class="line">db.yourColl.help();</span><br><span class="line">db.youColl.find().help();</span><br><span class="line">rs.help();</span><br><span class="line"></span><br><span class="line">2、切换/创建数据库</span><br><span class="line">use yourDB; //当创建一个集合(table)的时候会自动创建当前数据库</span><br><span class="line"></span><br><span class="line">3、查询所有数据库</span><br><span class="line">show dbs;</span><br><span class="line"></span><br><span class="line">4、删除当前使用数据库</span><br><span class="line">db.dropDatabase();</span><br><span class="line"></span><br><span class="line">5、从指定主机上克隆数据库</span><br><span class="line">db.cloneDatabase(&quot;127.0.0.1&quot;); //将指定机器上的数据库的数据克隆到当前数据库</span><br><span class="line"></span><br><span class="line">6、从指定的机器上复制指定数据库数据到某个数据库</span><br><span class="line">db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;);//将本机的mydb的数据复制到temp数据库中</span><br><span class="line"></span><br><span class="line">7、修复当前数据库</span><br><span class="line">db.repairDatabase();</span><br><span class="line"></span><br><span class="line">8、查看当前使用的数据库</span><br><span class="line">db.getName();</span><br><span class="line">db; //db和getName方法是一样的效果，都可以查询当前使用的数据库</span><br><span class="line"></span><br><span class="line">9、显示当前db状态</span><br><span class="line">db.stats();</span><br><span class="line"></span><br><span class="line">10、当前db版本</span><br><span class="line">db.version();</span><br><span class="line"></span><br><span class="line">11、查看当前db的链接机器地址</span><br><span class="line">db.getMongo();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、Collection聚集集合</span><br><span class="line">1、创建一个聚集集合（table）</span><br><span class="line">db.createCollection(&quot;collName&quot;, &#123;size: 20, capped: 5, max: 100&#125;);//创建成功会显示&#123;&quot;ok&quot;:1&#125;</span><br><span class="line">//判断集合是否为定容量db.collName.isCapped();</span><br><span class="line"></span><br><span class="line">2、得到指定名称的聚集集合（table）</span><br><span class="line">db.getCollection(&quot;account&quot;);</span><br><span class="line"></span><br><span class="line">3、得到当前db的所有聚集集合</span><br><span class="line">db.getCollectionNames();</span><br><span class="line"></span><br><span class="line">4、显示当前db所有聚集索引的状态</span><br><span class="line">db.printCollectionStats();</span><br><span class="line"></span><br><span class="line">三、用户相关 </span><br><span class="line">1、添加一个用户</span><br><span class="line">db.addUser(&quot;name&quot;);</span><br><span class="line">db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true); 添加用户、设置密码、是否只读</span><br><span class="line"></span><br><span class="line">2、数据库认证、安全模式</span><br><span class="line">db.auth(&quot;userName&quot;, &quot;123123&quot;);</span><br><span class="line"></span><br><span class="line">3、显示当前所有用户</span><br><span class="line">show users;</span><br><span class="line"></span><br><span class="line">4、删除用户</span><br><span class="line">db.removeUser(&quot;userName&quot;);</span><br><span class="line"></span><br><span class="line">四、聚集集合查询 </span><br><span class="line">1、查询所有记录</span><br><span class="line">db.userInfo.find();</span><br><span class="line">相当于：select* from userInfo;</span><br><span class="line">默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带&quot;；&quot;</span><br><span class="line"></span><br><span class="line">2、查询去掉后的当前聚集集合中的某列的重复数据</span><br><span class="line">db.userInfo.distinct(&quot;name&quot;);</span><br><span class="line">相当于：select distict name from userInfo;</span><br><span class="line"></span><br><span class="line">3、查询age = 22的记录</span><br><span class="line">db.userInfo.find(&#123;&quot;age&quot;: 22&#125;);</span><br><span class="line">相当于： select * from userInfo where age = 22;</span><br><span class="line"></span><br><span class="line">4、查询age &gt; 22的记录</span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gt: 22&#125;&#125;);</span><br><span class="line">相当于：select * from userInfo where age &gt;22;</span><br><span class="line"></span><br><span class="line">5、查询age &lt; 22的记录db.userInfo.find(&#123;age: &#123;$lt: 22&#125;&#125;);</span><br><span class="line">相当于：select * from userInfo where age &lt;22;</span><br><span class="line"></span><br><span class="line">6、查询age &gt;= 25的记录</span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;);</span><br><span class="line">相当于：select * from userInfo where age &gt;= 25;</span><br><span class="line"></span><br><span class="line">7、查询age &lt;= 25的记录</span><br><span class="line">db.userInfo.find(&#123;age: &#123;$lte: 25&#125;&#125;);</span><br><span class="line"></span><br><span class="line">8、查询age &gt;= 23 并且 age &lt;= 26</span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gte: 23, $lte: 26&#125;&#125;);</span><br><span class="line"></span><br><span class="line">9、查询name中包含 mongo的数据</span><br><span class="line">db.userInfo.find(&#123;name: /mongo/&#125;);</span><br><span class="line">//相当于select * from userInfo where name like &#x27;%mongo%&#x27;;</span><br><span class="line"></span><br><span class="line">10、查询name中以mongo开头的</span><br><span class="line">db.userInfo.find(&#123;name: /^mongo/&#125;);</span><br><span class="line">select * from userInfo where name like &#x27;mongo%&#x27;;</span><br><span class="line"></span><br><span class="line">11、查询指定列name、age数据</span><br><span class="line">db.userInfo.find(&#123;&#125;, &#123;name: 1, age: 1&#125;);</span><br><span class="line">相当于：select name, age from userInfo;</span><br><span class="line"></span><br><span class="line">12、查询指定列name、age数据, age &gt; 25</span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gt: 25&#125;&#125;, &#123;name: 1, age: 1&#125;);</span><br><span class="line">相当于：select name, age from userInfo where age &gt;25;</span><br><span class="line"></span><br><span class="line">13、按照年龄排序</span><br><span class="line">升序：db.userInfo.find().sort(&#123;age: 1&#125;);</span><br><span class="line">降序：db.userInfo.find().sort(&#123;age: -1&#125;);</span><br><span class="line"></span><br><span class="line">14、查询name = zhangsan, age = 22的数据</span><br><span class="line">db.userInfo.find(&#123;name: &#x27;zhangsan&#x27;, age: 22&#125;);</span><br><span class="line">相当于：select * from userInfo where name = &#x27;zhangsan&#x27; and age = &#x27;22&#x27;;</span><br><span class="line"></span><br><span class="line">15、查询前5条数据</span><br><span class="line">db.userInfo.find().limit(5);</span><br><span class="line">相当于：select * from userInfo limit 5;</span><br><span class="line"></span><br><span class="line">16、查询10条以后的数据</span><br><span class="line">db.userInfo.find().skip(10);</span><br><span class="line">相当于：select * from userInfo where id not in (select * from userInfo limit 10);</span><br><span class="line"></span><br><span class="line">17、查询在5-10之间的数据</span><br><span class="line">db.userInfo.find().limit(10).skip(5);</span><br><span class="line">可用于分页，limit是pageSize，skip是第几页*pageSize</span><br><span class="line"></span><br><span class="line">18、or与 查询</span><br><span class="line">db.userInfo.find(&#123;$or: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;);</span><br><span class="line">相当于：select * from userInfo where age = 22 or age = 25;</span><br><span class="line"></span><br><span class="line">19、查询第一条数据</span><br><span class="line">db.userInfo.findOne();</span><br><span class="line">相当于：select * from userInfo limit 1;</span><br><span class="line">db.userInfo.find().limit(1);</span><br><span class="line"></span><br><span class="line">20、查询某个结果集的记录条数</span><br><span class="line">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;).count();</span><br><span class="line">相当于：select count(*) from userInfo where age &gt;= 20;</span><br><span class="line"></span><br><span class="line">21、按照某列进行排序</span><br><span class="line">db.userInfo.find(&#123;sex: &#123;$exists: true&#125;&#125;).count();</span><br><span class="line">相当于：select count(sex) from userInfo;</span><br><span class="line"></span><br><span class="line">五、索引</span><br><span class="line">1、创建索引</span><br><span class="line">db.userInfo.ensureIndex(&#123;name: 1&#125;);</span><br><span class="line">db.userInfo.ensureIndex(&#123;name: 1, ts: -1&#125;);</span><br><span class="line"></span><br><span class="line">2、查询当前聚集集合所有索引</span><br><span class="line">db.userInfo.getIndexes();</span><br><span class="line"></span><br><span class="line">3、查看总索引记录大小</span><br><span class="line">db.userInfo.totalIndexSize();</span><br><span class="line"></span><br><span class="line">4、读取当前集合的所有index信息</span><br><span class="line">db.users.reIndex();</span><br><span class="line"></span><br><span class="line">5、删除指定索引</span><br><span class="line">db.users.dropIndex(&quot;name_1&quot;);</span><br><span class="line"></span><br><span class="line">6、删除所有索引索引</span><br><span class="line">db.users.dropIndexes();</span><br><span class="line"></span><br><span class="line">六、修改、添加、删除集合数据</span><br><span class="line">1、添加</span><br><span class="line">db.users.save(&#123;name: &#x27;zhangsan&#x27;, age: 25, sex: true&#125;);</span><br><span class="line"></span><br><span class="line">2、修改</span><br><span class="line">db.users.update(&#123;age: 25&#125;, &#123;$set: &#123;name: &#x27;changeName&#x27;&#125;&#125;, false, true);</span><br><span class="line">相当于：update users set name = &#x27;changeName&#x27; where age = 25;</span><br><span class="line">db.users.update(&#123;name: &#x27;Lisi&#x27;&#125;, &#123;$inc: &#123;age: 50&#125;&#125;, false, true);</span><br><span class="line">相当于：update users set age = age + 50 where name = &#x27;Lisi&#x27;;</span><br><span class="line">db.users.update(&#123;name: &#x27;Lisi&#x27;&#125;, &#123;$inc: &#123;age: 50&#125;, $set: &#123;name: &#x27;hoho&#x27;&#125;&#125;, false, true);</span><br><span class="line">相当于：update users set age = age + 50, name = &#x27;hoho&#x27; where name = &#x27;Lisi&#x27;;</span><br><span class="line"></span><br><span class="line">3、删除</span><br><span class="line">db.users.remove(&#123;age: 132&#125;);</span><br><span class="line"></span><br><span class="line">4、查询修改删除</span><br><span class="line">db.users.findAndModify(&#123;</span><br><span class="line">    query: &#123;age: &#123;$gte: 25&#125;&#125;, </span><br><span class="line">    sort: &#123;age: -1&#125;, </span><br><span class="line">    update: &#123;$set: &#123;name: &#x27;a2&#x27;&#125;, $inc: &#123;age: 2&#125;&#125;,</span><br><span class="line">    remove: true</span><br><span class="line">&#125;);</span><br><span class="line">db.runCommand(&#123; findandmodify : &quot;users&quot;, </span><br><span class="line">    query: &#123;age: &#123;$gte: 25&#125;&#125;, </span><br><span class="line">    sort: &#123;age: -1&#125;, </span><br><span class="line">    update: &#123;$set: &#123;name: &#x27;a2&#x27;&#125;, $inc: &#123;age: 2&#125;&#125;,</span><br><span class="line">    remove: true</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">update 或 remove 其中一个是必须的参数; 其他参数可选。</span><br><span class="line"></span><br><span class="line">七、语句块操作 </span><br><span class="line">1、简单Hello World</span><br><span class="line">print(&quot;Hello World!&quot;);</span><br><span class="line"></span><br><span class="line">2、将一个对象转换成json</span><br><span class="line">tojson(new Object());</span><br><span class="line">tojson(new Object(&#x27;a&#x27;));</span><br><span class="line"></span><br><span class="line">3、循环添加数据</span><br><span class="line">&gt; for (var i = 0; i &lt; 30; i++) &#123;</span><br><span class="line"> 	db.users.save(&#123;name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">4、find 游标查询</span><br><span class="line">&gt;var cursor = db.users.find();</span><br><span class="line">&gt; while (cursor.hasNext()) &#123; </span><br><span class="line">    printjson(cursor.next()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这样就查询所有的users信息，同样可以这样写</span><br><span class="line"></span><br><span class="line">5、forEach迭代循环</span><br><span class="line">db.users.find().forEach(printjson);</span><br><span class="line">forEach中必须传递一个函数来处理每条迭代的数据信息</span><br><span class="line"></span><br><span class="line">6、将find游标当数组处理</span><br><span class="line">var cursor = db.users.find();</span><br><span class="line">cursor[4];</span><br><span class="line"></span><br><span class="line">取得下标索引为4的那条数据</span><br><span class="line">既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();</span><br><span class="line"></span><br><span class="line">也可以用循环显示数据</span><br><span class="line">for (var i = 0, len = c.length(); i &lt; len; i++) printjson(c[i]);</span><br><span class="line"></span><br><span class="line">7、将find游标转换成数组</span><br><span class="line">&gt; var arr = db.users.find().toArray();</span><br><span class="line">&gt; printjson(arr[2]);</span><br><span class="line">用toArray方法将其转换为数组</span><br><span class="line"></span><br><span class="line">8、定制我们自己的查询结果</span><br><span class="line">只显示age &lt;= 28的并且只显示age这列数据</span><br><span class="line">db.users.find(&#123;age: &#123;$lte: 28&#125;&#125;, &#123;age: 1&#125;).forEach(printjson);</span><br><span class="line">db.users.find(&#123;age: &#123;$lte: 28&#125;&#125;, &#123;age: true&#125;).forEach(printjson);</span><br><span class="line"></span><br><span class="line">排除age的列</span><br><span class="line">db.users.find(&#123;age: &#123;$lte: 28&#125;&#125;, &#123;age: false&#125;).forEach(printjson);</span><br><span class="line"></span><br><span class="line">9、forEach传递函数显示信息</span><br><span class="line">db.things.find(&#123;x:4&#125;).forEach(function(x) &#123;print(tojson(x));&#125;);</span><br><span class="line"></span><br><span class="line">八、其他 </span><br><span class="line">1、查询之前的错误信息</span><br><span class="line">db.getPrevError();</span><br><span class="line"></span><br><span class="line">2、清除错误记录</span><br><span class="line">db.resetError();</span><br><span class="line"></span><br><span class="line">查看聚集集合基本信息</span><br><span class="line">1、查看帮助  db.yourColl.help();</span><br><span class="line">2、查询当前集合的数据条数  db.yourColl.count();</span><br><span class="line">3、查看数据空间大小 db.userInfo.dataSize();</span><br><span class="line">4、得到当前聚集集合所在的db db.userInfo.getDB();</span><br><span class="line">5、得到当前聚集的状态 db.userInfo.stats();</span><br><span class="line">6、得到聚集集合总大小 db.userInfo.totalSize();</span><br><span class="line">7、聚集集合储存空间大小 db.userInfo.storageSize();</span><br><span class="line">8、Shard版本信息  db.userInfo.getShardVersion()</span><br><span class="line">9、聚集集合重命名 db.userInfo.renameCollection(&quot;users&quot;); 将userInfo重命名为users</span><br><span class="line">10、删除当前聚集集合 db.userInfo.drop();</span><br><span class="line"></span><br><span class="line">show dbs:显示数据库列表 </span><br><span class="line">show collections：显示当前数据库中的集合（类似关系数据库中的表） </span><br><span class="line">show users：显示用户 </span><br><span class="line">use &lt;db name&gt;：切换当前数据库，这和MS-SQL里面的意思一样 </span><br><span class="line">db.help()：显示数据库操作命令，里面有很多的命令 </span><br><span class="line">db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 </span><br><span class="line">db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） </span><br><span class="line">db.foo.find( &#123; a : 1 &#125; )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 删除自关联数据表数据</title>
    <url>/2019/01/01/mysql%20%E5%88%A0%E9%99%A4%E8%87%AA%E5%85%B3%E8%81%94%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h4 id="1-关闭外键检查"><a href="#1-关闭外键检查" class="headerlink" title="1. 关闭外键检查"></a>1. 关闭外键检查</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-删除"><a href="#2-删除" class="headerlink" title="2. 删除"></a>2. 删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from table_name;</span><br></pre></td></tr></table></figure>

<h4 id="3-开启检查"><a href="#3-开启检查" class="headerlink" title="3. 开启检查"></a>3. 开启检查</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldump 参数说明</title>
    <url>/2019/01/01/mysqldump%20%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<blockquote>
<p>mysqldump命令中带有一个 –where/-w 参数，它用来设定数据导出的条件，使用方式和SQL查询命令中中的where基本上相同，可以从数据库中导出你需要的那部分数据了。</p>
</blockquote>
<p><strong>命令格式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u&lt;username&gt; -p&lt;password&gt; &lt;database&gt; &lt;table&gt; --<span class="built_in">where</span>=<span class="string">&quot;&lt;condition&gt;&quot;</span> &gt; &lt;filepath&gt;</span><br></pre></td></tr></table></figure>

<p><strong>备份数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.导出结构不导出数据</span></span><br><span class="line">mysqldump -d 数据库名 -uroot -p &gt; xxx.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.导出数据不导出结构</span></span><br><span class="line">mysqldump -t 数据库名 -uroot -p &gt; xxx.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.导出数据和表结构</span></span><br><span class="line">mysqldump 数据库名 -uroot -p &gt; xxx.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.导出特定表的结构</span></span><br><span class="line">mysqldump -uroot -p -B数据库名 --table 表名 &gt; xxx.sql</span><br></pre></td></tr></table></figure>

<p><strong>mysqldump支持下列选项</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--add-locks   </span><br><span class="line">在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(为了使得更快地插入到MySQL)。</span><br><span class="line">--add-drop-table   </span><br><span class="line">在每个create语句之前增加一个drop table。</span><br><span class="line">--allow-keywords   </span><br><span class="line">允许创建是关键词的列名字。这由表名前缀于每个列名做到。   </span><br><span class="line">-c, --complete-insert   </span><br><span class="line">使用完整的insert语句(用列名字)。   </span><br><span class="line">-C, --compress   </span><br><span class="line">如果客户和服务器均支持压缩，压缩两者间所有的信息。   </span><br><span class="line">--delayed   </span><br><span class="line">用INSERT DELAYED命令插入行。   </span><br><span class="line">-e, --extended-insert   </span><br><span class="line">使用全新多行INSERT语法。（给出更紧缩并且更快的插入语句）   </span><br><span class="line">-#, --debug[=option_string]   </span><br><span class="line">跟踪程序的使用(为了调试)。   </span><br><span class="line">--help   </span><br><span class="line">显示一条帮助消息并且退出。   </span><br><span class="line">--fields-terminated-by=...   </span><br><span class="line">   </span><br><span class="line">--fields-enclosed-by=...   </span><br><span class="line">   </span><br><span class="line">--fields-optionally-enclosed-by=...   </span><br><span class="line">   </span><br><span class="line">--fields-escaped-by=...   </span><br><span class="line">   </span><br><span class="line">--fields-terminated-by=...   </span><br><span class="line">这些选择与-T选择一起使用，并且有相应的LOAD DATA INFILE子句相同的含义。   </span><br><span class="line">LOAD DATA INFILE语法。   </span><br><span class="line">-F, --flush-logs   </span><br><span class="line">在开始导出前，洗掉在MySQL服务器中的日志文件。   </span><br><span class="line">-f, --force,   </span><br><span class="line">即使我们在一个表导出期间得到一个SQL错误，继续。   </span><br><span class="line">-h, --host=..   </span><br><span class="line">从命名的主机上的MySQL服务器导出数据。缺省主机是localhost。   </span><br><span class="line">-l, --lock-tables.   </span><br><span class="line">为开始导出锁定所有表。   </span><br><span class="line">-t, --no-create-info   </span><br><span class="line">不写入表创建信息(CREATE TABLE语句）   </span><br><span class="line">-d, --no-data   </span><br><span class="line">不写入表的任何行信息。如果你只想得到一个表的结构的导出，这是很有用的！   </span><br><span class="line">--opt   </span><br><span class="line">同--quick --add-drop-table --add-locks --extended-insert --lock-tables。   </span><br><span class="line">应该给你为读入一个MySQL服务器的尽可能最快的导出。   </span><br><span class="line">-pyour_pass, --password[=your_pass]   </span><br><span class="line">与服务器连接时使用的口令。如果你不指定&quot;=your_pass&quot;部分，mysqldump需要来自终端的口令。   </span><br><span class="line">-P port_num, --port=port_num   </span><br><span class="line">与一台主机连接时使用的TCP/IP端口号。（这用于连接到localhost以外的主机，因为它使用 Unix套接字。）   </span><br><span class="line">-q, --quick   </span><br><span class="line">不缓冲查询，直接导出至stdout；使用mysql_use_result()做它。   </span><br><span class="line">-S /path/to/socket, --socket=/path/to/socket   </span><br><span class="line">与localhost连接时（它是缺省主机)使用的套接字文件。   </span><br><span class="line">-T, --tab=path-to-some-directory   </span><br><span class="line">对于每个给定的表，创建一个table_name.sql文件，它包含SQL CREATE 命令，和一个table_name.txt文件，它包含数据。注意：这只有在mysqldump运行在mysqld守护进程运行的同一台机器上的时候才工作。.txt文件的格式根据--fields-xxx和 --lines--xxx选项来定。  </span><br><span class="line">-u user_name, --user=user_name   </span><br><span class="line">与服务器连接时，MySQL使用的用户名。缺省值是你的Unix登录名。   </span><br><span class="line">-O var=option, --set-variable var=option设置一个变量的值。可能的变量被列在下面。   </span><br><span class="line">-v, --verbose   </span><br><span class="line">冗长模式。打印出程序所做的更多的信息。   </span><br><span class="line">-V, --version   </span><br><span class="line">打印版本信息并且退出。   </span><br><span class="line">-w, --where=&#x27;where-condition&#x27;   </span><br><span class="line">只导出被选择了的记录；注意引号是强制的！   </span><br><span class="line">&quot;--where=user=&#x27;jimf&#x27;&quot; &quot;-wuserid&gt;1&quot; &quot;-wuserid&lt;1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqlslap（MySQL自带的性能压力测试工具）</title>
    <url>/2019/01/01/mysqlslap%EF%BC%88MySQL%E8%87%AA%E5%B8%A6%E7%9A%84%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%EF%BC%89/</url>
    <content><![CDATA[<h3 id="mysqlslap（MySQL自带的性能压力测试工具）"><a href="#mysqlslap（MySQL自带的性能压力测试工具）" class="headerlink" title="mysqlslap（MySQL自带的性能压力测试工具）"></a>mysqlslap（MySQL自带的性能压力测试工具）</h3><blockquote>
<p>mysqlslap 是 Mysql 自带的压力测试工具，可以模拟出大量客户端同时操作数据库的情况，通过结果信息来了解数据库的性能状况。mysqlslap 的一个主要工作场景就是对数据库服务器做基准测试。</p>
</blockquote>
<h4 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h4><blockquote>
<p>对数据库做一个简单的自动测试</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlslap –uroot –p123456 -–auto-generate-sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果中各项含义</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Average number of seconds to run ... 运行所有语句的平均秒数</span><br><span class="line">Minimum number of seconds to run ... 运行所有语句的最小秒数</span><br><span class="line">Maximum number of seconds to run ... 运行所有语句的最大秒数</span><br><span class="line">Number of clients seconds to run ... 客户端数量</span><br><span class="line">Average number of queries per client 每个客户端运行查询的平均数</span><br></pre></td></tr></table></figure>

<h4 id="添加并发"><a href="#添加并发" class="headerlink" title="添加并发"></a>添加并发</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlslap –uroot –p123456 –-concurrency=10 –-number-of-queries=100 –-auto-generate-sql</span><br><span class="line"><span class="comment"># -–concurrency=10 指定同时有10个客户端连接</span></span><br><span class="line"><span class="comment"># –-number-of-queries=100 指定总的测试查询次数（并发客户端数 * 每个客户端的查询次数）</span></span><br></pre></td></tr></table></figure>

<h4 id="自动生成复杂表"><a href="#自动生成复杂表" class="headerlink" title="自动生成复杂表"></a>自动生成复杂表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlslap –uroot –p123456 –-concurrency=10 –-number-int-cols=5 –-number-char-cols=20 –-auto-generate-sql</span><br><span class="line"><span class="comment"># -–number-int-cols=5 指定生成5个 int 类型的列</span></span><br><span class="line"><span class="comment"># -–number-char-cols=20 指定生成20个 char 类型的列</span></span><br></pre></td></tr></table></figure>

<h4 id="使用自己的测试库和测试语句"><a href="#使用自己的测试库和测试语句" class="headerlink" title="使用自己的测试库和测试语句"></a>使用自己的测试库和测试语句</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlslap –uroot –p123456 –-concurrency=50 –-create-schema=employees –-query=<span class="string">&quot;SELECT * FROM dept_emp;&quot;</span></span><br><span class="line"><span class="comment"># -–create-schema 用来指定测试库名称</span></span><br><span class="line"><span class="comment"># -–query 是自定义的测试语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际使用时，一般是测试多个复杂的语句，可以定义一个脚本文件，示例：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SELECT * FROM employees; SELECT * FROM titles; SELECT * FROM dept_emp;&quot;</span> &gt; ~/select_query.sql</span><br><span class="line"><span class="comment"># 把多个查询语句写入了一个 sql 文件，然后使用此文件执行测试</span></span><br><span class="line">mysqlslap –uroot –p123456 –-concurrency=20 –-number-of-queries=1000 -–create-schema=employees –-query=<span class="string">&quot;select_query.sql&quot;</span> –-delimiter=<span class="string">&quot;;&quot;</span></span><br><span class="line"><span class="comment"># -–query 指定了sql文件</span></span><br><span class="line"><span class="comment"># -–delimiter 说明sql文件中语句间的分隔符</span></span><br></pre></td></tr></table></figure>

<h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlslap [options]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用参数 [options] 详细说明：</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>–auto-generate-sql, -a</td>
<td>自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力。</td>
</tr>
<tr>
<td>–auto-generate-sql-load-type=type</td>
<td>测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read，key，write，update和mixed(默认)。</td>
</tr>
<tr>
<td>–auto-generate-sql-add-auto-increment</td>
<td>代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持。</td>
</tr>
<tr>
<td>–number-char-cols=N, -x N</td>
<td>自动生成的测试表中包含多少个字符类型的列，默认1</td>
</tr>
<tr>
<td>–number-int-cols=N, -y N</td>
<td>自动生成的测试表中包含多少个数字类型的列，默认1</td>
</tr>
<tr>
<td>–number-of-queries=N</td>
<td>总的测试查询次数(并发客户数×每客户查询次数)</td>
</tr>
<tr>
<td>–query=name,-q</td>
<td>使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试。</td>
</tr>
<tr>
<td>–create-schema</td>
<td>代表自定义的测试库名称，测试的schema，MySQL中schema也就是database。</td>
</tr>
<tr>
<td>–commint=N</td>
<td>多少条DML后提交一次。</td>
</tr>
<tr>
<td>–compress, -C</td>
<td>如果服务器和客户端支持都压缩，则压缩信息传递。</td>
</tr>
<tr>
<td>–concurrency=N, -c N</td>
<td>表示并发量，也就是模拟多少个客户端同时执行select。可指定多个值，以逗号或者–delimiter参数指定的值做为分隔符。例如：–concurrency=100,200,500。</td>
</tr>
<tr>
<td>–engine=engine_name, -e engine_name</td>
<td>代表要测试的引擎，可以有多个，用分隔符隔开。例如：–engines=myisam,innodb。</td>
</tr>
<tr>
<td>–iterations=N, -i N</td>
<td>测试执行的迭代次数，代表要在不同并发环境下，各自运行测试多少次。</td>
</tr>
<tr>
<td>–only-print</td>
<td>只打印测试语句而不实际执行。</td>
</tr>
<tr>
<td>–detach=N</td>
<td>执行N条语句后断开重连。</td>
</tr>
<tr>
<td>–debug-info, -T</td>
<td>打印内存和CPU的相关信息。</td>
</tr>
</tbody></table>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单线程测试</span></span><br><span class="line">mysqlslap -a -uroot -p123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程测试。使用–-concurrency来模拟并发连接。</span></span><br><span class="line">mysqlslap -a -c 100 -uroot -p123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代测试。用于需要多次执行测试得到平均值。</span></span><br><span class="line">mysqlslap -a -i 10 -uroot -p123456</span><br><span class="line"></span><br><span class="line">mysqlslap --auto-generate-sql-add-autoincrement -a -uroot -p123456</span><br><span class="line">mysqlslap -a --auto-generate-sql-load-type=<span class="built_in">read</span> -uroot -p123456</span><br><span class="line">mysqlslap -a --auto-generate-secondary-indexes=3 -uroot -p123456</span><br><span class="line">mysqlslap -a --auto-generate-sql-write-number=1000 -uroot -p123456</span><br><span class="line">mysqlslap --create-schema world -q <span class="string">&quot;select count(*) from City&quot;</span> -uroot -p123456</span><br><span class="line">mysqlslap -a -e innodb -uroot -p123456</span><br><span class="line">mysqlslap -a --number-of-queries=10 -uroot -p123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试同时不同的存储引擎的性能进行对比：</span></span><br><span class="line">mysqlslap -a --concurrency=50,100 --number-of-queries 1000 --iterations=5 --engine=myisam,innodb --debug-info -uroot -p123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一次测试，分别50和100个并发，执行1000次总查询：</span></span><br><span class="line">mysqlslap -a --concurrency=50,100 --number-of-queries 1000 --debug-info -uroot -p123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 50和100个并发分别得到一次测试结果(Benchmark)，并发数越多，执行完所有查询的时间越长。为了准确起见，可以多迭代测试几次:</span></span><br><span class="line">mysqlslap -a --concurrency=50,100 --number-of-queries 1000 --iterations=5 --debug-info -uroot -p123456</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql命令（总结）</title>
    <url>/2019/01/01/mysql%E5%91%BD%E4%BB%A4%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1、修改密码"><a href="#1、修改密码" class="headerlink" title="1、修改密码"></a>1、修改密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：mysqladmin -u用户名 -p旧密码 password 新密码</span><br><span class="line">或 update user set password=password(&quot;新密码&quot;) where user=&quot;用户&quot;；</span><br><span class="line">例如：mysqladmin -uroot -p123456 password 654321</span><br><span class="line">注：绿色版给root添加密码：</span><br><span class="line">mysqladmin -uroot -password 密码</span><br></pre></td></tr></table></figure>

<h4 id="2、连接MySQL"><a href="#2、连接MySQL" class="headerlink" title="2、连接MySQL"></a>2、连接MySQL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：mysql -h主机地址 -u用户名 -p用户密码</span><br></pre></td></tr></table></figure>

<h4 id="3、新增用户"><a href="#3、新增用户" class="headerlink" title="3、新增用户"></a>3、新增用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL进入root环境</span><br><span class="line">创建用户：</span><br><span class="line">格式：grant select，insert,update,delete on 某数据库.* to 用户名@&quot;%&quot; identified by &quot;用户密码&quot; ;</span><br><span class="line"></span><br><span class="line">说明：grant与on之间是各种权限，select,alter,update,delete,insert等，所有权限all，on后是数据库名和表名，*代表所有，@前是用户名，@后是域名或者IP，identified by 后面是登陆密码，可省略。</span><br><span class="line"></span><br><span class="line">增加一个超级权限管理用户admin（在数据库本机上用ROOT用户登录上MySql）</span><br><span class="line">命令：GRANT ALL PRIVILEGES ON *.* TO</span><br><span class="line">  [email=admin@localhost]admin@localhost[/email]</span><br><span class="line">  IDENTIFIED BY &#x27;something&#x27; WITH GRANT OPTION;</span><br><span class="line">something是用户密码。</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">删除授权：revoke all privileges on *.* from [email=root@localhost]root@localhost[/email];</span><br><span class="line">delete from user where user=&quot;root&quot; and host=&quot;%&quot;;</span><br><span class="line"></span><br><span class="line">还可以创建用户：</span><br><span class="line">create user 用户名 identified by 密码；</span><br></pre></td></tr></table></figure>

<h4 id="4、查看数据库相关信息"><a href="#4、查看数据库相关信息" class="headerlink" title="4、查看数据库相关信息"></a>4、查看数据库相关信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">版本信息：select version(),user(),now(),current_date();</span><br><span class="line">数据库：show databases;</span><br><span class="line">使用数据库：use 数据库名称;</span><br><span class="line">查看表：show tables;</span><br><span class="line">查看设计表：desc 表名;</span><br><span class="line">查看当前数据库：select database() ;</span><br></pre></td></tr></table></figure>

<h4 id="5、数据库操作"><a href="#5、数据库操作" class="headerlink" title="5、数据库操作"></a>5、数据库操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建数据库：create database 数据库名称;</span><br><span class="line">创建数据表：create table 表名(字段1，字段2，...);</span><br><span class="line">添加数据：insert into 表名（字段1，字段2，...） values (值1，值2，...);</span><br><span class="line">查询：select 字段1，字段2，... from 表名 where 条件 </span><br><span class="line">修改：update 表名 set 字段1=值1，...where 条件</span><br><span class="line">添加一列：alter table 表名 add column 字段；eg: alter table person add column singe varchar(1);</span><br><span class="line">删除记录：delete from 表名 where 条件；</span><br><span class="line">删除表：drop table 表名1，表名2，...;</span><br><span class="line">删除数据库：drop database 数据库名；</span><br><span class="line">表重命名：alter table 旧表名 rename 新表名</span><br><span class="line"></span><br><span class="line">数据库备份</span><br><span class="line">mysqldump -h 域名或IP -u 用户名 -p [-d][-t]数据库名&gt;备份数据库名.sql；</span><br><span class="line">其中&gt;表示备份，&lt;表示恢复。-d只导出建表指令，-t表示插入数据的指令</span><br><span class="line"></span><br><span class="line">导入数据库：</span><br><span class="line">source命令：source 脚本文件（xxx.sql）;</span><br><span class="line">mysqldump命令： 使用 &lt;</span><br><span class="line">mysql命令：mysql -u用户名 -p -D 数据库&lt;脚本文件（xxx.sql）</span><br><span class="line">load命令：load data local infile &quot;文件名.txt&quot; into table 表名（字段1，字段2，...）；注：文件中字段以tab隔开</span><br></pre></td></tr></table></figure>

<h4 id="安全模式登入（即绕过密码验证）"><a href="#安全模式登入（即绕过密码验证）" class="headerlink" title="安全模式登入（即绕过密码验证）"></a>安全模式登入（即绕过密码验证）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/init.d/mysql stop</span><br><span class="line"># mysqld_safe --user=mysql --skip-grant-tables</span><br><span class="line"># mysql -u root mysql</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set password = password(&quot;123456&quot;) where user=&#x27;root&#x27;;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql开启binlog</title>
    <url>/2019/01/01/mysql%E5%BC%80%E5%90%AFbinlog/</url>
    <content><![CDATA[<h3 id="mysql5-7-开启binlog"><a href="#mysql5-7-开启binlog" class="headerlink" title="mysql5.7 开启binlog"></a>mysql5.7 开启binlog</h3><h4 id="查看是否已经开启binlog"><a href="#查看是否已经开启binlog" class="headerlink" title="查看是否已经开启binlog"></a>查看是否已经开启binlog</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%log_bin%&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="开启binlog"><a href="#开启binlog" class="headerlink" title="开启binlog"></a>开启binlog</h4><ul>
<li>win10<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改Mysql配置文件（C:\ProgramData\MySQL\MySQL Server 5.7\my.ini）</span><br><span class="line"># 可以在服务中查看加载的my.ini的路径</span><br><span class="line"># Other default tuning values</span><br><span class="line">[client]</span><br><span class="line">no-beep</span><br><span class="line">default-character-set=utf8</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"># server_type=3</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># The Pipe the MySQL Server will use</span><br><span class="line"># socket=MYSQL</span><br><span class="line"></span><br><span class="line"># The TCP/IP Port the MySQL Server will listen on</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line"># Path to installation directory.</span><br><span class="line">basedir=&quot;C:/Program Files/MySQL/MySQL Server 5.7/&quot;</span><br><span class="line"></span><br><span class="line"># Path to the database root</span><br><span class="line">datadir=C:/ProgramData/MySQL/MySQL Server 5.7\Data</span><br><span class="line"></span><br><span class="line">character-set-server=utf8</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line"></span><br><span class="line"># The default storage engine that will be used when create new tables when</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line"># Set the SQL mode to strict</span><br><span class="line">sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><br><span class="line"></span><br><span class="line"># Enable Windows Authentication</span><br><span class="line"># plugin-load=authentication_windows.dll</span><br><span class="line"></span><br><span class="line"># General and Slow logging.</span><br><span class="line">log-output=FILE</span><br><span class="line">general-log=0</span><br><span class="line">general_log_file=&quot;mysql-murray.log&quot;</span><br><span class="line">slow-query-log=1</span><br><span class="line">slow_query_log_file=&quot;mysql-murray-slow.log&quot;</span><br><span class="line">long_query_time=10</span><br><span class="line"></span><br><span class="line"># Error Logging.</span><br><span class="line">log-error=&quot;mysql-murray.err&quot;</span><br><span class="line"></span><br><span class="line"># Binary Logging.</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog-format=Row</span><br><span class="line"></span><br><span class="line"># Server Id.</span><br><span class="line">server-id=201908</span><br><span class="line"></span><br><span class="line"># Secure File Priv.</span><br><span class="line">secure-file-priv=&quot;C:/ProgramData/MySQL/MySQL Server 5.7/Uploads&quot;</span><br><span class="line"></span><br><span class="line"># The maximum amount of concurrent sessions the MySQL server will allow. </span><br><span class="line">max_connections=151</span><br><span class="line"></span><br><span class="line"># Query cache is used to cache SELECT results and later return them without actual executing the same query once again. </span><br><span class="line">query_cache_size=0</span><br><span class="line"></span><br><span class="line"># The number of open tables for all threads. </span><br><span class="line">table_open_cache=2000</span><br><span class="line"></span><br><span class="line"># Maximum size for internal (in-memory) temporary tables. </span><br><span class="line">tmp_table_size=111M</span><br><span class="line"></span><br><span class="line"># How many threads we should keep in a cache for reuse.</span><br><span class="line">thread_cache_size=10</span><br><span class="line"></span><br><span class="line">#*** MyISAM Specific options</span><br><span class="line">myisam_max_sort_file_size=100G</span><br><span class="line">myisam_sort_buffer_size=212M</span><br><span class="line">key_buffer_size=8M</span><br><span class="line"></span><br><span class="line">read_buffer_size=64K</span><br><span class="line">read_rnd_buffer_size=256K</span><br><span class="line"></span><br><span class="line">#*** INNODB Specific options ***</span><br><span class="line">innodb_flush_log_at_trx_commit=1</span><br><span class="line">innodb_log_buffer_size=1M</span><br><span class="line">innodb_buffer_pool_size=8M</span><br><span class="line">innodb_log_file_size=48M</span><br><span class="line">innodb_thread_concurrency=9</span><br><span class="line">innodb_autoextend_increment=64</span><br><span class="line">innodb_buffer_pool_instances=8</span><br><span class="line">innodb_concurrency_tickets=5000</span><br><span class="line">innodb_old_blocks_time=1000</span><br><span class="line">innodb_open_files=300</span><br><span class="line">innodb_stats_on_metadata=0</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">innodb_checksum_algorithm=0</span><br><span class="line"></span><br><span class="line">back_log=80</span><br><span class="line">flush_time=0</span><br><span class="line">join_buffer_size=256K</span><br><span class="line">max_allowed_packet=4M</span><br><span class="line">max_connect_errors=100</span><br><span class="line">open_files_limit=4161</span><br><span class="line">query_cache_type=0</span><br><span class="line">sort_buffer_size=256K</span><br><span class="line">table_definition_cache=1400</span><br><span class="line">binlog_row_event_max_size=8K</span><br><span class="line">sync_master_info=10000</span><br><span class="line">sync_relay_log=10000</span><br><span class="line">sync_relay_log_info=10000</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的设置参数中max_allowed_packet过小导致操作异常</title>
    <url>/2019/01/01/mysql%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E4%B8%ADmax_allowed_packet%E8%BF%87%E5%B0%8F%E5%AF%BC%E8%87%B4%E6%93%8D%E4%BD%9C%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h4 id="mysql的设置参数中max-allowed-packet过小导致操作异常"><a href="#mysql的设置参数中max-allowed-packet过小导致操作异常" class="headerlink" title="mysql的设置参数中max_allowed_packet过小导致操作异常"></a>mysql的设置参数中max_allowed_packet过小导致操作异常</h4><h5 id="永久性方案"><a href="#永久性方案" class="headerlink" title="永久性方案"></a>永久性方案</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改方法(配置文件持久化修改)：</span><br><span class="line">vim /etc/mysql/conf.d/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">max_allowed_packet = 100M</span><br><span class="line"></span><br><span class="line"># 注意：修改配置文件以后，需要重启mysql服务才能生效。</span><br></pre></td></tr></table></figure>

<h5 id="临时解决方案-修改该值"><a href="#临时解决方案-修改该值" class="headerlink" title="临时解决方案,修改该值"></a>临时解决方案,修改该值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;max_allowed_packet&#x27;;</span><br><span class="line">set global max_allowed_packet = 100 * 1024 * 1024;</span><br><span class="line"></span><br><span class="line"># 重启Mysql还是会恢复到默认值,所以需要写在配置文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li>命令行修改时，不能用M、G，只能这算成字节数设置。配置文件修改才允许设置M、G单位。</li>
<li>命令行修改之后，需要退出当前回话(关闭当前mysqlserver链接)，然后重新登录才能查看修改后的值。通过命令行修改只能临时生效，下次数据库重启后又复原了。</li>
<li>max_allowed_packet 最大值是1G(1073741824)，如果设置超过1G，查看最终生效结果也只有1G。</li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx之lua脚本</title>
    <url>/2021/03/01/nginx%E4%B9%8Blua%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://www.oschina.net/translate/augment-your-api-without-touching-it?print">https://www.oschina.net/translate/augment-your-api-without-touching-it?print</a></p>
<h3 id="使用lua扩展nginx"><a href="#使用lua扩展nginx" class="headerlink" title="使用lua扩展nginx"></a>使用lua扩展nginx</h3><blockquote>
<p>扩展nginx我们必须先提供lua的支持，它不是ngnix的一部分。无需担心因为已有很多组件编译进了lua，像:</p>
</blockquote>
<ul>
<li>openresty</li>
</ul>
<blockquote>
<p>自己安装nginx扩展lua:</p>
</blockquote>
<ul>
<li>Lua nginx module</li>
<li>HttpProxy module</li>
</ul>
<h3 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h3><ul>
<li>官方：<a href="http://openresty.org/cn/linux-packages.html">http://openresty.org/cn/linux-packages.html</a></li>
</ul>
<ul>
<li><p>ubuntu下安装openresty</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入我们的 GPG 密钥：</span></span><br><span class="line">wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 add-apt-repository 命令</span></span><br><span class="line">sudo apt-get -y install software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加我们官方 official APT 仓库：</span></span><br><span class="line">sudo add-apt-repository -y <span class="string">&quot;deb http://openresty.org/package/ubuntu <span class="subst">$(lsb_release -sc)</span> main&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 APT 索引：</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件包openresty</span></span><br><span class="line">sudo apt-get install openresty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面指令同时会安装上推荐的安装 openresty-opm 和 openresty-restydoc， 若不想自动关联安装，可以用下面方法关闭自动关联安装：</span></span><br><span class="line">sudo apt-get install --no-install-recommends openresty</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>openresty测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改openresty配置</span></span><br><span class="line">vim /etc/openresty/nginx.conf</span><br><span class="line"><span class="comment"># 在http模块，添加</span></span><br><span class="line">include /etc/openresty/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试配置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/openresty/conf.d</span><br><span class="line">vim lua-demo.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  </span><br><span class="line">        listen 8881 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location /lua &#123;</span><br><span class="line">                content_by_lua <span class="string">&#x27;ngx.say(&quot;hello, lua.&quot;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启openresty</span></span><br><span class="line">service openresty restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl <span class="string">&#x27;127.0.0.1:8881/lua&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># hello, lua.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>json转xml测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖 LuaXml、cjson</span></span><br><span class="line"><span class="comment"># 待完善</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lua脚本(xml_to_json.lua)</span></span><br><span class="line"><span class="built_in">local</span> xml = require(<span class="string">&quot;LuaXml&quot;</span>)</span><br><span class="line">require(<span class="string">&quot;os&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> cjson = require(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">local</span> path = ngx.var.request:<span class="built_in">split</span>(<span class="string">&quot; &quot;</span>)[2]</span><br><span class="line"><span class="built_in">local</span> m = ngx.re.match(path,[=[/([^/]+)\.(json|xml)$]=]) -- match last word</span><br><span class="line"><span class="built_in">local</span> res = ngx.location.capture(<span class="string">&quot;/data/word/&quot;</span>.. m[1] .. <span class="string">&quot;.json&quot;</span> )</span><br><span class="line"><span class="built_in">local</span> value=cjson.new().decode(res.body)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">local</span> response = xml.new(<span class="string">&quot;response&quot;</span>)</span><br><span class="line"> </span><br><span class="line">response.word= xml.new(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">response.sentiment = xml.new(<span class="string">&quot;sentiment&quot;</span>)</span><br><span class="line">response.timestamp = xml.new(<span class="string">&quot;timestamp&quot;</span>)</span><br><span class="line">table.insert(response.word, value.word)</span><br><span class="line">table.insert(response.sentiment, value.sentiment)</span><br><span class="line">table.insert(response.timestamp, os.date())</span><br><span class="line"> </span><br><span class="line">ngx.say(<span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span>, xml.str(response,0))</span><br><span class="line"></span><br><span class="line"><span class="comment"># openresty 配置</span></span><br><span class="line">location ~ ^/data/word/(.*).json$ &#123;</span><br><span class="line">  content_by_lua_file /etc/openresty/conf.d/xml_to_json.lua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="nginx执行步骤"><a href="#nginx执行步骤" class="headerlink" title="nginx执行步骤"></a>nginx执行步骤</h4><blockquote>
<p>nginx在处理每一个用户请求时，都是按照若干个不同的阶段依次处理的，与配置文件上的顺序没有关系，详细内容可以阅读《深入理解nginx:模块开发与架构解析》，这里只做简单介绍</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>执行阶段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>post-read</td>
<td>读取请求内容阶段，nginx读取并解析完请求头之后就立即开始运行；</td>
</tr>
<tr>
<td>2</td>
<td>server-rewrite</td>
<td>server请求地址重写阶段；</td>
</tr>
<tr>
<td>3</td>
<td>find-config</td>
<td>配置查找阶段，用来完成当前请求与location配重块之间的配对工作；</td>
</tr>
<tr>
<td>4</td>
<td>rewrite</td>
<td>location请求地址重写阶段，当ngx_rewrite指令用于location中，就是再这个阶段运行的；</td>
</tr>
<tr>
<td>5</td>
<td>post-rewrite</td>
<td>请求地址重写提交阶段，当nginx完成rewrite阶段所要求的内部跳转动作，如果rewrite阶段有这个要求的话；</td>
</tr>
<tr>
<td>6</td>
<td>preaccess</td>
<td>访问权限检查准备阶段，ngx_limit_req和ngx_limit_zone在这个阶段运行，ngx_limit_req可以控制请求的访问频率，ngx_limit_zone可以控制访问的并发度；</td>
</tr>
<tr>
<td>7</td>
<td>access</td>
<td>权限检查阶段，ngx_access在这个阶段运行，配置指令多是执行访问控制相关的任务，如检查用户的访问权限，检查用户的来源IP是否合法；</td>
</tr>
<tr>
<td>8</td>
<td>post-access</td>
<td>访问权限检查提交阶段；</td>
</tr>
<tr>
<td>9</td>
<td>try-files</td>
<td>配置项try_files处理阶段；</td>
</tr>
<tr>
<td>10</td>
<td>content</td>
<td>内容产生阶段，是所有请求处理阶段中最为重要的阶段，因为这个阶段的指令通常是用来生成HTTP响应内容的；</td>
</tr>
<tr>
<td>11</td>
<td>log</td>
<td>日志模块处理阶段；</td>
</tr>
</tbody></table>
<h4 id="Nginx-模块执行顺序与阶段"><a href="#Nginx-模块执行顺序与阶段" class="headerlink" title="Nginx 模块执行顺序与阶段"></a>Nginx 模块执行顺序与阶段</h4><p><img src="https://mhiwyf.github.io/images/ydnote/2019/nginx-lua.jpg" alt="Nginx 模块执行顺序与阶段"></p>
<h4 id="ngx-lua-运行指令"><a href="#ngx-lua-运行指令" class="headerlink" title="ngx_lua 运行指令"></a>ngx_lua 运行指令</h4><blockquote>
<p>ngx_lua属于nginx的一部分，它的执行指令都包含在nginx的11个步骤之中，相应的处理阶段可以做插入式处理，即可插拔式架构，不过ngx_lua并不是所有阶段都会运行的；另外指令可以在http、server、server if、location、location if几个范围进行配置：</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>所处处理阶段</th>
<th>使用范围</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>init_by_lua <br>init_by_lua_file</td>
<td>loading-config</td>
<td>http</td>
<td>nginx Master进程加载配置时执行；<br>通常用于初始化全局配置/预加载Lua模块</td>
</tr>
<tr>
<td>init_worker_by_lua <br>init_worker_by_lua_file</td>
<td>starting-worker</td>
<td>http</td>
<td>每个Nginx Worker进程启动时调用的计时器，<br>如果Master进程不允许则只会在init_by_lua之后调用；<br>通常用于定时拉取配置/数据，或者后端服务的健康检查</td>
</tr>
<tr>
<td>set_by_lua <br>set_by_lua_file</td>
<td>rewrite</td>
<td>server,server if,location,location if</td>
<td>设置nginx变量，可以实现复杂的赋值逻辑；<br>此处是阻塞的，Lua代码要做到非常快；</td>
</tr>
<tr>
<td>rewrite_by_lua <br>rewrite_by_lua_file</td>
<td>rewrite tail</td>
<td>http,server,location,location if</td>
<td>rewrite阶段处理，可以实现复杂的转发/重定向逻辑；</td>
</tr>
<tr>
<td>access_by_lua <br>access_by_lua_file</td>
<td>access tail</td>
<td>http,server,location,location if</td>
<td>请求访问阶段处理，用于访问控制</td>
</tr>
<tr>
<td>content_by_lua <br>content_by_lua_file</td>
<td>content</td>
<td>location，location if</td>
<td>内容处理器，接收请求处理并输出响应</td>
</tr>
<tr>
<td>header_filter_by_lua <br>header_filter_by_lua_file</td>
<td>output-header-filter</td>
<td>http，server，location，location if</td>
<td>设置header和cookie</td>
</tr>
<tr>
<td>body_filter_by_lua <br>body_filter_by_lua_file</td>
<td>output-body-filter</td>
<td>http，server，location，location if</td>
<td>对响应数据进行过滤，比如截断、替换。</td>
</tr>
<tr>
<td>log_by_lua <br>log_by_lua_file</td>
<td>log</td>
<td>http，server，location，location if</td>
<td>log阶段处理，比如记录访问量/统计平均响应时间</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置示例</title>
    <url>/2021/03/01/nginx%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="示例一-ssl、rewrite"><a href="#示例一-ssl、rewrite" class="headerlink" title="示例一(ssl、rewrite)"></a>示例一(ssl、rewrite)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8001 ssl;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        #ssl on;</span><br><span class="line">        ssl_certificate /etc/nginx/alikey/214624595710549.pem;</span><br><span class="line">        ssl_certificate_key /etc/nginx/alikey/214624595710549.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        server_name h3c.com;</span><br><span class="line">        client_max_body_size 4M;</span><br><span class="line">        </span><br><span class="line">        location /data/file &#123;</span><br><span class="line">            root /;</span><br><span class="line">            etag on;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">            rewrite /nirvana/(.*) /nirvana/$1/ last;</span><br><span class="line">            proxy_pass http://127.0.0.1:5006/;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~* /nirvana/(.*)/$ &#123;</span><br><span class="line">            resolver 114.114.114.114;</span><br><span class="line">            proxy_set_header &#x27;Authorization&#x27;  &#x27;Skeleton gjtxsjtyjsxqsl Z2p0eHNqdHlqc3hxc2w=&#x27;;</span><br><span class="line">            proxy_pass http://edtech.h3c.com:14001/api/volcano/applet/$1/$is_args$args;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /chat &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:5007/chat;</span><br><span class="line">        &#125;</span><br><span class="line">        location /chat/docs &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:5007/docs;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~* /(.*)\/([0-9a-z-]+)\.(jpg|png|jpeg|gif)!(\d+)x(\d+)$ &#123;</span><br><span class="line">            if (-f $request_filename) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            set $filepath $1;</span><br><span class="line">            set $filename &quot;$2.$3&quot;;</span><br><span class="line">            set $thumb    &quot;$2_$4x$5.$3&quot;;</span><br><span class="line">            set $width    $4;</span><br><span class="line">            set $height   $5;</span><br><span class="line"></span><br><span class="line">            if (!-f $document_root/$filepath/$filename) &#123;</span><br><span class="line">                return 404;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rewrite /(.*)\/([0-9a-z-]+)\.(.*) /imgcache/$filepath/$2.$3;</span><br><span class="line"></span><br><span class="line">            if (!-f $request_filename) &#123;</span><br><span class="line">                proxy_pass https://127.0.0.1:$server_port/image-resize/$filepath/$filename?width=$width&amp;height=$height;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            proxy_store          $document_root/imgcache/$filepath/$thumb;</span><br><span class="line">            proxy_store_access   user:rw  group:rw  all:r;</span><br><span class="line">            proxy_set_header     Host $host;</span><br><span class="line">            proxy_temp_path      /data/ischool/imgtmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	    location /image-resize &#123;</span><br><span class="line">            rewrite /(image-resize)/(.*) /$2 break;</span><br><span class="line">            # 根据参数，resize 找到的图片</span><br><span class="line">            image_filter resize $arg_width $arg_height;</span><br><span class="line">            image_filter_jpeg_quality 75;</span><br><span class="line">            # 禁止外网的访问，只允许本地访问</span><br><span class="line">            allow 127.0.0.0/8;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="示例二-前端项目"><a href="#示例二-前端项目" class="headerlink" title="示例二(前端项目)"></a>示例二(前端项目)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 4005 ssl;</span><br><span class="line">    ssl_certificate /etc/nginx/alikey/214624595710549.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/alikey/214624595710549.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    server_name class.h3c.com;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 40M;</span><br><span class="line">    uwsgi_read_timeout 300;</span><br><span class="line">    root /var/www/openproject-front;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /data/file &#123;</span><br><span class="line">        root /;</span><br><span class="line">        etag on;</span><br><span class="line">    &#125;</span><br><span class="line">    location /zeus &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:5002/zeus;</span><br><span class="line">    &#125;</span><br><span class="line">    location /lvz/ &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">        add_header Access-Control-Allow-Headers &#x27;Content-Type,Authorization&#x27;;</span><br><span class="line">        # add_header Access-Control-Allow-Headers &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;;</span><br><span class="line">        add_header Access-Control-Allow-Methods &#x27;GET,POST,PUT,DELETE,OPTIONS&#x27;;</span><br><span class="line">        proxy_set_header apikey b10882beb8704abea62596c85ce5d271;</span><br><span class="line">        proxy_pass https://lvzhouapi.h3c.com/;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /liteapp/direction &#123;</span><br><span class="line">        include proxy_params;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">        proxy_pass http://127.0.0.1:4000/liteapp/direction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="示例三-Lua"><a href="#示例三-Lua" class="headerlink" title="示例三(Lua)"></a>示例三(Lua)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># nginx主配置</span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    lua_package_path &quot;/usr/local/lib/lualibs/lua-resty-http-0.13/lib/?.lua;;&quot;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># nginx配置</span><br><span class="line">server &#123;</span><br><span class="line">    listen 4010 ssl;</span><br><span class="line">    ssl_certificate /etc/nginx/alikey/214624595710549.pem;</span><br><span class="line">    ssl_certificate_key /etc/nginx/alikey/214624595710549.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    server_name class.h3c.com;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 40M;</span><br><span class="line">    uwsgi_read_timeout 300;</span><br><span class="line">    root /var/www/openproject-front;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /data/file &#123;</span><br><span class="line">        root /;</span><br><span class="line">        etag on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /open/nva/ &#123;</span><br><span class="line">        lua_code_cache off;</span><br><span class="line">        resolver 114.114.114.114;</span><br><span class="line">        access_by_lua_file /etc/openresty/conf.d/access.lua;</span><br><span class="line">        proxy_set_header &#x27;Authorization&#x27;  &#x27;Skeleton gjtxsjtyjsxqsl Z2p0eHNqdHlqc3hxc2w=&#x27;;</span><br><span class="line">        proxy_pass http://edtech-test.h3c.com:14001/api/;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /file/ &#123;</span><br><span class="line">        resolver 114.114.114.114;</span><br><span class="line">        proxy_pass http://edtech-test.h3c.com:14001;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># lua脚本(access.lua)</span><br><span class="line">--[[ </span><br><span class="line">Nginx 网关认证过程：</span><br><span class="line">1. 从 request 中提取 Token 和 client_id 等其他参数</span><br><span class="line">2. 从开放平台获取 client_id 对应的 client_secret</span><br><span class="line">3. 根据 client_secret 和其他参数，验证 Token 是否正确</span><br><span class="line">4. Token 正确则放行并存于缓存，不正确则 403</span><br><span class="line">--]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local REDIS_HOST = &quot;127.0.0.1&quot;</span><br><span class="line">local REDIS_PORT = 6379</span><br><span class="line">local RemoteValidateURL = &quot;http://class.h3c.com:3005/zeus/user/ak/valid/&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local function validateFromRemote(clientID, timeStamp, accessKey)</span><br><span class="line">    local json = require(&quot;cjson&quot;)</span><br><span class="line">    local http = require(&quot;resty.http&quot;)  </span><br><span class="line">    -- 创建http客户端实例  </span><br><span class="line">    local httpc = http.new()  </span><br><span class="line">    local params = &#123;&#125;</span><br><span class="line">    params[&quot;client_id&quot;] = clientID</span><br><span class="line">    params[&quot;access_key&quot;] = accessKey</span><br><span class="line">    params[&quot;timestamp&quot;] = timeStamp</span><br><span class="line">    ngx.log(ngx.INFO, json.encode(params))</span><br><span class="line">    local resp, err = httpc:request_uri(RemoteValidateURL, &#123;  </span><br><span class="line">        method = &quot;POST&quot;,  </span><br><span class="line">        headers = &#123;  </span><br><span class="line">            [&quot;Content-Type&quot;] = &quot;application/json&quot;,</span><br><span class="line">            [&quot;Authorization&quot;] = &quot;Potent ZSiArhVDOSNdNOVv HmrsWbRRvVOGmcYldZSSDzWMgmzRXRvW&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        body = json.encode(params)</span><br><span class="line">    &#125;) </span><br><span class="line">    if not resp then  </span><br><span class="line">        ngx.log(ngx.INFO, &quot;request error :&quot;, err)  </span><br><span class="line">        httpc:close()</span><br><span class="line">        return </span><br><span class="line">    end</span><br><span class="line">    ngx.log(ngx.INFO, &quot;http status = &quot;, resp.status, &quot;\t&quot;, type(resp.status))</span><br><span class="line">    if resp.status ~= 200 then</span><br><span class="line">        httpc:close()</span><br><span class="line">        return false</span><br><span class="line">    end</span><br><span class="line">    -- ngx.log(ngx.INFO, &quot;body = &quot;, resp.body)  </span><br><span class="line">    local data = json.decode(resp.body)</span><br><span class="line">    httpc:close()</span><br><span class="line">    if data[&quot;code&quot;] ~= 0 then</span><br><span class="line">        ngx.log(ngx.INFO, &quot;response code = &quot;, data[&quot;code&quot;])</span><br><span class="line">        ngx.log(ngx.INFO, &quot;response message = &quot;, data[&quot;message&quot;]) </span><br><span class="line">        return false</span><br><span class="line">    end</span><br><span class="line">    return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function closeRedis(red)</span><br><span class="line">    if not red then</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line">    local ok, err = red:close()</span><br><span class="line">    if not ok then</span><br><span class="line">        ngx.log(ngx.ERR, &quot;Failed to close redis, error = &quot;, err)</span><br><span class="line">    end</span><br><span class="line">    ngx.log(ngx.INFO, &quot;redis closed.&quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function connectRedis()</span><br><span class="line">    local redis = require(&quot;resty.redis&quot;)  </span><br><span class="line">    --创建实例  </span><br><span class="line">    local red = redis:new()  </span><br><span class="line">    --设置超时（毫秒）  </span><br><span class="line">    red:set_timeout(1000)  </span><br><span class="line">    --建立连接  </span><br><span class="line">    local ok, err = red:connect(REDIS_HOST, REDIS_PORT)  </span><br><span class="line">    if not ok then  </span><br><span class="line">        ngx.log(ngx.ERR, &quot;connect to redis error : &quot;, err)  </span><br><span class="line">        closeRedis(red)  </span><br><span class="line">        return </span><br><span class="line">    end</span><br><span class="line">    return red</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function validateFromCache(clientID, accessKey)</span><br><span class="line">    local red = connectRedis()</span><br><span class="line">    if not red or red == ngx.null then</span><br><span class="line">        return false</span><br><span class="line">    end</span><br><span class="line">    --调用API进行处理 </span><br><span class="line">    local resp, err = red:get(clientID)  </span><br><span class="line">    if not resp then  </span><br><span class="line">        ngx.log(ngx.ERR, &quot;get msg error : &quot;, err)  </span><br><span class="line">        closeRedis(red)  </span><br><span class="line">        return false</span><br><span class="line">    end  </span><br><span class="line">    closeRedis(red)  </span><br><span class="line">    if resp == ngx.null or resp ~= accessKey then  </span><br><span class="line">        return false</span><br><span class="line">    end</span><br><span class="line">    return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local function setCache(clientID, accessKey)</span><br><span class="line">    local red = connectRedis()</span><br><span class="line">    if red == ngx.null then</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line">    --调用API进行处理  </span><br><span class="line">    ok, err = red:set(clientID, accessKey)  </span><br><span class="line">    if not ok then  </span><br><span class="line">        ngx.log(ngx.ERR, &quot;set msg error : &quot;, err)  </span><br><span class="line">        return closeRedis(red)  </span><br><span class="line">    end  </span><br><span class="line">    closeRedis(red)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ngx.log(ngx.WARN, &quot;Hello gaojian&quot;)</span><br><span class="line">local args    = ngx.req.get_uri_args()</span><br><span class="line">local headers = ngx.req.get_headers()</span><br><span class="line"></span><br><span class="line">-- local clientID  = headers[&quot;authorization&quot;]</span><br><span class="line">local appId = headers[&quot;x-app-id&quot;]</span><br><span class="line">local accessKey = headers[&quot;x-access-key&quot;]</span><br><span class="line">local timeStamp = headers[&quot;x-time-stamp&quot;]</span><br><span class="line"></span><br><span class="line">ngx.log(ngx.INFO, &quot;appId = &quot;, appId)</span><br><span class="line">ngx.log(ngx.INFO, &quot;accessKey = &quot;, accessKey)</span><br><span class="line">ngx.log(ngx.INFO, &quot;timeStamp = &quot;, timeStamp)</span><br><span class="line"></span><br><span class="line">local isValid = validateFromCache(appId, accessKey)</span><br><span class="line">if not isValid then</span><br><span class="line">    isValid = validateFromRemote(appId, timeStamp, accessKey)</span><br><span class="line">    -- if(isValid) then</span><br><span class="line">    --     setCache(clientID, accessKey)</span><br><span class="line">    -- end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.log(ngx.WARN, &quot;isValid = &quot;, isValid)</span><br><span class="line">-- ngx.header.content_type = &quot;application/json&quot;</span><br><span class="line"></span><br><span class="line">if not isValid then</span><br><span class="line">    ngx.status = ngx.HTTP_FORBIDDEN</span><br><span class="line">    return ngx.exit(ngx.HTTP_FORBIDDEN)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">--获取响应头  </span><br><span class="line">-- for k, v in pairs(resp.headers) do  </span><br><span class="line">--     if k ~= &quot;Transfer-Encoding&quot; and k ~= &quot;Connection&quot; then  </span><br><span class="line">--         ngx.header[k] = v  </span><br><span class="line">--     end  </span><br><span class="line">-- end  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 包下载很慢解决办法</title>
    <url>/2021/10/02/npm%20%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%BE%88%E6%85%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>安装Node时自带的npm地址默认是：<a href="http://registry.npmjs.org/">http://registry.npmjs.org</a> </p>
</blockquote>
<h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>


<h4 id="1-通过config命令"><a href="#1-通过config命令" class="headerlink" title="1. 通过config命令"></a>1. 通过config命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org</span><br><span class="line">（如果上面配置正确这个命令会有字符串response）</span><br></pre></td></tr></table></figure>

<h4 id="2-命令行指定"><a href="#2-命令行指定" class="headerlink" title="2. 命令行指定"></a>2. 命令行指定</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm --registry http://registry.cnpmjs.org</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-编辑node-modules-npm-npmrc加入下面内容"><a href="#3-编辑node-modules-npm-npmrc加入下面内容" class="headerlink" title="3. 编辑node_modules\npm.npmrc加入下面内容"></a>3. 编辑node_modules\npm.npmrc加入下面内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry = http://registry.cnpmjs.org</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果上面的npm地址不行的话，大家可以试试淘宝的npm，非常稳定:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">地址：https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="4-通过cnpm使用"><a href="#4-通过cnpm使用" class="headerlink" title="4. 通过cnpm使用"></a>4. 通过cnpm使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="npm地址"><a href="#npm地址" class="headerlink" title="npm地址"></a>npm地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认</span><br><span class="line">http://registry.npmjs.org </span><br><span class="line"></span><br><span class="line"># 国内npm地址</span><br><span class="line">http://registry.cnpmjs.org</span><br><span class="line"></span><br><span class="line"># 淘宝npm地址</span><br><span class="line">https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle 常用查询</title>
    <url>/2019/01/01/oracle%20%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h4 id="oracle-查询表，视图数量"><a href="#oracle-查询表，视图数量" class="headerlink" title="oracle-查询表，视图数量"></a>oracle-查询表，视图数量</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--统计某个用户下面的对象个数</span></span><br><span class="line"><span class="comment">--包括表，视图，同义词，函数，存储过程，包，触发器，索引,约束，序列。</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_TABLES) <span class="keyword">AS</span> TABLES,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_VIEWS) <span class="keyword">AS</span> VIEWS,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_SYNONYMS) <span class="keyword">AS</span> SYNONYMS,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)  <span class="keyword">FROM</span> USER_OBJECTS <span class="keyword">WHERE</span> OBJECT_TYPE<span class="operator">=</span><span class="string">&#x27;FUNCTION&#x27;</span>) <span class="keyword">AS</span> FUNCTIONS,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_OBJECTS <span class="keyword">WHERE</span> OBJECT_TYPE<span class="operator">=</span><span class="string">&#x27;PROCEDURE&#x27;</span>) <span class="keyword">AS</span> PROCEDURES,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_OBJECTS <span class="keyword">WHERE</span> OBJECT_TYPE<span class="operator">=</span><span class="string">&#x27;PACKAGE&#x27;</span>) <span class="keyword">AS</span> PACKAGES,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_OBJECTS <span class="keyword">WHERE</span> OBJECT_TYPE<span class="operator">=</span><span class="string">&#x27;TRIGGER&#x27;</span>) <span class="keyword">AS</span> TRIGGERS,</span><br><span class="line">(<span class="keyword">SELECT</span>  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> USER_INDEXES) <span class="keyword">AS</span> INDEXES,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)  <span class="keyword">FROM</span> USER_CONSTRAINTS) <span class="keyword">AS</span> CONSTRAINTS,</span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)  <span class="keyword">FROM</span> USER_SEQUENCES) <span class="keyword">AS</span> SEQUENCES</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>

<h4 id="Oracle-导出、导入某用户所有数"><a href="#Oracle-导出、导入某用户所有数" class="headerlink" title="Oracle 导出、导入某用户所有数"></a>Oracle 导出、导入某用户所有数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出命令</span></span><br><span class="line">exp 用户名/密码@数据库 owner=用户名 file=文件存储路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入命令</span></span><br><span class="line">imp 用户名/密码@数据库 fromuser=用户名 touser=用户名 file=文件存储路径 ignore=y</span><br><span class="line"></span><br><span class="line"><span class="comment"># fromuser:文件的指定用户</span></span><br><span class="line"><span class="comment"># touser：指定导入到当前登录的数据库某个用户  </span></span><br><span class="line"><span class="comment"># file:需要导入的数据文件  </span></span><br><span class="line"><span class="comment"># ignore:是否忽略创建错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXP/IMP基本语法和实例： </span><br><span class="line">1、EXP: </span><br><span class="line">  有三种主要的方式（完全、用户、表） </span><br><span class="line">  1、完全： </span><br><span class="line">      EXP SYSTEM/MANAGER BUFFER=64000 FILE=C:\FULL.DMP FULL=Y </span><br><span class="line">      如果要执行完全导出，必须具有特殊的权限 </span><br><span class="line">  2、用户模式： </span><br><span class="line">      EXP SONIC/SONIC    BUFFER=64000 FILE=C:\SONIC.DMP OWNER=SONIC </span><br><span class="line">      这样用户SONIC的所有对象被输出到文件中。 </span><br><span class="line">  3、表模式：</span><br><span class="line">      EXP SONIC/SONIC    BUFFER=64000 FILE=C:\SONIC.DMP OWNER=SONIC TABLES=(SONIC) </span><br><span class="line">      这样用户SONIC的表SONIC就被导出 </span><br><span class="line">2、IMP: </span><br><span class="line">  具有三种模式（完全、用户、表） </span><br><span class="line">  1、完全： </span><br><span class="line">      IMP SYSTEM/MANAGER BUFFER=64000 FILE=C:\FULL.DMP FULL=Y </span><br><span class="line">  2、用户模式： </span><br><span class="line">      IMP SONIC/SONIC    BUFFER=64000 FILE=C:\SONIC.DMP FROMUSER=SONIC TOUSER=SONIC </span><br><span class="line">      这样用户SONIC的所有对象被导入到文件中。必须指定FROMUSER、TOUSER参数，这样才能导入数据。 </span><br><span class="line">  3、表模式： </span><br><span class="line">      EXP SONIC/SONIC    BUFFER=64000 FILE=C:\SONIC.DMP OWNER=SONIC TABLES=(SONIC) </span><br><span class="line">      这样用户SONIC的表SONIC就被导入。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle用户创建及权限设置</title>
    <url>/2019/01/01/oracle%E7%94%A8%E6%88%B7%E5%88%9B%E5%BB%BA%E5%8F%8A%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  create session</span><br><span class="line">  create table</span><br><span class="line">  unlimited tablespace</span><br><span class="line">  connect</span><br><span class="line">  resource</span><br><span class="line">  dba</span><br><span class="line">例：</span><br><span class="line">    SQL&gt; conn / as sysdba;</span><br><span class="line">    SQL&gt;create user username identified by password</span><br><span class="line">    SQL&gt; grant dba to username;</span><br><span class="line">    SQL&gt; conn username/password</span><br><span class="line">    SQL&gt; select * from user_sys_privs;</span><br></pre></td></tr></table></figure>

<h5 id="赋予系统权限的语法"><a href="#赋予系统权限的语法" class="headerlink" title="赋予系统权限的语法"></a>赋予系统权限的语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT 系统权限[,系统权限,…] TO 用户;</span><br></pre></td></tr></table></figure>

<h5 id="回收系统权限语法"><a href="#回收系统权限语法" class="headerlink" title="回收系统权限语法"></a>回收系统权限语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE 系统权限[,系统权限,…] FROM 用户</span><br></pre></td></tr></table></figure>

<h5 id="创建角色的语法："><a href="#创建角色的语法：" class="headerlink" title="创建角色的语法："></a>创建角色的语法：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE ROLE 自定义角色名称;</span><br><span class="line">给角色赋予权限：</span><br><span class="line">GRANT 权限[,权限,…] TO 自定义角色名称;</span><br><span class="line">使用角色给用户授权：</span><br><span class="line">GRANT 自定义角色名称 TO 用户名</span><br><span class="line">删除角色语法：</span><br><span class="line">DROP ROLE 自定义角色名称</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ORACLE提供三个预定义角色：CONNECT  RESOURCE  DBA</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据字典：USER_SYS_PRIVS、SESSION_PRIVS</span><br><span class="line">USER_SYS_PRIVS：查看当前用户所拥有的系统权限</span><br><span class="line">SESSION_PRIVS：查看当前会话下的全部权限</span><br></pre></td></tr></table></figure>

<h5 id="权限-1"><a href="#权限-1" class="headerlink" title="权限"></a>权限</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create tableapace  创建表空间的权限</span><br><span class="line">create user 穿件用户的权限</span><br><span class="line">create session 创建会话的权限</span><br><span class="line">create role 创建角色的权限</span><br><span class="line">create table 为用户创建表的权限</span><br><span class="line">create view 为用户创建视图的权限</span><br><span class="line">create procedure 为用户创建存储过程的权限</span><br><span class="line">create sequence 为用户创建序列的权限</span><br><span class="line">create synonym 为用户创建同义词的权限</span><br><span class="line">create any table 为任意用户创建表的权限</span><br><span class="line">create any view 为任意用户创建视图的权限</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORACLE用户分为：</span><br><span class="line">超级管理员  DBA   SYS</span><br><span class="line">普通管理员  SYSTEM </span><br><span class="line">普通用户  SCOTT  用户自己创建的</span><br><span class="line"></span><br><span class="line">创建用户的语法：</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY 密码</span><br><span class="line"></span><br><span class="line">删除用户</span><br><span class="line">DROP USER 用户名 [cascade]</span><br><span class="line"></span><br><span class="line">数据字典：ORACLE提供一个记录所有信息视图，对ORACLE所有的操作，在数据字典都有记录</span><br><span class="line">全能字典：dict   select * from dict;</span><br><span class="line">数据字典分为三种类别：USER_XXXXX、ALL_XXXXX、DBA_XXXX</span><br><span class="line">USER 表示当前用户</span><br><span class="line">ALL 表示当前用户有权限访问到的所有对象的信息</span><br><span class="line">DBA 表示包括了所有数据库对象的信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORACLE中建立表空间步骤：</span><br><span class="line">/*分为四步 */</span><br><span class="line">/*第1步：创建临时表空间  */</span><br><span class="line">create temporary tablespace test_temp</span><br><span class="line">tempfile &#x27;D:\oracledata\test_temp.dbf&#x27;</span><br><span class="line">size 10m </span><br><span class="line">autoextend on </span><br><span class="line">next 50m maxsize unlimited </span><br><span class="line">extent management local; </span><br><span class="line"> </span><br><span class="line">/*第2步：创建数据表空间  */</span><br><span class="line">create tablespace test_data </span><br><span class="line">logging </span><br><span class="line">datafile &#x27;D:\oracledata\test_data.dbf&#x27;</span><br><span class="line">size 50m </span><br><span class="line">autoextend on </span><br><span class="line">next 50m maxsize unlimited</span><br><span class="line">extent management local; </span><br><span class="line"> </span><br><span class="line">/*第3步：创建用户并指定表空间  */</span><br><span class="line">create user tang identified by 123456 </span><br><span class="line">default tablespace test_data </span><br><span class="line">temporary tablespace test_temp; </span><br><span class="line">quota 30m ON test_data；</span><br><span class="line"> </span><br><span class="line">/*第4步：给用户授予权限  */</span><br><span class="line">grant connect,resource,dba to tang;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">截断表：</span><br><span class="line">TRUNCATE  TABLE  表名</span><br><span class="line">Delete 和truncate区别：</span><br><span class="line">Delete 删除表中数据，删除完成后，资源还在占用，可以回滚数据</span><br><span class="line">TRUNCATE  删除表中所有数据，删除完后，直接释放资源</span><br><span class="line"></span><br><span class="line">建议：</span><br><span class="line">当使用insert  update  delete 时，后面紧跟commit</span><br><span class="line"></span><br><span class="line">回闪奇数：</span><br><span class="line">语法：</span><br><span class="line">FLASHBACK TABLE 表名称 TO BEFORE DROP;</span><br><span class="line">flashback table student_temp1 to before drop; </span><br><span class="line">show recyclebin;查看回收站</span><br><span class="line"></span><br><span class="line">删除回收站中的表</span><br><span class="line">语法：PURGE  TABLE 表名称</span><br><span class="line"></span><br><span class="line">清空回收站</span><br><span class="line">PURGE RECYCLEBIN;</span><br><span class="line"></span><br><span class="line">删除表时不经过回收站</span><br><span class="line">DROP TABLE 表 PURGE;</span><br><span class="line"></span><br><span class="line">表中增加字段语法：</span><br><span class="line">ALTER TABLE 表名称 </span><br><span class="line">ADD (列名 数据类型 [DEFAULT 默认值], 列名 数据类型 [DEFAULT 默认值]…)</span><br><span class="line">alter table student_temp1 add (addr varchar2(20));</span><br><span class="line"></span><br><span class="line">修改已有的表结构语法：</span><br><span class="line">ALTER TABLE 表名称 </span><br><span class="line">MODIFY (列名 数据类型 [DEFAULT 默认值], 列名 数据类型 [DEFAULT 默认值]…)</span><br><span class="line"></span><br><span class="line">唯一约束（UNIQUE）UK:</span><br><span class="line">constraint 约束名称 unique(列)  保证表中没有重复值</span><br><span class="line">例：</span><br><span class="line">create table book(</span><br><span class="line">bid number(2) not null,</span><br><span class="line">bname varchar2(10),</span><br><span class="line">constraint uk_book_bname unique(bname)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">主键约束（PRIMARY KEY）PK：</span><br><span class="line">constraint 约束名称 primary key(主键列)</span><br><span class="line">create table book(</span><br><span class="line">bid number(2) not null,</span><br><span class="line">bname varchar2(10),</span><br><span class="line">constraint UK_book_bname unique(bname),</span><br><span class="line">constraint PK_book_bid primary key(bid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">检查约束（CHECK）CK:</span><br><span class="line">constraint 约束名称 check(约束条件)</span><br><span class="line">create table book(</span><br><span class="line">bid number(2) not null,</span><br><span class="line">bname varchar2(10),</span><br><span class="line">bprice number(5,2),</span><br><span class="line">constraint UK_book_bname unique(bname),</span><br><span class="line">constraint PK_book_bid primary key(bid),</span><br><span class="line">constraint CK_book_bprice check(bprice between 50.00 and 500.00)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">主-外键约束（FOREIGN KEY）FK</span><br><span class="line">constranit 外键名称 foreign key(外键列) references 主键表(主键列) [on delete] [set null]</span><br><span class="line">注意：set null 前提是外键字段可以允许为null</span><br><span class="line">注意：当设置外键时，必有一个主键表包含一个主键</span><br><span class="line"></span><br><span class="line">增加、删除、查询约束</span><br><span class="line">ALTER TABLE 表名称 ADD CONSTRAINT 约束名称 约束类型(字段);</span><br><span class="line">ALTER TABLE 表名称 DROP CONSTRAINT 约束名称;</span><br><span class="line"></span><br><span class="line">oracle内部有system和sys两个已建好的用户，system具有创建别的用户的权限，因此可直接登录到system用户以创建其他用户。 </span><br><span class="line"></span><br><span class="line">创建用户：</span><br><span class="line">create user user01 identified by password;  创建用户</span><br><span class="line">grant create table,delete from table to user01; 授予权限，创建表，和删除表的权限；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改用户：</span><br><span class="line">alter user user01 identified by newPassword;  修改用户密码！</span><br><span class="line"></span><br><span class="line">删除用户：</span><br><span class="line">使用drop user命令，如：drop user user01;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">角色：</span><br><span class="line"></span><br><span class="line">3种标准角色</span><br><span class="line"></span><br><span class="line"> oracle为了兼容以前的版本，提供了三种标准的角色(role)：connect、resource和dba。</span><br><span class="line"></span><br><span class="line"> 1. connect role(连接角色)</span><br><span class="line">临时用户，特别是那些不需要建表的用户，通常只赋予他们connectrole。</span><br><span class="line">connect是使用oracle的简单权限，这种权限只有在对其他用户的表有访问权时，包括select、insert、update和delete等，才会变得有意义。拥有connect role的用户还能够创建表、视图、序列(sequence)、簇(cluster)、同义词(synonym )、会话(session)和与其他数据库的链(link)。</span><br><span class="line"></span><br><span class="line"> 2. resource role(资源角色)</span><br><span class="line">更可靠和正式的数据库用户可以授予resource role。</span><br><span class="line">resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。</span><br><span class="line"></span><br><span class="line"> 3. dba role(数据库管理员角色)</span><br><span class="line">dba role拥有所有的系统权限----包括无限制的空间限额和给其他用户授予各种权限的能力。</span><br><span class="line">system由dba用户拥有。</span><br><span class="line"></span><br><span class="line">dba经常使用的典型权限如下：</span><br><span class="line">(1)grant(授权)命令 </span><br><span class="line">下面对刚才创建的用户user01授权，命令如下：</span><br><span class="line">grant connect, resource to user01;</span><br><span class="line">(2)revoke(撤消)权限</span><br><span class="line">已授予的权限可以撤消。例如撤消(1)中的授权，命令如下：</span><br><span class="line">revoke connect, resource from user01;</span><br><span class="line"></span><br><span class="line">创建角色:</span><br><span class="line">  除了前面讲到的三种系统角色----connect、resource和dba，用户还可以在oracle创建自己的role。用户创建的role可以由表或系统权限或两者的组合构成。为了创建role，用户必须具有create role系统权限。</span><br><span class="line">下面给出一个create role命令的实例：</span><br><span class="line">create role student;</span><br><span class="line">这条命令创建了一个名为student的role。</span><br><span class="line">一旦创建了一个role，用户就可以给他授权。给role授权的grant命令的语法与对对用户的语法相同。在给role授权时，在grant命令的to子句中要使用role的名称，如下所示： </span><br><span class="line">grant select on class to student;</span><br><span class="line">现在，拥有student 角色的所有用户都具有对class 表的select权限。</span><br><span class="line"></span><br><span class="line">删除角色</span><br><span class="line">要删除角色，可以使用drop role命令，如下所示：</span><br><span class="line">drop role student;</span><br><span class="line">指定的role连同与之相关的权限将从数据库中全部删除。</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一、创建</span><br><span class="line">  sys；   //系统管理员，拥有最高权限</span><br><span class="line">  system；//本地管理员，次高权限</span><br><span class="line">  scott； //普通用户，密码默认为tiger,默认未解锁</span><br><span class="line">  </span><br><span class="line">二、登陆</span><br><span class="line">  sqlplus / as sysdba；  //登陆sys帐户</span><br><span class="line">  sqlplus sys as sysdba；//同上</span><br><span class="line">  sqlplus scott/tiger；  //登陆普通用户scott</span><br><span class="line">  </span><br><span class="line">三、管理用户</span><br><span class="line">  create user user01;//在管理员帐户下，创建用户user01</span><br><span class="line">  alert user scott identified by tiger;//修改密码</span><br><span class="line">  </span><br><span class="line">四，授予权限</span><br><span class="line">  1、默认的普通用户scott默认未解锁，不能进行那个使用，新建的用户也没有任何权限，必须授予权限</span><br><span class="line"></span><br><span class="line">  grant create session to user01；    //授予user01用户创建session的权限，即登陆权限</span><br><span class="line">  grant unlimited session to user01；//授予user01用户使用表空间的权限</span><br><span class="line">  grant create table to user01；//授予创建表的权限</span><br><span class="line">  grant drop table to user01； //授予删除表的权限</span><br><span class="line">  grant insert table to user01；//插入表的权限</span><br><span class="line">  grant update table to user01；//修改表的权限</span><br><span class="line">  grant all to public； //这条比较重要，授予所有权限(all)给所有用户(public)</span><br><span class="line">  </span><br><span class="line">  2、oralce对权限管理比较严谨，普通用户之间也是默认不能互相访问的，需要互相授权</span><br><span class="line">  </span><br><span class="line">  grant select on tablename to user01；//授予user01用户查看指定表的权限</span><br><span class="line">  grant drop on tablename to user01；//授予删除表的权限</span><br><span class="line">  grant insert on tablename to user01；//授予插入的权限</span><br><span class="line">  grant update on tablename to user01；//授予修改表的权限</span><br><span class="line">  grant insert(id) on tablename to user01；</span><br><span class="line">  grant update(id) on tablename to user01;//授予对指定表特定字段的插入和修改权限，注意，只能是insert和update</span><br><span class="line">  grant alert all table to user01;//授予user01用户alert任意表的权限</span><br><span class="line"></span><br><span class="line">五、撤销权限</span><br><span class="line">  基本语法同grant,关键字为revoke</span><br><span class="line"></span><br><span class="line">六、查看权限</span><br><span class="line">  select * from user_sys_privs；//查看当前用户所有权限</span><br><span class="line">  select * from user_tab_privs；//查看所用用户对表的权限</span><br><span class="line"></span><br><span class="line">七、操作表的用户的表</span><br><span class="line">  </span><br><span class="line">  select * from user01.tablename；</span><br><span class="line">  </span><br><span class="line">八、权限传递</span><br><span class="line">  即用户A将权限授予B，B可以将操作的权限再授予C，命令如下：</span><br><span class="line">  grant alert table on tablename to user01 with admin option；//关键字 with admin option</span><br><span class="line">  grant alert table on tablename to user01 with grant option；//关键字 with grant option效果和admin类似</span><br><span class="line"></span><br><span class="line">九、角色</span><br><span class="line">  角色即权限的集合，可以把一个角色授予给用户</span><br><span class="line">  create role myrole；//创建角色</span><br><span class="line">  grant create session to myrole；//将创建session的权限授予myrole</span><br><span class="line">  grant myrole to user01；//授予user01用户myrole的角色</span><br><span class="line">  drop role myrole；删除角色</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>pagination说明</title>
    <url>/2018/06/02/pagination%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h1><h2 id="Commonly-used"><a href="#Commonly-used" class="headerlink" title="Commonly used"></a>Commonly used</h2><h3 id="dataSource-array-string-object-function"><a href="#dataSource-array-string-object-function" class="headerlink" title="dataSource array | string | object | function"></a>dataSource <em>array | string | object | function</em></h3><p>数据源，最终提供给分页组件的是一个数组</p>
<p>数据源支持 4 种格式</p>
<ol>
<li><p><strong>Array</strong></p>
<p> 直接提供一个数组，如：</p>
<pre><code> [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]
</code></pre>
</li>
<li><p><strong>Object</strong></p>
<p> 提供一个对象，里面要包含数组，可以通过 <code>locator: &#39;data&#39;</code> 指定这个数组</p>
<pre><code> &#123;
     data: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]
 &#125;        
</code></pre>
</li>
<li><p><strong>Function</strong></p>
<p> 提供一个自定义函数，根据自己的业务逻辑返回数组，自定义程度很高，可以实现上面 2 种方式</p>
<p> 可以动态组装数据，使用 <code>done</code> 返回数据，如：</p>
<pre><code> dataSource: function(done)&#123;
     var result = [];

     for(var i = 1; i &lt; 196; i++)&#123;
         result.push(i);
     &#125;
 
     done(result);
 &#125;
 
</code></pre>
<p> 也可以发送请求获取数据，使用 <code>done</code> 异步返回数据</p>
<pre><code> dataSource: function(done)&#123;
     $.ajax(&#123;
         type: &#39;GET&#39;,
         url: &#39;/test.json&#39;,
         success: function(response)&#123;
             done(response);
         &#125;
     &#125;);
 &#125;
 
</code></pre>
</li>
<li><p><strong>URL</strong></p>
<p> 提供一个URL，通过 Ajax 返回数据，适用于异步分页，每次请求返回一页的数据，返回的数据也可以通过 <code>locator</code> 查找</p>
<p> 如果URL为 file, http 或 https 协议，会用 <code>jsonp</code> 发送请求，否则为 Ajax</p>
<pre><code> /test.json
 
</code></pre>
<p> 每次分页发起请求时，会附加两个参数 <code>pageNumber</code> 和 <code>pageSize</code> ，也可使用 <code>alias</code> 来指定参数名</p>
<pre><code> /test.json?pageNumber=2&amp;pageSize=10
 
</code></pre>
<h3 id="locator-string-function"><a href="#locator-string-function" class="headerlink" title="locator string | function"></a>locator <em>string | function</em></h3><p>这个参数与 <code>dataSource</code> 相关，一般情况下，<code>dataSource</code> 是一个数组，可以直接传给分页组件处理。但如果返回的是 Object，那么就需要指定那个数组，默认为 <code>data</code></p>
</li>
</ol>
<p>指定 <code>locator</code> 可定位到数据源的位置，支持 2 种方式</p>
<ol>
<li><p><strong>String</strong></p>
<pre><code> &#123;
     data: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]
 &#125;
 
</code></pre>
<p> 指定 <code>locator: &#39;data&#39;</code> 之后，最终传给分页组件的就是 <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]</code> </p>
<p> 此外，还支持多层定位，如果 <code>dataSource</code> 是如下，则可用 <code>locator: &#39;a.b&#39;</code></p>
<pre><code> &#123;
     a: &#123;b: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]&#125;
 &#125;
</code></pre>
</li>
<li><p><strong>Function</strong></p>
<p> 提供一个自定义函数，找到数组的位置，并返回</p>
<pre><code> locator: function()&#123;
     // find data and return
     return &#39;a.b&#39;;
 &#125;
</code></pre>
</li>
</ol>
<p>通过 Ajax 获取的数据同样会应用此规则</p>
<h3 id="totalNumber-number-default-1"><a href="#totalNumber-number-default-1" class="headerlink" title="totalNumber number (default 1)"></a>totalNumber <em>number (default <code>1</code>)</em></h3><p>条目总数，异步分页时必填，模拟分页时为数组的长度</p>
<h3 id="pageNumber-number-default-1"><a href="#pageNumber-number-default-1" class="headerlink" title="pageNumber number (default 1)"></a>pageNumber <em>number (default <code>1</code>)</em></h3><p>指定初始化时加载哪一页的数据</p>
<h3 id="pageSize-number-default-10"><a href="#pageSize-number-default-10" class="headerlink" title="pageSize number (default 10)"></a>pageSize <em>number (default <code>10</code>)</em></h3><p>每页的条目数</p>
<h3 id="pageRange-number-default-2"><a href="#pageRange-number-default-2" class="headerlink" title="pageRange number (default 2)"></a>pageRange <em>number (default <code>2</code>)</em></h3><p>可见的页码范围，即当前页码两边的页码数量。比如当前是第 6 页，设置 pageRange 为 2，则页码条显示为 ‘1… 4 5 <code>6</code> 7 8’</p>
<h3 id="callback-function-data-pagination"><a href="#callback-function-data-pagination" class="headerlink" title="callback function(data, pagination)"></a>callback <em>function(data, pagination)</em></h3><p>每次翻页时的回调，<code>callback</code> 会传入两个参数</p>
<pre><code>callback: function(data, pagination)&#123; ... &#125;
</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
<td>array</td>
<td>当页数据</td>
</tr>
<tr>
<td>pagination</td>
<td>object</td>
<td>包含当页配置信息的对象</td>
</tr>
</tbody></table>
<p>pagination 对象包含以下属性值：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>pageNumber</td>
<td>number</td>
<td>当前页码</td>
</tr>
<tr>
<td>pageRange</td>
<td>number</td>
<td>页码范围</td>
</tr>
<tr>
<td>pageSize</td>
<td>number</td>
<td>每页条目数</td>
</tr>
<tr>
<td>totalPage</td>
<td>number</td>
<td>总页数</td>
</tr>
<tr>
<td>totalNumber</td>
<td>number</td>
<td>总条目数</td>
</tr>
<tr>
<td>el</td>
<td>jQueryObject</td>
<td>分页实例的容器</td>
</tr>
<tr>
<td>direction</td>
<td>number</td>
<td>分页方向，往前翻页时值为 -1，往后翻为 1，初始化时为 0</td>
</tr>
</tbody></table>
<h3 id="alias-object"><a href="#alias-object" class="headerlink" title="alias object"></a>alias <em>object</em></h3><p>请求的参数别名，用于异步分页，默认为空</p>
<pre><code>alias: &#123;
    pageNumber: &#39;pageNum&#39;,
    pageSize: &#39;limit&#39;
&#125;
</code></pre>
<p>那么通过 Ajax 发起请求时，会替换默认的 <code>pageNumber</code> 和 <code>pageSize</code></p>
<pre><code>/test.json?pageNum=2&amp;limit=10    
</code></pre>
<h2 id="Display-control"><a href="#Display-control" class="headerlink" title="Display control"></a>Display control</h2><h3 id="showPrevious-boolean-default-true"><a href="#showPrevious-boolean-default-true" class="headerlink" title="showPrevious boolean (default true)"></a>showPrevious <em>boolean (default <code>true</code>)</em></h3><p>是否显示 ‘上一页’</p>
<h3 id="showNext-boolean-default-true"><a href="#showNext-boolean-default-true" class="headerlink" title="showNext boolean (default true)"></a>showNext <em>boolean (default <code>true</code>)</em></h3><p>是否显示 ‘下一页’</p>
<h3 id="showPageNumbers-boolean-default-true"><a href="#showPageNumbers-boolean-default-true" class="headerlink" title="showPageNumbers boolean (default true)"></a>showPageNumbers <em>boolean (default <code>true</code>)</em></h3><p>是否显示 ‘页码’</p>
<h3 id="showNavigator-boolean-default-false"><a href="#showNavigator-boolean-default-false" class="headerlink" title="showNavigator boolean (default false)"></a>showNavigator <em>boolean (default <code>false</code>)</em></h3><p>是否显示导航器</p>
<h3 id="showGoInput-boolean-default-false"><a href="#showGoInput-boolean-default-false" class="headerlink" title="showGoInput boolean (default false)"></a>showGoInput <em>boolean (default <code>false</code>)</em></h3><p>是否显示跳转输入框</p>
<h3 id="showGoButton-boolean-default-false"><a href="#showGoButton-boolean-default-false" class="headerlink" title="showGoButton boolean (default false)"></a>showGoButton <em>boolean (default <code>false</code>)</em></h3><p>是否显示跳转按钮</p>
<h3 id="showFirstOnEllipsisShow-boolean-default-true"><a href="#showFirstOnEllipsisShow-boolean-default-true" class="headerlink" title="showFirstOnEllipsisShow boolean (default true)"></a>showFirstOnEllipsisShow <em>boolean (default <code>true</code>)</em></h3><p>是否在有省略号时显示开始页码</p>
<pre><code>showBeginingOnOmit: false,
pageRange: 1,
totalNumber: 100,
pageSize: 10
</code></pre>
<p>如上设置，分页条会显示成这样 ‘… 4 <code>5</code> 6 … 10’</p>
<h3 id="showLastOnEllipsisShow-boolean-default-true"><a href="#showLastOnEllipsisShow-boolean-default-true" class="headerlink" title="showLastOnEllipsisShow boolean (default true)"></a>showLastOnEllipsisShow <em>boolean (default <code>true</code>)</em></h3><p>是否在有省略号时显示结束页码</p>
<pre><code>showEndingOnOmit: false,
pageRange: 1,
totalNumber: 100,
pageSize: 10
</code></pre>
<p>如上设置，分页条会显示成这样 ‘1 … 4 <code>5</code> 6 …’</p>
<h3 id="autoHidePrevious-boolean-default-false"><a href="#autoHidePrevious-boolean-default-false" class="headerlink" title="autoHidePrevious boolean (default false)"></a>autoHidePrevious <em>boolean (default <code>false</code>)</em></h3><p>是否在当前显示为第一页时隐藏 ‘上一页’ 按钮</p>
<p>See <a href="/index.html#auto_hide">demo</a></p>
<h3 id="autoHideNext-boolean-default-false"><a href="#autoHideNext-boolean-default-false" class="headerlink" title="autoHideNext boolean (default false)"></a>autoHideNext <em>boolean (default <code>false</code>)</em></h3><p>是否在当前显示为最后一页时隐藏 ‘下一页’ 按钮</p>
<p>See <a href="/index.html#auto_hide">demo</a></p>
<h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><h3 id="classPrefix-string"><a href="#classPrefix-string" class="headerlink" title="classPrefix string"></a>classPrefix <em>string</em></h3><p>样式前缀，默认为 <code>pagination</code></p>
<h3 id="className-string"><a href="#className-string" class="headerlink" title="className string"></a>className <em>string</em></h3><p>附加给分页容器的额外样式类，默认为空</p>
<h3 id="activeClassName-string"><a href="#activeClassName-string" class="headerlink" title="activeClassName string"></a>activeClassName <em>string</em></h3><p>选中页码的样式类，默认为 <code>active</code></p>
<h3 id="disableClassName-string"><a href="#disableClassName-string" class="headerlink" title="disableClassName string"></a>disableClassName <em>string</em></h3><p>不可用页码的样式类，默认为 <code>disabled</code></p>
<h3 id="ulClassName-string"><a href="#ulClassName-string" class="headerlink" title="ulClassName string"></a>ulClassName <em>string</em></h3><p>附加给分页容器下的 ‘ul’ 元素的样式类，默认为空</p>
<h2 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h2><h3 id="prevText-string"><a href="#prevText-string" class="headerlink" title="prevText string"></a>prevText <em>string</em></h3><p>‘上一页’ 的文本，默认为 <code>&amp;laquo;</code>，即符号 &laquo;</p>
<h3 id="nextText-string"><a href="#nextText-string" class="headerlink" title="nextText string"></a>nextText <em>string</em></h3><p>‘下一页’ 的文本，默认为 <code>&amp;raquo;</code>，即符号 &raquo;</p>
<h3 id="ellipsisText-string"><a href="#ellipsisText-string" class="headerlink" title="ellipsisText string"></a>ellipsisText <em>string</em></h3><p>省略号文本，默认为 <code>...</code></p>
<h3 id="goButtonText-string"><a href="#goButtonText-string" class="headerlink" title="goButtonText string"></a>goButtonText <em>string</em></h3><p>跳转按钮文本，默认为 <code>Go</code></p>
<h3 id="formatNavigator-string-function"><a href="#formatNavigator-string-function" class="headerlink" title="formatNavigator string | function"></a>formatNavigator <em>string | function</em></h3><p>导航器格式化模板，默认为 <code>&lt;%= currentPage %&gt; / &lt;%= totalPage %&gt;</code>，也可提供一个自定义函数，返回一个这样的字符串</p>
<p>提供 3 个模板变量</p>
<ul>
<li><code>currentPage</code> 当前页码</li>
<li><code>totalPage</code> 总页数</li>
<li><code>totalNumber</code> 总条目数</li>
</ul>
<p>See <a href="/index.html#format_navigator">demo</a></p>
<h3 id="formatGoInput-string-function"><a href="#formatGoInput-string-function" class="headerlink" title="formatGoInput string | function"></a>formatGoInput <em>string | function</em></h3><p>跳转输入框格式化模板，默认为 <code>&lt;%= input %&gt;</code>，也可提供一个自定义函数，返回一个这样的字符串</p>
<p><code>&lt;%= input %&gt;</code> 相当于 <code>&lt;input type=&quot;text&quot; class=&quot;J-paginationjs-go-pagenumber&quot;&gt;</code> 的一个包装，所以，也可自定义一个输入框标签元素，只需要确保带有 <code>J-paginationjs-go-pagenumber</code> 这个class即可</p>
<p>提供 4 个模板变量</p>
<ul>
<li><code>input</code> 输入框</li>
<li><code>currentPage</code> 当前页码</li>
<li><code>totalPage</code> 总页数</li>
<li><code>totalNumber</code> 总条目数</li>
</ul>
<p>See <a href="/index.html#format_go_input">demo</a></p>
<h3 id="formatGoButton-string-function"><a href="#formatGoButton-string-function" class="headerlink" title="formatGoButton string | function"></a>formatGoButton <em>string | function</em></h3><p>跳转按钮格式化模板，默认为 <code>&lt;%= button %&gt;</code>，也可提供一个自定义函数，返回一个这样的字符串</p>
<p><code>&lt;%= button %&gt;</code> 相当于 <code>&lt;input type=&quot;button&quot; class=&quot;J-paginationjs-go-button&quot;&gt;</code>，所以，也可自定义一个跳转按钮的标签元素，只需要确保带有 <code>J-paginationjs-go-button</code> 这个class即可</p>
<p>提供 4 个模板变量</p>
<ul>
<li><code>button</code> 按钮</li>
<li><code>currentPage</code> 当前页码</li>
<li><code>totalPage</code> 总页数</li>
<li><code>totalNumber</code> 总条目数</li>
</ul>
<h3 id="header-string-function"><a href="#header-string-function" class="headerlink" title="header string | function"></a>header <em>string | function</em></h3><p>自定义头部内容，默认为空</p>
<p>提供 3 个模板变量</p>
<ul>
<li><code>currentPage</code> 当前页码</li>
<li><code>totalPage</code> 总页数</li>
<li><code>totalNumber</code> 总条目数</li>
</ul>
<h3 id="footer-string-function"><a href="#footer-string-function" class="headerlink" title="footer string | function"></a>footer <em>string | function</em></h3><p>自定义尾部内容，默认为空</p>
<p>提供 3 个模板变量</p>
<ul>
<li><code>currentPage</code> 当前页码</li>
<li><code>totalPage</code> 总页数</li>
<li><code>totalNumber</code> 总条目数</li>
</ul>
<h3 id="pageLink-string"><a href="#pageLink-string" class="headerlink" title="pageLink string"></a>pageLink <em>string</em></h3><p>分页的链接，默认为空</p>
<h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><h3 id="formatResult-function-data"><a href="#formatResult-function-data" class="headerlink" title="formatResult function(data)"></a>formatResult <em>function(data)</em></h3><p>提供一个自定义函数，处理每次分页的数组数据，在分页 <code>callback</code> 触发之前调用</p>
<p>可以返回一个处理后的数组，或者直接在传过来的 <code>data</code> 数组里处理</p>
<p>See <a href="/index.html#formatResult">demo</a></p>
<h3 id="formatAjaxError-function-jqXHR-textStatus-errorThrown"><a href="#formatAjaxError-function-jqXHR-textStatus-errorThrown" class="headerlink" title="formatAjaxError function(jqXHR, textStatus, errorThrown)"></a>formatAjaxError <em>function(jqXHR, textStatus, errorThrown)</em></h3><p>提供一个自定义函数，用于渲染错误信息，默认为空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formatAjaxError: function(jqXHR, textStatus, errorThrown)&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h3 id="ajax-object"><a href="#ajax-object" class="headerlink" title="ajax object"></a>ajax <em>object</em></h3><p>针对内置 Ajax 请求方法的参数作更加自定义的配置，参数必须与 <code>$.ajax</code> 兼容，适用于异步分页</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>string</td>
<td>请求的方法类型，默认为 <code>GET</code></td>
</tr>
<tr>
<td>dataType</td>
<td>string</td>
<td>数据格式，比如：<code>xml</code>，<code>json</code>，<code>jsonp</code>，或者其他 jQuery 支持的格式，默认为 <code>json</code></td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>默认情况下，分页请求都会被附加 <code>pageNumber</code> 和 <code>pageSize</code> 两个参数，某些情况下，可能还需要其他的参数，那么就可使用此参数解决，例如：<code>&#123; ajax: &#123; data: &#123;dbType: &#39;oracle&#39;&#125; &#125; &#125;</code></td>
</tr>
<tr>
<td>cache</td>
<td>boolean</td>
<td>如果设置为 <code>false</code>，将会强制请求不被浏览器缓存，默认为 <code>true</code></td>
</tr>
<tr>
<td>async</td>
<td>boolean</td>
<td>默认所有请求都以异步方式发送，默认为 <code>true</code>。如果需要同步方式，设置为 <code>false</code> 即可，跨域请求或 <code>dataType: &#39;jsonp&#39;</code> 不支持同步操作。</td>
</tr>
<tr>
<td>beforeSend</td>
<td>function</td>
<td>发起请求之前的回调函数，可用于发送前修改 jqXHR 对象。beforeSend 函数返回 <code>false</code> 将取消该请求。</td>
</tr>
</tbody></table>
<p>参数的更多信息，请参阅 <a href="http://api.jquery.com/jquery.ajax/">JQuery API Documentation</a></p>
<h3 id="triggerPagingOnInit-boolean-default-true"><a href="#triggerPagingOnInit-boolean-default-true" class="headerlink" title="triggerPagingOnInit boolean (default true)"></a>triggerPagingOnInit <em>boolean (default <code>true</code>)</em></h3><p>是否在初始化时触发默认分页，有些情况下，你可能希望默认触发首次分页，因为你已经用AJAX加载了内容并且内容已显示</p>
<p>也有其他的用法，例如：默认加载第二页的数据</p>
<pre><code>triggerPagingOnInit: true，
pageNum: 2
</code></pre>
<h3 id="hideWhenLessThanOnePage-boolean-default-false"><a href="#hideWhenLessThanOnePage-boolean-default-false" class="headerlink" title="hideWhenLessThanOnePage boolean (default false)"></a>hideWhenLessThanOnePage <em>boolean (default <code>false</code>)</em></h3><p>是否在总页数小于1页时隐藏分页</p>
<h3 id="inlineStyle-boolean-default-true"><a href="#inlineStyle-boolean-default-true" class="headerlink" title="inlineStyle boolean (default true)"></a>inlineStyle <em>boolean (default <code>true</code>)</em></h3><p>是否使用内联样式</p>
<p>分页组件自带了样式内容，默认情况下，会在 head 里插入一个 <code>style</code> 标签元素，并放入分页自带的样式内容</p>
<p>如果你觉得使用 <code>link</code> 外链样式文件更好，那么可以将此项设置为 <code>false</code>来阻止插入行为，并将你的样式文件以 <code>link</code> 方式引用</p>
<p>默认的样式在这下载 <a href="../dist/2.0.6/pagination.css">pagination.css</a> <a href="../dist/2.0.6/pagination.less">pagination.less</a>，但你完全可以自己编写这些样式</p>
<p><s>注意，只有使用带样式版本的分页组件，此项设置才会生效，即 <code>pagination-with-styles.js</code></s></p>
<p>注意，从 2.0.6 起，不再支持 inlineStyle 配置，样式需要单独用 Link 标签引入</p>
<h1 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h1><p>分页初始化之后，可以使用下面列出的方法来改变分页的行为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var container = $(&#x27;#example1&#x27;);</span><br><span class="line">container.pagination(&#123; ... &#125;);</span><br><span class="line"></span><br><span class="line">container.pagination(&#x27;previous&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="previous"><a href="#previous" class="headerlink" title="previous"></a>previous</h3><p>触发上一页</p>
<h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p>触发下一页</p>
<h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>跳转到指定页，有以下 2 种使用方式</p>
<pre><code>container.pagination(&#39;go&#39;, 8)
container.pagination(8)
</code></pre>
<p>也支持自定义回调函数，例如：</p>
<pre><code>container.pagination(&#39;go&#39;, 8, function(data, pagination)&#123;
    // template method of yourself
&#125;)
</code></pre>
<p>注意，设置自定义函数后，就不会再调用分页的回调函数 <code>callback</code> 了</p>
<h3 id="disable"><a href="#disable" class="headerlink" title="disable"></a>disable</h3><p>禁用分页，执行后分页不可用，要重新恢复可用需要调用解锁事件 <code>container.pagination(&#39;enable&#39;)</code></p>
<p>每次异步翻页发出请求前，会自动调用此方法，请求成功之后会自动调用 <code>enable</code> 解锁</p>
<h3 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h3><p>解锁分页，执行后分页恢复可用</p>
<h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>显示分页</p>
<h3 id="hide"><a href="#hide" class="headerlink" title="hide"></a>hide</h3><p>隐藏分页</p>
<h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h3><p>销毁分页实例</p>
<h3 id="getSelectedPageNum-number"><a href="#getSelectedPageNum-number" class="headerlink" title="getSelectedPageNum number"></a>getSelectedPageNum <em>number</em></h3><p>获取当前页码</p>
<h3 id="getTotalPage-number"><a href="#getTotalPage-number" class="headerlink" title="getTotalPage number"></a>getTotalPage <em>number</em></h3><p>获取总页数</p>
<h3 id="getSelectedPageData-array"><a href="#getSelectedPageData-array" class="headerlink" title="getSelectedPageData array"></a>getSelectedPageData <em>array</em></h3><p>获取当前页码的数据</p>
<h3 id="isDisabled-function"><a href="#isDisabled-function" class="headerlink" title="isDisabled function"></a>isDisabled <em>function</em></h3><p>当前是否正处在禁用状态</p>
<h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a><a href="id:events">Events</a></h1><p>分页事件的功能接口有 2 种使用方式，分别是 <code>回调函数</code> 和 <code>插件钩子</code></p>
<p>使用回调函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var container = $(&#x27;#example1&#x27;);</span><br><span class="line">container.pagination(&#123;</span><br><span class="line">	afterRender: function()&#123;</span><br><span class="line">		// function body</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用插件钩子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var container = $(&#x27;#example2&#x27;);</span><br><span class="line"></span><br><span class="line">container.pagination(&#123;</span><br><span class="line">	dataSource: [1, 2, 3],</span><br><span class="line">	pageSize: 1</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">container.addHook(&#x27;afterRender&#x27;, function()&#123;</span><br><span class="line">	// function body</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意，钩子可以在分页初始化之前定义，也可以在初始化之后定义</p>
<h3 id="beforeInit-function"><a href="#beforeInit-function" class="headerlink" title="beforeInit function"></a>beforeInit <em>function</em></h3><p>分页实例初始化之前调用，返回 <code>false</code> 将阻止初始化</p>
<h3 id="beforeRender-function"><a href="#beforeRender-function" class="headerlink" title="beforeRender function"></a>beforeRender <em>function</em></h3><p>每次分页时会重新渲染分页条，渲染之前调用</p>
<h3 id="beforePaging-function"><a href="#beforePaging-function" class="headerlink" title="beforePaging function"></a>beforePaging <em>function</em></h3><p>分页之前调用</p>
<h3 id="beforeDestroy-function"><a href="#beforeDestroy-function" class="headerlink" title="beforeDestroy function"></a>beforeDestroy <em>function</em></h3><p>分页实例销毁之前调用</p>
<h3 id="beforeDisable-function"><a href="#beforeDisable-function" class="headerlink" title="beforeDisable function"></a>beforeDisable <em>function</em></h3><p>禁用之前调用</p>
<h3 id="beforeEnable-function"><a href="#beforeEnable-function" class="headerlink" title="beforeEnable function"></a>beforeEnable <em>function</em></h3><p>解锁之前调用</p>
<h3 id="beforePreviousOnClick-function"><a href="#beforePreviousOnClick-function" class="headerlink" title="beforePreviousOnClick function"></a>beforePreviousOnClick <em>function</em></h3><p>点击上一页之前调用</p>
<h3 id="beforePageOnClick-function"><a href="#beforePageOnClick-function" class="headerlink" title="beforePageOnClick function"></a>beforePageOnClick <em>function</em></h3><p>点击页码之前调用</p>
<h3 id="beforeNextOnClick-function"><a href="#beforeNextOnClick-function" class="headerlink" title="beforeNextOnClick function"></a>beforeNextOnClick <em>function</em></h3><p>点击下一页之前调用</p>
<h3 id="beforeGoInputOnEnter-function"><a href="#beforeGoInputOnEnter-function" class="headerlink" title="beforeGoInputOnEnter function"></a>beforeGoInputOnEnter <em>function</em></h3><p>分页输入框回车之前调用</p>
<h3 id="beforeGoButtonOnClick-function"><a href="#beforeGoButtonOnClick-function" class="headerlink" title="beforeGoButtonOnClick function"></a>beforeGoButtonOnClick <em>function</em></h3><p>分页跳转按钮点击之前调用</p>
<h3 id="afterInit-function"><a href="#afterInit-function" class="headerlink" title="afterInit function"></a>afterInit <em>function</em></h3><p>分页实例初始化创建完成之后调用</p>
<h3 id="afterRender-function"><a href="#afterRender-function" class="headerlink" title="afterRender function"></a>afterRender <em>function</em></h3><p>每次分页时会重新渲染分页条，渲染之后调用</p>
<h3 id="afterPaging-function"><a href="#afterPaging-function" class="headerlink" title="afterPaging function"></a>afterPaging <em>function</em></h3><p>分页之后调用</p>
<h3 id="afterDestroy-function"><a href="#afterDestroy-function" class="headerlink" title="afterDestroy function"></a>afterDestroy <em>function</em></h3><p>分页实例销毁之后调用</p>
<h3 id="afterDisable-function"><a href="#afterDisable-function" class="headerlink" title="afterDisable function"></a>afterDisable <em>function</em></h3><p>禁用之后调用</p>
<h3 id="afterEnable-function"><a href="#afterEnable-function" class="headerlink" title="afterEnable function"></a>afterEnable <em>function</em></h3><p>解锁之后调用</p>
<h3 id="afterPreviousOnClick-function"><a href="#afterPreviousOnClick-function" class="headerlink" title="afterPreviousOnClick function"></a>afterPreviousOnClick <em>function</em></h3><p>点击上一页之后调用</p>
<h3 id="afterPageOnClick-function"><a href="#afterPageOnClick-function" class="headerlink" title="afterPageOnClick function"></a>afterPageOnClick <em>function</em></h3><p>点击页码之后调用</p>
<h3 id="afterNextOnClick-function"><a href="#afterNextOnClick-function" class="headerlink" title="afterNextOnClick function"></a>afterNextOnClick <em>function</em></h3><p>点击下一页之后调用</p>
<h3 id="afterGoInputOnEnter-function"><a href="#afterGoInputOnEnter-function" class="headerlink" title="afterGoInputOnEnter function"></a>afterGoInputOnEnter <em>function</em></h3><p>分页输入框回车之后调用</p>
<h3 id="afterGoButtonOnClick-function"><a href="#afterGoButtonOnClick-function" class="headerlink" title="afterGoButtonOnClick function"></a>afterGoButtonOnClick <em>function</em></h3><p>分页跳转按钮点击之后调用</p>
<h3 id="afterIsFirstPage-function"><a href="#afterIsFirstPage-function" class="headerlink" title="afterIsFirstPage function"></a>afterIsFirstPage <em>function</em></h3><p>当前是第一页时调用</p>
<h3 id="afterIsLastPage-function"><a href="#afterIsLastPage-function" class="headerlink" title="afterIsLastPage function"></a>afterIsLastPage <em>function</em></h3><p>当前是最后一页时调用</p>
<h1 id="Skin"><a href="#Skin" class="headerlink" title="Skin"></a>Skin</h1><p>分页组件自带了 5 套默认皮肤，但你完全可以定制你自己的皮肤</p>
<p>例如蓝色皮肤，可以这样使用：</p>
<pre><code>className: &#39;paginationjs-theme-blue&#39;
</code></pre>
<p>小号蓝色皮肤：</p>
<pre><code>className: &#39;paginationjs-theme-blue paginationjs-small&#39;
</code></pre>
<p>大号蓝色皮肤：</p>
<pre><code>className: &#39;paginationjs-theme-blue paginationjs-big&#39;
</code></pre>
<p>如果需要自定义样式，则可以增加 css 类 <code>custom-paginationjs</code></p>
<h1 id="Configuring-Defaults"><a href="#Configuring-Defaults" class="headerlink" title="Configuring Defaults"></a>Configuring Defaults</h1><p>分页可通过 <code>$.fn.pagination.defaults</code> 对象来修改默认配置，修改后，将影响所有之后创建的实例</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.extend($.fn.pagination.defaults, &#123;</span><br><span class="line">	pageSize: 20</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>之后所有新建的分页实例，每页条数都是 20</p>
<hr>
<p><a href="https://github.com/superRaytin/paginationjs/issues">帮助改进这些文档，新建一个 issue 或 pull request</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>pip 离线安装包</title>
    <url>/2021/04/01/pip%20%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<h4 id="Pypi镜像源"><a href="#Pypi镜像源" class="headerlink" title="Pypi镜像源"></a>Pypi镜像源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 阿里云 </span><br><span class="line">http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"># 中国科技大学 </span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"># 豆瓣(douban) </span><br><span class="line">http://pypi.douban.com/simple/</span><br><span class="line"># 清华大学 </span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">#中国科学技术大学 </span><br><span class="line">http://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>

<h4 id="1-打包依赖"><a href="#1-打包依赖" class="headerlink" title="1. 打包依赖"></a>1. 打包依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip list #查看安装的包</span><br><span class="line">pip freeze &gt;requirements.txt</span><br><span class="line">pip download 路径：/package -r requirements.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-将打包好的-package文件夹和requirements-txt文件拷贝到无法联网的机器，进行安装"><a href="#2-将打包好的-package文件夹和requirements-txt文件拷贝到无法联网的机器，进行安装" class="headerlink" title="2. 将打包好的 package文件夹和requirements.txt文件拷贝到无法联网的机器，进行安装"></a>2. 将打包好的 package文件夹和requirements.txt文件拷贝到无法联网的机器，进行安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --no-index --find-links=/package -r requirements.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql基本指令</title>
    <url>/2019/08/28/postgresql%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">CREATE USER username WITH PASSWORD &#x27;your_passwd&#x27;</span><br><span class="line">ALTER ROLE username WITH login superuser createdb createrole</span><br><span class="line"></span><br><span class="line"># 创建数据库</span><br><span class="line">CREATE DATABASE dbname OWNER username;</span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE dbname TO username;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动数据库</span></span><br><span class="line">pg_ctl -D /xx/pgdata  start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">pg_ctl --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">psql -U username -d dbname -h hostip -p port -W</span><br></pre></td></tr></table></figure>


<h3 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有数据库</span></span><br><span class="line">\l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">\c dbname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">\c - username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line">alter user username with password <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前数据库的所有表</span></span><br><span class="line">\d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定表的所有字段</span></span><br><span class="line">\d  tablename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定表的基本情况</span></span><br><span class="line">\d+  tablename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出操作</span></span><br><span class="line">\q</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">CREATE ROLE rolename WITH optional_permissions;  <span class="comment"># optional_permissions:login、superuser、createdb、createrole等</span></span><br><span class="line">CREATE USER username WITH PASSWORD <span class="string">&#x27;your_passwd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有用户</span></span><br><span class="line">\<span class="built_in">du</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户权限</span></span><br><span class="line">ALTER ROLE username WITH privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋给用户表的所有权限</span></span><br><span class="line">GRANT ALL ON tablename TO user; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋给用户数据库的所有权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE dbname TO dbuser;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销用户权限</span></span><br><span class="line">REVOKE privileges ON tablename FROM user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制连接数</span></span><br><span class="line">ALTER user username connection <span class="built_in">limit</span> 10;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户和组</span></span><br><span class="line">DROP ROLE IF EXISTS role_name;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">CREATE DATABASE dbname OWNER username;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库赋予权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE dbname TO username;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">create table table_name (</span><br><span class="line">    <span class="built_in">id</span> SERIAL PRIMARY KEY, </span><br><span class="line">    name VARCHAR(32),</span><br><span class="line">    age INTEGER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名表</span></span><br><span class="line">alter table [表名A] rename to [表名B]; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除表</span></span><br><span class="line">drop table table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空表</span></span><br><span class="line">delete from table_name</span><br><span class="line">TRUNCATE TABLE table_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字段</span></span><br><span class="line">alter table [表名] add column [字段名] [类型];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名字段</span></span><br><span class="line">alter table [表名] rename column [字段名A] to [字段名B]; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line">alter table [表名] drop column [字段名];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字段缺省值</span></span><br><span class="line">alter table [表名] alter column [字段名] <span class="built_in">set</span> default [新的默认值];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除缺省值</span></span><br><span class="line">alter table [表名] alter column [字段名] drop default; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改字段属性（含空格）</span></span><br><span class="line">ALTER TABLE tablename ALTER COLUMN colname TYPE int USING (trim(colname)::<span class="built_in">integer</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表中插入一行数据</span></span><br><span class="line">insert into [表名] (字段1,字段2) values (值1,值2);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改表中数据</span></span><br><span class="line">update [表名] <span class="built_in">set</span> [目标字段名]=[目标值] <span class="built_in">where</span> [该行特征]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制表</span></span><br><span class="line">CREATE TABLE table_name AS SELECT * FROM table_name_copy;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令导入sql数据文件</span></span><br><span class="line">psql -h hostIP -p port -d dbname  -U username -f  filename</span><br><span class="line">psql -h hostIP -p port -d dbname  -U username &lt; filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库的备份</span></span><br><span class="line">pg_dump --host hostIP --port port --username username -t tablename -d dbname &gt; back_file_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立索引</span></span><br><span class="line">CREATE INDEX index_name ON table_name (field1);  <span class="comment"># 单字段索引</span></span><br><span class="line">CREATE INDEX index_name ON table_name (field1,field2);  <span class="comment"># 多字段索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找数据库的连接信息</span></span><br><span class="line"><span class="keyword">select</span> * from pg_stat_activity;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


























]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>pyhton socket 杂记</title>
    <url>/2021/04/01/pyhton%20socket%20%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="Python-socket-error-Errno-98-Address-already-in-use-的原因和解决方法"><a href="#Python-socket-error-Errno-98-Address-already-in-use-的原因和解决方法" class="headerlink" title="Python socket.error: [Errno 98] Address already in use 的原因和解决方法"></a>Python socket.error: [Errno 98] Address already in use 的原因和解决方法</h4><ul>
<li>原因<blockquote>
<p>在socket编程中，当通过客户端向服务器端发送消息，关闭了连接后，这时如果马上再去运行服务器端程序，会提示这个错误：<br><code>socket.error: [Errno 98] Address already in use</code></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>这是因为在TCP/IP终止连接的四次握手中，当最后的ACK回复发出后，有个2MSL的时间等待，MSL指一个片段在网络中最大的存活时间，这个时间一般是30秒，所以基本上过60秒后就可以重新连接！</p>
</blockquote>
<blockquote>
<p>为什么要等待2MSL？是因为在最后发出ACK回复后，发送方不能确认ACK是否被另一端正常收到，如果另一端没有收到ACK回复的话，将会在1MSL后再次发送FIN片段。所以说发送方等待2MSL时间，也就是刚好它发ACK回复和对方发送FIN片段的时间，如果此时间内都没有再次收到FIN片段的话，发送方就假设对方已经正常接收到了ACK回复，此时它就会正常关闭连接！</p>
</blockquote>
<ul>
<li>解决：<blockquote>
<p>如果python中socket 绑定的地址正在使用，往往会出现错误，<br>在linux下， 则会显示” socket.error: [Errno 98] Address already in use”</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>在windows下，则会显示 “socket.error: [Errno 10048] 通常每个套接字地址（协议/网络地址/端口）只允许使用一次”</p>
</blockquote>
<blockquote>
<p>这是因为socket默认不支持地址复用，如果要复用需要显示设定，即在绑定前调用setsockop函数t让套接字允许地址重用：<code>socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)</code></p>
</blockquote>
<blockquote>
<p>例如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># self.recSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  </span><br><span class="line"># self.recSocket.settimeout(CHECK_TIMEOUT)</span><br><span class="line">self.recSocket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)  </span><br><span class="line">self.recSocket.bind(self.server_address)</span><br><span class="line"># self.recSocket.bind((&#x27;&#x27;, UDP_PORT))  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例代码：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyThreadingTCPServer(socketserver.ThreadingTCPServer):</span><br><span class="line">    def server_bind(self):</span><br><span class="line">        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class="line">        self.socket.bind(self.server_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_server(host, port):</span><br><span class="line">    print(&quot;Start Server: %s:%s&quot; % (host, port))</span><br><span class="line">    # server = socketserver.TCPServer((host, port), YangChenHandler)</span><br><span class="line">    # server = socketserver.ThreadingTCPServer((host, port), YangChenHandler)</span><br><span class="line">    server = MyThreadingTCPServer((host, port), YangChenHandler)</span><br><span class="line">    # server = socketserver.ThreadingTCPServer((host, port), YangChenHandler, bind_and_activate=False)</span><br><span class="line">    # server.allow_reuse_address = True</span><br><span class="line">    # server.server_bind()</span><br><span class="line">    # server.server_activate()</span><br><span class="line">    try:</span><br><span class="line">        server.serve_forever()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        logger.error(&#x27;handle server &#x27;+repr(e))</span><br><span class="line">    server.server_close()</span><br></pre></td></tr></table></figure>

<h4 id="Python-如何保持TCP心跳-keeplive"><a href="#Python-如何保持TCP心跳-keeplive" class="headerlink" title="Python 如何保持TCP心跳 keeplive"></a>Python 如何保持TCP心跳 keeplive</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">def set_keepalive_linux(sock, after_idle_sec=1, interval_sec=3, max_fails=5):</span><br><span class="line">    &quot;&quot;&quot;Set TCP keepalive on an open socket.</span><br><span class="line">    It activates after 1 second (after_idle_sec) of idleness,</span><br><span class="line">    then sends a keepalive ping once every 3 seconds (interval_sec),</span><br><span class="line">    and closes the connection after 5 failed ping (max_fails), or 15 seconds</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)</span><br><span class="line">    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, after_idle_sec)</span><br><span class="line">    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPINTVL, interval_sec)</span><br><span class="line">    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPCNT, max_fails)</span><br><span class="line"> </span><br><span class="line">def set_keepalive_osx(sock, after_idle_sec=1, interval_sec=3, max_fails=5):</span><br><span class="line">    &quot;&quot;&quot;Set TCP keepalive on an open socket.</span><br><span class="line"> </span><br><span class="line">    sends a keepalive ping once every 3 seconds (interval_sec)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # scraped from /usr/include, not exported by python&#x27;s socket module</span><br><span class="line">    TCP_KEEPALIVE = 0x10</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)</span><br><span class="line">    sock.setsockopt(socket.IPPROTO_TCP, TCP_KEEPALIVE, interval_sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果用上面的代码针对windows下的python socket进行设置，可能会发生如下错误：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File &quot;socket_test.py&quot;, line 65, in &lt;module&gt;</span><br><span class="line">do_work()</span><br><span class="line">File &quot;socket_test.py&quot;, line 19, in do_work</span><br><span class="line">sock.setsockopt(socket.SOL_TCP, socket.TCP_KEEPIDLE, 60)</span><br><span class="line">AttributeError: &#x27;module&#x27; object has no attribute &#x27;TCP_KEEPIDLE&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>针对windows下的python socket tcp keepalive设置，可以这么设置，<br>更多信息参考：<a href="https://msdn.microsoft.com/en-us/library/dd877220%28v=vs.85%29.aspx">https://msdn.microsoft.com/en-us/library/dd877220%28v=vs.85%29.aspx</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sock.ioctl(socket.SIO_KEEPALIVE_VALS, (1, 10000, 3000))</span><br></pre></td></tr></table></figure>

<h4 id="查看Socket连接状况"><a href="#查看Socket连接状况" class="headerlink" title="查看Socket连接状况"></a>查看Socket连接状况</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i :5000</span><br><span class="line">lsof -t -i tcp:8000 | xargs kill -9</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>python RabbitMQ队列使用</title>
    <url>/2021/02/01/python%20RabbitMQ%E9%98%9F%E5%88%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="python-RabbitMQ队列使用"><a href="#python-RabbitMQ队列使用" class="headerlink" title="python RabbitMQ队列使用"></a>python RabbitMQ队列使用</h3><blockquote>
<p>关于python的队列，内置的有两种，一种是线程queue，另一种是进程queue，但是这两种queue都是只能在同一个进程下的线程间或者父进程与子进程之间进行队列通讯，并不能进行程序与程序之间的信息交换，这时候我们就需要一个中间件，来实现程序之间的通讯。</p>
</blockquote>
<blockquote>
<p>RabbitMQ并不是python内置的模块，而是一个需要额外安装的程序，安装完毕后可通过python中内置的pika模块来调用MQ发送或接收队列请求。</p>
</blockquote>
<p><strong>轮询消费模式</strong></p>
<blockquote>
<p>此模式下，发送队列的一方把消息存入mq的指定队列后，若有消费者端联入相应队列，即会获取到消息，并且队列中的消息会被消费掉。若有多个消费端同时连接着队列，则会已轮询的方式将队列中的消息消费掉。</p>
</blockquote>
<blockquote>
<p>说明</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. rabbitmq循环调度，将消息循环发送给不同的消费者，如：消息1,3,5 发送给消费者1；消息2,4,6 发送给消费者2。</span><br><span class="line"></span><br><span class="line">2. 消息确认机制，为了确保一个消息不会丢失，RabbitMQ支持消息的确认, 一个 ack(acknowlegement)是从消费者端发送一个确认去告诉RabbitMQ消息已经接收了、处理了，RabbitMQ可以释放并删除掉了。</span><br><span class="line">如果一个消费者死掉了（channel关闭、connection关闭、或者TCP连接断开了）而没有发送ack，RabbitMQ就会认为这个消息没有被消费者处理，并会重新发送到生产者的队列里，如果同时有另外一个消费者在线，rabbitmq将会将消息很快转发到另外一个消费者中。那样的话你就能确保虽然一个消费者死掉，但消息不会丢失。</span><br><span class="line">这个是没有超时的，当消费方（consumer）死掉后RabbitMQ会重新转发消息，即使处理这个消息需要很长很长时间也没有问题。消息的 acknowlegments 默认是打开的(no_ack = False), 消费者需发送一个 acknowledgment。</span><br><span class="line"></span><br><span class="line">3. 消息持久化，将消息写入硬盘中。RabbitMQ不允许你重新定义一个已经存在、但属性不同的queue。需要标记消息为持久化(通过设置 delivery_mode 属性为 2来实现)。</span><br><span class="line">消息持久化的注意点：</span><br><span class="line">标记消息为持久化并不能完全保证消息不会丢失，尽管已经告诉RabbitMQ将消息保存到磁盘，但RabbitMQ接收到的消息在还没有保存的时候，仍然有一个短暂的时间窗口。</span><br><span class="line">RabbitMQ不会对每个消息都执行同步,可能只是保存到缓存cache还没有写入到磁盘中。因此这个持久化保证并不是很强，但这比我们简单的任务queue要好很多，如果想要很强的持久化保证，可以使用 publisher confirms。</span><br><span class="line"></span><br><span class="line">4. 公平调度。在一个消费者未处理完一个消息之前不要分发新的消息给它，而是将这个新消息分发给另一个不是很忙的消费者进行处理。为了解决这个问题我们可以在消费者代码中使用 channel.basic.qos ( prefetch_count = 1 )，将消费者设置为公平调度。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码实例</p>
</blockquote>
<ol>
<li>producer生产者</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮询消费模式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>():</span><br><span class="line">    <span class="comment"># 远程访问用户密码</span></span><br><span class="line">    credentials = pika.PlainCredentials(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    <span class="comment"># 创建连接</span></span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">&#x27;192.168.5.199&#x27;</span>, <span class="number">5672</span>, <span class="string">&#x27;/&#x27;</span>, credentials))</span><br><span class="line">    <span class="comment"># 在连接上建立通道</span></span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明一个队列queue，生产者和消费者都要声明一个相同的队列，用来防止万一某一方挂了，另一方能正常运行</span></span><br><span class="line">    channel.queue_declare(queue=<span class="string">&#x27;balance&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    channel.basic_publish(</span><br><span class="line">        exchange=<span class="string">&#x27;&#x27;</span>,  <span class="comment"># 交换机</span></span><br><span class="line">        routing_key=<span class="string">&#x27;hello&#x27;</span>,  <span class="comment"># 路由键，写明将消息发往哪个队列，本例是将消息发往队列hello</span></span><br><span class="line">        body=<span class="string">&#x27;Hello World!&#x27;</span>)  <span class="comment"># 生产者要发送的消息</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[生产者] Sent &#x27;Hello World!&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当生产者发送完消息后，可选择关闭连接</span></span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    producer()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>consumer消费者</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def customer():</span><br><span class="line">    # 远程连接用户密码</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    # 创建连接</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    # 创建通道</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    # 声明队列</span><br><span class="line">    channel.queue_declare(queue=&#x27;hello&#x27;)</span><br><span class="line"></span><br><span class="line">    # 回调函数，用来接收生产者发送的消息</span><br><span class="line">    def callback(ch, method, properties, body):</span><br><span class="line">        print(&quot;[消费者] Received %r&quot; % body)</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(</span><br><span class="line">        callback,  # 调用回调函数，从队列里取消息</span><br><span class="line">        queue=&#x27;hello&#x27;,  # 指定取消息的队列名</span><br><span class="line">        no_ack=True  # 取完一条消息后，不给生产者发送确认消息。默认False，一般默认即可</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    print(&#x27;[消费者] Waiting for messages...&#x27;)</span><br><span class="line"></span><br><span class="line">    # 开始循环取消息</span><br><span class="line">    channel.start_consuming()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    customer()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>队列持久化</strong></p>
<blockquote>
<p>当rabbitMQ意外宕机时，可能会有持久化保存队列的需求（队列中的消息不消失）。</p>
</blockquote>
<ol>
<li>生产者producer</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 轮询消费模式</span><br><span class="line">def producer():</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    channel.queue_declare(queue=&#x27;durable&#x27;,</span><br><span class="line">                          durable=True)  # 创建一个新队列durable，设置队列持久化；注意不要跟已存在的队列重名，否则有报错</span><br><span class="line"></span><br><span class="line">    message = &quot;Hello World&quot;</span><br><span class="line">    channel.basic_publish(</span><br><span class="line">        exchange=&#x27;&#x27;,</span><br><span class="line">        routing_key=&#x27;durable&#x27;,  # 写明将消息发送给队列durable</span><br><span class="line">        body=message,</span><br><span class="line">        properties=pika.BasicProperties(</span><br><span class="line">            delivery_mode=2,  # 设置消息持久化，将要发送的消息的属性标记为2，表示该消息要持久化</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    print(&quot;[生产者] Sent &#123;&#125;!&quot;.format(message))</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    producer()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行后查看队列</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@murray ~]# rabbitmqctl list_queues</span><br><span class="line">Timeout: 60.0 seconds ...</span><br><span class="line">Listing queues for vhost / ...</span><br><span class="line">durable	1</span><br><span class="line"></span><br><span class="line">#重启rabbitmq</span><br><span class="line">[root@murray ~]# systemctl restart rabbitmq-server</span><br><span class="line"></span><br><span class="line">#重启完毕后再次查看</span><br><span class="line">[root@murray ~]# rabbitmqctl list_queues</span><br><span class="line">Timeout: 60.0 seconds ...</span><br><span class="line">Listing queues for vhost / ...</span><br><span class="line">durable	1  #队列以及消息并未消失</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>消费者cunsumer</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def customer():</span><br><span class="line">    # 指定远程rabbitmq的用户名密码</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    channel.queue_declare(queue=&#x27;durable&#x27;,</span><br><span class="line">                          durable=True)  # 创建一个新队列durable，设置队列持久化；注意不要跟已存在的队列重名，否则有报错</span><br><span class="line"></span><br><span class="line">    def callback(ch, method, properties, body):</span><br><span class="line">        print(&quot; [消费者] Received &#123;&#125;&quot;.format(body))</span><br><span class="line">        ch.basic_ack(delivery_tag=method.delivery_tag)  # 接收到消息后会给rabbitmq发送一个确认</span><br><span class="line"></span><br><span class="line">    channel.basic_qos(prefetch_count=1)  # 消费者给rabbitmq发送一个信息：在消费者处理完消息之前不要再给消费者发送消息</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(callback,</span><br><span class="line">                          queue=&#x27;durable&#x27;,</span><br><span class="line">                          # no_ack=True</span><br><span class="line">                          )</span><br><span class="line"></span><br><span class="line">    print(&#x27; [消费者] Waiting for messages...&#x27;)</span><br><span class="line">    channel.start_consuming()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    customer()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>交换机</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exchange：交换机</span><br><span class="line">生产者不是将消息发送给队列，而是将消息发送给交换机，由交换机决定将消息发送给哪个队列。</span><br><span class="line">所以exchange必须准确知道消息是要送到哪个队列，还是要被丢弃。因此要在exchange中给exchange定义规则，所有的规则都是在exchange的类型中定义的。</span><br><span class="line"></span><br><span class="line">exchange有4个类型：direct, topic, headers ,fanout</span><br><span class="line"></span><br><span class="line">1. fanout：广播类型，生产者将消息发送给所有消费者，如果某个消费者没有收到当前消息，就再也收不到了（消费者就像收音机）, 生产者可以用作日志收集系统。</span><br><span class="line"></span><br><span class="line">2. direct：关键字类型。功能：交换机根据生产者消息中含有的不同的关键字将消息发送给不同的队列，消费者根据不同的关键字从不同的队列取消息,生产者不用创建对列</span><br><span class="line"></span><br><span class="line">3. topic：模糊匹配类型(比较常用)</span><br><span class="line">发送到一个 topics交换机的消息，它的 routing_key不能是任意的,它的routing_key必须是一个用小数点分割的单词列表。 这个字符可以是任何单词，但是通常是一些指定意义的字符。比如：&quot;stock.usd.nyse&quot;,&quot;nyse.vmw&quot;,&quot;quick.orange.rabbit&quot;.  这里可以是你想要路由键的任意字符。最高限制为255字节。</span><br><span class="line"> 生产者与消费者的routing_key必须在同一个表单中。Topic交换的背后的逻辑类似直接交换（direct）,包含特定关键字的消息将会分发到所有匹配的关键字队列中。然后有两个重要的特殊情况：</span><br><span class="line">绑定键值：</span><br><span class="line">* 可代替一个单词</span><br><span class="line"># 可代替0个或多个单词</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>广播模式(fanout)</strong></p>
<blockquote>
<p>当producer发送消息到队列后，所有的consumer都会收到消息，需要注意的是，此模式下producer与concerned之间的关系类似与广播电台与收音机，如果广播后收音机没有接受到，那么消息就会丢失。</p>
</blockquote>
<ol>
<li>customer消费者</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def customer():</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    channel.exchange_declare(exchange=&#x27;flogs&#x27;,</span><br><span class="line">                             exchange_type=&#x27;fanout&#x27;)  # 广播类型，生产者将消息发送给所有消费者，如果某个消费者没有收到当前消息，就再也收不到了（消费者就像收音机）</span><br><span class="line"></span><br><span class="line">    result = channel.queue_declare(</span><br><span class="line">        exclusive=True)  # 不指定queue名字,rabbit会随机分配一个名字，exclusive=True（唯一性）表示在消费者与rabbitmq断开连接时，该队列会自动删除掉。</span><br><span class="line">    queue_name = result.method.queue  # 因为rabbitmq要求新队列名必须是与现存队列名不同，所以为保证队列的名字是唯一的，method.queue方法会随机创建一个队列名字。</span><br><span class="line"></span><br><span class="line">    channel.queue_bind(exchange=&#x27;flogs&#x27;,</span><br><span class="line">                       queue=queue_name)  # 将交换机flogs与接收消息的队列绑定。表示生产者将消息发给交换机flogs，flogs将消息发给随机队列queue，消费者在随机队列queue中取消息</span><br><span class="line"></span><br><span class="line">    print(&#x27; [消费者] Waiting for flogs...&#x27;)</span><br><span class="line"></span><br><span class="line">    def callback(ch, method, properties, body):</span><br><span class="line">        print(&quot; [消费者] &#123;&#125;&quot;.format(body))</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(callback,  # 调用回调函数从queue中取消息</span><br><span class="line">                          queue=queue_name,</span><br><span class="line">                          no_ack=True)  # 设置为消费者不给rabbitmq回复确认。</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 开启多个消费者后，会同时从生产者接收相同的消息</span><br><span class="line">    customer()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>producer生产者（可用作日志收集系统）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">def producer():</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    channel.exchange_declare(exchange=&#x27;flogs&#x27;,</span><br><span class="line">                             exchange_type=&#x27;fanout&#x27;)  # 创建一个fanout(广播)类型的交换机exchange，名字为flogs</span><br><span class="line"></span><br><span class="line">    message = &#x27;Hello World&#x27;</span><br><span class="line">    channel.basic_publish(exchange=&#x27;flogs&#x27;,  # 指定交换机exchange为flogs，这里只需要指定将消息发给交换机flogs就可以了，不需要指定队列，因为生产者消息是发送给交换机的。</span><br><span class="line">                          routing_key=&#x27;&#x27;,  # 在fanout类型中，绑定关键字routing_key必须忽略，写空即可</span><br><span class="line">                          body=message)</span><br><span class="line">    print(&quot; [生产者] Sent &#123;&#125;&quot;.format(message))</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    producer()</span><br></pre></td></tr></table></figure>

<p><strong>关键字类型(direct)</strong></p>
<ol>
<li><p>producer生产者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">def producer():</span><br><span class="line">        </span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    channel.exchange_declare(exchange=&#x27;dlogs&#x27;,</span><br><span class="line">                             exchange_type=&#x27;direct&#x27;)  # 创建一个交换机并声明exchange的类型为：关键字类型，表示该交换机会根据消息中不同的关键字将消息发送给不同的队列</span><br><span class="line">    severity = &#x27;info&#x27;  # severity这里只能为一个字符串，这里为&#x27;info&#x27;表明本生产者只将下面的message发送到info队列中，消费者也只能从info队列中接收info消息</span><br><span class="line">    message = &#x27;Hello World&#x27;</span><br><span class="line">    channel.basic_publish(exchange=&#x27;dlogs&#x27;,  # 指明用于发布消息的交换机、关键字</span><br><span class="line">                          routing_key=severity,  # 绑定关键字，即将message与关键字info绑定，明确将消息发送到哪个关键字的队列中。</span><br><span class="line">                          body=message)</span><br><span class="line">    print(&quot; [生产者] Sent &#123;&#125;:&#123;&#125;&quot;.format(severity, message))</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    producer()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>consumer消费者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def customer():</span><br><span class="line">    # 指定远程rabbitmq的用户名密码</span><br><span class="line">        credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()  # 在连接上创建一个频道</span><br><span class="line">    channel.exchange_declare(exchange=&#x27;dlogs&#x27;,</span><br><span class="line">                             exchange_type=&#x27;direct&#x27;)  # 创建交换机，命名为&#x27;dlogs&#x27;并声明exchange类型为关键字类型。</span><br><span class="line"></span><br><span class="line">    result = channel.queue_declare(exclusive=True)  # 创建随机队列，当消费者与rabbitmq断开连接时，这个队列将自动删除。</span><br><span class="line">    queue_name = result.method.queue  # 分配随机队列的名字。</span><br><span class="line"></span><br><span class="line">    severities = [&#x27;info&#x27;, &#x27;err&#x27;]  # 可以接收绑定关键字info或err的消息，列表中也可以只有一个</span><br><span class="line">    if not severities:  # 判断如果输入有误，输出用法</span><br><span class="line">        sys.stderr.write(&quot;Usage: &#123;&#125; [info] [warning] [error]\n&quot;.format(sys.argv[0]))</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    for severity in severities:</span><br><span class="line">        channel.queue_bind(exchange=&#x27;dlogs&#x27;,  # 将交换机、队列、关键字绑定在一起，使消费者只能根据关键字从不同队列中取消息</span><br><span class="line">                           queue=queue_name,</span><br><span class="line">                           routing_key=severity)  # 该消费者绑定的关键字。</span><br><span class="line"></span><br><span class="line">    print(&#x27; [消费者] Waiting for logs...&#x27;)</span><br><span class="line"></span><br><span class="line">    def callback(ch, method, properties, body):  # 定义回调函数，接收消息</span><br><span class="line">        print(&quot; [消费者] &#123;&#125;:&#123;&#125;&quot;.format(method.routing_key, body))</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(callback,</span><br><span class="line">                          queue=queue_name,</span><br><span class="line">                          no_ack=True)  # 消费者接收消息后，不给rabbimq回执确认。</span><br><span class="line"></span><br><span class="line">    channel.start_consuming()  # 循环等待消息接收。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    customer()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>模糊匹配类型(topic)</strong></p>
<ol>
<li><p>producer生产者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line"></span><br><span class="line">def producer():</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()</span><br><span class="line"></span><br><span class="line">    channel.exchange_declare(exchange=&#x27;tlogs&#x27;,</span><br><span class="line">                             exchange_type=&#x27;topic&#x27;)  # 创建模糊匹配类型的exchange。。</span><br><span class="line"></span><br><span class="line">    # 这里关键字必须为点号隔开的单词，以便于消费者进行匹配</span><br><span class="line">    # 引申：这里可以做一个判断，判断产生的日志是什么级别，然后产生对应的routing_key，使程序可以发送多种级别的日志</span><br><span class="line">    routing_key = &#x27;[warn].kern&#x27;</span><br><span class="line"></span><br><span class="line">    message = &#x27;Hello World&#x27;</span><br><span class="line">    channel.basic_publish(exchange=&#x27;tlogs&#x27;,  # 将交换机、关键字、消息进行绑定</span><br><span class="line">                          routing_key=routing_key,  # 绑定关键字，将队列变成[warn]日志的专属队列</span><br><span class="line">                          body=message)</span><br><span class="line">    print(&quot; [生产者] Sent &#123;&#125;:&#123;&#125;&quot;.format(routing_key, message))</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    producer()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>consumer消费者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import pika</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def customer():</span><br><span class="line">    # 指定远程rabbitmq的用户名密码</span><br><span class="line">    credentials = pika.PlainCredentials(&#x27;admin&#x27;, &#x27;admin&#x27;)</span><br><span class="line">    connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;192.168.5.199&#x27;, 5672, &#x27;/&#x27;, credentials))</span><br><span class="line">    channel = connection.channel()  # 在连接上创建一个频道</span><br><span class="line"></span><br><span class="line">    channel.exchange_declare(exchange=&#x27;tlogs&#x27;,</span><br><span class="line">                             exchange_type=&#x27;topic&#x27;)  # 声明exchange的类型为模糊匹配。</span><br><span class="line"></span><br><span class="line">    result = channel.queue_declare(exclusive=True)  # 创建随机一个队列当消费者退出的时候，该队列被删除。</span><br><span class="line">    queue_name = result.method.queue  # 创建一个随机队列名字。</span><br><span class="line"></span><br><span class="line">    binding_keys = [&#x27;[warn]&#x27;, &#x27;info.*&#x27;]  # 绑定键。&#x27;#&#x27;匹配所有字符，&#x27;*&#x27;匹配一个单词。这里列表中可以为一个或多个条件，能通过列表中字符匹配到的消息，消费者都可以取到</span><br><span class="line">    if not binding_keys:</span><br><span class="line">        sys.stderr.write(&quot;Usage: &#123;&#125; [binding_key]...\n&quot;.format(sys.argv[0]))</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">    for binding_key in binding_keys:  # 通过循环绑定多个&quot;交换机-队列-关键字&quot;，只要消费者在rabbitmq中能匹配到与关键字相应的队列，就从那个队列里取消息</span><br><span class="line">        channel.queue_bind(exchange=&#x27;tlogs&#x27;,</span><br><span class="line">                           queue=queue_name,</span><br><span class="line">                           routing_key=binding_key)</span><br><span class="line"></span><br><span class="line">    print(&#x27; [消费者] Waiting for logs...&#x27;)</span><br><span class="line"></span><br><span class="line">    def callback(ch, method, properties, body):</span><br><span class="line">        print(&quot; [消费者] &#123;&#125;:&#123;&#125;&quot;.format(method.routing_key, body))</span><br><span class="line"></span><br><span class="line">    channel.basic_consume(callback,</span><br><span class="line">                          queue=queue_name,</span><br><span class="line">                          no_ack=True)</span><br><span class="line"></span><br><span class="line">    channel.start_consuming()  # 循环接收消息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    customer()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote>
<p>报错如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">channel.exchange_declare(exchange=&#x27;clogs&#x27;,type=&#x27;fanout&#x27;)</span><br><span class="line">TypeError: exchange_declare() got an unexpected keyword argument &#x27;type&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channel.exchange_declare(exchange=&#x27;clogs&#x27;, exchange_type=&#x27;fanout&#x27;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原因应该为pika版本不同导致的用法不同，解决方法为把type换成exchange_type</p>
</blockquote>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>python open 文件操作</title>
    <url>/2021/04/01/python%20open%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="python-open-文件操作"><a href="#python-open-文件操作" class="headerlink" title="python:open/文件操作"></a>python:open/文件操作</h3><blockquote>
<p>open/文件操作</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=open(&#x27;/tmp/hello&#x27;,&#x27;w&#x27;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>#open(路径+文件名,读写模式)<br>#读写模式:r只读,r+读写,w新建(会覆盖原有文件),a追加,b二进制文件.常用模式<br>如:’rb’,’wb’,’r+b’等等</p>
</blockquote>
<blockquote>
<p>读写模式的类型有：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rU 或 Ua 以读方式打开, 同时提供通用换行符支持 (PEP 278)</span><br><span class="line">w     以写方式打开，</span><br><span class="line">a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)</span><br><span class="line">r+     以读写模式打开</span><br><span class="line">w+     以读写模式打开 (参见 w )</span><br><span class="line">a+     以读写模式打开 (参见 a )</span><br><span class="line">rb     以二进制读模式打开</span><br><span class="line">wb     以二进制写模式打开 (参见 w )</span><br><span class="line">ab     以二进制追加模式打开 (参见 a )</span><br><span class="line">rb+    以二进制读写模式打开 (参见 r+ )</span><br><span class="line">wb+    以二进制读写模式打开 (参见 w+ )</span><br><span class="line">ab+    以二进制读写模式打开 (参见 a+ )</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">1、使用&#x27;W&#x27;，文件若存在，首先要清空，然后（重新）创建，</span><br><span class="line"></span><br><span class="line">2、使用&#x27;a&#x27;模式 ，把所有要写入文件的数据都追加到文件的末尾，即使你使用了seek()指向文件的其他地方，如果文件不存在，将自动被创建。</span><br></pre></td></tr></table></figure>


<blockquote>
<p>f.read([size]) size未指定则返回整个文件,如果文件大小&gt;2倍内存则有问题.f.read()读到文件尾时返回””(空字串)</p>
</blockquote>
<blockquote>
<p>file.readline() 返回一行</p>
</blockquote>
<blockquote>
<p>file.readline([size]) 返回包含size行的列表,size 未指定则返回全部行<br><br>for line in f: print line #通过迭代器访问</p>
</blockquote>
<blockquote>
<p>f.write(“hello\n”) #如果要写入字符串以外的数据,先将他转换为字符串.</p>
</blockquote>
<blockquote>
<p>f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).</p>
</blockquote>
<blockquote>
<p>f.seek(偏移量,[起始位置])<br><br>用来移动文件指针<br><br>偏移量:单位:比特,可正可负<br><br>起始位置:0-文件头,默认值;1-当前位置;2-文件尾</p>
</blockquote>
<blockquote>
<p>f.close() 关闭文件</p>
</blockquote>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># Filename: using_file.py</span><br><span class="line"></span><br><span class="line">poem=&#x27;&#x27;&#x27;\Programming is funWhen the work is doneif you wanna make your work also fun: use Python!&#x27;&#x27;&#x27;</span><br><span class="line">f=file(&#x27;poem.txt&#x27;,&#x27;w&#x27;) # open for &#x27;w&#x27;riting</span><br><span class="line">f.write(poem) # write text to file</span><br><span class="line">f.close() # close the file</span><br><span class="line">f=file(&#x27;poem.txt&#x27;)</span><br><span class="line"></span><br><span class="line"># if no mode is specified, &#x27;r&#x27;ead mode is assumed by default</span><br><span class="line">while True: </span><br><span class="line">line=f.readline() </span><br><span class="line">if len(line)==0: # Zero length indicates EOF </span><br><span class="line">break </span><br><span class="line">print line, </span><br><span class="line"># Notice comma to avoid automatic newline added by Python</span><br><span class="line">f.close() </span><br><span class="line"># close the file</span><br></pre></td></tr></table></figure>
<p>‘’ ‘</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python qrcode示例</title>
    <url>/2021/04/01/python%20qrcode%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created By Murray(m18527) on 2019/5/20 9:09</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import base64</span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">import qrcode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class QRCodeTool(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, data=None, save_path=None):</span><br><span class="line">        self.qr_code = None</span><br><span class="line">        self.data = data  # 二维码内容字符串</span><br><span class="line">        self.save_path = save_path</span><br><span class="line">        self.img_base64 = None</span><br><span class="line">        self.version = None</span><br><span class="line">        self.error_correction = qrcode.constants.ERROR_CORRECT_L</span><br><span class="line">        self.box_size = 16</span><br><span class="line">        self.border = 4</span><br><span class="line">        self.img_format = &#x27;PNG&#x27;</span><br><span class="line">        self._init()</span><br><span class="line"></span><br><span class="line">    def _init(self):</span><br><span class="line">        &quot;&quot;&quot;初始化&quot;&quot;&quot;</span><br><span class="line">        self._init_qr_code()</span><br><span class="line"></span><br><span class="line">    def _init_qr_code(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        初始化：QRCode对象</span><br><span class="line">        version: 值为1~40，控制二维码的大小（最小值是1，是个12×12的矩阵）。</span><br><span class="line">                 若想让程序自动确定，将值设置为 None 并使用 fit 参数即可。</span><br><span class="line">        error_correction： 控制二维码的错误纠正功能。可取值下列4个常量。</span><br><span class="line">                            ERROR_CORRECT_L：大约7%或更少的错误能被纠正。</span><br><span class="line">                            ERROR_CORRECT_M（默认）：大约15%或更少的错误能被纠正。</span><br><span class="line">                            ROR_CORRECT_H：大约30%或更少的错误能被纠正。</span><br><span class="line">        box_size： 控制二维码中每个小格子包含的像素数。</span><br><span class="line">        border： 控制边框（二维码与图片边界的距离）包含的格子数（默认为4，是相关标准规定的最小值）</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        qr_code = qrcode.QRCode(</span><br><span class="line">            version=self.version,</span><br><span class="line">            error_correction=self.error_correction,</span><br><span class="line">            box_size=int(self.box_size),</span><br><span class="line">            border=int(self.border),</span><br><span class="line">        )</span><br><span class="line">        self.qr_code = qr_code</span><br><span class="line"></span><br><span class="line">    def set_data(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    def set_save_path(self, path):</span><br><span class="line">        self.save_path = path</span><br><span class="line"></span><br><span class="line">    def gen_qr_path(self):</span><br><span class="line">        self.qr_code.add_data(self.data)</span><br><span class="line">        self.qr_code.make(fit=True)</span><br><span class="line">        img = self.qr_code.make_image()</span><br><span class="line">        img.save(self.save_path)</span><br><span class="line"></span><br><span class="line">    def gen_qr_byte_io(self):</span><br><span class="line">        self.qr_code.add_data(self.data)</span><br><span class="line">        self.qr_code.make(fit=True)</span><br><span class="line">        img = self.qr_code.make_image()</span><br><span class="line">        byte_io = BytesIO()</span><br><span class="line">        img.save(byte_io, format=self.img_format)</span><br><span class="line">        byte_io.seek(0)</span><br><span class="line">        return byte_io</span><br><span class="line"></span><br><span class="line">    def gen_qr_base64(self):</span><br><span class="line">        self.qr_code.add_data(self.data)</span><br><span class="line">        self.qr_code.make(fit=True)</span><br><span class="line">        img = self.qr_code.make_image()</span><br><span class="line">        byte_io = BytesIO()</span><br><span class="line">        img.save(byte_io, format=self.img_format)</span><br><span class="line">        byte_data = byte_io.getvalue()</span><br><span class="line">        img_base64 = base64.b64encode(byte_data)</span><br><span class="line">        self.img_base64 = img_base64</span><br><span class="line">        return img_base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    url = &#x27;http://image.baidu.com/search/detail?ct=503316480&amp;z=0&amp;ipn=d&amp;word=图片&amp;hs=0&amp;pn=3&amp;spn=0&amp;di=128700&amp;pi=0&amp;rn=1&amp;tn=baiduimagedetail&amp;is=0%2C0&amp;ie=utf-8&amp;oe=utf-8&amp;cl=2&amp;lm=-1&amp;cs=2153937626%2C1074119156&amp;os=2973785003%2C2939226447&amp;simid=4127171795%2C760771602&amp;adpicid=0&amp;lpn=0&amp;ln=30&amp;fr=ala&amp;fm=&amp;sme=&amp;cg=&amp;bdtype=0&amp;oriquery=&amp;objurl=http%3A%2F%2Fk.zol-img.com.cn%2Fsjbbs%2F7692%2Fa7691515_s.jpg&amp;fromurl=ippr_z2C%24qAzdH3FAzdH3Fkkf_z%26e3Bz5s_z%26e3Bv54_z%26e3BvgAzdH3Ff3kkfAzdH3F10_c99a_z%26e3Bip4s&amp;gsm=0&amp;islist=&amp;querylist=&#x27;</span><br><span class="line">    qr = QRCodeTool(data=url, save_path=&#x27;1234.png&#x27;)</span><br><span class="line">    qr.gen_qr_path()</span><br><span class="line">    print(qr.gen_qr_base64())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Qrcode</tag>
      </tags>
  </entry>
  <entry>
    <title>python 两个list取交集、并集、差集</title>
    <url>/2021/04/01/python%20%E4%B8%A4%E4%B8%AAlist%E5%8F%96%E4%BA%A4%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/</url>
    <content><![CDATA[<h3 id="python-两个list取交集、并集、差集"><a href="#python-两个list取交集、并集、差集" class="headerlink" title="python 两个list取交集、并集、差集"></a>python 两个list取交集、并集、差集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new_list = list(set(origin_list).union(set(second_list))) # 并集</span><br><span class="line">new_list = list(set(origin_list).intersection(set(second_list))) # 交集</span><br><span class="line">new_list = list(set(origin_list).difference(set(second_list))) # 差集</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python 日志logging模块学习</title>
    <url>/2021/04/01/python%20%E6%97%A5%E5%BF%97logging%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://blog.csdn.net/yypsober/article/details/51800120">http://blog.csdn.net/yypsober/article/details/51800120</a></p>
<blockquote>
<p>默认情况下，logging将日志打印到屏幕，日志级别为WARNING；日志级别大小关系为：CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET，也可以自己定义日志级别。</p>
</blockquote>
<h3 id="※-使用配置文件"><a href="#※-使用配置文件" class="headerlink" title="※ 使用配置文件"></a>※ 使用配置文件</h3><h4 id="1-logger-conf内容"><a href="#1-logger-conf内容" class="headerlink" title="1. logger.conf内容"></a>1. logger.conf内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">###################### loggers #########################</span></span><br><span class="line">[loggers]</span><br><span class="line">keys=root,infoLogger,errorLogger</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=infoHandler,errorHandler</span><br><span class="line"></span><br><span class="line">[logger_infoLogger]</span><br><span class="line">handlers=infoHandler</span><br><span class="line">qualname=infoLogger</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[logger_errorLogger]</span><br><span class="line">handlers=infoHandler,errorHandler</span><br><span class="line">qualname=errorLogger</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line"><span class="comment">###################### handlers #########################</span></span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=infoHandler,errorHandler,rotatingFileHandler,timedRotatingFileHandler,httpHandler</span><br><span class="line"></span><br><span class="line">[handler_infoHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=INFO</span><br><span class="line">formatter=simpleFmt</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[handler_rotatingFileHandler]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=INFO</span><br><span class="line">formatter=standardFmt</span><br><span class="line">args=(<span class="string">&#x27;logs/mylog.log&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, 50*1024*1024, 5)</span><br><span class="line"></span><br><span class="line">[handler_errorHandler]</span><br><span class="line">class=FileHandler</span><br><span class="line">level=ERROR</span><br><span class="line">formatter=standardFmt</span><br><span class="line">args=(<span class="string">&#x27;logs/mylog.log&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[handler_timedRotatingFileHandler]</span><br><span class="line">class=handlers.TimedRotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=standardFmt</span><br><span class="line">args=(<span class="string">&#x27;log/mylog.log&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, 1 , 10 )</span><br><span class="line"></span><br><span class="line">[handler_httpHandler]</span><br><span class="line">class=handlers.HTTPHandler</span><br><span class="line">level=ERROR</span><br><span class="line">formatter=standardFmt</span><br><span class="line">args=(<span class="string">&#x27;localhost:8080&#x27;</span>, <span class="string">&#x27;log/mylog.log&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##################### formatter ##########################</span></span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=standardFmt,simpleFmt</span><br><span class="line"></span><br><span class="line">[formatter_standardFmt]</span><br><span class="line">format=%(asctime)s.%(msecs)d - %(pathname)s - [%(filename)s:%(lineno)d][%(funcName)s] - %(levelname)s: %(message)s</span><br><span class="line">datefmt=%Y-%m-%d %H:%M:%S</span><br><span class="line"></span><br><span class="line">[formatter_simpleFmt]</span><br><span class="line">format=%(asctime)s.%(msecs)d - [%(filename)s:%(lineno)d] - %(levelname)s: %(message)s</span><br><span class="line">datefmt=%Y-%m-%d %H:%M:%S</span><br></pre></td></tr></table></figure>

<h4 id="2-python测试代码"><a href="#2-python测试代码" class="headerlink" title="2. python测试代码"></a>2. python测试代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">&quot;logger.conf&quot;</span>)</span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;infoLogger&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&#x27;This is debug message&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;This is info message&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;This is warning message&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="按时间归档日志说明"><a href="#按时间归档日志说明" class="headerlink" title="按时间归档日志说明"></a>按时间归档日志说明</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间滚动意思是系统会在时间满足一定条件时给旧的日志文件存档，并仅保留一定时间内的日志，最终存档的日志文件名称类似：xx.log.2016-06-01。</span></span><br><span class="line"><span class="comment"># TimedRotatingFileHandler类</span></span><br><span class="line">class logging.handlers.TimedRotatingFileHandler(filename, when=<span class="string">&#x27;h&#x27;</span>, interval=1, backupCount=0, encoding=None, delay=False, utc=False)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">filename：文件名 - 在时间滚动模式中，它实际上代表文件名的前缀</span><br><span class="line">when：时间 - 按照哪种时间单位滚动（可选s-按秒，m-按分钟，h-按小时，d-按天，w0-w6-按指定的星期几，midnight-在午夜）</span><br><span class="line">interval：间隔 - 比如when设置为s，interval设置为1意思是每1秒</span><br><span class="line">backupCount：备份数量 - 保存几份日志，系统会自动删除超出此数目的日志文件</span><br><span class="line">encoding：编码 - 默认是UTF-8编码</span><br><span class="line">delay：延迟写入 - 如果设置为True那么只有调用了emit()后才会写入文件。</span><br><span class="line">utc：标准时间 - 设置为False(默认)使用本地时间，否则使用标准时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件args的参数顺序同上说明</span></span><br></pre></td></tr></table></figure>


<h3 id="※-logging-baseConfig配置文件"><a href="#※-logging-baseConfig配置文件" class="headerlink" title="※ logging baseConfig配置文件"></a>※ logging baseConfig配置文件</h3><h4 id="logging-basicConfig参数"><a href="#logging-basicConfig参数" class="headerlink" title="logging.basicConfig参数"></a>logging.basicConfig参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># logging.basicConfig参数说明:</span></span><br><span class="line">filename: 指定日志文件名</span><br><span class="line">filemode: 和file函数意义相同，指定日志文件的打开模式，<span class="string">&#x27;w&#x27;</span>或<span class="string">&#x27;a&#x27;</span>， 默认a（追加）</span><br><span class="line">format: 指定输出的格式和内容，format可以输出很多有用信息，:</span><br><span class="line">    %(levelno)s: 打印日志级别的数值</span><br><span class="line">    %(levelname)s: 打印日志级别名称</span><br><span class="line">    %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]</span><br><span class="line">    %(filename)s: 打印当前执行程序名</span><br><span class="line">    %(funcName)s: 打印日志的当前函数</span><br><span class="line">    %(lineno)d: 打印日志的当前行号</span><br><span class="line">    %(asctime)s: 打印日志的时间</span><br><span class="line">    %(thread)d: 打印线程ID</span><br><span class="line">    %(threadName)s: 打印线程名称</span><br><span class="line">    %(process)d: 打印进程ID</span><br><span class="line">    %(message)s: 打印日志信息</span><br><span class="line">datefmt: 指定时间格式，同time.strftime()</span><br><span class="line">level: 设置日志级别NOTSET、DEBUG、INFO、WARNING、ERROR、CRITICAL ，默认为logging.WARNING</span><br><span class="line">stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="basicConfig-配置示例1"><a href="#basicConfig-配置示例1" class="headerlink" title="basicConfig 配置示例1"></a>basicConfig 配置示例1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(</span><br><span class="line">    level=log_level,</span><br><span class="line">    format=&#x27;%(asctime)s %(filename)s - [%(filename)s:%(lineno)d] %(levelname)s %(message)s&#x27;,</span><br><span class="line">    datefmt=&#x27;%a, %d %b %Y %H:%M:%S&#x27;,</span><br><span class="line">    filename=&#x27;parser_result.log&#x27;,</span><br><span class="line">    filemode=&#x27;w&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h4 id="basicConfig-配置示例2"><a href="#basicConfig-配置示例2" class="headerlink" title="basicConfig 配置示例2"></a>basicConfig 配置示例2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created By Murray(m18527) on 2019/6/18 14:19</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler, TimedRotatingFileHandler</span><br><span class="line"></span><br><span class="line">DEBUG = <span class="built_in">str</span>(os.getenv(<span class="string">&quot;DEBUG&quot;</span>, <span class="string">&quot;true&quot;</span>)).lower() <span class="keyword">in</span> [<span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="comment"># logger settings</span></span><br><span class="line">LOG_PATH = os.getenv(<span class="string">&quot;LOG_FILE_PATH&quot;</span>, <span class="string">&quot;/var/log/&quot;</span>)</span><br><span class="line">os.makedirs(LOG_PATH, exist_ok=<span class="literal">True</span>)</span><br><span class="line">log_file = os.path.join(LOG_PATH, <span class="string">&#x27;&#123;&#125;.log&#x27;</span>.<span class="built_in">format</span>(<span class="string">&quot;demo&quot;</span>))</span><br><span class="line">LOG_LEVEL = logging.DEBUG <span class="keyword">if</span> DEBUG <span class="keyword">else</span> logging.WARNING</span><br><span class="line"></span><br><span class="line"><span class="comment"># StreamHandler</span></span><br><span class="line">console = logging.StreamHandler()</span><br><span class="line">console.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RotatingFileHandler</span></span><br><span class="line">rotating_file_handler = RotatingFileHandler(log_file, maxBytes=<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>, backupCount=<span class="number">10</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">rotating_file_handler.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># RotatingFileHandler</span></span><br><span class="line">timed_rotating_file_handler = TimedRotatingFileHandler(log_file, when=<span class="string">&#x27;h&#x27;</span>, interval=<span class="number">1</span>, backupCount=<span class="number">10</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">timed_rotating_file_handler.setLevel(LOG_LEVEL)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=LOG_LEVEL,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s.%(msecs)d - %(pathname)s - [%(filename)s:%(lineno)d][%(funcName)s] - %(levelname)s: %(message)s&#x27;</span>,</span><br><span class="line">    <span class="comment"># format=&#x27;%(asctime)s.%(msecs)d - [%(filename)s:%(lineno)d] - %(levelname)s: %(message)s&#x27;,</span></span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,</span><br><span class="line">    handlers=[rotating_file_handler, timed_rotating_file_handler, console]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    logger = logging.getLogger(__name__)</span><br><span class="line">    logger.info(<span class="string">&quot;this is a info log&quot;</span>)</span><br><span class="line">    logger.warning(<span class="string">&quot;this is a warning log&quot;</span>)</span><br><span class="line">    logger.error(<span class="string">&quot;this is a error log&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="※-logging-StreamHandler"><a href="#※-logging-StreamHandler" class="headerlink" title="※ logging StreamHandler"></a>※ logging StreamHandler</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义StreamHandler，将INFO级别或更高的日志信息打印到标准错误</span></span><br><span class="line">console = logging.StreamHandler()</span><br><span class="line">console.setLevel(logging.INFO)</span><br><span class="line">fmt = <span class="string">&#x27;%(asctime)s.%(msecs)d - %(pathname)s - [%(filename)s:%(lineno)d][%(funcName)s] - %(levelname)s: %(message)s&#x27;</span></span><br><span class="line">formatter = logging.Formatter(fmt)</span><br><span class="line">console.setFormatter(formatter)</span><br><span class="line">logging.getLogger(<span class="string">&#x27;&#x27;</span>).addHandler(console)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">logging.debug(<span class="string">&#x27;This is debug message&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;This is info message&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;This is warning message&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="※-日志回滚RotatingFileHandler-（按文件大小归档）"><a href="#※-日志回滚RotatingFileHandler-（按文件大小归档）" class="headerlink" title="※  日志回滚RotatingFileHandler （按文件大小归档）"></a>※  日志回滚RotatingFileHandler （按文件大小归档）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个RotatingFileHandler，最多备份5个日志文件，每个日志文件最大10M</span></span><br><span class="line">rotating_handler = RotatingFileHandler(<span class="string">&#x27;myapp.log&#x27;</span>, maxBytes=<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>, backupCount=<span class="number">5</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">rotating_handler.setLevel(logging.INFO)</span><br><span class="line">fmt = <span class="string">&#x27;%(asctime)s.%(msecs)d - %(pathname)s - [%(filename)s:%(lineno)d][%(funcName)s] - %(levelname)s: %(message)s&#x27;</span></span><br><span class="line">formatter = logging.Formatter(fmt)</span><br><span class="line">rotating_handler.setFormatter(formatter)</span><br><span class="line">logging.getLogger(<span class="string">&#x27;&#x27;</span>).addHandler(rotating_handler)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>logging有一个日志处理的主对象，其它处理方式都是通过addHandler添加进去的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># logging的几种handle方式：</span></span><br><span class="line">logging.StreamHandler: 日志输出到流，可以是sys.stderr、sys.stdout或者文件</span><br><span class="line">logging.FileHandler: 日志输出到文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志回滚方式，实际使用时用RotatingFileHandler和TimedRotatingFileHandler</span></span><br><span class="line">logging.handlers.BaseRotatingHandler</span><br><span class="line">logging.handlers.RotatingFileHandler</span><br><span class="line">logging.handlers.TimedRotatingFileHandler</span><br><span class="line">logging.handlers.SocketHandler: 远程输出日志到TCP/IP sockets</span><br><span class="line">logging.handlers.DatagramHandler:  远程输出日志到UDP sockets</span><br><span class="line">logging.handlers.SMTPHandler:  远程输出日志到邮件地址</span><br><span class="line">logging.handlers.SysLogHandler: 日志输出到syslog</span><br><span class="line">logging.handlers.NTEventLogHandler: 远程输出日志到Windows NT/2000/XP的事件日志</span><br><span class="line">logging.handlers.MemoryHandler: 日志输出到内存中的制定buffer</span><br><span class="line">logging.handlers.HTTPHandler: 通过<span class="string">&quot;GET&quot;</span>或<span class="string">&quot;POST&quot;</span>远程输出到HTTP服务器</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 由于StreamHandler和FileHandler是常用的日志处理方式，所以直接包含在logging模块中，而其他方式则包含在logging.handlers模块中。</span></span><br></pre></td></tr></table></figure>


<h3 id="Django-logging-示例（setting-py配置）"><a href="#Django-logging-示例（setting-py配置）" class="headerlink" title="Django logging 示例（setting.py配置）"></a>Django logging 示例（setting.py配置）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="keyword">if</span> sys.platform == <span class="string">&quot;win32&quot;</span>:</span><br><span class="line">    LOG_PATH = os.path.join(BASE_DIR, <span class="string">&#x27;log&#x27;</span>, os.curdir)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    LOG_PATH = os.getenv(<span class="string">&quot;LOG_FILE_PATH&quot;</span>, <span class="string">&quot;/var/log&quot;</span>)</span><br><span class="line">os.makedirs(LOG_PATH, exist_ok=<span class="literal">True</span>)</span><br><span class="line">LOG_FILE_NAME = os.getenv(<span class="string">&quot;LOG_FILE_NAME&quot;</span>, <span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;require_debug_true&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(asctime)s.%(msecs)d - %(pathname)s - [%(filename)s:%(lineno)d][%(funcName)s] - %(levelname)s: %(message)s&#x27;</span></span><br><span class="line">            <span class="string">&#x27;datefmt&#x27;</span>: <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(asctime)s.%(msecs)d - [%(filename)s:%(lineno)d] - %(levelname)s: %(message)s&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;require_debug_true&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(LOG_PATH, <span class="string">&#x27;&#123;&#125;.log&#x27;</span>.<span class="built_in">format</span>(LOG_FILE_NAME)),</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>,</span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;error&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;ERROR&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(LOG_PATH, <span class="string">&#x27;&#123;&#125;.log&#x27;</span>.<span class="built_in">format</span>(LOG_FILE_NAME)),</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>,</span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(LOG_PATH, <span class="string">&#x27;&#123;&#125;.log&#x27;</span>.<span class="built_in">format</span>(LOG_FILE_NAME)),</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>,</span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;db&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(LOG_PATH, <span class="string">&#x27;&#123;&#125;_db.log&#x27;</span>.<span class="built_in">format</span>(LOG_FILE_NAME)),</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>,</span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;django&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;django.request&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;WARNING&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;django.server&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;db&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;gunicorn&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;neon&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python3 安装</title>
    <url>/2021/04/01/python3%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="源码安装-Centos"><a href="#源码安装-Centos" class="headerlink" title="源码安装(Centos)"></a>源码安装(Centos)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装zlib、OpenSSL</span></span><br><span class="line">yum install –y gcc gcc-c++ openssl openssl-devel zlib zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 下载安装python3</span></span><br><span class="line"><span class="built_in">cd</span> /data/python</span><br><span class="line">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</span><br><span class="line">tar –zxvf Python-3.6.5.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.6.5</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装</span></span><br><span class="line">make &amp;make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建链接</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中异常处理try...except、raise</title>
    <url>/2021/04/01/python%E4%B8%AD%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86try...except%E3%80%81raise/</url>
    <content><![CDATA[<blockquote>
<p>python中try/except/else/finally语句的完整格式如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">     Normal execution block</span><br><span class="line">except A:</span><br><span class="line">     Exception A handle</span><br><span class="line">except B:</span><br><span class="line">     Exception B handle</span><br><span class="line">except:</span><br><span class="line">     Other exception handle</span><br><span class="line">else:</span><br><span class="line">     if no exception,get here</span><br><span class="line">finally:</span><br><span class="line">     print(&quot;finally&quot;)   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常执行的程序在try下面的 Normal execution block 执行块中执行， </span><br><span class="line">在执行过程中如果发生了异常，则中断当前在 Normal execution block 中的执行跳转到对应的异常处理块中开始执行；</span><br><span class="line">python 从第一个 except X 处开始查找， 如果找到了对应的exception类型则进入其提供的exception handle中进行处理，</span><br><span class="line">如果没有找到则直接进入except块处进行处理。except块是可选项，如果没有提供，该exception将会被提交给python进行默认处理，处理方式则是终止应用程序并打印提示信息；</span><br><span class="line">如果在 Normal execution block 执行块中执行过程中没有发生任何异常， 则在执行完Normal execution block后会进入else执行块中（如果存在的话）执行。</span><br><span class="line">无论是否发生了异常，只要提供了finally语句，以上try/except/else/finally代码块执行的最后一步总是执行finally所对应的代码块。</span><br><span class="line"></span><br><span class="line">需要注意的是：</span><br><span class="line">1. 在上面所示的完整语句中try/except/else/finally所出现的顺序必须是try--&gt;except X--&gt;except--&gt;else--&gt;finally，即所有的except必须在else和finally之前，else（如果有）必须在finally之前，而 except X 必须在except之前。 否则会出现语法错误。</span><br><span class="line">2. 对于上面所展示的try/except完整格式而言，else和finally都是可选的，而不是必须的，但是如果存在的话else必须在finally之前，finally（如果存在的话）必须在整个语句的最后位置。</span><br><span class="line">3. 在上面的完整语句中，else语句的存在必须以 except X 或者 except 语句为前提，如果在没有 except 语句的 try block 中使用else语句会引发语法错误。也就是说else不能与try/finally配合使用。</span><br><span class="line">4. except的使用要非常小心，慎用。</span><br></pre></td></tr></table></figure>

<h4 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h4><table>
<thead>
<tr>
<th>异常名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Exception</td>
<td>所有异常的基类</td>
</tr>
<tr>
<td>AttributeError</td>
<td>特性应用或赋值失败时引发</td>
</tr>
<tr>
<td>IOError</td>
<td>试图打开不存在的文件时引发</td>
</tr>
<tr>
<td>IndexError</td>
<td>在使用序列中不存在的索引时引发</td>
</tr>
<tr>
<td>KeyError</td>
<td>在使用映射不存在的键时引发</td>
</tr>
<tr>
<td>NameError</td>
<td>在找不到名字（变量）时引发</td>
</tr>
<tr>
<td>SyntaxError</td>
<td>在代码为错误形式时引发</td>
</tr>
<tr>
<td>TypeError</td>
<td>在内建操作或者函数应用于错误类型的对象是引发</td>
</tr>
<tr>
<td>ValueError</td>
<td>在内建操作或者函数应用于正确类型的对象，但是该对象使用不合适的值时引发</td>
</tr>
<tr>
<td>ZeroDivisionError</td>
<td>在除法或者摸除操作的第二个参数为0时引发</td>
</tr>
</tbody></table>
<h4 id="python所有的标准异常类"><a href="#python所有的标准异常类" class="headerlink" title="python所有的标准异常类"></a>python所有的标准异常类</h4><table>
<thead>
<tr>
<th>异常名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>BaseException</td>
<td>所有异常的基类</td>
</tr>
<tr>
<td>SystemExit</td>
<td>解释器请求退出</td>
</tr>
<tr>
<td>KeyboardInterrupt</td>
<td>用户中断执行(通常是输入^C)</td>
</tr>
<tr>
<td>Exception</td>
<td>常规错误的基类</td>
</tr>
<tr>
<td>StopIteration</td>
<td>迭代器没有更多的值</td>
</tr>
<tr>
<td>GeneratorExit</td>
<td>生成器(generator)发生异常来通知退出</td>
</tr>
<tr>
<td>SystemExit</td>
<td>Python 解释器请求退出</td>
</tr>
<tr>
<td>StandardError</td>
<td>所有的内建标准异常的基类</td>
</tr>
<tr>
<td>ArithmeticError</td>
<td>所有数值计算错误的基类</td>
</tr>
<tr>
<td>FloatingPointError</td>
<td>浮点计算错误</td>
</tr>
<tr>
<td>OverflowError</td>
<td>数值运算超出最大限制</td>
</tr>
<tr>
<td>ZeroDivisionError</td>
<td>除(或取模)零 (所有数据类型)</td>
</tr>
<tr>
<td>AssertionError</td>
<td>断言语句失败</td>
</tr>
<tr>
<td>AttributeError</td>
<td>对象没有这个属性</td>
</tr>
<tr>
<td>EOFError</td>
<td>没有内建输入,到达EOF 标记</td>
</tr>
<tr>
<td>EnvironmentError</td>
<td>操作系统错误的基类</td>
</tr>
<tr>
<td>IOError</td>
<td>输入/输出操作失败</td>
</tr>
<tr>
<td>OSError</td>
<td>操作系统错误</td>
</tr>
<tr>
<td>WindowsError</td>
<td>系统调用失败</td>
</tr>
<tr>
<td>ImportError</td>
<td>导入模块/对象失败</td>
</tr>
<tr>
<td>KeyboardInterrupt</td>
<td>用户中断执行(通常是输入^C)</td>
</tr>
<tr>
<td>LookupError</td>
<td>无效数据查询的基类</td>
</tr>
<tr>
<td>IndexError</td>
<td>序列中没有没有此索引(index)</td>
</tr>
<tr>
<td>KeyError</td>
<td>映射中没有这个键</td>
</tr>
<tr>
<td>MemoryError</td>
<td>内存溢出错误(对于Python 解释器不是致命的)</td>
</tr>
<tr>
<td>NameError</td>
<td>未声明/初始化对象 (没有属性)</td>
</tr>
<tr>
<td>UnboundLocalError</td>
<td>访问未初始化的本地变量</td>
</tr>
<tr>
<td>ReferenceError</td>
<td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td>
</tr>
<tr>
<td>RuntimeError</td>
<td>一般的运行时错误</td>
</tr>
<tr>
<td>NotImplementedError</td>
<td>尚未实现的方法</td>
</tr>
<tr>
<td>SyntaxError</td>
<td>Python 语法错误</td>
</tr>
<tr>
<td>IndentationError</td>
<td>缩进错误</td>
</tr>
<tr>
<td>TabError</td>
<td>Tab 和空格混用</td>
</tr>
<tr>
<td>SystemError</td>
<td>一般的解释器系统错误</td>
</tr>
<tr>
<td>TypeError</td>
<td>对类型无效的操作</td>
</tr>
<tr>
<td>ValueError</td>
<td>传入无效的参数</td>
</tr>
<tr>
<td>UnicodeError</td>
<td>Unicode 相关的错误</td>
</tr>
<tr>
<td>UnicodeDecodeError</td>
<td>Unicode 解码时的错误</td>
</tr>
<tr>
<td>UnicodeEncodeError</td>
<td>Unicode 编码时错误</td>
</tr>
<tr>
<td>UnicodeTranslateError</td>
<td>Unicode 转换时错误</td>
</tr>
<tr>
<td>Warning</td>
<td>警告的基类</td>
</tr>
<tr>
<td>DeprecationWarning</td>
<td>关于被弃用的特征的警告</td>
</tr>
<tr>
<td>FutureWarning</td>
<td>关于构造将来语义会有改变的警告</td>
</tr>
<tr>
<td>OverflowWarning</td>
<td>旧的关于自动提升为长整型(long)的警告</td>
</tr>
<tr>
<td>PendingDeprecationWarning</td>
<td>关于特性将会被废弃的警告</td>
</tr>
<tr>
<td>RuntimeWarning</td>
<td>可疑的运行时行为(runtime behavior)的警告</td>
</tr>
<tr>
<td>SyntaxWarning</td>
<td>可疑的语法的警告</td>
</tr>
<tr>
<td>UserWarning</td>
<td>用户代码生成的警告</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>quartz定时器配置</title>
    <url>/2018/01/01/quartz%E5%AE%9A%E6%97%B6%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>quartz的配置文件spring-quartz.xml：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd</span><br><span class="line">        http://www.springframework.org/schema/tx</span><br><span class="line">        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&quot;</span><br><span class="line">    default-lazy-init=&quot;false&quot;&gt;</span><br><span class="line">    &lt;!-- 指定工作类 --&gt;</span><br><span class="line">    &lt;bean id=&quot;quartzJob&quot; class=&quot;com.mhiywf.ssmdemo.api.test.TestDemo&quot; autowire=&quot;byName&quot;/&gt;</span><br><span class="line">    &lt;!--定义调用对象和调用对象的方法 --&gt;</span><br><span class="line">    &lt;bean id=&quot;jobtask&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--调用类 --&gt;</span><br><span class="line">        &lt;property name=&quot;targetObject&quot; ref=&quot;quartzJob&quot; /&gt;</span><br><span class="line">        &lt;!--调用方法 --&gt;</span><br><span class="line">        &lt;property name=&quot;targetMethod&quot; value=&quot;doPrintHello&quot; /&gt;</span><br><span class="line">        &lt;!-- 是否并发运行 --&gt;</span><br><span class="line">        &lt;property name=&quot;concurrent&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--定义触发时间 --&gt;</span><br><span class="line">    &lt;bean id=&quot;doTime&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;property name=&quot;jobDetail&quot; ref=&quot;jobtask&quot; /&gt;</span><br><span class="line">        &lt;!--Cron表达式 --&gt;</span><br><span class="line">        &lt;property name=&quot;cronExpression&quot; value=&quot;1/2 * * * * ?&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--总管理类如果将lazy-init=&quot;false&quot;那么容器启动就会执行调度程序   --&gt;</span><br><span class="line">    &lt;bean id=&quot;startQuartz&quot; lazy-init=&quot;false&quot; autowire=&quot;no&quot;</span><br><span class="line">        class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;triggers&quot;&gt;</span><br><span class="line">            &lt;!--任务列表 --&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;ref bean=&quot;doTime&quot; /&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明：<br>① targetMethod: 指定需要定时执行scheduleInfoManager中的simpleJobTest()方法<br>② concurrent：对于相同的JobDetail，当指定多个Trigger时, 很可能第一个job完成之前，第二个job就开始了。指定concurrent设为false，多个job不会并发运行，第二个job将不会在第一个job完成之前开始。<br>③ cronExpression：1/2 * * * * ?表示从第1秒开始每2秒执行一次。<br>④ triggers：通过再添加其他的ref元素可在list中放置多个触发器。</p>
<p>Cron表达式的详细用法</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份</td>
<td>1-12 或者 JAN-DEC</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期</td>
<td>1-7 或者 SUN-SAT</td>
<td>, - * ? / L C #</td>
</tr>
<tr>
<td>年（可选）</td>
<td>留空, 1970-2099</td>
<td>, - * /</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>例子：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0/5 * * * * ? ： 每5秒执行一次</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“<em>“字符被用来指定所有的值。如：”</em>“在分钟的字段域里表示”每分钟”。</td>
<td></td>
<td></td>
</tr>
<tr>
<td>“?”字符只在日期域和星期域中使用。它被用来指定”非明确的值”。当你需要通过在这两个域中的一个来指定一些东西的时候，它是有用的。</td>
<td></td>
<td></td>
</tr>
<tr>
<td>月份中的日期和星期中的日期这两个元素时互斥的一起应该通过设置一个问号来表明不想设置那个字段。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“-“字符被用来指定一个范围。如：”10-12”在小时域意味着”10点、11点、12点”。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“,”字符被用来指定另外的值。如：”MON,WED,FRI”在星期域里表示”星期一、星期三、星期五”。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“/“字符用于指定增量。如：”0/15”在秒域意思是每分钟的0，15，30和45秒。”5/15”在分钟域表示每小时的5，20，35和50。符号”<em>“在”/“前面（如：</em>/10）等价于0在”/“前面（如：0/10）。记住一条本质：表达式的每个数值域都是一个有最大值和最小值的集合，如：秒域和分钟域的集合是0-59，日期域是1-31，月份域是1-12。字符”/“可以帮助你在每个字符域中取相应的数值。如：”7/6”在月份域的时候只有当7月的时候才会触发，并不是表示每个6月。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>L是’last’的省略写法可以表示day-of-month和day-of-week域，但在两个字段中的意思不同，例如day-of-month域中表示一个月的最后一天。如果在day-of-week域表示’7’或者’SAT’，如果在day-of-week域中前面加上数字，它表示一个月的最后几天，例如’6L’就表示一个月的最后一个星期五。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>字符”W”只允许日期域出现。这个字符用于指定日期的最近工作日。例如：如果你在日期域中写 “15W”，表示：这个月15号最近的工作日。所以，如果15号是周六，则任务会在14号触发。如果15好是周日，则任务会在周一也就是16号触发。如果是在日期域填写”1W”即使1号是周六，那么任务也只会在下周一，也就是3号触发，”W”字符指定的最近工作日是不能够跨月份的。字符”W”只能配合一个单独的数值使用，不能够是一个数字段，如：1-15W是错误的。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“L”和”W”可以在日期域中联合使用，LW表示这个月最后一周的工作日。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>字符”#”只允许在星期域中出现。这个字符用于指定本月的某某天。例如：”6#3”表示本月第三周的星期五（6表示星期五，3表示第三周）。”2#1”表示本月第一周的星期一。”4#5”表示第五周的星期三。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>字符”C”允许在日期域和星期域出现。这个字符依靠一个指定的”日历”。也就是说这个表达式的值依赖于相关的”日历”的计算结果，如果没有”日历”关联，则等价于所有包含的”日历”。如：日期域是”5C”表示关联”日历”中第一天，或者这个月开始的第一天的后5天。星期域是”1C”表示关联”日历”中第一天，或者星期的第一天的后1天，也就是周日的后一天（周一）。</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>表达式举例</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;0 0 12 * * ?&quot; 每天中午12点触发</span><br><span class="line">&quot;0 15 10 ? * *&quot; 每天上午10:15触发</span><br><span class="line">&quot;0 15 10 * * ?&quot; 每天上午10:15触发</span><br><span class="line">&quot;0 15 10 * * ? *&quot; 每天上午10:15触发</span><br><span class="line">&quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发</span><br><span class="line">&quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">&quot;0 0/5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">&quot;0 0/5 14,18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">&quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发</span><br><span class="line">&quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发</span><br><span class="line">&quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发</span><br><span class="line">&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发</span><br><span class="line">&quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line">&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq生产安装(vm版)</title>
    <url>/2021/06/29/rabbitmq%E7%94%9F%E4%BA%A7%E5%AE%89%E8%A3%85(vm%E7%89%88)/</url>
    <content><![CDATA[<h3 id="rabbitmq安装"><a href="#rabbitmq安装" class="headerlink" title="rabbitmq安装"></a>rabbitmq安装</h3><p>注意事项:</p>
<blockquote>
<p>1.安装rabbitmq前请先安装好docker，具体安装方法参考文档&lt;&lt;docker生产安装.md&gt;&gt;。<br>2.文档中IP地址为示意地址，安装时请替换为实际生产地址。<br>3.本文档不要一次性执行一个命令框（灰色框）内的全部命令，请按照步骤说明分步执行。<br>4.文档中主机名称mq-11，mq-12，mq-13也需要根据生产环境ip设置为对应的主机名称。</p>
</blockquote>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><em>注意：以下操作都在3台机器上分别执行</em></p>
<p><strong>规划机器，rabbitmq版本3.8.9</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.68.11 mq-11</span><br><span class="line">192.168.68.12 mq-12</span><br><span class="line">192.168.68.13 mq-13</span><br></pre></td></tr></table></figure>

<p><strong>设置主机hostname</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#机器192.168.68.11执行</span><br><span class="line">hostnamectl --static set-hostname  mq-11</span><br><span class="line"></span><br><span class="line">#机器192.168.68.12执行</span><br><span class="line">hostnamectl --static set-hostname  mq-12</span><br><span class="line"></span><br><span class="line">#机器192.168.68.13执行</span><br><span class="line">hostnamectl --static set-hostname  mq-13</span><br></pre></td></tr></table></figure>
<p><strong>为每台机器创建rabbitmq账号，并设置密码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd rabbitmq</span><br><span class="line">useradd -g rabbitmq rabbitmq</span><br><span class="line">#修改账号rabbitmq密码为rabbitmq@1234，生产环境请替换为其他密码</span><br><span class="line">echo rabbitmq:rabbitmq@1234|chpasswd</span><br><span class="line"></span><br><span class="line">echo &#x27;rabbitmq     ALL=(ALL)NOPASSWD:ALL&#x27; &gt;&gt; /etc/sudoers</span><br><span class="line">sed -i &#x27;s/Defaults    requiretty/#Defaults    requiretty/g&#x27; /etc/sudoers</span><br><span class="line">cat  /etc/sudoers</span><br></pre></td></tr></table></figure>
<p><strong>下载稳定版安装包</strong></p>
<p>官方地址：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#socat</span><br><span class="line">wget http://www.rpmfind.net/linux/centos/7.9.2009/os/x86_64/Packages/socat-1.7.3.2-2.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">#epel</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/epel/7/x86_64/Packages/e/epel-release-7-13.noarch.rpm</span><br><span class="line"></span><br><span class="line">#erland</span><br><span class="line">wget https://github.com/rabbitmq/erlang-rpm/releases/download/v23.2.1/erlang-23.2.1-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">#rabbitmq</span><br><span class="line">wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.8.9/rabbitmq-server-3.8.9-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">#内网地址</span><br><span class="line">wget http://10.7.102.125:8000/downloads/rabbitmq/socat-1.7.3.2-2.el7.x86_64.rpm</span><br><span class="line">wget http://10.7.102.125:8000/downloads/rabbitmq/epel-release-7-13.noarch.rpm</span><br><span class="line">wget http://10.7.102.125:8000/downloads/rabbitmq/erlang-23.2.1-1.el7.x86_64.rpm</span><br><span class="line">wget http://10.7.102.125:8000/downloads/rabbitmq/rabbitmq-server-3.8.9-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p><em>注意：以下操作在3台机器上都要执行</em></p>
<p><strong>socat安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y install socat-1.7.3.2-2.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><strong>epel安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y install epel-release-7-13.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><strong>erlang安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y install erlang-23.2.1-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><strong>rabbitmq安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh rabbitmq-server-3.8.9-1.el7.noarch.rpm</span><br><span class="line">#验证是否成功：</span><br><span class="line">sudo systemctl start rabbitmq-server </span><br><span class="line">sudo systemctl status rabbitmq-server</span><br><span class="line">#停止服务：</span><br><span class="line">sudo systemctl stop rabbitmq-server</span><br></pre></td></tr></table></figure>

<p>同步.erlang.cookie文件，保持3台机器上.erlang.cookie内容一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#备注：官方在介绍集群的文档中提到过.erlang.cookie一般会存在两个地址：</span><br><span class="line">#第一个是$home/.erlang.cookie，第二个地方就是/var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure>

<h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p><em>注意：以下操作都在3台机器上分别执行</em></p>
<p>1.修改/etc/hosts文件，添加IP和节点名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sudo vim /etc/hosts</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat &lt;&lt;EOF &gt;&gt; /etc/hosts</span><br><span class="line">192.168.68.11 mq-1</span><br><span class="line">192.168.68.12 mq-2</span><br><span class="line">192.168.68.13 mq-3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>

<p>2.首先启动3个节点上的RabbitMQ服务</p>
<blockquote>
<p>创建启动脚本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/home/rabbitmq/startRabbitmq.sh</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /home/rabbitmq/startRabbitmq.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">sudo systemctl start rabbitmq-server</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建停止脚本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/home/rabbitmq/stopRabbitmq.sh</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /home/rabbitmq/stopRabbitmq.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">sudo systemctl stop rabbitmq-server</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建查看状态脚本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/home/rabbitmq/statusRabbitmq.sh</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /home/rabbitmq/statusRabbitmq.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">sudo systemctl status rabbitmq-server</span><br><span class="line">sudo rabbitmqctl cluster_status</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">./startRabbitmq.sh</span><br><span class="line"><span class="comment">#查看各节点的集群状态</span></span><br><span class="line">./statusRabbitmq.sh</span><br></pre></td></tr></table></figure>

<p>3.以mq-11为基准，将mq-12、mq-13加入到集群中，在机器mq-12，mq-13上操作如下命令(<em>以下操作只在12，13两台从机器上执行</em>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl stop_app</span><br><span class="line">sudo rabbitmqctl reset</span><br><span class="line">sudo rabbitmqctl join_cluster rabbit@mq-1</span><br><span class="line">sudo rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line"><span class="comment">#故障节点剔除</span></span><br><span class="line">rabbitmqctl  -n rabbit@mq-1  forget_cluster_node rabbit@mq-2</span><br><span class="line"><span class="comment">#重置节点数据，执行前停止rabbitmq</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/rabbitmq/mnesia</span><br></pre></td></tr></table></figure>

<p>4.检查集群状态(<em>以下操作在主服务器mq-11上操作</em>)</p>
<blockquote>
<p>注意：如果关闭了集群中的所有节点，确保启动时最后一个关闭的节点第一个启动。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl cluster_status</span><br><span class="line"><span class="comment">#启动管理插件</span></span><br><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加admin用户,否则用guest登陆会报User can only log in via localhost</span></span><br><span class="line">sudo rabbitmqctl add_user admin admin</span><br><span class="line">sudo rabbitmqctl set_permissions -p / admin <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line">sudo rabbitmqctl set_user_tags admin administrator</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问控制管理页面</span></span><br><span class="line">http://192.168.2.11:15672/</span><br></pre></td></tr></table></figure>

<h4 id="设置镜像队列"><a href="#设置镜像队列" class="headerlink" title="设置镜像队列"></a>设置镜像队列</h4><p><em>注意：以下操作只在主服务器mq-11上操作</em></p>
<p>针对每一个镜像队列都包含一个master节点和多个slave节点。如果master不工作，那么镜像队列最早的salve会升级为master。</p>
<p>镜像队列的配置主要是通过添加相应的 Policy 来完成，命令如下 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy [-p vhost] [--priority priority] [--apply-to apply-to] &#123;name&#125; &#123;pattern&#125; &#123;definition&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对队列名称以<em>字母或数字</em>开头的所有队列进行镜像，并在集群的所有节点上完成镜像。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rabbitmqctl set_policy -p /prod --priority 0 --apply-to queues mirror_queue &quot;^[0-9a-zA-Z]&quot; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>验证</strong></p>
<p>使用新建的admin用户登录远程的机器 <a href="http://192.168.2.11:15672/">http://192.168.2.11:15672/</a></p>
<p>创建一个队列，例如以*<strong>“queue_”**<em>开头，如果管理界面能看到队列Features状态显示为</em></strong>“D HA”***说明镜像队列创建成功</p>
<p>安装完毕！</p>
<p>参考： <a href="https://mp.weixin.qq.com/s/IWFZBfyHaSsQFjX7oMa_Bg">https://mp.weixin.qq.com/s/IWFZBfyHaSsQFjX7oMa_Bg</a></p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
        <tag>Rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>rancher安装</title>
    <url>/2021/06/29/rancher%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="rancher安装"><a href="#rancher安装" class="headerlink" title="rancher安装"></a>rancher安装</h1><p>准备工作</p>
<p>下载安装包，配置服务器，安装docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rancher/rancher:stable</span><br><span class="line">docker tag rancher/rancher:stable 10.7.92.101:5000/app/rancher/rancher:stable</span><br><span class="line">docker push 10.7.92.101:5000/app/rancher/rancher:stable</span><br></pre></td></tr></table></figure>

<h2 id="脚本pullImage-sh"><a href="#脚本pullImage-sh" class="headerlink" title="脚本pullImage.sh"></a>脚本pullImage.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull busybox</span><br><span class="line">docker pull rancher/calico-cni:v3.13.4</span><br><span class="line">docker pull rancher/calico-cni:v3.16.1</span><br><span class="line">docker pull rancher/calico-ctl:v3.13.4</span><br><span class="line">docker pull rancher/calico-ctl:v3.16.1</span><br><span class="line">docker pull rancher/calico-kube-controllers:v3.13.4</span><br><span class="line">docker pull rancher/calico-kube-controllers:v3.16.1</span><br><span class="line">docker pull rancher/calico-node:v3.13.4</span><br><span class="line">docker pull rancher/calico-node:v3.16.1</span><br><span class="line">docker pull rancher/calico-pod2daemon-flexvol:v3.13.4</span><br><span class="line">docker pull rancher/calico-pod2daemon-flexvol:v3.16.1</span><br><span class="line">docker pull rancher/cluster-proportional-autoscaler:1.7.1</span><br><span class="line">docker pull rancher/cluster-proportional-autoscaler:1.8.1</span><br><span class="line">docker pull rancher/configmap-reload:v0.3.0-rancher2</span><br><span class="line">docker pull rancher/coredns-coredns:1.6.2</span><br><span class="line">docker pull rancher/coredns-coredns:1.6.5</span><br><span class="line">docker pull rancher/coredns-coredns:1.6.9</span><br><span class="line">docker pull rancher/coredns-coredns:1.7.0</span><br><span class="line">docker pull rancher/coreos-etcd:v3.3.15-rancher1</span><br><span class="line">docker pull rancher/coreos-etcd:v3.4.13-rancher1</span><br><span class="line">docker pull rancher/coreos-etcd:v3.4.3-rancher1</span><br><span class="line">docker pull rancher/coreos-flannel:v0.12.0</span><br><span class="line">docker pull rancher/coreos-flannel:v0.13.0-rancher1</span><br><span class="line">docker pull rancher/coreos-kube-state-metrics:v1.9.7</span><br><span class="line">docker pull rancher/coreos-prometheus-config-reloader:v0.38.1</span><br><span class="line">docker pull rancher/coreos-prometheus-operator:v0.38.1</span><br><span class="line">docker pull rancher/eks-operator:v1.0.4</span><br><span class="line">docker pull rancher/flannel-cni:v0.3.0-rancher6</span><br><span class="line">docker pull rancher/fluentd:v0.1.19</span><br><span class="line">docker pull rancher/grafana-grafana:6.7.4</span><br><span class="line">docker pull rancher/grafana-grafana:7.1.5</span><br><span class="line">docker pull rancher/hyperkube:v1.16.15-rancher1</span><br><span class="line">docker pull rancher/hyperkube:v1.17.14-rancher1</span><br><span class="line">docker pull rancher/hyperkube:v1.18.12-rancher1</span><br><span class="line">docker pull rancher/hyperkube:v1.19.4-rancher1</span><br><span class="line">docker pull rancher/istio-1.5-migration:0.1.1</span><br><span class="line">docker pull rancher/istio-citadel:1.5.9</span><br><span class="line">docker pull rancher/istio-coredns-plugin:0.2-istio-1.1</span><br><span class="line">docker pull rancher/istio-galley:1.5.9</span><br><span class="line">docker pull rancher/istio-kubectl:1.4.6</span><br><span class="line">docker pull rancher/istio-kubectl:1.5.10</span><br><span class="line">docker pull rancher/istio-kubectl:1.5.9</span><br><span class="line">docker pull rancher/istio-mixer:1.5.9</span><br><span class="line">docker pull rancher/istio-node-agent-k8s:1.5.9</span><br><span class="line">docker pull rancher/istio-pilot:1.5.9</span><br><span class="line">docker pull rancher/istio-proxyv2:1.5.9</span><br><span class="line">docker pull rancher/istio-sidecar_injector:1.5.9</span><br><span class="line">docker pull rancher/jaegertracing-all-in-one:1.14</span><br><span class="line">docker pull rancher/jenkins-jnlp-slave:3.35-4</span><br><span class="line">docker pull rancher/jetstack-cert-manager-controller:v0.8.1</span><br><span class="line">docker pull rancher/jimmidyson-configmap-reload:v0.3.0</span><br><span class="line">docker pull rancher/k8s-dns-dnsmasq-nanny:1.15.0</span><br><span class="line">docker pull rancher/k8s-dns-dnsmasq-nanny:1.15.10</span><br><span class="line">docker pull rancher/k8s-dns-dnsmasq-nanny:1.15.2</span><br><span class="line">docker pull rancher/k8s-dns-kube-dns:1.15.0</span><br><span class="line">docker pull rancher/k8s-dns-kube-dns:1.15.10</span><br><span class="line">docker pull rancher/k8s-dns-kube-dns:1.15.2</span><br><span class="line">docker pull rancher/k8s-dns-node-cache:1.15.13</span><br><span class="line">docker pull rancher/k8s-dns-node-cache:1.15.7</span><br><span class="line">docker pull rancher/k8s-dns-sidecar:1.15.0</span><br><span class="line">docker pull rancher/k8s-dns-sidecar:1.15.10</span><br><span class="line">docker pull rancher/k8s-dns-sidecar:1.15.2</span><br><span class="line">docker pull rancher/kiali-kiali:v1.17</span><br><span class="line">docker pull rancher/kube-api-auth:v0.1.4</span><br><span class="line">docker pull rancher/kubectl:v1.18.0</span><br><span class="line">docker pull rancher/kubernetes-external-dns:v0.7.3</span><br><span class="line">docker pull rancher/library-nginx:1.19.2-alpine</span><br><span class="line">docker pull rancher/log-aggregator:v0.1.7</span><br><span class="line">docker pull rancher/metrics-server:v0.3.4</span><br><span class="line">docker pull rancher/metrics-server:v0.3.6</span><br><span class="line">docker pull rancher/minio-minio:RELEASE.2020-07-13T18-09-56Z</span><br><span class="line">docker pull rancher/nginx-ingress-controller-defaultbackend:1.5-rancher1</span><br><span class="line">docker pull rancher/nginx-ingress-controller:nginx-0.35.0-rancher2</span><br><span class="line">docker pull rancher/opa-gatekeeper:v3.1.0-beta.7</span><br><span class="line">docker pull rancher/openzipkin-zipkin:2.14.2</span><br><span class="line">docker pull rancher/pause:3.1</span><br><span class="line">docker pull rancher/pause:3.2</span><br><span class="line">docker pull rancher/pipeline-jenkins-server:v0.1.4</span><br><span class="line">docker pull rancher/pipeline-tools:v0.1.15</span><br><span class="line">docker pull rancher/plugins-docker:18.09</span><br><span class="line">docker pull rancher/prom-alertmanager:v0.21.0</span><br><span class="line">docker pull rancher/prom-node-exporter:v1.0.1</span><br><span class="line">docker pull rancher/prom-prometheus:v2.12.0</span><br><span class="line">docker pull rancher/prom-prometheus:v2.18.2</span><br><span class="line">docker pull rancher/prometheus-auth:v0.2.1</span><br><span class="line">docker pull rancher/pstauffer-curl:v1.0.3</span><br><span class="line">docker pull rancher/rke-tools:v0.1.66</span><br><span class="line">docker pull rancher/security-scan:v0.1.14</span><br><span class="line">docker pull rancher/shell:v0.1.5</span><br><span class="line">docker pull rancher/sonobuoy-sonobuoy:v0.16.3</span><br><span class="line">docker pull rancher/system-upgrade-controller:v0.6.2</span><br><span class="line">docker pull rancher/thanosio-thanos:v0.15.0</span><br><span class="line">docker pull rancher/webhook-receiver:v0.2.4</span><br><span class="line">docker pull registry:2</span><br><span class="line">docker pull rancher/rancher-agent:v2.5.3</span><br></pre></td></tr></table></figure>

<h2 id="脚本saveImages-sh"><a href="#脚本saveImages-sh" class="headerlink" title="脚本saveImages.sh"></a>脚本saveImages.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo docker save -o  ./tars/registry:2.tar		registry:2</span><br><span class="line">sudo docker save -o  ./tars/webhook-receiver:v0.2.4.tar		rancher/webhook-receiver:v0.2.4</span><br><span class="line">sudo docker save -o  ./tars/thanosio-thanos:v0.15.0.tar		rancher/thanosio-thanos:v0.15.0</span><br><span class="line">sudo docker save -o  ./tars/system-upgrade-controller:v0.6.2.tar		rancher/system-upgrade-controller:v0.6.2</span><br><span class="line">sudo docker save -o  ./tars/sonobuoy-sonobuoy:v0.16.3.tar		rancher/sonobuoy-sonobuoy:v0.16.3</span><br><span class="line">sudo docker save -o  ./tars/shell:v0.1.5.tar		rancher/shell:v0.1.5</span><br><span class="line">sudo docker save -o  ./tars/security-scan:v0.1.14.tar		rancher/security-scan:v0.1.14</span><br><span class="line">sudo docker save -o  ./tars/rke-tools:v0.1.66.tar		rancher/rke-tools:v0.1.66</span><br><span class="line">sudo docker save -o  ./tars/rancher-agent:v2.5.3.tar		rancher/rancher-agent:v2.5.3</span><br><span class="line">sudo docker save -o  ./tars/pstauffer-curl:v1.0.3.tar		rancher/pstauffer-curl:v1.0.3</span><br><span class="line">sudo docker save -o  ./tars/prom-prometheus:v2.18.2.tar		rancher/prom-prometheus:v2.18.2</span><br><span class="line">sudo docker save -o  ./tars/prom-prometheus:v2.12.0.tar		rancher/prom-prometheus:v2.12.0</span><br><span class="line">sudo docker save -o  ./tars/prom-node-exporter:v1.0.1.tar		rancher/prom-node-exporter:v1.0.1</span><br><span class="line">sudo docker save -o  ./tars/prometheus-auth:v0.2.1.tar		rancher/prometheus-auth:v0.2.1</span><br><span class="line">sudo docker save -o  ./tars/prom-alertmanager:v0.21.0.tar		rancher/prom-alertmanager:v0.21.0</span><br><span class="line">sudo docker save -o  ./tars/plugins-docker:18.09.tar		rancher/plugins-docker:18.09</span><br><span class="line">sudo docker save -o  ./tars/pipeline-tools:v0.1.15.tar		rancher/pipeline-tools:v0.1.15</span><br><span class="line">sudo docker save -o  ./tars/pipeline-jenkins-server:v0.1.4.tar		rancher/pipeline-jenkins-server:v0.1.4</span><br><span class="line">sudo docker save -o  ./tars/pause:3.2.tar		rancher/pause:3.2</span><br><span class="line">sudo docker save -o  ./tars/pause:3.1.tar		rancher/pause:3.1</span><br><span class="line">sudo docker save -o  ./tars/openzipkin-zipkin:2.14.2.tar		rancher/openzipkin-zipkin:2.14.2</span><br><span class="line">sudo docker save -o  ./tars/opa-gatekeeper:v3.1.0-beta.7.tar		rancher/opa-gatekeeper:v3.1.0-beta.7</span><br><span class="line">sudo docker save -o  ./tars/nginx-ingress-controller-defaultbackend:1.5-rancher1.tar		rancher/nginx-ingress-controller-defaultbackend:1.5-rancher1</span><br><span class="line">sudo docker save -o  ./tars/nginx-ingress-controller:nginx-0.35.0-rancher2.tar		rancher/nginx-ingress-controller:nginx-0.35.0-rancher2</span><br><span class="line">sudo docker save -o  ./tars/minio-minio:RELEASE.2020-07-13T18-09-56Z.tar		rancher/minio-minio:RELEASE.2020-07-13T18-09-56Z</span><br><span class="line">sudo docker save -o  ./tars/metrics-server:v0.3.6.tar		rancher/metrics-server:v0.3.6</span><br><span class="line">sudo docker save -o  ./tars/metrics-server:v0.3.4.tar		rancher/metrics-server:v0.3.4</span><br><span class="line">sudo docker save -o  ./tars/log-aggregator:v0.1.7.tar		rancher/log-aggregator:v0.1.7</span><br><span class="line">sudo docker save -o  ./tars/library-nginx:1.19.2-alpine.tar		rancher/library-nginx:1.19.2-alpine</span><br><span class="line">sudo docker save -o  ./tars/kubernetes-external-dns:v0.7.3.tar		rancher/kubernetes-external-dns:v0.7.3</span><br><span class="line">sudo docker save -o  ./tars/kubectl:v1.18.0.tar		rancher/kubectl:v1.18.0</span><br><span class="line">sudo docker save -o  ./tars/kube-api-auth:v0.1.4.tar		rancher/kube-api-auth:v0.1.4</span><br><span class="line">sudo docker save -o  ./tars/kiali-kiali:v1.17.tar		rancher/kiali-kiali:v1.17</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-sidecar:1.15.2.tar		rancher/k8s-dns-sidecar:1.15.2</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-sidecar:1.15.10.tar		rancher/k8s-dns-sidecar:1.15.10</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-sidecar:1.15.0.tar		rancher/k8s-dns-sidecar:1.15.0</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-node-cache:1.15.7.tar		rancher/k8s-dns-node-cache:1.15.7</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-node-cache:1.15.13.tar		rancher/k8s-dns-node-cache:1.15.13</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-kube-dns:1.15.2.tar		rancher/k8s-dns-kube-dns:1.15.2</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-kube-dns:1.15.10.tar		rancher/k8s-dns-kube-dns:1.15.10</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-kube-dns:1.15.0.tar		rancher/k8s-dns-kube-dns:1.15.0</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-dnsmasq-nanny:1.15.2.tar		rancher/k8s-dns-dnsmasq-nanny:1.15.2</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-dnsmasq-nanny:1.15.10.tar		rancher/k8s-dns-dnsmasq-nanny:1.15.10</span><br><span class="line">sudo docker save -o  ./tars/k8s-dns-dnsmasq-nanny:1.15.0.tar		rancher/k8s-dns-dnsmasq-nanny:1.15.0</span><br><span class="line">sudo docker save -o  ./tars/jimmidyson-configmap-reload:v0.3.0.tar		rancher/jimmidyson-configmap-reload:v0.3.0</span><br><span class="line">sudo docker save -o  ./tars/jetstack-cert-manager-controller:v0.8.1.tar		rancher/jetstack-cert-manager-controller:v0.8.1</span><br><span class="line">sudo docker save -o  ./tars/jenkins-jnlp-slave:3.35-4.tar		rancher/jenkins-jnlp-slave:3.35-4</span><br><span class="line">sudo docker save -o  ./tars/jaegertracing-all-in-one:1.14.tar		rancher/jaegertracing-all-in-one:1.14</span><br><span class="line">sudo docker save -o  ./tars/istio-sidecar_injector:1.5.9.tar		rancher/istio-sidecar_injector:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-proxyv2:1.5.9.tar		rancher/istio-proxyv2:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-pilot:1.5.9.tar		rancher/istio-pilot:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-node-agent-k8s:1.5.9.tar		rancher/istio-node-agent-k8s:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-mixer:1.5.9.tar		rancher/istio-mixer:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-kubectl:1.5.9.tar		rancher/istio-kubectl:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-kubectl:1.5.10.tar		rancher/istio-kubectl:1.5.10</span><br><span class="line">sudo docker save -o  ./tars/istio-kubectl:1.4.6.tar		rancher/istio-kubectl:1.4.6</span><br><span class="line">sudo docker save -o  ./tars/istio-galley:1.5.9.tar		rancher/istio-galley:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-coredns-plugin:0.2-istio-1.1.tar		rancher/istio-coredns-plugin:0.2-istio-1.1</span><br><span class="line">sudo docker save -o  ./tars/istio-citadel:1.5.9.tar		rancher/istio-citadel:1.5.9</span><br><span class="line">sudo docker save -o  ./tars/istio-1.5-migration:0.1.1.tar		rancher/istio-1.5-migration:0.1.1</span><br><span class="line">sudo docker save -o  ./tars/hyperkube:v1.19.4-rancher1.tar		rancher/hyperkube:v1.19.4-rancher1</span><br><span class="line">sudo docker save -o  ./tars/hyperkube:v1.18.12-rancher1.tar		rancher/hyperkube:v1.18.12-rancher1</span><br><span class="line">sudo docker save -o  ./tars/hyperkube:v1.17.14-rancher1.tar		rancher/hyperkube:v1.17.14-rancher1</span><br><span class="line">sudo docker save -o  ./tars/hyperkube:v1.16.15-rancher1.tar		rancher/hyperkube:v1.16.15-rancher1</span><br><span class="line">sudo docker save -o  ./tars/grafana-grafana:7.1.5.tar		rancher/grafana-grafana:7.1.5</span><br><span class="line">sudo docker save -o  ./tars/grafana-grafana:6.7.4.tar		rancher/grafana-grafana:6.7.4</span><br><span class="line">sudo docker save -o  ./tars/fluentd:v0.1.19.tar		rancher/fluentd:v0.1.19</span><br><span class="line">sudo docker save -o  ./tars/flannel-cni:v0.3.0-rancher6.tar		rancher/flannel-cni:v0.3.0-rancher6</span><br><span class="line">sudo docker save -o  ./tars/eks-operator:v1.0.4.tar		rancher/eks-operator:v1.0.4</span><br><span class="line">sudo docker save -o  ./tars/coreos-prometheus-operator:v0.38.1.tar		rancher/coreos-prometheus-operator:v0.38.1</span><br><span class="line">sudo docker save -o  ./tars/coreos-prometheus-config-reloader:v0.38.1.tar		rancher/coreos-prometheus-config-reloader:v0.38.1</span><br><span class="line">sudo docker save -o  ./tars/coreos-kube-state-metrics:v1.9.7.tar		rancher/coreos-kube-state-metrics:v1.9.7</span><br><span class="line">sudo docker save -o  ./tars/coreos-flannel:v0.13.0-rancher1.tar		rancher/coreos-flannel:v0.13.0-rancher1</span><br><span class="line">sudo docker save -o  ./tars/coreos-flannel:v0.12.0.tar		rancher/coreos-flannel:v0.12.0</span><br><span class="line">sudo docker save -o  ./tars/coreos-etcd:v3.4.3-rancher1.tar		rancher/coreos-etcd:v3.4.3-rancher1</span><br><span class="line">sudo docker save -o  ./tars/coreos-etcd:v3.4.13-rancher1.tar		rancher/coreos-etcd:v3.4.13-rancher1</span><br><span class="line">sudo docker save -o  ./tars/coreos-etcd:v3.3.15-rancher1.tar		rancher/coreos-etcd:v3.3.15-rancher1</span><br><span class="line">sudo docker save -o  ./tars/coredns-coredns:1.7.0.tar		rancher/coredns-coredns:1.7.0</span><br><span class="line">sudo docker save -o  ./tars/coredns-coredns:1.6.9.tar		rancher/coredns-coredns:1.6.9</span><br><span class="line">sudo docker save -o  ./tars/coredns-coredns:1.6.5.tar		rancher/coredns-coredns:1.6.5</span><br><span class="line">sudo docker save -o  ./tars/coredns-coredns:1.6.2.tar		rancher/coredns-coredns:1.6.2</span><br><span class="line">sudo docker save -o  ./tars/configmap-reload:v0.3.0-rancher2.tar		rancher/configmap-reload:v0.3.0-rancher2</span><br><span class="line">sudo docker save -o  ./tars/cluster-proportional-autoscaler:1.8.1.tar		rancher/cluster-proportional-autoscaler:1.8.1</span><br><span class="line">sudo docker save -o  ./tars/cluster-proportional-autoscaler:1.7.1.tar		rancher/cluster-proportional-autoscaler:1.7.1</span><br><span class="line">sudo docker save -o  ./tars/calico-pod2daemon-flexvol:v3.16.1.tar		rancher/calico-pod2daemon-flexvol:v3.16.1</span><br><span class="line">sudo docker save -o  ./tars/calico-pod2daemon-flexvol:v3.13.4.tar		rancher/calico-pod2daemon-flexvol:v3.13.4</span><br><span class="line">sudo docker save -o  ./tars/calico-node:v3.16.1.tar		rancher/calico-node:v3.16.1</span><br><span class="line">sudo docker save -o  ./tars/calico-node:v3.13.4.tar		rancher/calico-node:v3.13.4</span><br><span class="line">sudo docker save -o  ./tars/calico-kube-controllers:v3.16.1.tar		rancher/calico-kube-controllers:v3.16.1</span><br><span class="line">sudo docker save -o  ./tars/calico-kube-controllers:v3.13.4.tar		rancher/calico-kube-controllers:v3.13.4</span><br><span class="line">sudo docker save -o  ./tars/calico-ctl:v3.16.1.tar		rancher/calico-ctl:v3.16.1</span><br><span class="line">sudo docker save -o  ./tars/calico-ctl:v3.13.4.tar		rancher/calico-ctl:v3.13.4</span><br><span class="line">sudo docker save -o  ./tars/calico-cni:v3.16.1.tar		rancher/calico-cni:v3.16.1</span><br><span class="line">sudo docker save -o  ./tars/calico-cni:v3.13.4.tar		rancher/calico-cni:v3.13.4</span><br><span class="line">sudo docker save -o  ./tars/busybox.tar		busybox</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="脚本loadImages-sh"><a href="#脚本loadImages-sh" class="headerlink" title="脚本loadImages.sh"></a>脚本loadImages.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker load &lt; ./tars/registry:2.tar</span><br><span class="line">docker load &lt; ./tars/webhook-receiver:v0.2.4.tar</span><br><span class="line">docker load &lt; ./tars/thanosio-thanos:v0.15.0.tar</span><br><span class="line">docker load &lt; ./tars/system-upgrade-controller:v0.6.2.tar</span><br><span class="line">docker load &lt; ./tars/sonobuoy-sonobuoy:v0.16.3.tar</span><br><span class="line">docker load &lt; ./tars/shell:v0.1.5.tar</span><br><span class="line">docker load &lt; ./tars/security-scan:v0.1.14.tar</span><br><span class="line">docker load &lt; ./tars/rke-tools:v0.1.66.tar</span><br><span class="line">docker load &lt; ./tars/rancher-agent:v2.5.3.tar</span><br><span class="line">docker load &lt; ./tars/pstauffer-curl:v1.0.3.tar</span><br><span class="line">docker load &lt; ./tars/prom-prometheus:v2.18.2.tar</span><br><span class="line">docker load &lt; ./tars/prom-prometheus:v2.12.0.tar</span><br><span class="line">docker load &lt; ./tars/prom-node-exporter:v1.0.1.tar</span><br><span class="line">docker load &lt; ./tars/prometheus-auth:v0.2.1.tar</span><br><span class="line">docker load &lt; ./tars/prom-alertmanager:v0.21.0.tar</span><br><span class="line">docker load &lt; ./tars/plugins-docker:18.09.tar</span><br><span class="line">docker load &lt; ./tars/pipeline-tools:v0.1.15.tar</span><br><span class="line">docker load &lt; ./tars/pipeline-jenkins-server:v0.1.4.tar</span><br><span class="line">docker load &lt; ./tars/pause:3.2.tar</span><br><span class="line">docker load &lt; ./tars/pause:3.1.tar</span><br><span class="line">docker load &lt; ./tars/openzipkin-zipkin:2.14.2.tar</span><br><span class="line">docker load &lt; ./tars/opa-gatekeeper:v3.1.0-beta.7.tar</span><br><span class="line">docker load &lt; ./tars/nginx-ingress-controller-defaultbackend:1.5-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/nginx-ingress-controller:nginx-0.35.0-rancher2.tar</span><br><span class="line">docker load &lt; ./tars/minio-minio:RELEASE.2020-07-13T18-09-56Z.tar</span><br><span class="line">docker load &lt; ./tars/metrics-server:v0.3.6.tar</span><br><span class="line">docker load &lt; ./tars/metrics-server:v0.3.4.tar</span><br><span class="line">docker load &lt; ./tars/log-aggregator:v0.1.7.tar</span><br><span class="line">docker load &lt; ./tars/library-nginx:1.19.2-alpine.tar</span><br><span class="line">docker load &lt; ./tars/kubernetes-external-dns:v0.7.3.tar</span><br><span class="line">docker load &lt; ./tars/kubectl:v1.18.0.tar</span><br><span class="line">docker load &lt; ./tars/kube-api-auth:v0.1.4.tar</span><br><span class="line">docker load &lt; ./tars/kiali-kiali:v1.17.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-sidecar:1.15.2.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-sidecar:1.15.10.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-sidecar:1.15.0.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-node-cache:1.15.7.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-node-cache:1.15.13.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-kube-dns:1.15.2.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-kube-dns:1.15.10.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-kube-dns:1.15.0.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-dnsmasq-nanny:1.15.2.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-dnsmasq-nanny:1.15.10.tar</span><br><span class="line">docker load &lt; ./tars/k8s-dns-dnsmasq-nanny:1.15.0.tar</span><br><span class="line">docker load &lt; ./tars/jimmidyson-configmap-reload:v0.3.0.tar</span><br><span class="line">docker load &lt; ./tars/jetstack-cert-manager-controller:v0.8.1.tar</span><br><span class="line">docker load &lt; ./tars/jenkins-jnlp-slave:3.35-4.tar</span><br><span class="line">docker load &lt; ./tars/jaegertracing-all-in-one:1.14.tar</span><br><span class="line">docker load &lt; ./tars/istio-sidecar_injector:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-proxyv2:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-pilot:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-node-agent-k8s:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-mixer:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-kubectl:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-kubectl:1.5.10.tar</span><br><span class="line">docker load &lt; ./tars/istio-kubectl:1.4.6.tar</span><br><span class="line">docker load &lt; ./tars/istio-galley:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-coredns-plugin:0.2-istio-1.1.tar</span><br><span class="line">docker load &lt; ./tars/istio-citadel:1.5.9.tar</span><br><span class="line">docker load &lt; ./tars/istio-1.5-migration:0.1.1.tar</span><br><span class="line">docker load &lt; ./tars/hyperkube:v1.19.4-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/hyperkube:v1.18.12-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/hyperkube:v1.17.14-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/hyperkube:v1.16.15-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/grafana-grafana:7.1.5.tar</span><br><span class="line">docker load &lt; ./tars/grafana-grafana:6.7.4.tar</span><br><span class="line">docker load &lt; ./tars/fluentd:v0.1.19.tar</span><br><span class="line">docker load &lt; ./tars/flannel-cni:v0.3.0-rancher6.tar</span><br><span class="line">docker load &lt; ./tars/eks-operator:v1.0.4.tar</span><br><span class="line">docker load &lt; ./tars/coreos-prometheus-operator:v0.38.1.tar</span><br><span class="line">docker load &lt; ./tars/coreos-prometheus-config-reloader:v0.38.1.tar</span><br><span class="line">docker load &lt; ./tars/coreos-kube-state-metrics:v1.9.7.tar</span><br><span class="line">docker load &lt; ./tars/coreos-flannel:v0.13.0-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/coreos-flannel:v0.12.0.tar</span><br><span class="line">docker load &lt; ./tars/coreos-etcd:v3.4.3-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/coreos-etcd:v3.4.13-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/coreos-etcd:v3.3.15-rancher1.tar</span><br><span class="line">docker load &lt; ./tars/coredns-coredns:1.7.0.tar</span><br><span class="line">docker load &lt; ./tars/coredns-coredns:1.6.9.tar</span><br><span class="line">docker load &lt; ./tars/coredns-coredns:1.6.5.tar</span><br><span class="line">docker load &lt; ./tars/coredns-coredns:1.6.2.tar</span><br><span class="line">docker load &lt; ./tars/configmap-reload:v0.3.0-rancher2.tar</span><br><span class="line">docker load &lt; ./tars/cluster-proportional-autoscaler:1.8.1.tar</span><br><span class="line">docker load &lt; ./tars/cluster-proportional-autoscaler:1.7.1.tar</span><br><span class="line">docker load &lt; ./tars/calico-pod2daemon-flexvol:v3.16.1.tar</span><br><span class="line">docker load &lt; ./tars/calico-pod2daemon-flexvol:v3.13.4.tar</span><br><span class="line">docker load &lt; ./tars/calico-node:v3.16.1.tar</span><br><span class="line">docker load &lt; ./tars/calico-node:v3.13.4.tar</span><br><span class="line">docker load &lt; ./tars/calico-kube-controllers:v3.16.1.tar</span><br><span class="line">docker load &lt; ./tars/calico-kube-controllers:v3.13.4.tar</span><br><span class="line">docker load &lt; ./tars/calico-ctl:v3.16.1.tar</span><br><span class="line">docker load &lt; ./tars/calico-ctl:v3.13.4.tar</span><br><span class="line">docker load &lt; ./tars/calico-cni:v3.16.1.tar</span><br><span class="line">docker load &lt; ./tars/calico-cni:v3.13.4.tar</span><br><span class="line">docker load &lt; ./tars/busybox.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="pushImage-sh"><a href="#pushImage-sh" class="headerlink" title="pushImage.sh"></a>pushImage.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag  rancher/calico-cni:v3.13.4    10.7.92.101:5000/app/rancher/calico-cni:v3.13.4</span><br><span class="line">docker tag  rancher/rancher-agent:v2.5.3    10.7.92.101:5000/app/rancher/rancher-agent:v2.5.3</span><br><span class="line">docker tag  registry:2    10.7.92.101:5000/app/registry:2</span><br><span class="line">docker tag  rancher/webhook-receiver:v0.2.4    10.7.92.101:5000/app/rancher/webhook-receiver:v0.2.4</span><br><span class="line">docker tag  rancher/thanosio-thanos:v0.15.0    10.7.92.101:5000/app/rancher/thanosio-thanos:v0.15.0</span><br><span class="line">docker tag  rancher/system-upgrade-controller:v0.6.2    10.7.92.101:5000/app/rancher/system-upgrade-controller:v0.6.2</span><br><span class="line">docker tag  rancher/sonobuoy-sonobuoy:v0.16.3    10.7.92.101:5000/app/rancher/sonobuoy-sonobuoy:v0.16.3</span><br><span class="line">docker tag  rancher/shell:v0.1.5    10.7.92.101:5000/app/rancher/shell:v0.1.5</span><br><span class="line">docker tag  rancher/security-scan:v0.1.14    10.7.92.101:5000/app/rancher/security-scan:v0.1.14</span><br><span class="line">docker tag  rancher/rke-tools:v0.1.66    10.7.92.101:5000/app/rancher/rke-tools:v0.1.66</span><br><span class="line">docker tag  rancher/pstauffer-curl:v1.0.3    10.7.92.101:5000/app/rancher/pstauffer-curl:v1.0.3</span><br><span class="line">docker tag  rancher/prometheus-auth:v0.2.1    10.7.92.101:5000/app/rancher/prometheus-auth:v0.2.1</span><br><span class="line">docker tag  rancher/prom-prometheus:v2.18.2    10.7.92.101:5000/app/rancher/prom-prometheus:v2.18.2</span><br><span class="line">docker tag  rancher/prom-prometheus:v2.12.0    10.7.92.101:5000/app/rancher/prom-prometheus:v2.12.0</span><br><span class="line">docker tag  rancher/prom-node-exporter:v1.0.1    10.7.92.101:5000/app/rancher/prom-node-exporter:v1.0.1</span><br><span class="line">docker tag  rancher/prom-alertmanager:v0.21.0    10.7.92.101:5000/app/rancher/prom-alertmanager:v0.21.0</span><br><span class="line">docker tag  rancher/plugins-docker:18.09    10.7.92.101:5000/app/rancher/plugins-docker:18.09</span><br><span class="line">docker tag  rancher/pipeline-tools:v0.1.15    10.7.92.101:5000/app/rancher/pipeline-tools:v0.1.15</span><br><span class="line">docker tag  rancher/pipeline-jenkins-server:v0.1.4    10.7.92.101:5000/app/rancher/pipeline-jenkins-server:v0.1.4</span><br><span class="line">docker tag  rancher/pause:3.2    10.7.92.101:5000/app/rancher/pause:3.2</span><br><span class="line">docker tag  rancher/pause:3.1    10.7.92.101:5000/app/rancher/pause:3.1</span><br><span class="line">docker tag  rancher/openzipkin-zipkin:2.14.2    10.7.92.101:5000/app/rancher/openzipkin-zipkin:2.14.2</span><br><span class="line">docker tag  rancher/opa-gatekeeper:v3.1.0-beta.7    10.7.92.101:5000/app/rancher/opa-gatekeeper:v3.1.0-beta.7</span><br><span class="line">docker tag  rancher/nginx-ingress-controller:nginx-0.35.0-rancher2    10.7.92.101:5000/app/rancher/nginx-ingress-controller:nginx-0.35.0-rancher2</span><br><span class="line">docker tag  rancher/nginx-ingress-controller-defaultbackend:1.5-rancher1    10.7.92.101:5000/app/rancher/nginx-ingress-controller-defaultbackend:1.5-rancher1</span><br><span class="line">docker tag  rancher/minio-minio:RELEASE.2020-07-13T18-09-56Z    10.7.92.101:5000/app/rancher/minio-minio:RELEASE.2020-07-13T18-09-56Z</span><br><span class="line">docker tag  rancher/metrics-server:v0.3.6    10.7.92.101:5000/app/rancher/metrics-server:v0.3.6</span><br><span class="line">docker tag  rancher/metrics-server:v0.3.4    10.7.92.101:5000/app/rancher/metrics-server:v0.3.4</span><br><span class="line">docker tag  rancher/log-aggregator:v0.1.7    10.7.92.101:5000/app/rancher/log-aggregator:v0.1.7</span><br><span class="line">docker tag  rancher/library-nginx:1.19.2-alpine    10.7.92.101:5000/app/rancher/library-nginx:1.19.2-alpine</span><br><span class="line">docker tag  rancher/kubernetes-external-dns:v0.7.3    10.7.92.101:5000/app/rancher/kubernetes-external-dns:v0.7.3</span><br><span class="line">docker tag  rancher/kubectl:v1.18.0    10.7.92.101:5000/app/rancher/kubectl:v1.18.0</span><br><span class="line">docker tag  rancher/kube-api-auth:v0.1.4    10.7.92.101:5000/app/rancher/kube-api-auth:v0.1.4</span><br><span class="line">docker tag  rancher/kiali-kiali:v1.17    10.7.92.101:5000/app/rancher/kiali-kiali:v1.17</span><br><span class="line">docker tag  rancher/k8s-dns-sidecar:1.15.2    10.7.92.101:5000/app/rancher/k8s-dns-sidecar:1.15.2</span><br><span class="line">docker tag  rancher/k8s-dns-sidecar:1.15.10    10.7.92.101:5000/app/rancher/k8s-dns-sidecar:1.15.10</span><br><span class="line">docker tag  rancher/k8s-dns-sidecar:1.15.0    10.7.92.101:5000/app/rancher/k8s-dns-sidecar:1.15.0</span><br><span class="line">docker tag  rancher/k8s-dns-node-cache:1.15.7    10.7.92.101:5000/app/rancher/k8s-dns-node-cache:1.15.7</span><br><span class="line">docker tag  rancher/k8s-dns-node-cache:1.15.13    10.7.92.101:5000/app/rancher/k8s-dns-node-cache:1.15.13</span><br><span class="line">docker tag  rancher/k8s-dns-kube-dns:1.15.2    10.7.92.101:5000/app/rancher/k8s-dns-kube-dns:1.15.2</span><br><span class="line">docker tag  rancher/k8s-dns-kube-dns:1.15.10    10.7.92.101:5000/app/rancher/k8s-dns-kube-dns:1.15.10</span><br><span class="line">docker tag  rancher/k8s-dns-kube-dns:1.15.0    10.7.92.101:5000/app/rancher/k8s-dns-kube-dns:1.15.0</span><br><span class="line">docker tag  rancher/k8s-dns-dnsmasq-nanny:1.15.2    10.7.92.101:5000/app/rancher/k8s-dns-dnsmasq-nanny:1.15.2</span><br><span class="line">docker tag  rancher/k8s-dns-dnsmasq-nanny:1.15.10    10.7.92.101:5000/app/rancher/k8s-dns-dnsmasq-nanny:1.15.10</span><br><span class="line">docker tag  rancher/k8s-dns-dnsmasq-nanny:1.15.0    10.7.92.101:5000/app/rancher/k8s-dns-dnsmasq-nanny:1.15.0</span><br><span class="line">docker tag  rancher/jimmidyson-configmap-reload:v0.3.0    10.7.92.101:5000/app/rancher/jimmidyson-configmap-reload:v0.3.0</span><br><span class="line">docker tag  rancher/jetstack-cert-manager-controller:v0.8.1    10.7.92.101:5000/app/rancher/jetstack-cert-manager-controller:v0.8.1</span><br><span class="line">docker tag  rancher/jenkins-jnlp-slave:3.35-4    10.7.92.101:5000/app/rancher/jenkins-jnlp-slave:3.35-4</span><br><span class="line">docker tag  rancher/jaegertracing-all-in-one:1.14    10.7.92.101:5000/app/rancher/jaegertracing-all-in-one:1.14</span><br><span class="line">docker tag  rancher/istio-sidecar_injector:1.5.9    10.7.92.101:5000/app/rancher/istio-sidecar_injector:1.5.9</span><br><span class="line">docker tag  rancher/istio-proxyv2:1.5.9    10.7.92.101:5000/app/rancher/istio-proxyv2:1.5.9</span><br><span class="line">docker tag  rancher/istio-pilot:1.5.9    10.7.92.101:5000/app/rancher/istio-pilot:1.5.9</span><br><span class="line">docker tag  rancher/istio-node-agent-k8s:1.5.9    10.7.92.101:5000/app/rancher/istio-node-agent-k8s:1.5.9</span><br><span class="line">docker tag  rancher/istio-mixer:1.5.9    10.7.92.101:5000/app/rancher/istio-mixer:1.5.9</span><br><span class="line">docker tag  rancher/istio-kubectl:1.5.9    10.7.92.101:5000/app/rancher/istio-kubectl:1.5.9</span><br><span class="line">docker tag  rancher/istio-kubectl:1.5.10    10.7.92.101:5000/app/rancher/istio-kubectl:1.5.10</span><br><span class="line">docker tag  rancher/istio-kubectl:1.4.6    10.7.92.101:5000/app/rancher/istio-kubectl:1.4.6</span><br><span class="line">docker tag  rancher/istio-galley:1.5.9    10.7.92.101:5000/app/rancher/istio-galley:1.5.9</span><br><span class="line">docker tag  rancher/istio-coredns-plugin:0.2-istio-1.1    10.7.92.101:5000/app/rancher/istio-coredns-plugin:0.2-istio-1.1</span><br><span class="line">docker tag  rancher/istio-citadel:1.5.9    10.7.92.101:5000/app/rancher/istio-citadel:1.5.9</span><br><span class="line">docker tag  rancher/istio-1.5-migration:0.1.1    10.7.92.101:5000/app/rancher/istio-1.5-migration:0.1.1</span><br><span class="line">docker tag  rancher/hyperkube:v1.19.4-rancher1    10.7.92.101:5000/app/rancher/hyperkube:v1.19.4-rancher1</span><br><span class="line">docker tag  rancher/hyperkube:v1.18.12-rancher1    10.7.92.101:5000/app/rancher/hyperkube:v1.18.12-rancher1</span><br><span class="line">docker tag  rancher/hyperkube:v1.17.14-rancher1    10.7.92.101:5000/app/rancher/hyperkube:v1.17.14-rancher1</span><br><span class="line">docker tag  rancher/hyperkube:v1.16.15-rancher1    10.7.92.101:5000/app/rancher/hyperkube:v1.16.15-rancher1</span><br><span class="line">docker tag  rancher/grafana-grafana:7.1.5    10.7.92.101:5000/app/rancher/grafana-grafana:7.1.5</span><br><span class="line">docker tag  rancher/grafana-grafana:6.7.4    10.7.92.101:5000/app/rancher/grafana-grafana:6.7.4</span><br><span class="line">docker tag  rancher/fluentd:v0.1.19    10.7.92.101:5000/app/rancher/fluentd:v0.1.19</span><br><span class="line">docker tag  rancher/flannel-cni:v0.3.0-rancher6    10.7.92.101:5000/app/rancher/flannel-cni:v0.3.0-rancher6</span><br><span class="line">docker tag  rancher/eks-operator:v1.0.4    10.7.92.101:5000/app/rancher/eks-operator:v1.0.4</span><br><span class="line">docker tag  rancher/coreos-prometheus-operator:v0.38.1    10.7.92.101:5000/app/rancher/coreos-prometheus-operator:v0.38.1</span><br><span class="line">docker tag  rancher/coreos-prometheus-config-reloader:v0.38.1    10.7.92.101:5000/app/rancher/coreos-prometheus-config-reloader:v0.38.1</span><br><span class="line">docker tag  rancher/coreos-kube-state-metrics:v1.9.7    10.7.92.101:5000/app/rancher/coreos-kube-state-metrics:v1.9.7</span><br><span class="line">docker tag  rancher/coreos-flannel:v0.13.0-rancher1    10.7.92.101:5000/app/rancher/coreos-flannel:v0.13.0-rancher1</span><br><span class="line">docker tag  rancher/coreos-flannel:v0.12.0    10.7.92.101:5000/app/rancher/coreos-flannel:v0.12.0</span><br><span class="line">docker tag  rancher/coreos-etcd:v3.4.3-rancher1    10.7.92.101:5000/app/rancher/coreos-etcd:v3.4.3-rancher1</span><br><span class="line">docker tag  rancher/coreos-etcd:v3.4.13-rancher1    10.7.92.101:5000/app/rancher/coreos-etcd:v3.4.13-rancher1</span><br><span class="line">docker tag  rancher/coreos-etcd:v3.3.15-rancher1    10.7.92.101:5000/app/rancher/coreos-etcd:v3.3.15-rancher1</span><br><span class="line">docker tag  rancher/coredns-coredns:1.7.0    10.7.92.101:5000/app/rancher/coredns-coredns:1.7.0</span><br><span class="line">docker tag  rancher/coredns-coredns:1.6.9    10.7.92.101:5000/app/rancher/coredns-coredns:1.6.9</span><br><span class="line">docker tag  rancher/coredns-coredns:1.6.5    10.7.92.101:5000/app/rancher/coredns-coredns:1.6.5</span><br><span class="line">docker tag  rancher/coredns-coredns:1.6.2    10.7.92.101:5000/app/rancher/coredns-coredns:1.6.2</span><br><span class="line">docker tag  rancher/configmap-reload:v0.3.0-rancher2    10.7.92.101:5000/app/rancher/configmap-reload:v0.3.0-rancher2</span><br><span class="line">docker tag  rancher/cluster-proportional-autoscaler:1.8.1    10.7.92.101:5000/app/rancher/cluster-proportional-autoscaler:1.8.1</span><br><span class="line">docker tag  rancher/cluster-proportional-autoscaler:1.7.1    10.7.92.101:5000/app/rancher/cluster-proportional-autoscaler:1.7.1</span><br><span class="line">docker tag  rancher/calico-pod2daemon-flexvol:v3.16.1    10.7.92.101:5000/app/rancher/calico-pod2daemon-flexvol:v3.16.1</span><br><span class="line">docker tag  rancher/calico-pod2daemon-flexvol:v3.13.4    10.7.92.101:5000/app/rancher/calico-pod2daemon-flexvol:v3.13.4</span><br><span class="line">docker tag  rancher/calico-node:v3.16.1    10.7.92.101:5000/app/rancher/calico-node:v3.16.1</span><br><span class="line">docker tag  rancher/calico-node:v3.13.4    10.7.92.101:5000/app/rancher/calico-node:v3.13.4</span><br><span class="line">docker tag  rancher/calico-kube-controllers:v3.16.1    10.7.92.101:5000/app/rancher/calico-kube-controllers:v3.16.1</span><br><span class="line">docker tag  rancher/calico-kube-controllers:v3.13.4    10.7.92.101:5000/app/rancher/calico-kube-controllers:v3.13.4</span><br><span class="line">docker tag  rancher/calico-ctl:v3.16.1    10.7.92.101:5000/app/rancher/calico-ctl:v3.16.1</span><br><span class="line">docker tag  rancher/calico-ctl:v3.13.4    10.7.92.101:5000/app/rancher/calico-ctl:v3.13.4</span><br><span class="line">docker tag  rancher/calico-cni:v3.16.1    10.7.92.101:5000/app/rancher/calico-cni:v3.16.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-cni:v3.13.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/rancher-agent:v2.5.3</span><br><span class="line">docker push  10.7.92.101:5000/app/registry:2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/webhook-receiver:v0.2.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/thanosio-thanos:v0.15.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/system-upgrade-controller:v0.6.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/sonobuoy-sonobuoy:v0.16.3</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/shell:v0.1.5</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/security-scan:v0.1.14</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/rke-tools:v0.1.66</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/pstauffer-curl:v1.0.3</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/prometheus-auth:v0.2.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/prom-prometheus:v2.18.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/prom-prometheus:v2.12.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/prom-node-exporter:v1.0.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/prom-alertmanager:v0.21.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/plugins-docker:18.09</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/pipeline-tools:v0.1.15</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/pipeline-jenkins-server:v0.1.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/pause:3.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/pause:3.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/openzipkin-zipkin:2.14.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/opa-gatekeeper:v3.1.0-beta.7</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/nginx-ingress-controller:nginx-0.35.0-rancher2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/nginx-ingress-controller-defaultbackend:1.5-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/minio-minio:RELEASE.2020-07-13T18-09-56Z</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/metrics-server:v0.3.6</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/metrics-server:v0.3.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/log-aggregator:v0.1.7</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/library-nginx:1.19.2-alpine</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/kubernetes-external-dns:v0.7.3</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/kubectl:v1.18.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/kube-api-auth:v0.1.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/kiali-kiali:v1.17</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-sidecar:1.15.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-sidecar:1.15.10</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-sidecar:1.15.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-node-cache:1.15.7</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-node-cache:1.15.13</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-kube-dns:1.15.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-kube-dns:1.15.10</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-kube-dns:1.15.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-dnsmasq-nanny:1.15.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-dnsmasq-nanny:1.15.10</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/k8s-dns-dnsmasq-nanny:1.15.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/jimmidyson-configmap-reload:v0.3.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/jetstack-cert-manager-controller:v0.8.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/jenkins-jnlp-slave:3.35-4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/jaegertracing-all-in-one:1.14</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-sidecar_injector:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-proxyv2:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-pilot:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-node-agent-k8s:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-mixer:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-kubectl:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-kubectl:1.5.10</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-kubectl:1.4.6</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-galley:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-coredns-plugin:0.2-istio-1.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-citadel:1.5.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/istio-1.5-migration:0.1.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/hyperkube:v1.19.4-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/hyperkube:v1.18.12-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/hyperkube:v1.17.14-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/hyperkube:v1.16.15-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/grafana-grafana:7.1.5</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/grafana-grafana:6.7.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/fluentd:v0.1.19</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/flannel-cni:v0.3.0-rancher6</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/eks-operator:v1.0.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-prometheus-operator:v0.38.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-prometheus-config-reloader:v0.38.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-kube-state-metrics:v1.9.7</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-flannel:v0.13.0-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-flannel:v0.12.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-etcd:v3.4.3-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-etcd:v3.4.13-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coreos-etcd:v3.3.15-rancher1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coredns-coredns:1.7.0</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coredns-coredns:1.6.9</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coredns-coredns:1.6.5</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/coredns-coredns:1.6.2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/configmap-reload:v0.3.0-rancher2</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/cluster-proportional-autoscaler:1.8.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/cluster-proportional-autoscaler:1.7.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-pod2daemon-flexvol:v3.16.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-pod2daemon-flexvol:v3.13.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-node:v3.16.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-node:v3.13.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-kube-controllers:v3.16.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-kube-controllers:v3.13.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-ctl:v3.16.1</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-ctl:v3.13.4</span><br><span class="line">docker push  10.7.92.101:5000/app/rancher/calico-cni:v3.16.1</span><br></pre></td></tr></table></figure>

<h2 id="脚本run-sh"><a href="#脚本run-sh" class="headerlink" title="脚本run.sh"></a>脚本run.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name rancher -d --privileged --restart=unless-stopped -p 80:80 -p 443:443 10.7.92.101:5000/app/rancher/rancher:stable</span><br></pre></td></tr></table></figure>

<p>运行脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh run.sh</span><br><span class="line">docker logs -f rancher</span><br></pre></td></tr></table></figure>

<p>访问地址<a href="https://10.7.102.127/">https://10.7.102.127/</a></p>
<h2 id="rancher卸载脚本run-sh"><a href="#rancher卸载脚本run-sh" class="headerlink" title="rancher卸载脚本run.sh"></a>rancher卸载脚本run.sh</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vi uninstall.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除所有容器</span><br><span class="line">sudo docker rm -f $(sudo docker ps -qa)</span><br><span class="line"></span><br><span class="line">#删除/var/etcd目录</span><br><span class="line">sudo rm -rf /var/etcd</span><br><span class="line"></span><br><span class="line">#删除/var/lib/kubelet/目录，删除前先卸载</span><br><span class="line">for m in $(sudo tac /proc/mounts | sudo awk &#x27;&#123;print $2&#125;&#x27;|sudo grep /var/lib/kubelet);do</span><br><span class="line"> sudo umount $m||true</span><br><span class="line">done</span><br><span class="line">sudo rm -rf /var/lib/kubelet/</span><br><span class="line"></span><br><span class="line">#删除/var/lib/rancher/目录，删除前先卸载</span><br><span class="line">for m in $(sudo tac /proc/mounts | sudo awk &#x27;&#123;print $2&#125;&#x27;|sudo grep /var/lib/rancher);do</span><br><span class="line"> sudo umount $m||true</span><br><span class="line">done</span><br><span class="line">sudo rm -rf /var/lib/rancher/</span><br><span class="line"></span><br><span class="line">#删除/run/kubernetes/ 目录</span><br><span class="line">sudo rm -rf /run/kubernetes/</span><br><span class="line"></span><br><span class="line">rm -rf /etc/ceph \</span><br><span class="line">   /etc/cni \</span><br><span class="line">   /etc/kubernetes \</span><br><span class="line">   /opt/cni \</span><br><span class="line">   /opt/rke \</span><br><span class="line">   /run/secrets/kubernetes.io \</span><br><span class="line">   /run/calico \</span><br><span class="line">   /run/flannel \</span><br><span class="line">   /var/lib/calico \</span><br><span class="line">   /var/lib/etcd \</span><br><span class="line">   /var/lib/cni \</span><br><span class="line">   /var/lib/kubelet \</span><br><span class="line">   /var/lib/rancher/rke/log \</span><br><span class="line">   /var/log/containers \</span><br><span class="line">   /var/log/pods \</span><br><span class="line">   /var/run/calico</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除所有的数据卷</span><br><span class="line">sudo docker volume rm $(sudo docker volume ls -q)</span><br><span class="line"></span><br><span class="line">#再次显示所有的容器和数据卷，确保没有残留</span><br><span class="line">sudo docker ps -a</span><br><span class="line">sudo docker volume ls</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>Rancher</tag>
      </tags>
  </entry>
  <entry>
    <title>redis指令笔记</title>
    <url>/2019/10/28/redis%E6%8C%87%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value  <span class="comment"># 设置key的值</span></span><br><span class="line">setnx key value  <span class="comment"># key不存在才设置</span></span><br><span class="line"><span class="built_in">set</span> key value xx  <span class="comment"># key存在才设置</span></span><br><span class="line"></span><br><span class="line">incr key  <span class="comment"># key自增1，若key不存在，自增后get(key)=1</span></span><br><span class="line">decr key  <span class="comment"># key自减，若key不存在，自减后get(key)=-1</span></span><br><span class="line">incrby key k  <span class="comment"># key自增k，若key不存在，自增后get(key)=k</span></span><br><span class="line">decrby key k  <span class="comment"># key自减k，若key不存在，自减后get(key)=-k</span></span><br><span class="line"></span><br><span class="line">expire key seconds  <span class="comment"># 设置过期时间</span></span><br><span class="line">ttl key  <span class="comment"># 查看过期时间</span></span><br><span class="line">persist key  <span class="comment"># 取消过期时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="redis-高可用"><a href="#redis-高可用" class="headerlink" title="redis 高可用"></a>redis 高可用</h4><ul>
<li>redis-sentinel(v2.0) 支持高可用</li>
</ul>
<h4 id="redis-分布式"><a href="#redis-分布式" class="headerlink" title="redis 分布式"></a>redis 分布式</h4><ul>
<li>redis-cluster(v3.0) 支持分布式</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis错误解决</title>
    <url>/2019/10/28/redis%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><ul>
<li><p>问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File &quot;/home/ubuntu/.virtualenvs/yang/lib/python3.6/site-packages/redis/client.py&quot;, line 1293, in delete</span><br><span class="line">    return self.execute_command(&#x27;DEL&#x27;, *names)</span><br><span class="line">  File &quot;/home/ubuntu/.virtualenvs/yang/lib/python3.6/site-packages/redis/client.py&quot;, line 839, in execute_command</span><br><span class="line">    return self.parse_response(conn, command_name, **options)</span><br><span class="line">  File &quot;/home/ubuntu/.virtualenvs/yang/lib/python3.6/site-packages/redis/client.py&quot;, line 853, in parse_response</span><br><span class="line">    response = connection.read_response()</span><br><span class="line">  File &quot;/home/ubuntu/.virtualenvs/yang/lib/python3.6/site-packages/redis/connection.py&quot;, line 718, in read_response</span><br><span class="line">    raise response</span><br><span class="line">redis.exceptions.ResponseError: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.</span><br></pre></td></tr></table></figure></li>
<li><p>原因</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">强制把redis快照关闭了导致不能持久化的问题。</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 命令行修改方式示例：</span><br><span class="line">config set stop-writes-on-bgsave-error no</span><br><span class="line"></span><br><span class="line"># 2.修改redis.conf文件, vim 打开redis-server配置的redis.conf文件， 然后定位到stop-writes-on-bgsave-error字符串所在位置，接着把后面的yes设置为no即可。</span><br><span class="line">vim redis.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq生产安装(vm版)</title>
    <url>/2021/06/29/redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85(vm%E7%89%88)/</url>
    <content><![CDATA[<h1 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h1><p>注意事项:</p>
<blockquote>
<p>1.安装redis前请先安装好docker，具体安装方法参考文档&lt;&lt;docker生产安装.md&gt;&gt;。<br>2.文档中IP地址为示意地址，安装时请替换为实际生产地址。<br>3.本文档不要一次性执行一个命令框（灰色框）内的全部命令，应按照步骤说明分步执行。</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>规划机器，redis版本5.0.10，操作系统版本centos7.5+</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.2.11 <span class="comment">#安装2个redis实例，端口为7000，7001</span></span><br><span class="line">192.168.2.12 <span class="comment">#安装2个redis实例，端口为7000，7001</span></span><br><span class="line">192.168.2.13 <span class="comment">#安装2个redis实例，端口为7000，7001</span></span><br></pre></td></tr></table></figure>

<p>设置主机hostname</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#机器192.168.2.11执行</span></span><br><span class="line">hostnamectl --static set-hostname  redis-11</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.2.12执行</span></span><br><span class="line">hostnamectl --static set-hostname  redis-12</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.2.13执行</span></span><br><span class="line">hostnamectl --static set-hostname  redis-13</span><br></pre></td></tr></table></figure>
<p>为每台机器创建redis账号，并设置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd redis</span><br><span class="line">useradd -g redis redis</span><br><span class="line">passwd redis <span class="comment">#修改密码为redis@1234，生产环境修改为其他密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;redis     ALL=(ALL)NOPASSWD:ALL&#x27;</span> &gt;&gt; /etc/sudoers</span><br><span class="line">sed -i <span class="string">&#x27;s/Defaults    requiretty/#Defaults    requiretty/g&#x27;</span> /etc/sudoers</span><br><span class="line"><span class="built_in">cat</span>  /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>为每台机器规划目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /app/redis</span><br><span class="line">sudo <span class="built_in">chown</span> -R redis:redis /app/redis/</span><br></pre></td></tr></table></figure>

<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p><em>注意：以下操作在3台机器上都要执行</em></p>
<p><strong>下载地址：</strong><a href="http://redis.io/download">http://redis.io/download</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载稳定版5.0.10</span></span><br><span class="line">wget https://download.redis.io/releases/redis-5.0.10.tar.gz</span><br><span class="line"><span class="comment">#内网地址</span></span><br><span class="line">wget http://10.7.102.125:8000/downloads/redis-5.0.10.tar.gz</span><br><span class="line"><span class="comment">#解压缩，并编译</span></span><br><span class="line">tar -zxvf redis-5.0.10.tar.gz -C /app/redis</span><br><span class="line"><span class="built_in">cd</span> /app/redis/redis-5.0.10</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果遇到无法编译的情况之下如下命令</span></span><br><span class="line">yum -y install gcc gcc-c++ libstdc++-devel</span><br><span class="line">make CFLAGS=<span class="string">&quot;-march=x86-64&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行完 <strong>make</strong> 命令后，redis-5.0.10 的 <strong>src</strong> 目录下会出现编译后的 redis程序redis-server, redis-cli,redis-sentinel等，把它们拷贝到/usr/local/bin下，执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-server /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-cli /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-sentinel /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-trib.rb /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-benchmark /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-check-aof /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/src/redis-check-rdb /usr/local/bin/</span><br></pre></td></tr></table></figure>

<h2 id="分片集群安装"><a href="#分片集群安装" class="headerlink" title="分片集群安装"></a>分片集群安装</h2><p><strong>第一步 创建实例</strong> </p>
<p><em>注意：以下操作在3台机器上都要执行</em></p>
<p>节点7000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#7000</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /app/redis/cluster/7000</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/redis.conf /app/redis/cluster/7000/redis.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /app/redis/cluster/7000/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改如下内容</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1</span></span><br><span class="line">protected-mode no</span><br><span class="line">port  7000</span><br><span class="line">daemonize    <span class="built_in">yes</span>                       //redis后台运行</span><br><span class="line">pidfile  /var/run/redis_7000.pid</span><br><span class="line">cluster-enabled  <span class="built_in">yes</span>                   //开启集群</span><br><span class="line">cluster-config-file  nodes_7000.conf   //集群的配置</span><br><span class="line">cluster-node-timeout  15000            //请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  <span class="built_in">yes</span>                        //aof日志开启，它会每次写操作都记录一条日志</span><br><span class="line">appendfilename <span class="string">&quot;appendonly7000.aof&quot;</span></span><br><span class="line">dbfilename dump7000.rdb</span><br></pre></td></tr></table></figure>


<p>节点7001</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#7001</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /app/redis/cluster/7001</span><br><span class="line"><span class="built_in">cp</span> /app/redis/redis-5.0.10/redis.conf /app/redis/cluster/7001/redis.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /app/redis/cluster/7001/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改如下内容</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1</span></span><br><span class="line">protected-mode no</span><br><span class="line">port  7001</span><br><span class="line">daemonize    <span class="built_in">yes</span>                       //redis后台运行</span><br><span class="line">pidfile  /var/run/redis_7001.pid</span><br><span class="line">cluster-enabled  <span class="built_in">yes</span>                   //开启集群</span><br><span class="line">cluster-config-file  nodes_7001.conf   //集群的配置</span><br><span class="line">cluster-node-timeout  15000            //请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  <span class="built_in">yes</span>                        //aof日志开启，它会每次写操作都记录一条日志</span><br><span class="line">appendfilename <span class="string">&quot;appendonly7001.aof&quot;</span></span><br><span class="line">dbfilename dump7001.rdb</span><br></pre></td></tr></table></figure>

<p>编辑启动脚本（7001同样操作编辑start.sh）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /app/redis/cluster/7000/bin/</span><br><span class="line">vim /app/redis/cluster/7000/bin/start.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /app/redis/cluster/7000/</span><br><span class="line">/usr/local/bin/redis-server /app/redis/cluster/7000/redis.conf</span><br></pre></td></tr></table></figure>

<p>编辑停止脚本（7001同样操作编辑stop.sh）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /app/redis/cluster/7000/bin/stop.sh </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span>  `ps -ef | grep redis-server| grep 7000 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>


<p>启动并检查服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动实例7000，7001</span></span><br><span class="line">sh /app/redis/cluster/7000/bin/start.sh</span><br><span class="line">sh /app/redis/cluster/7001/bin/start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看进程，出现如下提示说明实例启动成功</span></span><br><span class="line">$ ps -ef|grep redis</span><br><span class="line">root     26994     1  0 11:11 ?        00:00:00 /usr/local/bin/redis-server *:7000 [cluster]</span><br><span class="line">root     27024     1  0 11:15 ?        00:00:00 /usr/local/bin/redis-server *:7001 [cluster]</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建集群</strong> </p>
<p>在一台机器使用下面命令创建集群（注意，只能在一台机器上创建集群）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行创建集群命令</span></span><br><span class="line">/usr/local/bin/redis-cli --cluster-replicas 1 --cluster create 192.168.68.131:7000 192.168.68.133:7000 192.168.68.136:7000 192.168.68.131:7001 192.168.68.133:7001 192.168.68.136:7001</span><br></pre></td></tr></table></figure>

<p>如果出现如下提示说明集群创建成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p><strong>第三步 集群设置密码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下命令6个redis实例都要执行</span></span><br><span class="line">/usr/local/bin/redis-cli -c -p 7000</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入以上命令后执行如下命令</span></span><br><span class="line">192.168.2.11:7000&gt; config <span class="built_in">set</span> masterauth Redis123</span><br><span class="line">OK</span><br><span class="line">192.168.2.11:7000&gt; config <span class="built_in">set</span> requirepass Redis123</span><br><span class="line">OK</span><br><span class="line">192.168.2.11:7000&gt; auth Redis123</span><br><span class="line">OK</span><br><span class="line">192.168.2.11:7000&gt; config rewrite</span><br><span class="line">OK</span><br><span class="line">192.168.2.11:7000&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>安装完毕！</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>session周期</title>
    <url>/2018/01/01/session%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//获取session超时时间</span></span><br><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> SecurityUtils.getSubject().getSession();</span><br><span class="line"><span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> session.getTimeout();</span><br><span class="line">System.err.println(timeout);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置session周期</span></span><br><span class="line">SecurityUtils.getSubject().getSession().setTimeout(<span class="number">3600000</span>); <span class="comment">//1小时</span></span><br><span class="line"><span class="comment">//设置session永不过期</span></span><br><span class="line">SecurityUtils.getSubject().getSession().setTimeout(-<span class="number">1000l</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前超时时间</span></span><br><span class="line"><span class="type">int</span> time=session.getMaxInactiveInterval();</span><br><span class="line"><span class="comment">//设置新的超时时间</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">200</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlplus 中遇到的问题</title>
    <url>/2019/01/01/sqlplus%20%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="sqlplus-中文显示为问号（乱码）"><a href="#sqlplus-中文显示为问号（乱码）" class="headerlink" title="sqlplus 中文显示为问号（乱码）"></a>sqlplus 中文显示为问号（乱码）</h3><blockquote>
<p>需要更改客户端字符集，使之与服务端字符集一致。</p>
</blockquote>
<ul>
<li><p>操作系统语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $LANG</span><br><span class="line">zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数据库语言：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NLS_CHARACTERSET 为server端字符集</span></span><br><span class="line"><span class="keyword">select</span> * from V<span class="variable">$NLS_PARAMETERS</span> <span class="built_in">where</span> parameter = <span class="string">&#x27;NLS_CHARACTERSET&#x27;</span>;</span><br><span class="line">SELECT * FROM nls_database_parameters <span class="built_in">where</span> parameter = <span class="string">&#x27;NLS_CHARACTERSET&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># NLS_CHARACTERSET 为server端字符集</span></span><br><span class="line">SQL&gt; <span class="keyword">select</span> userenv(<span class="string">&#x27;language&#x27;</span>) from dual;</span><br><span class="line"><span class="comment"># SIMPLIFIED CHINESE_CHINA.AL32UTF8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置NLS_LANG</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -i nls ~/.bashrc</span><br><span class="line">export NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.AL32UTF8&quot;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="sqlplus-格式化输出"><a href="#sqlplus-格式化输出" class="headerlink" title="sqlplus 格式化输出"></a>sqlplus 格式化输出</h3><ul>
<li>设置linesize（输出的最大行宽）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看linesize</span><br><span class="line">show linesize</span><br><span class="line"></span><br><span class="line"># 设置linesize</span><br><span class="line">set linesize 120</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Sqlplus</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 安装与问题处理</title>
    <url>/2020/02/01/ssh%20%E5%AE%89%E8%A3%85%E4%B8%8E%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>报错如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Starting OpenBSD Secure Shell server sshd</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_rsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_dsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ed25519_key</span><br></pre></td></tr></table></figure>
<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ssh-keygen -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key</span><br><span class="line">sudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</span><br><span class="line">sudo ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">sudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime&amp;virtualenv开发python代码</title>
    <url>/2021/10/02/sublime&amp;virtualenv%E5%BC%80%E5%8F%91python%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="sublime-amp-virtualenv开发python代码"><a href="#sublime-amp-virtualenv开发python代码" class="headerlink" title="sublime&amp;virtualenv开发python代码"></a>sublime&amp;virtualenv开发python代码</h3><h4 id="1-基础安装"><a href="#1-基础安装" class="headerlink" title="1. 基础安装"></a>1. 基础安装</h4><ul>
<li>安装python, 并把python目录添加到 $path</li>
<li>安装virtualenv<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple virtualenv</span><br></pre></td></tr></table></figure></li>
<li><a href="http://www.sublimet/">下载</a> sublimetext3 推荐portable版。</li>
</ul>
<h4 id="2-配置sublime（安装Virtulalenv插件）"><a href="#2-配置sublime（安装Virtulalenv插件）" class="headerlink" title="2. 配置sublime（安装Virtulalenv插件）"></a>2. 配置sublime（安装Virtulalenv插件）</h4><ul>
<li><p>添加Virtualenv插件</p>
<blockquote>
<p>ctrl+shift+p 出现悬浮框，输入package，然后选择package control–install package，输入virtualenv，选择它回车即可安装，安装完后会出现一个新窗口Package Control Messages，有Virtualenv简介。 </p>
</blockquote>
</li>
<li><p>新建python虚拟环境</p>
<blockquote>
<p>Crtl+Shift+P，选中Virtualenv:New选项，在SublimeText底部Virtualenv Path输入虚拟环境安装目录后回车键。等待安装完成后，Tool-&gt;Build systems 中选中Python+Virtualenv，即可使用虚拟环境来执行python，但是在执行前需要先运行python虚拟环境； </p>
</blockquote>
</li>
<li><p>运行python虚拟环境</p>
<blockquote>
<p>Project -&gt; Add forlder to Project， 选择D:\sublime\（推荐：其实虚拟环境目录是安装在根目录下），在左侧即可看到安装的虚拟环境，Crtl+Shift+P，选中Virtualenv:Activate选项，选择对应的虚拟环境即可激活。激活之后,Crtl+Shift+P可以看到选项中多了一个Virtualenv:Deactivate，通过这个可以关闭虚拟环境；删除也看得到。 </p>
</blockquote>
</li>
<li><p>Ctrl+B 执行 python文件</p>
<blockquote>
<p>Sublime Text默认Ctrl+B执行python程序不支持交互式默认以及raw_input等，所以有时需通过SublimeREPL来执行python程序. </p>
</blockquote>
</li>
</ul>
<blockquote>
<p>SublimeText3 安装SublimeREPL插件（Crtl+Shift+P），该插件调用的python默认为系统path中设置的 python</p>
</blockquote>
<ul>
<li>为SublimeREPL添加快捷键 <blockquote>
<p>Preference-&gt;key Bindings-&gt;user中添加下面配置，<br>其中F2用来执行python文件，对应于Tools-&gt;SublimeREPL-&gt;python-&gt;Python RUN current file<br>其中F1用来进入python交互式模式，对应于Tools-&gt;SublimeREPL-&gt;python-&gt;Python</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>systemd管理守护进程</title>
    <url>/2018/12/23/systemd%E7%AE%A1%E7%90%86%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="systemd管理守护进程"><a href="#systemd管理守护进程" class="headerlink" title="systemd管理守护进程"></a>systemd管理守护进程</h3><h4 id="编写systemd-service文件"><a href="#编写systemd-service文件" class="headerlink" title="编写systemd service文件"></a>编写systemd service文件</h4><blockquote>
<p>Systemd service介绍</p>
</blockquote>
<ul>
<li>一种以 .service 结尾的单元（unit）配置文件，用于控制由 systemd 控制或监视的进程。简单说，用于后台以守护精灵（daemon）的形式运行程序。</li>
</ul>
<blockquote>
<p>编写 Systemd service</p>
</blockquote>
<ul>
<li><p>基本结构</p>
<blockquote>
<p>Systemd 服务的内容主要分为三个部分，控制单元（unit）的定义、服务（service）的定义、以及安装部分。</p>
</blockquote>
</li>
<li><p>Systemd 语法</p>
<blockquote>
<p>Systemd 语法和 .desktop 文件的语法比较像，也比较类似 Windows 下的 .ini 文件，因此无论对于打包者还是最终用户都是非常容易上手的。</p>
</blockquote>
</li>
<li><p>主要格式</p>
<blockquote>
<p>① Systemd 单元文件中的以 “#” 开头的行后面的内容会被认为是注释</p>
</blockquote>
<blockquote>
<p>② Systemd 下的布尔值，1、yes、on、true 都是开启，0、no、off、false 都是关闭。</p>
<blockquote>
<p>注：</p>
<pre><code>  仅限于 Systemd 文件，比如：
  RemainOnExit=yes
  并不适用于该文件中嵌入的 shell 语句，比如：
  ExecStartPre=/usr/bin/test &quot;x$&#123;NETWORKMANAGER&#125;&quot; = xyes
  这里的 yes 就不能替换。因为等号后面是一条嵌入的 shell 语句。
</code></pre>
</blockquote>
</blockquote>
<blockquote>
<p>③Systemd 下的时间单位默认是秒，所以要用毫秒（ms）分钟（m）等请显式说明。</p>
</blockquote>
</li>
</ul>
<h4 id="示例（NetworkManager-的-Systemd-service）如下"><a href="#示例（NetworkManager-的-Systemd-service）如下" class="headerlink" title="示例（NetworkManager 的 Systemd service）如下"></a>示例（NetworkManager 的 Systemd service）如下</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Network Manager</span><br><span class="line">After=syslog.target</span><br><span class="line">Wants=remote-fs.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=dbus</span><br><span class="line">BusName=org.freedesktop.NetworkManager</span><br><span class="line">ExecStart=/usr/sbin/NetworkManager --no-daemon</span><br><span class="line">EnvironmentFile=/etc/sysconfig/network/config</span><br><span class="line">ExecStartPre=/usr/bin/test &quot;x$&#123;NETWORKMANAGER&#125;&quot; = xyes</span><br><span class="line"># Suppress stderr to eliminate duplicated messages in syslog. NM calls openlog()</span><br><span class="line"># with LOG_PERROR when run in foreground. But systemd redirects stderr to</span><br><span class="line"># syslog by default, which results in logging each message twice.</span><br><span class="line">StandardError=null</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Also=NetworkManager-wait-online.service</span><br></pre></td></tr></table></figure>

<h5 id="定义控制单元-Unit"><a href="#定义控制单元-Unit" class="headerlink" title="定义控制单元 [Unit]"></a>定义控制单元 [Unit]</h5><blockquote>
<p>在 Systemd 中，所有引导过程中 Systemd 要控制的东西都是一个单元。</p>
<blockquote>
<p>Systemd 单元类型有：<br><br>系统服务<br><br>套接字（socket）<br><br>设备<br><br>挂载点<br><br>自动挂载点<br><br>SWAP 文件<br><br>分区<br><br>启动对象（startup target）<br><br>文件系统路径<br><br>定时器</p>
</blockquote>
</blockquote>
<blockquote>
<p>简单说，Systemd 把 *nix 里那些分散开发因此宏观看变成一团杂碎的东西重新统一命名了。单元名就是你写的这个 .service 文件的名称。但不只有 .service 后缀的文件才可以是一个单元，单元还可以有 .target, .path 等后缀，具体可以去 /usr/lib/systemd/system 下了解。但那种后缀要么由 Systemd 上游开发者写好随 systemd 软件包分发，要么由我们的 Base:system 团队添加，一般用户是不太需要写其它后缀的控制单元的。</p>
</blockquote>
<ul>
<li>先要声明我们在定义控制单元：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">单元名称就不用写了，我们要写一条单元描述：</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Daemon to start He.net IPv6</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>Systemd 是如何控制各个单元之间的关系的？。它和 RPM 的 specfile 的依赖关系控制的语法非常相似：</p>
</blockquote>
<ul>
<li>Requires: 这个单元启动了，那么它”需要”的单元也会被启动; 它”需要”的单元被停止了，它自己也活不了。但是请注意，这个设定并不能控制某单元与它”需要”的单元的启动顺序（启动顺序是另外控制的），即 Systemd 不是先启动 Requires 再启动本单元，而是在本单元被激活时，并行启动两者。于是会产生争分夺秒的问题，如果 Requires 先启动成功，那么皆大欢喜; 如果 Requires 启动得慢，那本单元就会失败（Systemd 没有自动重试）。所以为了系统的健壮性，不建议使用这个标记，而建议使用 Wants 标记。可以使用多个 Requires。</li>
<li>RequiresOverridable：跟 Requires 很像。但是如果这条服务是由用户手动启动的，那么 RequiresOverridable 后面的服务即使启动不成功也不报错。跟 Requires 比增加了一定容错性，但是你要确定你的服务是有等待功能的。另外，如果不由用户手动启动而是随系统开机启动，那么依然会有 Requires 面临的问题。</li>
<li>Requisite：强势版本的 Requires。要是这里需要的服务启动不成功，那本单元文件不管能不能检测等不能等待都立刻就会失败。</li>
<li>Wants：推荐使用。本单元启动了，它”想要”的单元也会被启动。但是启动不成功，对本单元没有影响。</li>
<li>Conflicts：一个单元的启动会停止与它”冲突”的单元，反之亦然。注意这里和后面的启动顺序是”正交”的：<br>两个相互冲突的单元被同时启动，要么两个都启动不了（两者都是第三个单元的 Requires），要么启动一个（有一个是第三个单元的 Requires，另一个不是），不是 Requires 的那个会被停止。要是两者都不是任何一个单元的 Requires，那么 Conflicts 别的那个单元优先启动，被 Conflicts 的后启动，要是互相写了，那么两个都启动不了。</li>
<li>OnFailure：很明显，如果本单元失败了，那么启动什么单元作为折衷。<br>好了，现在我们来想象一下，我们的单元（Ipv6 隧道）应该想要什么呢？很显然是一个连通着的网络。有一个 Systemd 默认提供的对象叫做 network-online.target（默认的 target 列表可见 systemd.special，必看，因为你大多数时候 Wants 的都是一个固定的系统状态而不是其它 systemd 服务），正正好好能够提供我们需要的环境。于是：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Daemon to start He.net IPv6</span><br><span class="line">Wants=network-online.target</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面我们需要定义一下服务启动顺序，不然连 / 目录所在的硬盘都没挂载就开始干活，上哪儿找程序去呀。</p>
</blockquote>
<ul>
<li>Systemd 服务启动顺序主要使用以下两个标记定义的<blockquote>
<p>Before/After：要是一个服务 Before 另一个服务，那么在并行启动时（Systemd 总是用进程 0 并行启动所有东西，然后通过这两个标记来二次等待排序），那另一个服务这时就会等这个服务先启动并返回状态，注意是先启动而不是启动成功，因为失败也是一种状态，一定要成功才启动另一个服务是通过依赖关系定义的。反之 After 亦然。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>下面说下”关机”（可以是挂起，这时候有些服务是依然在跑的，比如网络唤醒）时候的顺序：如果两个服务都是要关掉的，Before 是先关自己，After 是先关别人，这很好理解; 但如果一个服务是要关，而另一个是要开的，那么不管 Before/After 写了什么，总是优先关闭而不是开始。也就是比如服务 A Before 服务 B，但是服务 B 是在关，而服务 A 是在 restart，那么服务 B 的顺序在服务 A 的前面。<br>我们的单元应该在什么的前后启动呢？它不需要一定在什么服务前面跑起来，这不像 ifup 和 dhcp，网络起不来获取 ip 肯定没用。我们只需要有网就可以了。”有网”在 Systemd 中也是由一个默认 target：network.target 提供的，于是我们的控制单元就定义好了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Daemon to start He.net IPv6</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network.target</span><br><span class="line">定义服务本体 [service]</span><br><span class="line">在定义完了 Systemd 用来识别服务的单元后，我们来定义服务本体，依然是声明：</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">然后是声明服务类型：</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=</span><br><span class="line">Systemd 支持的服务类型有以下几类：</span><br><span class="line"></span><br><span class="line">simple 默认，这是最简单的服务类型。意思就是说启动的程序就是主体程序，这个程序要是退出那么一切皆休。这在图形界面里非常好理解，我打开 Amarok，退出它就没有了。但是命令行的大部分程序都不会那么设计，因为命令行的一个最基本原则就是一个好的程序不能独占命令行窗口。所以输入命令，回车，接着马上返回给你提示符，但程序已经执行了。所以只有少数程序比如 python xxx.py 还使用这种方式。在这种类型下面，如果你的主程序是要响应其它程序的，那么你的通信频道应该在启动本服务前就设好（套接字等），因此这种类型的服务，Systemd 运行它后会立刻就运行下面的服务（需要它的服务），这时没有套接字后面的服务会失败，写 After 也没用，因为 simple 类型不存在主进程退出的情况也就不存在有返回状态的情况，所以它一旦启动就认为是成功的，除非没起来。</span><br><span class="line"></span><br><span class="line">forking 标准 Unix Daemon 使用的启动方式。启动程序后会调用 fork() 函数，把必要的通信频道都设置好之后父进程退出，留下守护精灵的子进程。你要是使用的这种方式，最好也指定下 PIDFILE=，不要让 Systemd 去猜，非要猜也可以，把 GuessMainPID 设为 yes。</span><br><span class="line">判断是 forking 还是 simple 类型非常简单，命令行里运行下你的程序，持续占用命令行要按 Ctrl + C 才可以的，就不会是 forking 类型。</span><br><span class="line">创建 PIDFILE 是你为它写服务的程序的任务而不是 Systemd 的功能，甚至也不是 Sysvinit 脚本的功能。参考 startproc创建pid file的问题了解进一步的知识。因此如果你的程序确实是 forking 类型，但就是没实现创建 PIDFILE 的功能，那么建议使用 ExecStartPost= 结合 shell 命令来手动抓取进程编号并写到 /var/run/xxx.pid。</span><br><span class="line"></span><br><span class="line">oneshot 顾名思义，打一枪换一个地方。所以这种服务类型就是启动，完成，没进程了。常见比如你设置网络，ifup eth0 up，就是一次性的，不存在 ifup 的子进程（forking 那样），也不存在主进程（simple 那样），它运行完成后便了无痕迹。因为这类服务运行完就没进程了，我们经常会需要 RemainAfterExit=yes。后面配置的意思是说，即使没进程了，我们也要 Systemd 认为该服务是存在并成功了的。所以如果你有一个这样的服务，服务启动后，你再去 ifup eth0 up，这时你再看服务，依然显示是 running 的。因为只要在执行那条一次性命令的时候没出错，那么它就永远认为它是成功并一直存在的，直到你关闭服务。</span><br><span class="line">dbus 这个程序启动时需要获取一块 DBus 空间，所以需要和 BusName= 一起用。只有它成功获得了 DBus 空间，依赖它的程序才会被启动。</span><br><span class="line">一般人也就能用到上面四个，还有两种少见的类型：</span><br><span class="line"></span><br><span class="line">notify 这个程序在启动完成后会通过 sd_notify 发送一个通知消息。所以还需要配合 NotifyAccess 来让 Systemd 接收消息，后者有三个级别：none，所有消息都忽略掉; main，只接受我们程序的主进程发过去的消息; all，我们程序的所有进程发过去的消息都算。NotifyAccess 要是不写的话默认是 main。</span><br><span class="line">idle 这个程序要等它里面调度的全部其它东西都跑完才会跑它自己。比如你 ExecStart 的是个 shell 脚本，里面可能跑了一些别的东西，如果不这样的话，那很可能别的东西的控制台输出里会多一个&quot;启动成功&quot;这样的 Systemd 消息。</span><br><span class="line">由于 He.net 的 IPv6 是用 iproute2 的 ip 命令来弄的，所以是一个 oneshot 一次性服务。</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">接下来要设置 ExecStart, ExecStop。如果程序支持的话，你还可以去设置 ExecReload，Restart 等。注意，这里设置的是它们 Reload/Restart 的方式，但并不代表没有它们 Systemd 就不能完成比如 systemctl restart xxx.service 这样的任务，程序有支持自然最好，程序不支持那就先 stop 再 start 咯。同样有特殊要求的时候你也可以去设置比如 ExecStartPre/ExecStartPost,RestartSec,TimeoutSec 等其它东西，参考链接里都有使用方法。</span><br><span class="line"></span><br><span class="line">这里要特殊讲一下 ExecStart：</span><br><span class="line">如果你服务的类型不是 oneshot，那么它只可以接受一个命令，参数不限，比如你先 ip tunnel create 再 ip tunnel0 up，那是两个 ip 命令，如果你不是 oneshot 类型这样是不行的。</span><br><span class="line">如果有多条命令（oneshot 类型），命令之间以分号 ; 分隔，跨行可用反斜杠 \。</span><br><span class="line">除非你的服务类型是 forking，否则你在这里输入的命令都会被认为是主进程，不管它是不是。</span><br><span class="line">于是我们的 [Service] 就写好了：</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/sbin/ip tunnel add he-ipv6 mode sit remote 66.220.18.42 local 108.170.7.158     ttl 255 ; \</span><br><span class="line">          /usr/sbin/ip link set he-ipv6 up ; \</span><br><span class="line">          /usr/sbin/ip addr add 2001:470:c:1184::2/64 dev he-ipv6 ; \</span><br><span class="line">          /usr/sbin/ip route add ::/0 dev he-ipv6 ; \</span><br><span class="line">          /usr/sbin/ip -6 addr</span><br><span class="line">ExecStop=/usr/sbin/ip route delete ::/0 dev he-ipv6 ; \</span><br><span class="line">         /usr/sbin/ip -6 addr del 2001:470:c:1184::2/64 dev he-ipv6 ; \</span><br><span class="line">         /usr/sbin/ip link set he-ipv6 down ; \</span><br><span class="line">         /usr/sbin/ip tunnel del he-ipv6</span><br></pre></td></tr></table></figure>

<h4 id="安装服务-install"><a href="#安装服务-install" class="headerlink" title="安装服务 [install]"></a>安装服务 [install]</h4><blockquote>
<p>这可能有点绕，我服务文件都弄好了，放到 /etc/systemd/system（供系统管理员和用户使用），/usr/lib/systemd/system（供发行版打包者使用）了，不就是安装好了嘛。<br>这里说的是一种内部状态，默认你放对位置它显示的是 disabled，unloaded，所以我们要在 Systemd 内部对它进行一下 load，没人要的东西是不需要安装的（我们不收渣渣），所以我们要告诉 Systemd 它是有人要的，被谁要。一般都是被</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">要（multi-user.target 表示多用户系统好了，简单理解就是你可以登入了）。这样在 multi-user.target 启用时，我们的服务也就会被启用了。</span><br><span class="line"></span><br><span class="line">[Install] 部分下除了 WantedBy 还有两种属性，分别是：</span><br><span class="line"></span><br><span class="line">Alias= 给你自己的别名，这样 systemctl command xxx.service 的时候就可以不输入完整的单元名称。比如你给 NetworkManager 一个别名叫 Alias=nm，那你就可以 systemctl status nm.service 查看实际是 NetworkManager.service 的服务了。</span><br><span class="line"></span><br><span class="line">Also= 安装本服务的时候还要安装别的什么服务。比如我们的 He.net 脚本按理应该需要一个 iproute2.service 作为 also，但是 iproute2 实际上不需要 systemd 控制，所以就没写。它和 [Unit] 定义里面的依赖关系相比，它管理的不是运行时依赖，而是安装时。安装好了之后启动谁先谁后，谁依赖谁，和 Also= 都没有关系。</span><br></pre></td></tr></table></figure>

<h4 id="实例编写"><a href="#实例编写" class="headerlink" title="实例编写"></a>实例编写</h4><h5 id="1-python代码"><a href="#1-python代码" class="headerlink" title="1. python代码"></a>1. python代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python  </span></span><br><span class="line"><span class="keyword">import</span> sys, os, socket, signal  </span><br><span class="line">serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  </span><br><span class="line">addr = <span class="string">&#x27;&#x27;</span>, <span class="number">9090</span>  </span><br><span class="line">serv.bind(addr)  </span><br><span class="line">serv.listen(<span class="number">5</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sighup</span>(<span class="params">num1, num2</span>):  </span><br><span class="line">    sys.stderr.write(<span class="string">&quot;We receive SIGHUP signal...\nwe will reload the configuration file...\n&quot;</span>)  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigterm</span>(<span class="params">num1, num2</span>):  </span><br><span class="line">    sys.stderr.write(<span class="string">&quot;We kill us greacefully...\n&quot;</span>)  </span><br><span class="line">    os._exit(<span class="number">0</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#handle signal SIGHUB  </span></span><br><span class="line">signal.signal(signal.SIGHUP, sighup)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#handler signal SIGTERM  </span></span><br><span class="line">signal.signal(signal.SIGTERM, sigterm)  </span><br><span class="line">  </span><br><span class="line">sys.stderr.write(<span class="string">&quot;My self daemon start...\n&quot;</span>)  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        conn, addr = serv.accept()  </span><br><span class="line">    <span class="keyword">except</span> Exception:  </span><br><span class="line">        <span class="keyword">continue</span>  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        pid = os.fork()  </span><br><span class="line">        <span class="keyword">if</span> pid == <span class="number">0</span>:  </span><br><span class="line">           <span class="comment">#child process close serv_socket_object of parent  </span></span><br><span class="line">           serv.close()  </span><br><span class="line">           time.sleep(<span class="number">5</span>)  </span><br><span class="line">           os._exit(<span class="number">0</span>)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">           <span class="comment">#parent process close conn_socket_object of child  </span></span><br><span class="line">           conn.close()  </span><br><span class="line">    <span class="keyword">except</span> OSError:  </span><br><span class="line">        <span class="comment">#if we use conn.close(), we must wait for python gc to   </span></span><br><span class="line">        <span class="comment">#really close the socket connection  </span></span><br><span class="line">        conn.shutdown(socket.SHUT_RDWR)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这就是一个普通的python程序，我们编写了信号处理函数，分别针对SIGHUB（用于重新读取配置文件）、SIGTERM（用于杀死自己）</p>
</blockquote>
<h5 id="2-编写service文件"><a href="#2-编写service文件" class="headerlink" title="2. 编写service文件"></a>2. 编写service文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost system]# pwd  </span><br><span class="line">/etc/systemd/system  </span><br><span class="line">[root@localhost system]# cat mydaemon.service   </span><br><span class="line"># 在/etc/systemd/system新建mydaemon.service文件，文件内容如下</span><br><span class="line">[Unit]  </span><br><span class="line">Description=myDaemon   </span><br><span class="line">[Service]  </span><br><span class="line">ExecStart=/root/mydaemon.py  </span><br><span class="line">ExecStop=/bin/kill -TERM $MAINPID  </span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID  </span><br><span class="line">killMode=process  </span><br><span class="line">After=network.target  </span><br><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-命令执行"><a href="#3-命令执行" class="headerlink" title="3. 命令执行"></a>3. 命令执行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行：</span><br><span class="line">[root@localhost system]# systemctl daemon-reload  </span><br><span class="line"></span><br><span class="line"># 再执行：</span><br><span class="line">[root@localhost system]# systemctl start mydaemon</span><br><span class="line"></span><br><span class="line"># 查看一下状态：</span><br><span class="line">[root@localhost system]# systemctl status mydaemon</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat server.xml配置说明</title>
    <url>/2020/04/02/tomcat%20server.xml%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h3 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Server&gt;元素</span><br><span class="line">它代表整个容器,是Tomcat实例的顶层元素.由org.apache.catalina.Server接口来定义.它包含一个&lt;Service&gt;元素.并且它不能做为任何元素的子元素.</span><br><span class="line"></span><br><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot; debug=&quot;0&quot;&gt;</span><br><span class="line"> 1&gt; className指定实现org.apache.catalina.Server接口的类.默认值为org.apache.catalina.core.StandardServer</span><br><span class="line">2&gt; port指定Tomcat监听shutdown命令端口.终止服务器运行时,必须在Tomcat服务器所在的机器上发出shutdown命令.该属性是必须的.</span><br><span class="line">3&gt; shutdown指定终止Tomcat服务器运行时,发给Tomcat服务器的shutdown监听端口的字符串.该属性必须设置</span><br><span class="line"> </span><br><span class="line">&lt;Service&gt;元素</span><br><span class="line">该元素由org.apache.catalina.Service接口定义,它包含一个&lt;Engine&gt;元素,以及一个或多个&lt;Connector&gt;,这些Connector元素共享用同一个Engine元素</span><br><span class="line">&lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line">&lt;Service name=&quot;Apache&quot;&gt;</span><br><span class="line">第一个&lt;Service&gt;处理所有直接由Tomcat服务器接收的web客户请求.</span><br><span class="line">第二个&lt;Service&gt;处理所有由Apahce服务器转发过来的Web客户请求</span><br><span class="line">1&gt; className 指定实现org.apahce.catalina.Service接口的类.默认为org.apahce.catalina.core.StandardService</span><br><span class="line">2&gt; name定义Service的名字</span><br><span class="line"></span><br><span class="line">&lt;Engine&gt;元素</span><br><span class="line">每个Service元素只能有一个Engine元素.元素处理在同一个&lt;Service&gt;中所有&lt;Connector&gt;元素接收到的客户请求.由org.apahce.catalina.Engine接口定义.</span><br><span class="line">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; debug=&quot;0&quot;&gt;</span><br><span class="line">1&gt; className指定实现Engine接口的类,默认值为StandardEngine</span><br><span class="line">2&gt; defaultHost指定处理客户的默认主机名,在&lt;Engine&gt;中的&lt;Host&gt;子元素中必须定义这一主机</span><br><span class="line">3&gt; name定义Engine的名字</span><br><span class="line"> </span><br><span class="line">在&lt;Engine&gt;可以包含如下元素&lt;Logger&gt;, &lt;Realm&gt;, &lt;Value&gt;, &lt;Host&gt;</span><br><span class="line"></span><br><span class="line"> &lt;Host&gt;元素</span><br><span class="line">它由Host接口定义.一个Engine元素可以包含多个&lt;Host&gt;元素.每个&lt;Host&gt;的元素定义了一个虚拟主机.它包含了一个或多个Web应用.</span><br><span class="line"></span><br><span class="line">&lt;Host name=&quot;localhost&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">1&gt; className指定实现Host接口的类.默认值为StandardHost</span><br><span class="line">2&gt; appBase指定虚拟主机的目录,可以指定绝对目录,也可以指定相对于&lt;CATALINA_HOME&gt;的相对目录.如果没有此项,默认为&lt;CATALINA_HOME&gt;/webapps</span><br><span class="line">3&gt; autoDeploy如果此项设为true,表示Tomcat服务处于运行状态时,能够监测appBase下的文件,如果有新有web应用加入进来,会自运发布这个WEB应用</span><br><span class="line">4&gt; unpackWARs如果此项设置为true,表示把WEB应用的WAR文件先展开为开放目录结构后再运行.如果设为false将直接运行为WAR文件</span><br><span class="line">5&gt; alias指定主机别名,可以指定多个别名</span><br><span class="line">6&gt; deployOnStartup如果此项设为true,表示Tomcat服务器启动时会自动发布appBase目录下所有的Web应用.如果Web应用中的server.xml没有相应的&lt;Context&gt;元素,将采用Tomcat默认的Context</span><br><span class="line">7&gt; name定义虚拟主机的名字</span><br><span class="line"> </span><br><span class="line">在&lt;Host&gt;元素中可以包含如下子元素&lt;Logger&gt;, &lt;Realm&gt;, &lt;Value&gt;, &lt;Context&gt;</span><br><span class="line"></span><br><span class="line">&lt;Context&gt;元素</span><br><span class="line">它由Context接口定义.是使用最频繁的元素.每个&lt;Context元素代表了运行在虚拟主机上的单个Web应用.一个&lt;Host&gt;可以包含多个&lt;Context&gt;元素.每个web应用有唯一</span><br><span class="line">的一个相对应的Context代表web应用自身.servlet容器为第一个web应用创建一个</span><br><span class="line">ServletContext对象.</span><br><span class="line"></span><br><span class="line">&lt;Context path=&quot;/sample&quot; docBase=&quot;sample&quot; debug=&quot;0&quot; reloadbale=&quot;true&quot;&gt;</span><br><span class="line"> </span><br><span class="line">1&gt; className指定实现Context的类,默认为StandardContext类</span><br><span class="line">2&gt; path指定访问Web应用的URL入口,注意/sample,而不是sample</span><br><span class="line">3&gt; reloadable如果这个属性设为true, Tomcat服务器在运行状态下会监视在WEB-INF/classes和Web-INF/lib目录CLASS文件的改运.如果监视到有class文件被更新,服务器自重新加载Web应用</span><br><span class="line">3&gt; cookies指定是否通过Cookies来支持Session,默认值为true</span><br><span class="line">4&gt; useNaming指定是否支持JNDI,默认值为了true</span><br><span class="line"></span><br><span class="line">在&lt;Context&gt;元素中可以包含如下元素&lt;Logger&gt;, &lt;Realm&gt;, &lt;Resource&gt;, &lt;ResourceParams&gt;</span><br><span class="line"></span><br><span class="line">Connector元素</span><br><span class="line">由Connector接口定义.&lt;Connector&gt;元素代表与客户程序实际交互的给件,它负责接收客户请求,以及向客户返回响应结果.</span><br><span class="line"> </span><br><span class="line">&lt;Connector port=&quot;8080&quot; maxThread=&quot;50&quot; minSpareThreads=&quot;25&quot; maxSpareThread=&quot;75&quot; enableLookups=&quot;false&quot; redirectPort=&quot;8443&quot; acceptCount=&quot;100&quot; debug=&quot;0&quot; connectionTimeout=&quot;20000&quot; disableUploadTimeout=&quot;true&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Connection port=&quot;8009&quot; enableLookups=&quot;false&quot; redirectPort=&quot;8443&quot; debug=&quot;0&quot; protocol=&quot;AJP/1.3&quot; /&gt;</span><br><span class="line">第一个Connector元素定义了一个HTTP Connector,它通过8080端口接收HTTP请求;第二个Connector元素定义了一个JD Connector,它通过8009端口接收由其它服务器转发过来的请求.</span><br><span class="line"> </span><br><span class="line">Connector元素共用属性</span><br><span class="line">1&gt; className指定实现Connector接口的类</span><br><span class="line">2&gt; enableLookups如果设为true,表示支持域名解析,可以把IP地址解析为主机名.WEB应用中调用request.getRemoteHost方法返回客户机主机名.默认值为true</span><br><span class="line">3&gt; redirectPort指定转发端口.如果当前端口只支持non-SSL请求,在需要安全通信的场命,将把客户请求转发至SSL的redirectPort端口</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">HttpConnector元素的属性</span><br><span class="line">1&gt; className实现Connector的类</span><br><span class="line">2&gt; port设定Tcp/IP端口,默认值为8080,如果把8080改成80,则只要输入http://localhost 即可</span><br><span class="line">因为TCP/IP的默认端口是80</span><br><span class="line">3&gt; address如果服务器有二个以上ip地址,此属性可以设定端口监听的ip地址.默认情况下,端口会监听服务器上所有的ip地址</span><br><span class="line">4&gt; bufferSize设定由端口创建的输入流的缓存大小.默认值为2048byte</span><br><span class="line">5&gt; protocol设定Http协议,默认值为HTTP/1.1</span><br><span class="line">6&gt; maxThreads设定在监听端口的线程的最大数目,这个值也决定了服务器可以同时响应客户请求的最大数目.默认值为200</span><br><span class="line">7&gt; acceptCount设定在监听端口队列的最大客户请求数量,默认值为10.如果队列已满,客户必须等待.</span><br><span class="line">8&gt; connectionTimeout定义建立客户连接超时的时间.如果为-1,表示不限制建立客户连接的时间</span><br></pre></td></tr></table></figure>
<p>JkConnector的属性<br>1&gt; className实现Connector的类<br>2&gt; port设定AJP端口号<br>3&gt; protocol必须设定为AJP/1.3</p>
<p>conf/server.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">      &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class="line">      &lt;Listener className=&quot;org.apache.catalina.core.JasperListener&quot; /&gt;</span><br><span class="line">      &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class="line">      &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class="line">      &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</span><br><span class="line">      &lt;GlobalNamingResources&gt;</span><br><span class="line">      &lt;!-- 全局命名资源，来定义一些外部访问资源，其作用是为所有引擎应用程序所引用的外部资源的定义 --!&gt;</span><br><span class="line">        &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot; type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class="line">                  description=&quot;User database that can be updated and saved&quot;</span><br><span class="line">                  factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class="line">                  pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class="line">      &lt;/GlobalNamingResources&gt;</span><br><span class="line">      &lt;!-- 定义的一个名叫&quot;UserDatabase&quot;的认证资源，将conf/tomcat-users.xml加载至内存中，在需要认证的时候到内存中进行认证 --&gt;</span><br><span class="line">      &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line">      &lt;!-- # 定义Service组件，同来关联Connector和Engine，一个Engine可以对应多个Connector，每个Service中只能一个Engine --!&gt;</span><br><span class="line">        &lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">        &lt;!-- 修改HTTP/1.1的Connector监听端口为80.客户端通过浏览器访问的请求，只能通过HTTP传递给tomcat。  --&gt;</span><br><span class="line">        &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">        &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;test.com&quot;&gt;</span><br><span class="line">        &lt;!-- 修改当前Engine，默认主机是，www.test.com  --&gt;</span><br><span class="line">        &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</span><br><span class="line">            &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class="line">                   resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line">        &lt;/Realm&gt;</span><br><span class="line">        # Realm组件，定义对当前容器内的应用程序访问的认证，通过外部资源UserDatabase进行认证</span><br><span class="line">          &lt;Host name=&quot;test.com&quot;  appBase=&quot;/web&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">          &lt;!--  定义一个主机，域名为：test.com，应用程序的目录是/web，设置自动部署，自动解压    --&gt;</span><br><span class="line">            &lt;Alias&gt;www.test.com&lt;/Alias&gt;</span><br><span class="line">            &lt;!--    定义一个别名www.test.com，类似apache的ServerAlias --&gt;</span><br><span class="line">            &lt;Context path=&quot;&quot; docBase=&quot;www/&quot; reloadable=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!--    定义该应用程序，访问路径&quot;&quot;，即访问www.test.com即可访问，网页目录为：相对于appBase下的www/，即/web/www，并且当该应用程序下web.xml或者类等有相关变化时，自动重载当前配置，即不用重启tomcat使部署的新应用程序生效  --&gt;</span><br><span class="line">            &lt;Context path=&quot;/bbs&quot; docBase=&quot;/web/bbs&quot; reloadable=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!--  定义另外一个独立的应用程序，访问路径为：www.test.com/bbs，该应用程序网页目录为/web/bbs   --&gt;</span><br><span class="line">            &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;/web/www/logs&quot;</span><br><span class="line">                   prefix=&quot;www_access.&quot; suffix=&quot;.log&quot;</span><br><span class="line">                   pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">            &lt;!--   定义一个Valve组件，用来记录tomcat的访问日志，日志存放目录为：/web/www/logs如果定义为相对路径则是相当于$CATALINA_HOME，并非相对于appBase，这个要注意。定义日志文件前缀为www_access.并以.log结尾，pattern定义日志内容格式，具体字段表示可以查看tomcat官方文档   --&gt;</span><br><span class="line">          &lt;/Host&gt;</span><br><span class="line">          &lt;Host name=&quot;manager.test.com&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">          &lt;!--   定义一个主机名为man.test.com，应用程序目录是$CATALINA_HOME/webapps,自动解压，自动部署   --&gt;</span><br><span class="line">            &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;172.23.136.*&quot; /&gt;</span><br><span class="line">            &lt;!--   定义远程地址访问策略，仅允许172.23.136.*网段访问该主机，其他的将被拒绝访问  --&gt;</span><br><span class="line">            &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;/web/bbs/logs&quot;</span><br><span class="line">                   prefix=&quot;bbs_access.&quot; suffix=&quot;.log&quot;</span><br><span class="line">                   pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">            &lt;!--   定义该主机的访问日志      --&gt;</span><br><span class="line">          &lt;/Host&gt;</span><br><span class="line">        &lt;/Engine&gt;</span><br><span class="line">      &lt;/Service&gt;</span><br><span class="line">    &lt;/Server&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>conf/tomcat-users.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">  &lt;role rolename=&quot;manager-gui&quot; /&gt;</span><br><span class="line">  &lt;!--  定义一种角色名为：manager-gui    --&gt;</span><br><span class="line">  &lt;user username=&quot;tomcat&quot; password=&quot;tomcat$110&quot; roles=&quot;manager-gui&quot; /&gt;</span><br><span class="line">  &lt;!--  定义一个用户的用户名以及密码，并赋予manager-gui的角色    --&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure>

<h3 id="server-xml示例"><a href="#server-xml示例" class="headerlink" title="server.xml示例"></a>server.xml示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line">  contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line">  this work for additional information regarding copyright ownership.</span><br><span class="line">  The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line">  (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="line">  the License.  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- Note:  A &quot;Server&quot; is not itself a &quot;Container&quot;, so you may not</span><br><span class="line">     define subcomponents such as &quot;Valves&quot; at this level.</span><br><span class="line">     Documentation at /docs/config/server.html</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</span><br><span class="line">  &lt;!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html --&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JasperListener&quot; /&gt;</span><br><span class="line">  &lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</span><br><span class="line">  &lt;!-- JMX Support for the Tomcat server. Documentation at /docs/non-existent.html --&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.ServerLifecycleListener&quot; /&gt;</span><br><span class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Global JNDI resources</span><br><span class="line">       Documentation at /docs/jndi-resources-howto.html</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;GlobalNamingResources&gt;</span><br><span class="line">    &lt;!-- Editable user database that can also be used by</span><br><span class="line">         UserDatabaseRealm to authenticate users</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</span><br><span class="line">              type=&quot;org.apache.catalina.UserDatabase&quot;</span><br><span class="line">              description=&quot;User database that can be updated and saved&quot;</span><br><span class="line">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span><br><span class="line">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</span><br><span class="line">  &lt;/GlobalNamingResources&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- A &quot;Service&quot; is a collection of one or more &quot;Connectors&quot; that share</span><br><span class="line">       a single &quot;Container&quot; Note:  A &quot;Service&quot; is not itself a &quot;Container&quot;, </span><br><span class="line">       so you may not define subcomponents such as &quot;Valves&quot; at this level.</span><br><span class="line">       Documentation at /docs/config/service.html</span><br><span class="line">   --&gt;</span><br><span class="line">  &lt;Service name=&quot;Catalina&quot;&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</span><br><span class="line">    &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot; </span><br><span class="line">        maxThreads=&quot;150&quot; minSpareThreads=&quot;4&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- A &quot;Connector&quot; represents an endpoint by which requests are received</span><br><span class="line">         and responses are returned. Documentation at :</span><br><span class="line">         Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking)</span><br><span class="line">         Java AJP  Connector: /docs/config/ajp.html</span><br><span class="line">         APR (HTTP/AJP) Connector: /docs/apr.html</span><br><span class="line">         Define a non-SSL HTTP/1.1 Connector on port 8080</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class="line">               port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               enableLookups=&quot;false&quot;</span><br><span class="line">               maxThreads=&quot;300&quot;</span><br><span class="line">               acceptCount=&quot;200&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot;</span><br><span class="line">               compression=&quot;on&quot;</span><br><span class="line">               compressionMinSize=&quot;2048&quot;</span><br><span class="line">               noCompressionUserAgents=&quot;gozilla, traviata&quot;</span><br><span class="line">               compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot; </span><br><span class="line">               URIEncoding=&quot;UTF-8&quot;/&gt;</span><br><span class="line">    &lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class="line">               port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; </span><br><span class="line">               connectionTimeout=&quot;20000&quot; </span><br><span class="line">               redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line">    --&gt;           </span><br><span class="line">    &lt;!-- Define a SSL HTTP/1.1 Connector on port 8443</span><br><span class="line">         This connector uses the JSSE configuration, when using APR, the </span><br><span class="line">         connector should be using the OpenSSL style configuration</span><br><span class="line">         described in the APR documentation --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    &lt;Connector port=&quot;8443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span><br><span class="line">               maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">               clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span><br><span class="line">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- An Engine represents the entry point (within Catalina) that processes</span><br><span class="line">         every request.  The Engine implementation for Tomcat stand alone</span><br><span class="line">         analyzes the HTTP headers included with the request, and passes them</span><br><span class="line">         on to the appropriate Host (virtual host).</span><br><span class="line">         Documentation at /docs/config/engine.html --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- You should set jvmRoute to support load-balancing via AJP ie :</span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;jvm1&quot;&gt;         </span><br><span class="line">    --&gt; </span><br><span class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!--For clustering, please take a look at documentation at:</span><br><span class="line">          /docs/cluster-howto.html  (simple how to)</span><br><span class="line">          /docs/config/cluster.html (reference documentation) --&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">      &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span><br><span class="line">      --&gt;        </span><br><span class="line"></span><br><span class="line">      &lt;!-- The request dumper valve dumps useful debugging information about</span><br><span class="line">           the request and response data received and sent by Tomcat.</span><br><span class="line">           Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">      &lt;Valve className=&quot;org.apache.catalina.valves.RequestDumperValve&quot;/&gt;</span><br><span class="line">      --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span><br><span class="line">           resources under the key &quot;UserDatabase&quot;.  Any edits</span><br><span class="line">           that are performed against this UserDatabase are immediately</span><br><span class="line">           available for use by the Realm.  --&gt;</span><br><span class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span><br><span class="line">             resourceName=&quot;UserDatabase&quot;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Define the default virtual host</span><br><span class="line">           Note: XML Schema validation will not work with Xerces 2.2.</span><br><span class="line">       --&gt;</span><br><span class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</span><br><span class="line">            xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Access log processes all example.</span><br><span class="line">             Documentation at: /docs/config/valve.html --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;  </span><br><span class="line">               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;common&quot; resolveHosts=&quot;false&quot;/&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">     &lt;Context path=&quot;/&quot; reloadable=&quot;true&quot; docBase=&quot;/data/onlinesign&quot; workDir=&quot;work&quot; /&gt;</span><br><span class="line">      &lt;/Host&gt;</span><br><span class="line">    &lt;/Engine&gt;</span><br><span class="line">  &lt;/Service&gt;</span><br><span class="line">&lt;/Server&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat相关</title>
    <url>/2020/04/02/tomcat%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="一、server-xml配置"><a href="#一、server-xml配置" class="headerlink" title="一、server.xml配置"></a>一、server.xml配置</h3><h4 id="1、设置项目路径：更改Host的appBase属性为指定路径"><a href="#1、设置项目路径：更改Host的appBase属性为指定路径" class="headerlink" title="1、设置项目路径：更改Host的appBase属性为指定路径"></a>1、设置项目路径：更改Host的appBase属性为指定路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;指定的路径&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2、配置访问路径"><a href="#2、配置访问路径" class="headerlink" title="2、配置访问路径"></a>2、配置访问路径</h4><blockquote>
<p>在<Host>中配置<Centext>标签，如下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Context docBase=&quot;/usr/local/tomcat/apache-tomcat-7.0.65/webapps/creditInfo&quot; path=&quot;/&quot; reloadable=&quot;true&quot; workDir=&quot;/usr/local/tomcat/apache-tomcat-7.0.65/webapps/creditInfo/work&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3、apache集群"><a href="#3、apache集群" class="headerlink" title="3、apache集群"></a>3、apache集群</h4><blockquote>
<p>配置AJP</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>多个服务时需要不同的端口port。</p>
<blockquote>
<p>配置服务器</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;tomcat1&quot;&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 18.04 server 扩容(LVM)磁盘 解决磁盘不足的情况（VirtualBox）</title>
    <url>/2020/10/01/ubuntu%2018.04%20server%20%E6%89%A9%E5%AE%B9(LVM)%E7%A3%81%E7%9B%98%20%E8%A7%A3%E5%86%B3%E7%A3%81%E7%9B%98%E4%B8%8D%E8%B6%B3%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%88VirtualBox%EF%BC%89/</url>
    <content><![CDATA[<ol>
<li><p>查看磁盘情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="comment"># 发现/dev/mapper/ubuntu–vg-ubuntu–lv 磁盘只有4G的空间，需要扩容</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/u050601.png"></p>
</li>
<li><p>显示存在的卷组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vgdisplay</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">Alloc PE / Size       1024 / 4.00 GiB  # /dev/mapper/ubuntu–vg-ubuntu–lv 磁盘</span><br><span class="line">Free  PE / Size       6911 / &lt;27.00 GiB   # 磁盘可以扩容的大小</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lvextend -L 32G /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若报错，尝试下面指令</span></span><br><span class="line">sudo lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到 Logical volume ubuntu-vg/ubuntu-lv successfully resized， 则调整成功</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新计算磁盘大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新查看磁盘情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">sudo vgdisplay</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/u050602.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>HASH算法</title>
    <url>/2018/01/01/HASH%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="获取文档hash"><a href="#获取文档hash" class="headerlink" title="获取文档hash"></a>获取文档hash</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 描述：获取文档hash</span><br><span class="line">    *</span><br><span class="line">    * @author MaYawei</span><br><span class="line">    * @date 2016年12月12日</span><br><span class="line">    * @param fileName 文档名称</span><br><span class="line">    * @param hashType 如&quot;MD5&quot;，&quot;SHA1&quot;，&quot;SHA-256&quot;，&quot;SHA-384&quot;，&quot;SHA-512&quot;</span><br><span class="line">    * @return</span><br><span class="line">    * @throws Exception</span><br><span class="line">    */</span><br><span class="line">private static String getHash(String fileName, String hashType)  </span><br><span class="line">        throws Exception &#123;  </span><br><span class="line">    InputStream fis = new FileInputStream(fileName);</span><br><span class="line">    byte buffer[] = new byte[1024];</span><br><span class="line">    MessageDigest md5 = MessageDigest.getInstance(hashType);  </span><br><span class="line">    for(int numRead = 0; (numRead = fis.read(buffer)) &gt; 0;) &#123;  </span><br><span class="line">        md5.update(buffer, 0, numRead);  </span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">    byte[] bs = md5.digest();</span><br><span class="line">    return Base64Utils.encode(bs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 描述：获取文档hash</span><br><span class="line">    *</span><br><span class="line">    * @author MaYawei</span><br><span class="line">    * @date 2016年12月12日</span><br><span class="line">    * @param data 文档名称</span><br><span class="line">    * @param hashType 如&quot;MD5&quot;，&quot;SHA1&quot;，&quot;SHA-256&quot;，&quot;SHA-384&quot;，&quot;SHA-512&quot;</span><br><span class="line">    * @return</span><br><span class="line">    * @throws Exception </span><br><span class="line">    * @throws Exception</span><br><span class="line">    */</span><br><span class="line">private static String getHash(String data, String hashType) throws Exception&#123;  </span><br><span class="line">    MessageDigest md5 = MessageDigest.getInstance(hashType);  </span><br><span class="line">    md5.update(data.getBytes());</span><br><span class="line">    byte[] bs = md5.digest();</span><br><span class="line">    return HxStringUtil.bytesToHexString(bs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Base64Utils.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> *  Copyright© 2003-2016 浙江汇信科技有限公司, All Rights Reserved.</span><br><span class="line"> */</span><br><span class="line">package com.icinfo.utils;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:  Base64工具类.&lt;br&gt;</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Base64Utils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 解码base64字符串</span><br><span class="line">     *</span><br><span class="line">     * @param bytes</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static byte[] decode(final byte[] bytes) &#123;</span><br><span class="line">        return Base64.decodeBase64(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解码base64字符串</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static byte[] decode(final String str) &#123;</span><br><span class="line">        return Base64.decodeBase64(str.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 编码为base64字符串</span><br><span class="line">     *</span><br><span class="line">     * @param bytes</span><br><span class="line">     * @return base64字符串</span><br><span class="line">     */</span><br><span class="line">    public static String encode(final byte[] bytes) &#123;</span><br><span class="line">        return new String(Base64.encodeBase64(bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 编码为base64字符串</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     * @return base64字符串</span><br><span class="line">     */</span><br><span class="line">    public static String encode(final String str) &#123;</span><br><span class="line">        return new String(Base64.encodeBase64(str.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>HxStringUtil.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.framework.support.util;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line">import java.util.zip.Deflater;</span><br><span class="line">import java.util.zip.GZIPInputStream;</span><br><span class="line">import java.util.zip.GZIPOutputStream;</span><br><span class="line">import java.util.zip.Inflater;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述: 汇信字符串工具类</span><br><span class="line"> *</span><br><span class="line"> * @author 胡义振</span><br><span class="line"> * @date 2014-10-14</span><br><span class="line"> */</span><br><span class="line">public class HxStringUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 数组转成字符串</span><br><span class="line">     *</span><br><span class="line">     * @param arrObject 数组对象</span><br><span class="line">     * @param separator 分隔符</span><br><span class="line">     * @return</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2014-10-14</span><br><span class="line">     */</span><br><span class="line">    public static String arrayToString(Object[] arrObject, String separator) &#123;</span><br><span class="line"></span><br><span class="line">        // 默认为&quot;,&quot;号</span><br><span class="line">        if (separator == null || separator.equals(&quot;&quot;)) separator = &quot;,&quot;;</span><br><span class="line"></span><br><span class="line">        String returnStrValue = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        if (arrObject != null) &#123;</span><br><span class="line">            for (Object object : arrObject) &#123;</span><br><span class="line">                if (returnStrValue.equals(&quot;&quot;)) &#123;</span><br><span class="line">                    returnStrValue = String.valueOf(object);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    returnStrValue = returnStrValue + separator + String.valueOf(object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return returnStrValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 可变参数转为一个字符串</span><br><span class="line">     *</span><br><span class="line">     * @param strParam 可变String参数</span><br><span class="line">     * @return</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2014-10-22</span><br><span class="line">     */</span><br><span class="line">    public static String assemblyString(String... strParam) &#123;</span><br><span class="line">        StringBuffer stringBuffer = new StringBuffer();</span><br><span class="line">        for (String string : strParam) &#123;</span><br><span class="line">            stringBuffer.append(string);</span><br><span class="line">        &#125;</span><br><span class="line">        return stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：byte数组转16进制字符串</span><br><span class="line">     *</span><br><span class="line">     * @param bArray</span><br><span class="line">     * @return String</span><br><span class="line">     * @throws</span><br><span class="line">     * @author 金李祥</span><br><span class="line">     * @date 2016-3-17</span><br><span class="line">     */</span><br><span class="line">    public static String bytesToHexString(byte[] bArray) &#123;</span><br><span class="line">        StringBuffer sb = new StringBuffer(bArray.length);</span><br><span class="line">        String sTemp;</span><br><span class="line">        for (int i = 0; i &lt; bArray.length; i++) &#123;</span><br><span class="line">            sTemp = Integer.toHexString(0xFF &amp; bArray[i]);</span><br><span class="line">            if (sTemp.length() &lt; 2)</span><br><span class="line">                sb.append(0);</span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述：16进制字符串转byte[]</span><br><span class="line">     *</span><br><span class="line">     * @param hexString</span><br><span class="line">     * @return byte[]</span><br><span class="line">     * @throws</span><br><span class="line">     * @author 金李祥</span><br><span class="line">     * @date 2016-3-18</span><br><span class="line">     */</span><br><span class="line">    public static byte[] hexStringToBytes(String hexString) &#123;</span><br><span class="line">        if (hexString == null || hexString.equals(&quot;&quot;)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        hexString = hexString.toUpperCase();</span><br><span class="line">        int length = hexString.length() / 2;</span><br><span class="line">        char[] hexChars = hexString.toCharArray();</span><br><span class="line">        byte[] d = new byte[length];</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            int pos = i * 2;</span><br><span class="line">            d[i] = (byte) (charToByte(hexChars[pos]) &lt;&lt; 4 | charToByte(hexChars[pos + 1]));</span><br><span class="line">        &#125;</span><br><span class="line">        return d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static byte charToByte(char c) &#123;</span><br><span class="line">        return (byte) &quot;0123456789ABCDEF&quot;.indexOf(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 字符串转为数组</span><br><span class="line">     *</span><br><span class="line">     * @param paramStr  字符串</span><br><span class="line">     * @param separator 分割符</span><br><span class="line">     * @return</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2014-10-14</span><br><span class="line">     */</span><br><span class="line">    public static String[] strToArray(String paramStr, String separator) &#123;</span><br><span class="line">        String arrTempStr[] = null;</span><br><span class="line">        if (paramStr != null &amp;&amp; !paramStr.equals(&quot;&quot;)) &#123;</span><br><span class="line">            String arrStr[] = paramStr.split(separator);</span><br><span class="line">            int arrStrLength = arrStr.length;</span><br><span class="line">            arrTempStr = new String[arrStrLength];</span><br><span class="line">            for (int i = 0; i &lt; arrStrLength; i++) &#123;</span><br><span class="line">                arrTempStr[i] = arrStr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arrTempStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 把Map转成参数</span><br><span class="line">     *</span><br><span class="line">     * @param paramMap map类型数据</span><br><span class="line">     * @param encode   编码</span><br><span class="line">     * @return URL参数</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-8-8</span><br><span class="line">     */</span><br><span class="line">    public static String maptToUrlParam(Map&lt;String, String&gt; paramMap, String encode) throws Exception &#123;</span><br><span class="line">        String params = &quot;&quot;;</span><br><span class="line">        String tempKey;</span><br><span class="line">        String tempValue;</span><br><span class="line">        Set&lt;String&gt; paramKey = paramMap.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = paramKey.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            tempKey = it.next();</span><br><span class="line">            tempValue = paramMap.get(tempKey) != null ? URLEncoder.encode(paramMap.get(tempKey), encode) : &quot;&quot;;</span><br><span class="line">            if (params.equals(&quot;&quot;)) &#123;</span><br><span class="line">                params = tempKey + &quot;=&quot; + tempValue;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                params = params + &quot;&amp;&quot; + tempKey + &quot;=&quot; + tempValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 根据分割符把Map转成String格式。如：key1=value1,key2=valu2  &quot;,&quot; 为分割符</span><br><span class="line">     *</span><br><span class="line">     * @param paramMap  map类型数据</span><br><span class="line">     * @param separator 分割符</span><br><span class="line">     * @return URL参数</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-8-8</span><br><span class="line">     */</span><br><span class="line">    public static String maptToString(Map&lt;String, String&gt; paramMap, String separator) throws Exception &#123;</span><br><span class="line">        String params = &quot;&quot;;</span><br><span class="line">        String tempKey;</span><br><span class="line">        String tempValue;</span><br><span class="line">        Set&lt;String&gt; paramKey = paramMap.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = paramKey.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            tempKey = it.next();</span><br><span class="line">            tempValue = paramMap.get(tempKey) != null ? paramMap.get(tempKey) : &quot;&quot;;</span><br><span class="line">            if (params.equals(&quot;&quot;)) &#123;</span><br><span class="line">                params = tempKey + &quot;=&quot; + tempValue;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                params = params + separator + tempKey + &quot;=&quot; + tempValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 把Url参数转成Map</span><br><span class="line">     *</span><br><span class="line">     * @param urlParam URL 参数</span><br><span class="line">     * @param encode   编码</span><br><span class="line">     * @return UrlMap</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-8-8</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, String&gt; urlParamToMap(String urlParam) &#123;</span><br><span class="line">        Map&lt;String, String&gt; urlParamMap = new HashMap&lt;String, String&gt;();</span><br><span class="line">        if (urlParam != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                String[] arrParam = urlParam.split(&quot;&amp;&quot;);</span><br><span class="line">                for (int i = 0; i &lt; arrParam.length; i++) &#123;</span><br><span class="line">                    String[] keyValue = arrParam[i].split(&quot;=&quot;);</span><br><span class="line">                    urlParamMap.put(keyValue[0], keyValue[1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception er) &#123;</span><br><span class="line">                er.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return urlParamMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断一个字符是Ascill字符还是其它字符（如汉，日，韩文字符）</span><br><span class="line">     *</span><br><span class="line">     * @param c 字符</span><br><span class="line">     */</span><br><span class="line">    public static boolean isLetter(char c) &#123;</span><br><span class="line">        int k = 0x80;</span><br><span class="line">        return c / k == 0 ? true : false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 得到一个字符串的长度,显示的长度,一个汉字或日韩文长度为2,英文字符长度为1</span><br><span class="line">     *</span><br><span class="line">     * @param s 字符串</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int getStringLength(String s) &#123;</span><br><span class="line">        if (s == null)</span><br><span class="line">            return 0;</span><br><span class="line">        char[] c = s.toCharArray();</span><br><span class="line">        int len = 0;</span><br><span class="line">        for (int i = 0; i &lt; c.length; i++) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            if (!isLetter(c[i])) &#123;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据长度截取字符串</span><br><span class="line">     *</span><br><span class="line">     * @param origin 字符串</span><br><span class="line">     * @param len    截取长度</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String substring(String origin, int len) &#123;</span><br><span class="line">        if (origin == null) return &quot;&quot;;</span><br><span class="line">        int n = 0;</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        origin = origin.replaceAll(&quot;&amp;nbsp;&quot;, &quot; &quot;);</span><br><span class="line">        origin = trimStartAndEnd(origin);</span><br><span class="line">        for (int i = 0; i &lt; origin.length(); i++) &#123;</span><br><span class="line">            if (origin.charAt(i) &gt; 255) &#123;</span><br><span class="line">                n += 2;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (n &gt; len) &#123;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">            result += origin.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 去掉前后空格</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2014-2-15</span><br><span class="line">     */</span><br><span class="line">    public static String trimStartAndEnd(String str) &#123;</span><br><span class="line">        if (str == null) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        while (str.startsWith(&quot; &quot;)) &#123;</span><br><span class="line">            str = str.substring(1, str.length()).trim();</span><br><span class="line">        &#125;</span><br><span class="line">        while (str.endsWith(&quot; &quot;)) &#123;</span><br><span class="line">            str = str.substring(0, str.length() - 1).trim();</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 截段取字符串（如：str = &quot;25,26,28,29&quot; 段取 26 后得 str = &quot;25,28,29&quot; ）</span><br><span class="line">     *</span><br><span class="line">     * @param allStr</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String subPartString(String allStr, String cutStr) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String astr[] = allStr.split(&quot;,&quot;);</span><br><span class="line">            String newStr = &quot;&quot;;</span><br><span class="line">            for (int i = 0; i &lt; astr.length; i++) &#123;</span><br><span class="line">                if (astr[i].equals(cutStr)) &#123;</span><br><span class="line">                    astr[i] = &quot;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; astr.length; i++) &#123;</span><br><span class="line">                if (astr[i].equals(&quot;&quot;)) &#123;</span><br><span class="line">                    astr[i] = &quot;&quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (newStr.equals(&quot;&quot;)) &#123;</span><br><span class="line">                        newStr = astr[i];</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        newStr = newStr + &quot;,&quot; + astr[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return newStr;</span><br><span class="line">        &#125; catch (Exception er) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查字符串是否存在（如：allStr = &quot;25,26,28,29&quot;， ）</span><br><span class="line">     *</span><br><span class="line">     * @param allStr     所有字符串</span><br><span class="line">     * @param checkedStr 检测的字符串</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean checkIncludeString(String allStr, String checkedStr) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (allStr == null || allStr.trim().length() &lt; 1) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                allStr = allStr.replaceAll(&quot; &quot;, &quot;&quot;);</span><br><span class="line">                checkedStr = checkedStr.replaceAll(&quot; &quot;, &quot;&quot;);</span><br><span class="line">                String astr[] = allStr.split(&quot;,&quot;);</span><br><span class="line">                for (int jj = 0; jj &lt; astr.length; jj++) &#123;</span><br><span class="line">                    if (astr[jj].toLowerCase().equals(checkedStr.toLowerCase())) &#123;</span><br><span class="line">                        astr = null;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception er) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取文件后缀名</span><br><span class="line">     *</span><br><span class="line">     * @param fineName 文件全名</span><br><span class="line">     * @return String</span><br><span class="line">     */</span><br><span class="line">    public static String getSuffixName(String fileName) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return fileName.substring(fileName.lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">        &#125; catch (Exception er) &#123;</span><br><span class="line">            return fileName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取去掉后缀的文件名</span><br><span class="line">     *</span><br><span class="line">     * @param fineName 文件全名</span><br><span class="line">     * @return String</span><br><span class="line">     */</span><br><span class="line">    public static String getPrefixName(String fileName) &#123;</span><br><span class="line">        return fileName.substring(0, fileName.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ISO88591转为 utf-8</span><br><span class="line">     *</span><br><span class="line">     * @param s</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String ISO8859ToUtf8(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] b = s.getBytes(&quot;iso-8859-1&quot;);</span><br><span class="line">            return new String(b, &quot;utf-8&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ISO88591转为 utf-8</span><br><span class="line">     *</span><br><span class="line">     * @param s</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String ISO8859ToGBK(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] b = s.getBytes(&quot;iso-8859-1&quot;);</span><br><span class="line">            return new String(b, &quot;GBK&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ISO88591转为 utf-8</span><br><span class="line">     *</span><br><span class="line">     * @param s</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String Utf8ToGbk(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] b = s.getBytes(&quot;utf-8&quot;);</span><br><span class="line">            return new String(b, &quot;GBK&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String Utf8ToGb2312(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] b = s.getBytes(&quot;utf-8&quot;);</span><br><span class="line">            return new String(b, &quot;GB2312&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ISO88591转为 utf-8</span><br><span class="line">     *</span><br><span class="line">     * @param s</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String GbkToUtf8(String s) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] b = s.getBytes(&quot;GBK&quot;);</span><br><span class="line">            return new String(b, &quot;utf-8&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把特殊字符转化为html代码</span><br><span class="line">     *</span><br><span class="line">     * @param str 要转化的字符串</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String strToHtml(String str) &#123;</span><br><span class="line">        if (str != null &amp;&amp; !str.equals(&quot;&quot;)) &#123;</span><br><span class="line">            str = str.replaceAll(&quot;&amp;&quot;, &quot;&amp;amp;&quot;);</span><br><span class="line">            str = str.replaceAll(&quot;&lt;&quot;, &quot;&amp;lt;&quot;);</span><br><span class="line">            str = str.replaceAll(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);</span><br><span class="line">            str = str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;);</span><br><span class="line">            str = str.replaceAll(&quot;\r&quot;, &quot;&lt;br&gt;&quot;);</span><br><span class="line">            str = str.replaceAll(&quot;\n&quot;, &quot;&lt;br&gt;&quot;);</span><br><span class="line">            str = str.replaceAll(&quot;&#x27;&quot;, &quot;&amp;#39&quot;);</span><br><span class="line">            str = str.replaceAll(&quot;\&quot;&quot;, &quot;&amp;quot;&quot;);</span><br><span class="line">            return str;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把特殊字符转化为html代码</span><br><span class="line">     *</span><br><span class="line">     * @param str 要转化的字符串</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String HtmlToStr(String str) &#123;</span><br><span class="line">        if (str != null &amp;&amp; !str.equals(&quot;&quot;)) &#123;</span><br><span class="line">            str = resolve(str, &quot;&amp;amp;&quot;, &quot;&amp;&quot;);</span><br><span class="line">            str = resolve(str, &quot;&amp;lt;&quot;, &quot;&lt;&quot;);</span><br><span class="line">            str = resolve(str, &quot;&amp;gt;&quot;, &quot;&gt;&quot;);</span><br><span class="line">            str = resolve(str, &quot;&amp;nbsp;&quot;, &quot; &quot;);</span><br><span class="line">            str = resolve(str, &quot;&lt;br&gt;&quot;, &quot;\n&quot;);</span><br><span class="line">            str = resolve(str, &quot;&amp;#39&quot;, &quot;&#x27;&quot;);</span><br><span class="line">            str = resolve(str, &quot;&amp;quot;&quot;, &quot;\&quot;&quot;);</span><br><span class="line">            return str;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 特殊字符转化</span><br><span class="line">     * @param str</span><br><span class="line">     * @param regex</span><br><span class="line">     * @param replacement</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String resolve(String str, String regex, String replacement) &#123;</span><br><span class="line">        Pattern p = Pattern.compile(regex);</span><br><span class="line">        Matcher m = p.matcher(str);</span><br><span class="line">        if (m.find()) &#123;</span><br><span class="line">            str = str.replaceAll(regex, replacement);</span><br><span class="line">            return resolve(str, regex, replacement);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输入字符的转换</span><br><span class="line">     *</span><br><span class="line">     * @param string</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String inputFormate(String string) &#123;</span><br><span class="line">        return string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 补充字符串到指定的位数，位数不够，前面加0补充</span><br><span class="line">     *</span><br><span class="line">     * @param stringLentgh 原字符串</span><br><span class="line">     * @param length       补充到长度</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String fillfulString(String string, int length) &#123;</span><br><span class="line">        String newString = &quot;&quot;;</span><br><span class="line">        if (string.length() &gt; length) &#123;</span><br><span class="line">            return string.substring(0, length);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int i = 0; i &lt; length - string.length(); i++) &#123;</span><br><span class="line">                newString = newString + &quot;0&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return newString + string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取随机名（字符+字母）</span><br><span class="line">     *</span><br><span class="line">     * @param length</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getCharAndNumr(int length) &#123;</span><br><span class="line">        String val = &quot;&quot;;</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            String charOrNum = random.nextInt(2) % 2 == 0 ? &quot;char&quot; : &quot;num&quot;; // 输出字母还是数字</span><br><span class="line"></span><br><span class="line">            if (&quot;char&quot;.equalsIgnoreCase(charOrNum)) // 字符串</span><br><span class="line">            &#123;</span><br><span class="line">                int choice = random.nextInt(2) % 2 == 0 ? 65 : 97; //取得大写字母还是小写字母</span><br><span class="line">                val += (char) (choice + random.nextInt(26));</span><br><span class="line">            &#125; else if (&quot;num&quot;.equalsIgnoreCase(charOrNum)) // 数字</span><br><span class="line">            &#123;</span><br><span class="line">                val += String.valueOf(random.nextInt(10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: GZip 压缩</span><br><span class="line">     *</span><br><span class="line">     * @param str 待压缩的字符串</span><br><span class="line">     * @return 返回压缩后的字符串</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-11-27</span><br><span class="line">     */</span><br><span class="line">    public static String GZipCompress(String str) throws IOException &#123;</span><br><span class="line">        if (null == str || str.length() &lt;= 0) &#123;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;</span><br><span class="line">        // 创建一个新的 byte 数组输出流  </span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">        // 使用默认缓冲区大小创建新的输出流  </span><br><span class="line">        GZIPOutputStream gzip = new GZIPOutputStream(out);</span><br><span class="line">        // 将 b.length 个字节写入此输出流  </span><br><span class="line">        gzip.write(str.getBytes());</span><br><span class="line">        gzip.close();</span><br><span class="line">        // 使用指定的 charsetName，通过解码字节将缓冲区内容转换为字符串</span><br><span class="line">        return out.toString(&quot;ISO-8859-1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: GZip 解压缩</span><br><span class="line">     *</span><br><span class="line">     * @param str 待解压缩的字符串</span><br><span class="line">     * @return 返回解压缩后的字符串</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-11-27</span><br><span class="line">     */</span><br><span class="line">    public static String GZipUnCompress(String str) throws IOException &#123;</span><br><span class="line">        if (null == str || str.length() &lt;= 0) &#123;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;</span><br><span class="line">        // 创建一个新的 byte 数组输出流  </span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">        // 创建一个 ByteArrayInputStream，使用 buf 作为其缓冲区数组  </span><br><span class="line">        ByteArrayInputStream in = new ByteArrayInputStream(str.getBytes(&quot;ISO-8859-1&quot;));</span><br><span class="line">        // 使用默认缓冲区大小创建新的输入流  </span><br><span class="line">        GZIPInputStream gzip = new GZIPInputStream(in);</span><br><span class="line">        byte[] buffer = new byte[256];</span><br><span class="line">        int n = 0;</span><br><span class="line">        while ((n = gzip.read(buffer)) &gt;= 0) &#123;// 将未压缩数据读入字节数组  </span><br><span class="line">            // 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此 byte数组输出流  </span><br><span class="line">            out.write(buffer, 0, n);</span><br><span class="line">        &#125;</span><br><span class="line">        // 使用指定的 charsetName，通过解码字节将缓冲区内容转换为字符串  </span><br><span class="line">        return out.toString(&quot;utf-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: ZLib 压缩</span><br><span class="line">     *</span><br><span class="line">     * @param data 待压缩的数据</span><br><span class="line">     * @return 压缩后的数据</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-11-27</span><br><span class="line">     */</span><br><span class="line">    public static byte[] ZLibCompress(byte[] data) &#123;</span><br><span class="line">        byte[] output = new byte[0];</span><br><span class="line">        Deflater compresser = new Deflater();</span><br><span class="line">        compresser.reset();</span><br><span class="line">        compresser.setInput(data);</span><br><span class="line">        compresser.finish();</span><br><span class="line">        ByteArrayOutputStream bos = new ByteArrayOutputStream(data.length);</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] buf = new byte[1024];</span><br><span class="line">            while (!compresser.finished()) &#123;</span><br><span class="line">                int i = compresser.deflate(buf);</span><br><span class="line">                bos.write(buf, 0, i);</span><br><span class="line">            &#125;</span><br><span class="line">            output = bos.toByteArray();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            output = data;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        compresser.end();</span><br><span class="line">        return output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: ZLib 解压缩</span><br><span class="line">     *</span><br><span class="line">     * @param data 待压缩的数据</span><br><span class="line">     * @return 解压缩后的数据</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2013-11-27</span><br><span class="line">     */</span><br><span class="line">    public static byte[] ZLibUnCompress(byte[] data) &#123;</span><br><span class="line">        byte[] output = new byte[0];</span><br><span class="line"></span><br><span class="line">        Inflater decompresser = new Inflater();</span><br><span class="line">        decompresser.reset();</span><br><span class="line">        decompresser.setInput(data);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream o = new ByteArrayOutputStream(data.length);</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] buf = new byte[1024];</span><br><span class="line">            while (!decompresser.finished()) &#123;</span><br><span class="line">                int i = decompresser.inflate(buf);</span><br><span class="line">                o.write(buf, 0, i);</span><br><span class="line">            &#125;</span><br><span class="line">            output = o.toByteArray();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            output = data;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                o.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        decompresser.end();</span><br><span class="line">        return output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 身份证号码转为18位</span><br><span class="line">     *</span><br><span class="line">     * @param century</span><br><span class="line">     * @param idCardNo</span><br><span class="line">     * @return</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2014-2-21</span><br><span class="line">     */</span><br><span class="line">    public static String formatIdTo18(String idCardNo) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (idCardNo == null || idCardNo.equals(&quot;null&quot;)) &#123;</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125; else if (idCardNo.replaceAll(&quot; &quot;, &quot;&quot;).length() != 15 &amp;&amp; idCardNo.replaceAll(&quot; &quot;, &quot;&quot;).length() != 18) &#123;</span><br><span class="line">                return idCardNo.replaceAll(&quot; &quot;, &quot;&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (idCardNo.trim().length() == 18) &#123;</span><br><span class="line">                    return idCardNo.trim();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    int[] weight = new int[]&#123;7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1&#125;;</span><br><span class="line"></span><br><span class="line">                    // 通过加入世纪码, 变成 17 为的新号码本体.</span><br><span class="line">                    String newNoBody = idCardNo.substring(0, 6) + &quot;19&quot; + idCardNo.substring(6);</span><br><span class="line"></span><br><span class="line">                    //下面算最后一位校验码</span><br><span class="line">                    int checkSum = 0;</span><br><span class="line">                    for (int i = 0; i &lt; 17; i++) &#123;</span><br><span class="line">                        int ai = Integer.parseInt(&quot;&quot; + newNoBody.charAt(i)); // 位于 i 位置的数值</span><br><span class="line">                        checkSum = checkSum + ai * weight[i];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    int checkNum = checkSum % 11;</span><br><span class="line">                    String checkChar = null;</span><br><span class="line"></span><br><span class="line">                    switch (checkNum) &#123;</span><br><span class="line">                        case 0:</span><br><span class="line">                            checkChar = &quot;1&quot;;</span><br><span class="line">                            break;</span><br><span class="line">                        case 1:</span><br><span class="line">                            checkChar = &quot;0&quot;;</span><br><span class="line">                            break;</span><br><span class="line">                        case 2:</span><br><span class="line">                            checkChar = &quot;X&quot;;</span><br><span class="line">                            break;</span><br><span class="line">                        default:</span><br><span class="line">                            checkChar = &quot;&quot; + (12 - checkNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return newNoBody + checkChar;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception er) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 全角字符转换为半角</span><br><span class="line">     *</span><br><span class="line">     * @param src</span><br><span class="line">     * @return</span><br><span class="line">     * @author yushunwei</span><br><span class="line">     * @date 2014-8-20</span><br><span class="line">     */</span><br><span class="line">    public static String strFulltoHalf(String src) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (src == null) &#123;</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                char[] c = src.toCharArray();</span><br><span class="line">                for (int index = 0; index &lt; c.length; index++) &#123;</span><br><span class="line">                    if (c[index] == 12288) &#123;// 全角空格</span><br><span class="line">                        c[index] = (char) 32;</span><br><span class="line">                    &#125; else if (c[index] &gt; 65280 &amp;&amp; c[index] &lt; 65375) &#123;// 其他全角字符</span><br><span class="line">                        c[index] = (char) (c[index] - 65248);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return String.valueOf(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return src;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 描述: 替换所有空格（包含换行）</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     * @auther 胡义振</span><br><span class="line">     * @date 2014-9-23</span><br><span class="line">     */</span><br><span class="line">    public static String replaceAllBlank(String str) &#123;</span><br><span class="line">        String dest = &quot;&quot;;</span><br><span class="line">        if (str != null) &#123;</span><br><span class="line">            Pattern p = Pattern.compile(&quot;\\s|\u3000|\t|\r\n|\r|\n|\n\r&quot;);</span><br><span class="line">            Matcher m = p.matcher(str);</span><br><span class="line">            dest = m.replaceAll(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return dest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 子系统 Ubuntu</title>
    <url>/2021/10/01/win10%20%E5%AD%90%E7%B3%BB%E7%BB%9F%20Ubuntu/</url>
    <content><![CDATA[<h2 id="win10最高权限"><a href="#win10最高权限" class="headerlink" title="win10最高权限"></a>win10最高权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置注册表（实测无效）</span><br><span class="line">1.Win+R组合键之后，输入【regedit】 点击确定打开注册表编辑器；在注册表左侧依次展开HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System；</span><br><span class="line"></span><br><span class="line">2.在右侧双击打开&quot;FilterAdministratorToken&quot;将其数值数据修改为&quot;1&quot;点击确定（如果没有则单击右键，【新建】-【DWORD（32位）值】，将其命名为FilterAdministratorToken ，将其数值数据修改为1即可）；</span><br><span class="line"></span><br><span class="line"># 修改策略组</span><br><span class="line">1、Win+R组合键之后，输入【gpedit.msc】点击确定打开本地组策略管理器。</span><br><span class="line">2、依次点击打开：计算机配置 -&gt; Windows设置 -&gt; 安全设置 -&gt; 本地策略 -&gt; 安全选项 ,找到&quot;账户：管理员状态&quot;，可以看见状态为&quot;已禁用&quot;，需要的是将它开启。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="window10安装ubuntu"><a href="#window10安装ubuntu" class="headerlink" title="window10安装ubuntu"></a>window10安装ubuntu</h2><h3 id="检查WSL"><a href="#检查WSL" class="headerlink" title="检查WSL"></a>检查WSL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 控制面版，查看方式可选择大图标，在点击程序与功能—&gt;启用或关闭Windows功能</span><br><span class="line">打开：Hyper-V、  适用于Linux的Windows子系统、虚拟机平台</span><br><span class="line"></span><br><span class="line"># 命令在PowerShell（管理员）执行</span><br><span class="line"></span><br><span class="line">2. WSL版本需要WSL1升级为WSL2</span><br><span class="line">a. 查看当前版本，打开PowerShell（管理员）</span><br><span class="line">wsl -l -v</span><br><span class="line"></span><br><span class="line">b. 下载并安装 适用于 x64 计算机的 WSL2 Linux 内核更新包</span><br><span class="line">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</span><br><span class="line"></span><br><span class="line">c. 启动虚拟机</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line">d. 设置WSL默认版本</span><br><span class="line">wsl --set-default-version 2</span><br><span class="line">或设置分发版的WSL版本</span><br><span class="line">wsl --set-version 分发版名称 版本号</span><br><span class="line">如：wsl --set-version Ubuntu-20.04 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="配置源（Ubuntu20-04）"><a href="#配置源（Ubuntu20-04）" class="headerlink" title="配置源（Ubuntu20.04）"></a>配置源（Ubuntu20.04）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 备份source.list</span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"># 设置阿里云源</span><br><span class="line">sudo cat &gt; /etc/apt/sources.list &lt;&lt; EOF </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 更新</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">sudo apt-get install \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg \</span><br><span class="line">lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">echo \</span><br><span class="line">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line">$(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装docker</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;https://qgikhnmb.mirror.aliyuncs.com&quot;, &quot;http://hub-mirror.c.163.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;47.96.100.34&quot;],</span><br><span class="line">  &quot;iptables&quot;:false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 设置用户组</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="docker无法启动"><a href="#docker无法启动" class="headerlink" title="docker无法启动"></a>docker无法启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以管理员身份启动wsl</span><br></pre></td></tr></table></figure>
<h4 id="docker镜像报错"><a href="#docker镜像报错" class="headerlink" title="docker镜像报错"></a>docker镜像报错</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 问题</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:722: waiting for init preliminary setup caused: EOF: unknown.</span><br><span class="line">ERRO[0004] error waiting for container: context canceled</span><br><span class="line"></span><br><span class="line"># 解决</span><br><span class="line">WSL版本问题，需要WSL1升级为WSL2</span><br></pre></td></tr></table></figure>

<h3 id="IDEA无法启动"><a href="#IDEA无法启动" class="headerlink" title="IDEA无法启动"></a>IDEA无法启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">报错：</span><br><span class="line">java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind</span><br><span class="line">at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)</span><br><span class="line">at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)</span><br><span class="line">at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1702)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line">使用管理员身份打开命令提示符，</span><br><span class="line">执行命令net stop winnat和net start winnat，不用重启</span><br></pre></td></tr></table></figure>

<h3 id="xshell登陆Win10-Linux子系统"><a href="#xshell登陆Win10-Linux子系统" class="headerlink" title="xshell登陆Win10 Linux子系统"></a>xshell登陆Win10 Linux子系统</h3><ol>
<li><p>备份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/ssh</span><br><span class="line">sudo cp sshd_config sshd_config.bak</span><br><span class="line">sudo vim sshd_config</span><br></pre></td></tr></table></figure></li>
<li><p>修改sshd_config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Port 2233  #修改端口</span><br><span class="line">ListenAddress 0.0.0.0  #打开本地监听</span><br><span class="line">#StrictModes yes  #注释掉</span><br><span class="line">PasswordAuthentication yes  #允许密码登陆</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新生成host key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure openssh-server</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>win10使用技巧</title>
    <url>/2019/12/23/win10%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="win10设置护眼色"><a href="#win10设置护眼色" class="headerlink" title="win10设置护眼色"></a>win10设置护眼色</h3><p><img src="https://rainbowrise.github.io/images/ydnote/2021/win10-01.png" alt="win10设置护眼色"></p>
<p><img src="https://rainbowrise.github.io/images/ydnote/2021/win10-02.png" alt="win10设置护眼色"></p>
<h3 id="win10-开机启动小键盘"><a href="#win10-开机启动小键盘" class="headerlink" title="win10 开机启动小键盘"></a>win10 开机启动小键盘</h3><ul>
<li><p>运行regedit，打开注册表,展开到HKEY_USERS.DEFAULT\Control Panel\Keyboard</p>
</li>
<li><p>选择InitialKeyboardIndicators</p>
</li>
</ul>
<blockquote>
<p>win10默认：</p>
</blockquote>
<ul>
<li>InitialKeyboardIndicators数值数据为：2147483648</li>
<li>将其数值数据修改为2（Win7）/80000002（Win8/Win8.1/Win10）</li>
</ul>
<blockquote>
<p>重启计算机生效。</p>
</blockquote>
<p><img src="https://rainbowrise.github.io/images/ydnote/2021/win10-03.png" alt="win10 开机启动小键盘"></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>上传文件（图片）</title>
    <url>/2018/06/02/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%88%E5%9B%BE%E7%89%87%EF%BC%89/</url>
    <content><![CDATA[<h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">showDetailImg();</span><br><span class="line">    function showDetailImg() &#123;</span><br><span class="line">        var thumList = &#x27;&lt;s:property value=&quot;pointGift.detailImg&quot; escape=&quot;false&quot; /&gt;&#x27;.split(&quot;,&quot;);</span><br><span class="line">        if (thumList != null &amp;&amp; thumList != &#x27;&#x27;) &#123;</span><br><span class="line">            $.each(thumList, function(i, n)&#123;</span><br><span class="line">                 fileManager.add(&#123;</span><br><span class="line">                    addfileServer: &#x27;&lt;s:property value=&quot;@com.icinfo.support.constant.PropertiesReader@IMAGE_SERVER&quot; /&gt;&#x27;,</span><br><span class="line">                    addfilePath: thumList[i],</span><br><span class="line">                    addfileType: &quot;iconTwo&quot;</span><br><span class="line">                 &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        initReciveFileTwo(&quot;iconTwo&quot;);</span><br><span class="line">        fileManager.show(&#123;</span><br><span class="line">            addfileType: &quot;iconTwo&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function initReciveFileTwo(addFileType)&#123;</span><br><span class="line">    var _id = &quot;doUploadFile&quot; + new Date().getTime();</span><br><span class="line">        var url = &quot;&lt;s:url value=&#x27;/upfiles/doEnUploadPicAction.do&#x27; /&gt;?_id=&quot;+_id+&quot;&amp;paramType=&quot;+addFileType;</span><br><span class="line">        icinfo.data.set(_id, &#123;</span><br><span class="line">        success: function(list, type)&#123;</span><br><span class="line"></span><br><span class="line">            $.each(list, function(i, n)&#123;</span><br><span class="line">                fileManager.add(n);</span><br><span class="line">            &#125;);</span><br><span class="line">            fileManager.show(&#123;</span><br><span class="line">                addfileType: addFileType</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        var ifm = $.HxSelector(&quot;#iconIfmTwo&quot;).css(&#123;</span><br><span class="line">            height : 40,</span><br><span class="line">            width : 150</span><br><span class="line">        &#125;);</span><br><span class="line">        ifm.attr(&#123;</span><br><span class="line">            src: url,</span><br><span class="line">            frameboder: 0,</span><br><span class="line">            scrollbar: &quot;hidden&quot;</span><br><span class="line">        &#125;).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="uploadFiles-jsp"><a href="#uploadFiles-jsp" class="headerlink" title="uploadFiles.jsp"></a>uploadFiles.jsp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;link href=&quot;&lt;s:url value=&#x27;/hxjs/icinfo/uploadify/uploadify/uploadify.css&#x27;/&gt;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;s:url value=&#x27;/hxjs/base/jquery-1.11.1.min.js&#x27;/&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;s:url value=&#x27;/hxjs/icinfo/plugin/hxplugin.js?id=1.0&#x27;/&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;s:url value=&#x27;/hxjs/icinfo/uploadify/uploadify/jquery.uploadify.js&#x27;/&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;s:url value=&#x27;/hxjs/icinfo/core/icinfo-1.0.0.min.source.js&#x27;/&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html, body &#123; overflow: hidden;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var spuer = icinfo.data.get(R.url.getParameter(&quot;_id&quot;));</span><br><span class="line">var paramType = R.url.getParameter(&quot;paramType&quot;);</span><br><span class="line"> </span><br><span class="line">var upfileManager = &#123;upfileList:[]&#125;;</span><br><span class="line"> </span><br><span class="line">upfileManager.add = function(obj)&#123;</span><br><span class="line">    this.upfileList.push(obj);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&quot;#material_upfile&quot;).uploadify(&#123;</span><br><span class="line">        auto: true,</span><br><span class="line">        buttonCursor : &#x27;pointer&#x27;,</span><br><span class="line">        buttonImage: false,</span><br><span class="line">        queueID: &quot;material_upfile_box&quot;,</span><br><span class="line">        buttonText: &quot;添加文件&quot;,</span><br><span class="line">        fileTypeDesc: &quot;选择图片&quot;,</span><br><span class="line">        height        : 20,</span><br><span class="line">        width         : 120,</span><br><span class="line">        swf           : &#x27;&lt;s:url value=&quot;/hxjs/icinfo/uploadify/uploadify/uploadify.swf&quot;/&gt;&#x27;,</span><br><span class="line">        uploader      : &#x27;&lt;s:property value=&quot;@com.icinfo.support.util.ProUtil@IMAGE_SERVER&quot; /&gt;/upfiles/doUpfile.do&#x27;,</span><br><span class="line">        queueSizeLimit: &#x27;&lt;s:property value=&quot;queueSizeLimit&quot; /&gt;&#x27;,//一次上传文件数目</span><br><span class="line">        fileSizeLimit: &#x27;3MB&#x27;,//文件大小</span><br><span class="line">        uploadLimit: 50,//上传队列中的最大值</span><br><span class="line">        fileTypeDesc: &#x27;&lt;s:property value=&quot;fileTypeDesc&quot; /&gt;&#x27;,//支持文件格式,选择文件框显示的文件类型</span><br><span class="line">        fileTypeExts: &#x27;&lt;s:property value=&quot;fileTypeExts&quot; /&gt;&#x27;,</span><br><span class="line">        removeCompleted: false,</span><br><span class="line">        fileObjName: &quot;upfile&quot;,</span><br><span class="line">        formData: &#123;&#125;,</span><br><span class="line">        onUploadSuccess : function(file, data, response) &#123;</span><br><span class="line">            var jsonData = $.parseJSON(data);</span><br><span class="line">            var upfilepath = &quot;upfilepath&quot;;</span><br><span class="line">            var upfilename = &quot;upfilename&quot;;</span><br><span class="line">            if(jsonData.upfileFilePath!=null &amp;&amp; jsonData.upfileFilePath!=&#x27;&#x27;)&#123;</span><br><span class="line">                upfilepath = jsonData.upfileFilePath;</span><br><span class="line">                upfilename = jsonData.upfileFileName;</span><br><span class="line">            &#125;</span><br><span class="line">            upfileManager.add(&#123;</span><br><span class="line">                addfileServer: &#x27;&lt;s:property value=&quot;@com.icinfo.support.util.ProUtil@IMAGE_SERVER&quot; /&gt;&#x27;,</span><br><span class="line">                addfileType: paramType,</span><br><span class="line">                addfilePath: upfilepath,</span><br><span class="line">                addfileName: upfilename</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onQueueComplete : function(queueData) &#123;</span><br><span class="line">            if(queueData.uploadsSuccessful &gt; 0)&#123;</span><br><span class="line">                spuer.success(upfileManager.upfileList,paramType);</span><br><span class="line">                location.reload();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">     &lt;input type=&quot;file&quot; id=&quot;material_upfile&quot; name=&quot;upfile&quot; /&gt;</span><br><span class="line">     &lt;div id=&quot;material_upfile_box&quot;&gt;&lt;/div&gt;</span><br><span class="line">     &lt;div id=&quot;material_upfile_list&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getFilesPath()&#123;</span><br><span class="line">    var arrFilesPath = [];</span><br><span class="line"></span><br><span class="line">    $.each(fileManager.fileList, function(i, n)&#123;</span><br><span class="line">        if(n.addfileType==&quot;iconTwo&quot;)&#123;</span><br><span class="line">            arrFilesPath.push(n.addfilePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $.HxSelector(&quot;#iconTwoId&quot;).val(arrFilesPath.join(&#x27;,&#x27;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;hx-form&quot; class=&quot;hx-form-itemWrap&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;hx-form-item clearfix&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;hx-form-l fl&quot;&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;详情图：&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;hx-form-r fl&quot;&gt;</span><br><span class="line">                &lt;iframe src=&quot;&quot; style=&quot;height: 60px&quot; type=&quot;iconTwo&quot; id=&quot;iconIfmTwo&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">                &lt;div id=&quot;iconTwo&quot;&gt;&lt;/div&gt;            </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; id=&quot;iconTwoId&quot; name=&quot;pointGift.detailImg&quot;  value=&quot;&lt;s:property value=&quot;pointGift.detailImg&quot;/&gt;&quot;/&gt;                  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;    </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 进入文件上传页面 --&gt;</span><br><span class="line">&lt;action name=&quot;doEnUploadPicAction&quot; class=&quot;upfilesAction&quot; method=&quot;doDirectAction&quot;&gt;</span><br><span class="line">    &lt;param name=&quot;fileTypeDesc&quot;&gt;*.jpg;*.bmp;*.png;*.gif;*.jpeg&lt;/param&gt;</span><br><span class="line">    &lt;param name=&quot;fileTypeExts&quot;&gt;*.jpg;*.bmp;*.png;*.gif;*.jpeg&lt;/param&gt;</span><br><span class="line">    &lt;param name=&quot;fileSizeLimit&quot;&gt;100&lt;/param&gt; &lt;!-- 100KB --&gt;</span><br><span class="line">    &lt;param name=&quot;queueSizeLimit&quot;&gt;1&lt;/param&gt;</span><br><span class="line">    &lt;result name=&quot;success&quot;&gt;/jsp/uploadfile/uploadFiles.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;    </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>下载zip文件</title>
    <url>/2020/06/02/%E4%B8%8B%E8%BD%BDzip%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="Pom依赖"><a href="#Pom依赖" class="headerlink" title="Pom依赖:"></a>Pom依赖:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ant&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ant&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">### 下载zip文件</span><br></pre></td></tr></table></figure>
<p>/**<br>     * 描述：构建并下载zip文件<br>     *<br>     * @author MaYawei<br>     * @date 2017年3月3日<br>     * @param fileList 文件list集合<br>     * @param targetName 下载目标文件名 如：xxx.zip 或 xxx<br>     * @param response 响应（utf-8）<br>     */<br>    public static void buildAndDownloadZip(List<File> fileList,String targetName, HttpServletResponse response){<br>        String zipFileStr = buildZip(fileList);<br>        File zipFile = new File(zipFileStr);<br>        downloadZip(zipFile, targetName, response);<br>        zipFile.deleteOnExit();<br>    }</p>
<pre><code>/**
 * 描述：构建zip文件
 *
 * @author MaYawei
 * @date 2017年3月3日
 * @param fileList 文件list集合
 * @return
 */
public static String buildZip(List&lt;File&gt; fileList)&#123;
    
    String tmpZipPath = System.getProperty(&quot;java.io.tmpdir&quot;) 
            + UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;)+&quot;.zip&quot;;   
    try &#123;
        if(fileList == null )&#123;
            return tmpZipPath;
        &#125;
        File tmpZipFile = new File(tmpZipPath);
        if(!tmpZipFile.getParentFile().exists())&#123;
            tmpZipFile.getParentFile().mkdirs();
        &#125;
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(tmpZipFile));
        byte[] buffer = new byte[1024*1024]; 
        for (File file : fileList) &#123;
            if(!file.exists())&#123;
                continue;
            &#125;
             FileInputStream fis = new FileInputStream(file);   
             out.putNextEntry(new ZipEntry(file.getName()));   
             out.setEncoding(&quot;utf-8&quot;);
             int len = 0;
             while ((len = fis.read(buffer)) &gt; 0) &#123;   
                 out.write(buffer, 0, len);   
             &#125;   
             out.closeEntry();   
             fis.close(); 
        &#125;
        out.close();
    &#125; catch (Exception e) &#123;   
       e.printStackTrace();   
    &#125; 
    return tmpZipPath;
&#125;

/**
 * 描述：下载zip文件
 *
 * @author MaYawei
 * @date 2017年3月3日
 * @param file zip文件地址
 * @param targetName 下载目标文件名 如：xxx.zip 或 xxx
 * @param response 
 * @return true 下载成功 false 出现异常
 */
public static boolean downloadZip(File file,String targetName, 
        HttpServletResponse response) &#123;
    try &#123;
        if(file == null || !file.exists())&#123;
            return false;
        &#125;
        if(StringUtils.isBlank(targetName))&#123;
            targetName = file.getName();
        &#125;
        if(!targetName.contains(&quot;.zip&quot;))&#123;
            targetName += &quot;.zip&quot;;
        &#125;
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file.getPath()));
        byte[] buffer = new byte[fis.available()];
        fis.read(buffer);
        fis.close();
        response.reset();
        OutputStream toClient = new BufferedOutputStream(response.getOutputStream());
        response.setContentType(&quot;application/octet-stream&quot;);
</code></pre>
<p>//response.setContentType(“application/x-download”);<br>            response.setHeader(“Content-Disposition”, “attachment;filename=” + URLEncoder.encode(targetName, “UTF-8”));<br>            toClient.write(buffer);<br>            toClient.flush();<br>            toClient.close();<br>            return true;<br>        } catch (Exception e) {<br>            e.printStackTrace();<br>            return false;<br>        }<br>    }</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>二维码QRCode</title>
    <url>/2018/01/01/%E4%BA%8C%E7%BB%B4%E7%A0%81QRCode/</url>
    <content><![CDATA[<h3 id="二维码概念"><a href="#二维码概念" class="headerlink" title="二维码概念"></a>二维码概念</h3><p>二维码是一种采用黑白相间的平面几何图形通过相应的编码算法来记录文字、图片、网址等信息的条码图片。</p>
<h3 id="二维码特点："><a href="#二维码特点：" class="headerlink" title="二维码特点："></a>二维码特点：</h3><ol>
<li>高密度编码，信息容量大  可容纳多达1850个大写字母或2710个数字或1108个字节，或500多个汉字，比普通条码信息容量约高几十倍。  </li>
<li>编码范围广  该条码可以把图片、声音、文字、签字、指纹等可以数字化的信息进行编码，用条码表示出来；可以表示多种语言文字；可表示图像数据。  </li>
<li>容错能力强，具有纠错功能  这使得二维条码因穿孔、污损等引起局部损坏时，照样可以正确得到识读，损毁面积达50%仍可恢复信息。  </li>
<li>译码可靠性高  它比普通条码译码错误率百万分之二要低得多，误码率不超过千万分之一。 </li>
<li>可引入加密措施 保密性、防伪性好。  </li>
<li>成本低，易制作，持久耐用  正因为以上这些特点，二维码现在越来越流行，应用也是越来越广</li>
</ol>
<h3 id="生成、解析二维码"><a href="#生成、解析二维码" class="headerlink" title="生成、解析二维码"></a>生成、解析二维码</h3><p>引入：zxing的核心库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="实现一："><a href="#实现一：" class="headerlink" title="实现一："></a>实现一：</h4><p>MatrixTools.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.matrix;</span><br><span class="line"></span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line"></span><br><span class="line">public class MatrixTools &#123;</span><br><span class="line"></span><br><span class="line">	private static final int BLACK = 0xFF000000;</span><br><span class="line">	private static final int WHITE = 0xFFFFFFFF;</span><br><span class="line"></span><br><span class="line">	private MatrixTools() &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static BufferedImage toBufferedImage(BitMatrix matrix) &#123;</span><br><span class="line">		int width = matrix.getWidth();</span><br><span class="line">		int height = matrix.getHeight();</span><br><span class="line">		BufferedImage image = new BufferedImage(width, height,</span><br><span class="line">				BufferedImage.TYPE_INT_RGB);</span><br><span class="line">		for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">			for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">				image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return image;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void writeToFile(BitMatrix matrix, String format, File file)</span><br><span class="line">			throws IOException &#123;</span><br><span class="line">		BufferedImage image = toBufferedImage(matrix);</span><br><span class="line">		if (!ImageIO.write(image, format, file)) &#123;</span><br><span class="line">			throw new IOException(&quot;Could not write an image of format &quot;</span><br><span class="line">					+ format + &quot; to &quot; + file);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void writeToStream(BitMatrix matrix, String format,</span><br><span class="line">			OutputStream stream) throws IOException &#123;</span><br><span class="line">		BufferedImage image = toBufferedImage(matrix);</span><br><span class="line">		if (!ImageIO.write(image, format, stream)) &#123;</span><br><span class="line">			throw new IOException(&quot;Could not write an image of format &quot;</span><br><span class="line">					+ format);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>MatrixTest .java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.matrix;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line"></span><br><span class="line">import com.google.zxing.BarcodeFormat;</span><br><span class="line">import com.google.zxing.EncodeHintType;</span><br><span class="line">import com.google.zxing.MultiFormatWriter;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;all&quot;)</span><br><span class="line">public class MatrixTest &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		 String text = &quot;http://www.baidu.com&quot;;  </span><br><span class="line">         int width = 300;  </span><br><span class="line">         int height = 300;  </span><br><span class="line">         //二维码的图片格式  </span><br><span class="line">         String format = &quot;gif&quot;;  </span><br><span class="line">        </span><br><span class="line">		Hashtable hints = new Hashtable();  </span><br><span class="line">         //内容所使用编码  </span><br><span class="line">         hints.put(EncodeHintType.CHARACTER_SET, &quot;utf-8&quot;);  </span><br><span class="line">         BitMatrix bitMatrix = new MultiFormatWriter().encode(text,  </span><br><span class="line">                 BarcodeFormat.QR_CODE, width, height, hints);  </span><br><span class="line">         //生成二维码  </span><br><span class="line">         File outputFile = new File(&quot;d:&quot;+File.separator+&quot;new.gif&quot;);  </span><br><span class="line">         MatrixTools.writeToFile(bitMatrix, format, outputFile); </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现二："><a href="#实现二：" class="headerlink" title="实现二："></a>实现二：</h4><p>ZxingCodeUtils.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.code;</span><br><span class="line"> </span><br><span class="line">import java.awt.BasicStroke;</span><br><span class="line">import java.awt.Graphics;</span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.Shape;</span><br><span class="line">import java.awt.geom.RoundRectangle2D;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Random;</span><br><span class="line"> </span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line"> </span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line"> </span><br><span class="line">import com.google.zxing.BarcodeFormat;</span><br><span class="line">import com.google.zxing.BinaryBitmap;</span><br><span class="line">import com.google.zxing.DecodeHintType;</span><br><span class="line">import com.google.zxing.EncodeHintType;</span><br><span class="line">import com.google.zxing.MultiFormatReader;</span><br><span class="line">import com.google.zxing.MultiFormatWriter;</span><br><span class="line">import com.google.zxing.Result;</span><br><span class="line">import com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line">import com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.common.HybridBinarizer;</span><br><span class="line">import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"> </span><br><span class="line">public class ZxingCodeUtils &#123;</span><br><span class="line"> </span><br><span class="line">    private static final String CHARSET = &quot;utf-8&quot;;</span><br><span class="line">    private static final String FORMAT_NAME = &quot;JPG&quot;;</span><br><span class="line">    // 二维码尺寸</span><br><span class="line">    private static final int QRCODE_SIZE = 300;</span><br><span class="line">    // LOGO宽度</span><br><span class="line">    private static final int WIDTH = 60;</span><br><span class="line">    // LOGO高度</span><br><span class="line">    private static final int HEIGHT = 60;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 创建二维码的核心代码</span><br><span class="line">     *</span><br><span class="line">     * @param content</span><br><span class="line">     *            信息内容</span><br><span class="line">     * @param imgPath</span><br><span class="line">     *            logo路径</span><br><span class="line">     * @param needCompress</span><br><span class="line">     *            是否压缩</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private static BufferedImage createImage(String content, String imgPath,</span><br><span class="line">            boolean needCompress) throws Exception &#123;</span><br><span class="line">        Hashtable&lt;EncodeHintType, Object&gt; hints = new Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, 1);</span><br><span class="line">        BitMatrix bitMatrix = new MultiFormatWriter().encode(content,</span><br><span class="line">                BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE, hints);</span><br><span class="line">        int width = bitMatrix.getWidth();</span><br><span class="line">        int height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = new BufferedImage(width, height,</span><br><span class="line">                BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">            for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000</span><br><span class="line">                        : 0xFFFFFFFF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (imgPath == null || &quot;&quot;.equals(imgPath)) &#123;</span><br><span class="line">            return image;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插入图片</span><br><span class="line">        ZxingCodeUtils.insertImage(image, imgPath, needCompress);</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 镶嵌logo</span><br><span class="line">     *</span><br><span class="line">     * @param source</span><br><span class="line">     * @param imgPath</span><br><span class="line">     *            logo路径</span><br><span class="line">     * @param needCompress</span><br><span class="line">     *            是否压缩</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private static void insertImage(BufferedImage source, String imgPath,</span><br><span class="line">            boolean needCompress) throws Exception &#123;</span><br><span class="line">        File file = new File(imgPath);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            System.err.println(imgPath + &quot;---该文件不存在！\n&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(new File(imgPath));</span><br><span class="line">        int width = src.getWidth(null);</span><br><span class="line">        int height = src.getHeight(null);</span><br><span class="line">        if (needCompress) &#123; // 压缩LOGO</span><br><span class="line">            if (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            if (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height,</span><br><span class="line">                    Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = new BufferedImage(width, height,</span><br><span class="line">                    BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, 0, 0, null); // 绘制缩小后的图</span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插入LOGO</span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        int x = (QRCODE_SIZE - width) / 2;</span><br><span class="line">        int y = (QRCODE_SIZE - height) / 2;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, null);</span><br><span class="line">        Shape shape = new RoundRectangle2D.Float(x, y, width, width, 6, 6);</span><br><span class="line">        graph.setStroke(new BasicStroke(3f));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 生成二维码</span><br><span class="line">     *</span><br><span class="line">     * @param content</span><br><span class="line">     *            信息内容</span><br><span class="line">     * @param imgPath</span><br><span class="line">     *            logo路径</span><br><span class="line">     * @param destPath</span><br><span class="line">     *            目标路径</span><br><span class="line">     * @param filename</span><br><span class="line">     *            文件名称（不带后缀）</span><br><span class="line">     * @param needCompress</span><br><span class="line">     *            是否压缩</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public static String encode(String content, String imgPath,</span><br><span class="line">            String destPath, String filename, boolean needCompress)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        BufferedImage image = ZxingCodeUtils.createImage(content, imgPath,</span><br><span class="line">                needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line"> </span><br><span class="line">        if (StringUtils.isNoneBlank(filename)) &#123;</span><br><span class="line">            filename = filename.replace(&quot;.&quot;, &quot;_&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            filename = new Random().nextInt(99999999) + &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        String file = filename + &quot;.&quot; + FORMAT_NAME.toLowerCase();</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, new File(destPath + File.separator</span><br><span class="line">                + file));</span><br><span class="line">        return destPath + File.separator + file;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 创建多级文件夹</span><br><span class="line">     *</span><br><span class="line">     * @param destPath</span><br><span class="line">     */</span><br><span class="line">    public static void mkdirs(String destPath) &#123;</span><br><span class="line">        File file = new File(destPath);</span><br><span class="line">        if (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 不要宿编码</span><br><span class="line">     *</span><br><span class="line">     * @param content</span><br><span class="line">     *            信息内容</span><br><span class="line">     * @param imgPath</span><br><span class="line">     *            logo路径</span><br><span class="line">     * @param destPath</span><br><span class="line">     *            目标路径</span><br><span class="line">     * @param filename</span><br><span class="line">     *            二维码图片名称（不带后缀）</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void encode(String content, String imgPath, String destPath,</span><br><span class="line">            String filename) throws Exception &#123;</span><br><span class="line">        ZxingCodeUtils.encode(content, imgPath, destPath, filename, false);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 无嵌图编码</span><br><span class="line">     *</span><br><span class="line">     * @param content</span><br><span class="line">     *            信息内容</span><br><span class="line">     * @param destPath</span><br><span class="line">     *            目标路径</span><br><span class="line">    * @param filename</span><br><span class="line">     *            二维码图片名称（不带后缀）</span><br><span class="line">     * @param</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void encode(String content, String destPath,String filename) throws Exception &#123;</span><br><span class="line">        ZxingCodeUtils.encode(content, null, destPath, filename,false);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 编码</span><br><span class="line">     *</span><br><span class="line">     * @param content</span><br><span class="line">     *            信息内容</span><br><span class="line">     * @param imgPath</span><br><span class="line">     *            logo路径</span><br><span class="line">     * @param output</span><br><span class="line">     *            输出流</span><br><span class="line">     * @param needCompress</span><br><span class="line">     *            是否压缩</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void encode(String content, String imgPath,</span><br><span class="line">            OutputStream output, boolean needCompress) throws Exception &#123;</span><br><span class="line">        BufferedImage image = ZxingCodeUtils.createImage(content, imgPath,</span><br><span class="line">                needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 无嵌图编码</span><br><span class="line">     *</span><br><span class="line">     * @param content</span><br><span class="line">     *            信息内容</span><br><span class="line">     * @param output</span><br><span class="line">     *            输出流</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void encode(String content, OutputStream output)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        ZxingCodeUtils.encode(content, null, output, false);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 解析二维码</span><br><span class="line">     *</span><br><span class="line">     * @param file</span><br><span class="line">     *            二维码文件</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String decode(File file) throws Exception &#123;</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        image = ImageIO.read(file);</span><br><span class="line">        if (image == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImageLuminanceSource source = new BufferedImageLuminanceSource(</span><br><span class="line">                image);</span><br><span class="line">        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line">        Result result;</span><br><span class="line">        Hashtable&lt;DecodeHintType, Object&gt; hints = new Hashtable&lt;DecodeHintType, Object&gt;();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        result = new MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        String resultStr = result.getText();</span><br><span class="line">        return resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 解析二维码</span><br><span class="line">     *</span><br><span class="line">     * @param path</span><br><span class="line">     *            二维码路径</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String decode(String path) throws Exception &#123;</span><br><span class="line">        return ZxingCodeUtils.decode(new File(path));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 生成二维码</span><br><span class="line">     *</span><br><span class="line">     * @param contents</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param imgPath</span><br><span class="line">     */</span><br><span class="line">    public void encodeFor2D(String contents, int width, int height,</span><br><span class="line">            String imgPath, String imgType) &#123;</span><br><span class="line">        Map&lt;EncodeHintType, Object&gt; hints = new Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class="line">        // 指定纠错等级</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);</span><br><span class="line">        // 指定编码格式</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        try &#123;</span><br><span class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(contents,</span><br><span class="line">                    BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">            MatrixToImageWriter.writeToStream(bitMatrix, imgType,</span><br><span class="line">                    new FileOutputStream(imgPath));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String text = &quot;http://www.baidu.com&quot;;</span><br><span class="line">        String path = ZxingCodeUtils</span><br><span class="line">                .encode(text, &quot;e:/xiaohei.png&quot;, &quot;e:/&quot;, &quot;kkkk&quot;,true);</span><br><span class="line">        String decode = decode(path);</span><br><span class="line">        System.err.println(decode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>BufferedImageLuminanceSource.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mhiwyf.test.code;</span><br><span class="line"> </span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.geom.AffineTransform;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line"> </span><br><span class="line">import com.google.zxing.LuminanceSource;</span><br><span class="line"> </span><br><span class="line">public class BufferedImageLuminanceSource extends LuminanceSource &#123;</span><br><span class="line">    private final BufferedImage image;</span><br><span class="line">    private final int left;</span><br><span class="line">    private final int top;</span><br><span class="line"> </span><br><span class="line">    public BufferedImageLuminanceSource(BufferedImage image) &#123;</span><br><span class="line">        this(image, 0, 0, image.getWidth(), image.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public BufferedImageLuminanceSource(BufferedImage image, int left,</span><br><span class="line">            int top, int width, int height) &#123;</span><br><span class="line">        super(width, height);</span><br><span class="line"> </span><br><span class="line">        int sourceWidth = image.getWidth();</span><br><span class="line">        int sourceHeight = image.getHeight();</span><br><span class="line">        if (left + width &gt; sourceWidth || top + height &gt; sourceHeight) &#123;</span><br><span class="line">            throw new IllegalArgumentException(</span><br><span class="line">                    &quot;Crop rectangle does not fit within image data.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        for (int y = top; y &lt; top + height; y++) &#123;</span><br><span class="line">            for (int x = left; x &lt; left + width; x++) &#123;</span><br><span class="line">                if ((image.getRGB(x, y) &amp; 0xFF000000) == 0) &#123;</span><br><span class="line">                    image.setRGB(x, y, 0xFFFFFFFF); // = white</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        this.image = new BufferedImage(sourceWidth, sourceHeight,</span><br><span class="line">                BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        this.image.getGraphics().drawImage(image, 0, 0, null);</span><br><span class="line">        this.left = left;</span><br><span class="line">        this.top = top;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    public byte[] getRow(int y, byte[] row) &#123;</span><br><span class="line">        if (y &lt; 0 || y &gt;= getHeight()) &#123;</span><br><span class="line">            throw new IllegalArgumentException(</span><br><span class="line">                    &quot;Requested row is outside the image: &quot; + y);</span><br><span class="line">        &#125;</span><br><span class="line">        int width = getWidth();</span><br><span class="line">        if (row == null || row.length &lt; width) &#123;</span><br><span class="line">            row = new byte[width];</span><br><span class="line">        &#125;</span><br><span class="line">        image.getRaster().getDataElements(left, top + y, width, 1, row);</span><br><span class="line">        return row;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    public byte[] getMatrix() &#123;</span><br><span class="line">        int width = getWidth();</span><br><span class="line">        int height = getHeight();</span><br><span class="line">        int area = width * height;</span><br><span class="line">        byte[] matrix = new byte[area];</span><br><span class="line">        image.getRaster().getDataElements(left, top, width, height, matrix);</span><br><span class="line">        return matrix;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    public boolean isCropSupported() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    public LuminanceSource crop(int left, int top, int width, int height) &#123;</span><br><span class="line">        return new BufferedImageLuminanceSource(image, this.left + left,</span><br><span class="line">                this.top + top, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    public boolean isRotateSupported() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    public LuminanceSource rotateCounterClockwise() &#123;</span><br><span class="line">        int sourceWidth = image.getWidth();</span><br><span class="line">        int sourceHeight = image.getHeight();</span><br><span class="line">        AffineTransform transform = new AffineTransform(0.0, -1.0, 1.0,</span><br><span class="line">                0.0, 0.0, sourceWidth);</span><br><span class="line">        BufferedImage rotatedImage = new BufferedImage(sourceHeight,</span><br><span class="line">                sourceWidth, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        Graphics2D g = rotatedImage.createGraphics();</span><br><span class="line">        g.drawImage(image, transform, null);</span><br><span class="line">        g.dispose();</span><br><span class="line">        int width = getWidth();</span><br><span class="line">        return new BufferedImageLuminanceSource(rotatedImage, top,</span><br><span class="line">                sourceWidth - (left + width), getHeight(), width);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取二维码base64"><a href="#获取二维码base64" class="headerlink" title="获取二维码base64"></a>获取二维码base64</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 描述：获取二维码base64</span><br><span class="line">    * @param qrCodeContent</span><br><span class="line">    * @return</span><br><span class="line">    * @throws WriterException</span><br><span class="line">    * @throws IOException</span><br><span class="line">    * @throws BadElementException</span><br><span class="line">    */</span><br><span class="line">   public static String doGetQrcodeImgBase64(String qrCodeContent) throws Exception&#123;</span><br><span class="line">       String tempdir = System.getProperty(&quot;java.io.tmpdir&quot;);</span><br><span class="line">       new File(tempdir).mkdirs();</span><br><span class="line">       String dir = tempdir + File.separator + UUID.randomUUID().toString();</span><br><span class="line">       new File(dir).mkdirs();</span><br><span class="line">       MultiFormatWriter multiFormatWriter = new MultiFormatWriter();</span><br><span class="line">       Map hints = new HashMap();</span><br><span class="line">       hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">       hints.put(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);</span><br><span class="line">       hints.put(EncodeHintType.MARGIN,0);</span><br><span class="line">       BitMatrix bitMatrix = multiFormatWriter.encode(qrCodeContent,BarcodeFormat.QR_CODE, 270, 270, hints);</span><br><span class="line">       File file1 = new File(dir, UUID.randomUUID() + &quot;.png&quot;);</span><br><span class="line">       MatrixToImageWriter.writeToFile(bitMatrix, &quot;png&quot;, file1);</span><br><span class="line">       String imgBase64 = getImageBinary(file1);</span><br><span class="line">       FileUtils.deleteDirectory(new File(dir));</span><br><span class="line">       return imgBase64;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 描述：图片对象转成字符串</span><br><span class="line">    * @param file</span><br><span class="line">    * @return</span><br><span class="line">    * @throws Exception</span><br><span class="line">    */</span><br><span class="line">   public static String getImageBinary(File file) throws Exception &#123;</span><br><span class="line">       BufferedImage bi = ImageIO.read(file);</span><br><span class="line">       ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">       ImageIO.write(bi, &quot;png&quot;, baos);</span><br><span class="line">       byte[] bytes = baos.toByteArray();</span><br><span class="line">       return Base64.toBase64String(bytes);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Qrcode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker安装Jenkins</title>
    <url>/2021/10/02/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Jenkins/</url>
    <content><![CDATA[<h3 id="Jenkins-简介"><a href="#Jenkins-简介" class="headerlink" title="Jenkins 简介"></a>Jenkins 简介</h3><blockquote>
<p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
</blockquote>
<h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><ol>
<li><p>新建Dockerfile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/jenkins &amp;&amp; <span class="built_in">cd</span> /opt/jenkins &amp;&amp; vim Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile 内容</span></span><br><span class="line">FROM jenkins</span><br><span class="line"></span><br><span class="line">USER root</span><br><span class="line"><span class="comment">#清除基础镜像设置的源，切换成aliyun的jessie源;使用腾讯云需要将 aliyun 改为 tencentyun</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span> &gt; /etc/apt/sources.list.d/jessie-backports.list \</span><br><span class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian jessie main contrib non-free&quot;</span> &gt; /etc/apt/sources.list \</span><br><span class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian jessie-updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list \</span><br><span class="line">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free&quot;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新源并安装缺少的包</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y libltdl7 vim sudo &amp;&amp; apt-get update</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;jenkins ALL=NOPASSWD: ALL&quot;</span> &gt;&gt; /etc/sudoers</span><br><span class="line"></span><br><span class="line">ARG dockerGid=999</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;docker:x:<span class="variable">$&#123;dockerGid&#125;</span>:jenkins&quot;</span> &gt;&gt; /etc/group </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker-compose 因为构建环境需要</span></span><br><span class="line">RUN curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br><span class="line">RUN <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">USER jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>构建jenkins镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/jenkins &amp;&amp; docker build -t jenkins-mine .</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动jenkins</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在启动Jenkins时，需要先创建一个Jenkins的配置目录，并且挂载到docker 里的Jenkins目录下</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/jenkins_home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改目录权限（很重要！）</span></span><br><span class="line"><span class="built_in">chown</span> -R 1000:1000 /var/jenkins_home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器并启动</span></span><br><span class="line">docker run --memory 1.5G --name jenkins \</span><br><span class="line">    -p 8080:8080 -p 50000:50000 -u root -d \</span><br><span class="line">    --<span class="built_in">env</span> JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx512m  -XX:MaxNewSize=256m&quot;</span> \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v $(<span class="built_in">which</span> docker):/bin/docker \</span><br><span class="line">    -v /var/jenkins_home:/var/jenkins_home \</span><br><span class="line">    -d jenkins-mine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps | grep jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h3><blockquote>
<p>访问http://<sever_ip>:8080, 访问Jenkins， 出现Unlock Jenkins 页面。如果无法访问请检查系统防火墙、云的安全组设置。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-01.png"></p>
</blockquote>
<blockquote>
<p>进入容器</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it jenkins bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看密码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<blockquote>
<p>复制输出的内容，粘贴到Administrator password，输入 exit 退出容器</p>
</blockquote>
<blockquote>
<p>此时进行下一步你会看到此界面，点击 Install suggested plugins<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-02.png"></p>
</blockquote>
<blockquote>
<p>等待安装完成<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-03.png"></p>
</blockquote>
<blockquote>
<p>如果有插件安装失败，安装结束之后会有”Retry”重试选项，点击重试即可。</p>
</blockquote>
<blockquote>
<p>进行下一步<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2018/jenkins-04.png"></p>
</blockquote>
<blockquote>
<p>进入主界面后如果看到右上角有错误的提示信息，那么请把你的Jenkins升级到最新版本，然后更新一下插件。</p>
</blockquote>
<blockquote>
<p>如果更新之后出现协议警告,可以直接点击警告中的Protocol Configuration，或者点击系统管理—&gt;全局安全配置—&gt;Agents—&gt;Agent protocols</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-05.png"></p>
<h3 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h3><blockquote>
<p>【系统管理】-&gt; 【插件管理】-&gt; 【高级】-&gt; 【升级站点】</p>
</blockquote>
<blockquote>
<p>更换地址：<a href="http://mirror.xmission.com/jenkins/updates/current/update-center.json">http://mirror.xmission.com/jenkins/updates/current/update-center.json</a><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-06.png"></p>
</blockquote>
<h3 id="添加远程主机"><a href="#添加远程主机" class="headerlink" title="添加远程主机"></a>添加远程主机</h3><blockquote>
<p>添加凭证， 输入远程主机的账号密码，ID 用UUID 即可。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-07.png"></p>
</blockquote>
<blockquote>
<p>凭证-&gt;系统-&gt;全局凭证-&gt;添加凭证<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-08.png"></p>
</blockquote>
<blockquote>
<p>系统管理-&gt;系统设置-&gt;SSH remote host<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-09.png"></p>
</blockquote>
<h3 id="创建django测试项目"><a href="#创建django测试项目" class="headerlink" title="创建django测试项目"></a>创建django测试项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建应用</span></span><br><span class="line">django-admin startproject mtest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app</span></span><br><span class="line">python manage.py startapp mayw</span><br><span class="line"></span><br><span class="line"><span class="comment"># settings中添加app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;mayw&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;hello django world !&lt;h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改路由urls.py</span></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">from mayw import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(r<span class="string">&#x27;^$&#x27;</span>, views.index)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到码云</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Jenkins-创建任务"><a href="#Jenkins-创建任务" class="headerlink" title="Jenkins 创建任务"></a>Jenkins 创建任务</h3><blockquote>
<p>1<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-11.png"><br>2<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-10.png"><br>3 General<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-12.png"><br>4 源码管理（Source Code Management）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-13.png"><br>5 添加ssh私钥</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;ma.yawei@h3c.com&quot;</span> -f ~/.ssh/id-rsa-gitee</span><br><span class="line">git config --global user.name <span class="string">&quot;mayw&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;ma.yawei@h3c.com&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-14.png"></p>
<blockquote>
<p>6 构建触发器（Build Triggers）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-15.png"><br>H/2 * * * * 2分钟从git上pull一次代码，若代码有变化就构建环境</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * *  </span><br><span class="line">在master-build中创建触发器,设定1分钟执行一次</span><br><span class="line">poll SCM(日常表 可以根据时间来判断)</span><br><span class="line">H/2 * * * *    (2分钟检查一下版本库  如果有更新就不触发  如果没有更新就不触发)</span><br><span class="line">注：Schedule的配置规则是有5个空格隔开的字符组成，从左到右分别代表：分 时 天 月 年。*代表所有，0 20 * * * 表示&quot;在任何年任何月任何天20点0分&quot;进行构建</span><br></pre></td></tr></table></figure>

<blockquote>
<p>7 构建（Build）<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-16.png"></p>
</blockquote>
<blockquote>
<p>8 构建后操作</p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-17.png"></p>
<h3 id="创建内网部署任务"><a href="#创建内网部署任务" class="headerlink" title="创建内网部署任务"></a>创建内网部署任务</h3><blockquote>
<p>注意：<br>BUILD_ID=DONTKILLME : 在jenkins里面在后台运行的程序都会被jenkins自动杀死 所以需要加上BUILDID这个参数。加了这个参数你的程序就不会被杀。<br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-18.png"></p>
</blockquote>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-19.png"></p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-20.png"></p>
<h3 id="创建外网部署任务"><a href="#创建外网部署任务" class="headerlink" title="创建外网部署任务"></a>创建外网部署任务</h3><p><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-21.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-22.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/ydnote/2019/jenkins-23.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 远程主机要做的事情：</span></span><br><span class="line"><span class="comment"># 安装django</span></span><br><span class="line"><span class="comment"># 创建一个目录把代码版本库拉取到本地</span></span><br><span class="line"><span class="comment"># 写脚本来运行代码 </span></span><br><span class="line"><span class="comment"># 脚本内容</span></span><br><span class="line"><span class="comment"># xxx.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">sh start.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># start.sh：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /data/git-test</span><br><span class="line">git pull</span><br><span class="line"><span class="built_in">cd</span> /data/git-test/test11</span><br><span class="line"><span class="built_in">nohup</span> python manage.py runserver 0.0.0.0:8000 &gt; /dev/null   2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JMX监控Tomcat</title>
    <url>/2020/04/02/%E4%BD%BF%E7%94%A8JMX%E7%9B%91%E6%8E%A7Tomcat/</url>
    <content><![CDATA[<h3 id="配置Tomcat的JMX远程"><a href="#配置Tomcat的JMX远程" class="headerlink" title="配置Tomcat的JMX远程"></a>配置Tomcat的JMX远程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 不要鉴权</span><br><span class="line">先修改Tomcat的启动脚本，windows下为bin/catalina.bat，linux下为catalina.sh，</span><br><span class="line">在# ----- Execute The Requested Command -----------------下面添加：</span><br><span class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.137.124 -Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">-Djava.rmi.server.hostname=192.168.137.124 设置jmx的IP（不设置连不上）</span><br><span class="line">-Dcom.sun.management.jmxremote.port=8999 设置tomat注册jmx的端口号</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false false表示不需要鉴权</span><br><span class="line"> </span><br><span class="line">② 需要鉴权</span><br><span class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=192.168.137.124 -Dcom.sun.management.jmxremote.port=8999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.password.file=$&#123;CATALINA_HOME&#125;/conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=$&#123;CATALINA_HOME&#125;/conf/jmxremote.access&quot;</span><br><span class="line"></span><br><span class="line">③ 然后复制并修改授权文件 </span><br><span class="line">$JAVA_HOME/jre/lib/management下有jmxremote.access和jmxremote.password的模板文件，将两个文件复制到$CATALINA_BASE/conf目录下 </span><br><span class="line">◆ 修改$CATALINA_BASE/conf/jmxremote.access 添加内容： </span><br><span class="line">     monitorRole readonly </span><br><span class="line">     controlRole readwrite </span><br><span class="line">◆ 修改$CATALINA_BASE/conf/jmxremote.password 添加内容： </span><br><span class="line">     monitorRole testadmin</span><br><span class="line">     controlRole testadmin</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="http://sharpspeed.iteye.com/blog/2009770">http://sharpspeed.iteye.com/blog/2009770</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pip安装自己的程序（上传python程序到PyPi）</title>
    <url>/2021/10/02/%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%88%E4%B8%8A%E4%BC%A0python%E7%A8%8B%E5%BA%8F%E5%88%B0PyPi%EF%BC%89/</url>
    <content><![CDATA[<h3 id="使用pip安装自己的程序（上传python程序到PyPi）"><a href="#使用pip安装自己的程序（上传python程序到PyPi）" class="headerlink" title="使用pip安装自己的程序（上传python程序到PyPi）"></a>使用pip安装自己的程序（上传python程序到PyPi）</h3><h4 id="1-注册Pypi账号"><a href="#1-注册Pypi账号" class="headerlink" title="1. 注册Pypi账号"></a>1. 注册Pypi账号</h4><blockquote>
<p>注册：<a href="https://pypi.org/account/register/">https://pypi.org/account/register/</a></p>
</blockquote>
<h4 id="2-安装-setuotools-wheel-twine"><a href="#2-安装-setuotools-wheel-twine" class="headerlink" title="2. 安装 setuotools, wheel, twine"></a>2. 安装 setuotools, wheel, twine</h4><blockquote>
<p>setuotools 和 wheel 用来构建项目，一般都会随 Python 安装。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已安装的包</span></span><br><span class="line">pip list</span><br><span class="line"><span class="comment"># 若未安装 setuotools、wheel</span></span><br><span class="line">python -m pip install -i https://pypi.douban.com/simple setuptools wheel</span><br></pre></td></tr></table></figure>

<blockquote>
<p>twine 用来上传自己的包到PyPi</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 twine</span><br><span class="line">python -m pip install -i https://pypi.douban.com/simple twine</span><br></pre></td></tr></table></figure>

<h4 id="3-构建项目"><a href="#3-构建项目" class="headerlink" title="3. 构建项目"></a>3. 构建项目</h4><ul>
<li><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xlwt-fixed\</span><br><span class="line">├─ .gitignore</span><br><span class="line">│  LICENSE</span><br><span class="line">│  README.md</span><br><span class="line">│  requirements.txt</span><br><span class="line">│  setup.cfg</span><br><span class="line">│  setup.py</span><br><span class="line">│</span><br><span class="line">├─xlwt</span><br><span class="line">│      Bitmap.py</span><br><span class="line">│      Workbook.py</span><br><span class="line">│      Worksheet.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>setup.py文件</p>
<blockquote>
<p>setup.py 是setuptools的构建脚本。包含了自己的包（例如名称和版本）以及要包含的代码文件。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages, setup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;README.md&#x27;</span>), <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    LONG_DESCRIPTION = fh.read()</span><br><span class="line"></span><br><span class="line">DESCRIPTION = (</span><br><span class="line">    <span class="string">&#x27;fix bitmap base on xlwt 1.3.0&#x27;</span></span><br><span class="line">)</span><br><span class="line">CLASSIFIERS = [</span><br><span class="line">    <span class="string">&#x27;Operating System :: OS Independent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;License :: OSI Approved :: TIM License&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Development Status :: 5 - Production/Stable&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Intended Audience :: Developers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Software Development :: Libraries :: Python Modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Office/Business :: Financial :: Spreadsheet&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Database&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 2.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: 3.7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Programming Language :: Python :: Implementation :: CPython&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">KEYWORDS = (</span><br><span class="line">    <span class="string">&#x27;xls excel spreadsheet workbook worksheet pyExcelerator&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;xlwt-fixed&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    maintainer=<span class="string">&#x27;Murray&#x27;</span>,</span><br><span class="line">    maintainer_email=<span class="string">&#x27;1063967330@qq.com&#x27;</span>,</span><br><span class="line">    url=<span class="string">&#x27;https://github.com/murray88/xlwt-fixed/&#x27;</span>,</span><br><span class="line">    download_url=<span class="string">&#x27;https://github.com/murray88/xlwt-fixed/&#x27;</span>,</span><br><span class="line">    description=DESCRIPTION,</span><br><span class="line">    long_description=LONG_DESCRIPTION,</span><br><span class="line">    license=<span class="string">&#x27;MIT&#x27;</span>,</span><br><span class="line">    platforms=<span class="string">&#x27;Platform Independent&#x27;</span>,</span><br><span class="line">    keywords=KEYWORDS,</span><br><span class="line">    classifiers=CLASSIFIERS,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    zip_safe=<span class="literal">False</span>,</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*&quot;</span>,</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&#x27;six&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>重要参数说明</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>包名，发布之前请上 PyPi 搜索一下有没有同名的包，防止冲突。</td>
</tr>
<tr>
<td>version</td>
<td>版本号，更新时会寻找比当前版本更高的版本号，不要乱写。</td>
</tr>
<tr>
<td>description</td>
<td>短描述</td>
</tr>
<tr>
<td>long_description</td>
<td>长描述，详细的介绍。</td>
</tr>
<tr>
<td>url</td>
<td>项目的地址，一般会填 github 地址。</td>
</tr>
<tr>
<td>packages</td>
<td>包列表，setuptools.find_packages() 可以自动找到目录下所有的包。</td>
</tr>
<tr>
<td>install_requires</td>
<td>该包的所需的依赖。</td>
</tr>
<tr>
<td>classifiers</td>
<td>分类，根据 <a href="https://pypi.org/classifiers/">PyPi Classifiers</a> 填写，至少要包含所用的 Python 版本。</td>
</tr>
</tbody></table>
<ul>
<li>setup.cfg文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[isort]</span><br><span class="line">combine_as_imports = true</span><br><span class="line">default_section = THIRDPARTY</span><br><span class="line">include_trailing_comma = true</span><br><span class="line">known_first_party = xlwt</span><br><span class="line">multi_line_output = 5</span><br><span class="line">not_skip = __init__.py</span><br><span class="line"></span><br><span class="line">[metadata]</span><br><span class="line">license_file = LICENSE</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-LICENSE"><a href="#4-LICENSE" class="headerlink" title="4. LICENSE"></a>4. LICENSE</h4><blockquote>
<p>上传到 PyPi 的每个包都要包含许可证，选择<a href="https://choosealicense.com/">许可证</a>，打开 LICENSE 并输入许可证文本。</p>
</blockquote>
<h4 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5. 构建项目"></a>5. 构建项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup.py 所在的目录进行构建</span></span><br><span class="line"><span class="comment"># 1. 检查一下 setup.py 文件是否有错误，没有错误才能进行构建。</span></span><br><span class="line">python setup.py check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构建，若无错误，则会生成build、dist、*.egg-info等目录，其中重要的是 dist 目录。</span></span><br><span class="line">python setup.py sdist bdist_wheel</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-上传"><a href="#6-上传" class="headerlink" title="6. 上传"></a>6. 上传</h4><ul>
<li><p>方式1（指令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">twine upload --repository-url https://upload.pypi.org/legacy/ dist/*</span><br><span class="line"># 根据提示输入在 PyPi 注册的账号和密码就可以上传了</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式2（配置文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建.pypric文件</span><br><span class="line"># window 下，将.pypric放在 C:\\User\用户名\ 下， 用 cmd 命令创建。</span><br><span class="line">echo a 2&gt;.pypric</span><br><span class="line"></span><br><span class="line"># linux 下，将.pypric 放在 ~/ 也就是 %HOME% 目录下。</span><br><span class="line"># .pypric内容</span><br><span class="line">[distutils]</span><br><span class="line">index-servers=pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">repository = https://upload.pypi.org/legacy/</span><br><span class="line">username: [username]</span><br><span class="line">password: [password]</span><br><span class="line"></span><br><span class="line"># 上传</span><br><span class="line">twine upload dist/*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h3><h4 id="1-删除dist旧版本"><a href="#1-删除dist旧版本" class="headerlink" title="1. 删除dist旧版本"></a>1. 删除dist旧版本</h4><h4 id="2-修改版本号"><a href="#2-修改版本号" class="headerlink" title="2. 修改版本号"></a>2. 修改版本号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim setup.py</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">sed -i <span class="string">&quot;s/version=&#x27;[0-9\.]*&#x27;/version=&#x27;1.0.2&#x27;/g&quot;</span> setup.py</span><br></pre></td></tr></table></figure>

<h4 id="3-打包新版本build"><a href="#3-打包新版本build" class="headerlink" title="3. 打包新版本build"></a>3. 打包新版本build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py check</span><br><span class="line">python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure>

<h4 id="4-上传新版本"><a href="#4-上传新版本" class="headerlink" title="4. 上传新版本"></a>4. 上传新版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">twine upload --repository-url https://upload.pypi.org/legacy/ dist/*</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python操作InfluxDB</title>
    <url>/2021/04/01/%E4%BD%BF%E7%94%A8python%E6%93%8D%E4%BD%9CInfluxDB/</url>
    <content><![CDATA[<h3 id="使用python操作InfluxDB"><a href="#使用python操作InfluxDB" class="headerlink" title="使用python操作InfluxDB"></a>使用python操作InfluxDB</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境： CentOS6.5_x64       </span><br><span class="line">InfluxDB版本：1.1.0    </span><br><span class="line">Python版本 ： 2.6              </span><br></pre></td></tr></table></figure>

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>启动服务器<br>执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service influxdb start</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# service influxdb start</span><br><span class="line">Starting influxdb...</span><br><span class="line">influxdb process was started [ OK ]</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装influxdb-python<br>github地址： <a href="https://github.com/influxdata/influxdb-python">https://github.com/influxdata/influxdb-python</a>                       </p>
</li>
</ul>
<p>安装pip ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install python-pip</span><br></pre></td></tr></table></figure>

<p>安装influxdb-python ：     </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install influxdb        </span><br></pre></td></tr></table></figure>

<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>使用InfluxDBClient类操作数据库，示例如下：           </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from influxdb import InfluxDBClient</span><br><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;&#x27;) # 初始化</span><br></pre></td></tr></table></figure>

<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul>
<li><p>显示已存在的所有数据库<br>使用get_list_database函数，示例如下：      </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print client.get_list_database() # 显示所有数据库名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新数据库<br>使用create_database函数，示例如下：       </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client.create_database(&#x27;testdb&#x27;) # 创建数据库      </span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库<br>使用drop_database函数，示例如下：             </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client.drop_database(&#x27;testdb&#x27;) # 删除数据库</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>数据库操作完整示例如下：        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from influxdb import InfluxDBClient</span><br><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;&#x27;) # 初始化</span><br><span class="line">print client.get_list_database() # 显示所有数据库名称</span><br><span class="line">client.create_database(&#x27;testdb&#x27;) # 创建数据库</span><br><span class="line">print client.get_list_database() # 显示所有数据库名称</span><br><span class="line">client.drop_database(&#x27;testdb&#x27;) # 删除数据库</span><br><span class="line">print client.get_list_database() # 显示所有数据库名称</span><br></pre></td></tr></table></figure>

<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><p>InfluxDBClient中要指定连接的数据库，示例如下：      </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;testdb&#x27;) # 初始化（指定要操作的数据库）</span><br></pre></td></tr></table></figure>

<ul>
<li><p>显示指定数据库中已存在的表<br>可以通过influxql语句实现，示例如下：          </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = client.query(&#x27;show measurements;&#x27;) # 显示数据库中的表</span><br><span class="line">print(&quot;Result: &#123;0&#125;&quot;.format(result))</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新表并添加数据</p>
</li>
</ul>
<p>InfluxDB没有提供单独的建表语句，可以通过并添加数据的方式建表，示例如下：        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json_body = [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;measurement&quot;: &quot;students&quot;,</span><br><span class="line">        &quot;tags&quot;: &#123;</span><br><span class="line">            &quot;stuid&quot;: &quot;s123&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;score&quot;: 89</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;testdb&#x27;) # 初始化（指定要操作的数据库）</span><br><span class="line">client.write_points(json_body) # 写入数据，同时创建表</span><br></pre></td></tr></table></figure>

<ul>
<li>删除表<br>可以通过influxql语句实现，示例如下：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client.query(&quot;drop measurement students&quot;) # 删除表</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>数据表操作完整示例如下：        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from influxdb import InfluxDBClient</span><br><span class="line"></span><br><span class="line">json_body = [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;measurement&quot;: &quot;students&quot;,</span><br><span class="line">        &quot;tags&quot;: &#123;</span><br><span class="line">            &quot;stuid&quot;: &quot;s123&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;score&quot;: 89</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def showDBNames(client):</span><br><span class="line">        result = client.query(&#x27;show measurements;&#x27;) # 显示数据库中的表</span><br><span class="line">        print(&quot;Result: &#123;0&#125;&quot;.format(result))</span><br><span class="line"></span><br><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;testdb&#x27;) # 初始化（指定要操作的数据库）</span><br><span class="line">showDBNames(client)</span><br><span class="line">client.write_points(json_body) # 写入数据，同时创建表</span><br><span class="line">showDBNames(client)</span><br><span class="line">client.query(&quot;drop measurement students&quot;) # 删除表</span><br><span class="line">showDBNames(client)</span><br></pre></td></tr></table></figure>

<h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>InfluxDBClient中要指定连接的数据库，示例如下：      </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;testdb&#x27;) # 初始化（指定要操作的数据库）</span><br></pre></td></tr></table></figure>

<ul>
<li>添加      </li>
</ul>
<p>可以通过write_points实现，示例如下：        </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json_body = [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;measurement&quot;: &quot;students&quot;,</span><br><span class="line">        &quot;tags&quot;: &#123;</span><br><span class="line">            &quot;stuid&quot;: &quot;s123&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;score&quot;: 89</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">client.write_points(json_body) # 写入数据</span><br></pre></td></tr></table></figure>

<ul>
<li>查询</li>
</ul>
<p>可以通过influxql语句实现，示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = client.query(&#x27;select * from students;&#x27;)    </span><br><span class="line">print(&quot;Result: &#123;0&#125;&quot;.format(result))</span><br></pre></td></tr></table></figure>

<ul>
<li>更新</li>
</ul>
<p>tags 和 timestamp相同时数据会执行覆盖操作，相当于InfluxDB的更新操作。      </p>
<ul>
<li>删除</li>
</ul>
<p>使用influxql语句实现，delete语法，示例如下：       </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client.query(&#x27;delete from students;&#x27;) # 删除数据</span><br></pre></td></tr></table></figure>
<p>数据操作完整示例如下：             </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from influxdb import InfluxDBClient</span><br><span class="line"></span><br><span class="line">json_body = [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;measurement&quot;: &quot;students&quot;,</span><br><span class="line">        &quot;tags&quot;: &#123;</span><br><span class="line">            &quot;stuid&quot;: &quot;s123&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;score&quot;: 89</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def showDatas(client):</span><br><span class="line">        result = client.query(&#x27;select * from students;&#x27;)</span><br><span class="line">        print(&quot;Result: &#123;0&#125;&quot;.format(result))</span><br><span class="line"></span><br><span class="line">client = InfluxDBClient(&#x27;localhost&#x27;, 8086, &#x27;root&#x27;, &#x27;&#x27;, &#x27;testdb&#x27;) # 初始化</span><br><span class="line">client.write_points(json_body) # 写入数据</span><br><span class="line">showDatas(client)  # 查询数据</span><br><span class="line">client.query(&#x27;delete from students;&#x27;) # 删除数据</span><br><span class="line">showDatas(client)  # 查询数据</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>InfluxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>公私钥生成</title>
    <url>/2018/01/01/%E5%85%AC%E7%A7%81%E9%92%A5%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h3 id="1、字符串生成公钥对象-PublicKey"><a href="#1、字符串生成公钥对象-PublicKey" class="headerlink" title="1、字符串生成公钥对象 PublicKey"></a>1、字符串生成公钥对象 PublicKey</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 实例化公钥</span><br><span class="line">  * </span><br><span class="line">  * @return</span><br><span class="line">  */</span><br><span class="line"> private PublicKey getPubKey() &#123;</span><br><span class="line">  PublicKey publicKey = null;</span><br><span class="line">  try &#123;</span><br><span class="line">   // 自己的公钥(测试)</span><br><span class="line">    String pubKey =&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVRiDkEKXy/KBTe+UmkA+feq1zGWIgBxkgbz7aBJGb5+eMKKoiDRoEHzlGndwFKm4mQWNftuMOfNcogzYpGKSEfC7sqfBPDHsGPZixMWzL3J10zkMTWo6MDIXKKqMG1Pgeq1wENfJjcYSU/enYSZkg3rFTOaBSFId+rrPjPo7Y4wIDAQAB&quot;;</span><br><span class="line">      java.security.spec.X509EncodedKeySpec bobPubKeySpec = new java.security.spec.X509EncodedKeySpec(</span><br><span class="line">     new BASE64Decoder().decodeBuffer(pubKey));</span><br><span class="line">   // RSA对称加密算法</span><br><span class="line">   java.security.KeyFactory keyFactory;</span><br><span class="line">   keyFactory = java.security.KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">   // 取公钥匙对象</span><br><span class="line">   publicKey = keyFactory.generatePublic(bobPubKeySpec);</span><br><span class="line">  &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125; catch (InvalidKeySpecException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125; catch (IOException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  return publicKey;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、字符串生成私钥对象"><a href="#2、字符串生成私钥对象" class="headerlink" title="2、字符串生成私钥对象"></a>2、字符串生成私钥对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 实例化私钥</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private PrivateKey getPrivateKey() &#123;</span><br><span class="line"> PrivateKey privateKey = null;</span><br><span class="line"> String priKey = &quot;MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAJVGIOQQpfL8oFN75SaQD596rXMZYiAHGSBvPtoEkZvn54woqiINGgQfOUad3AUqbiZBY1+24w581yiDNikYpIR8Luyp8E8MewY9mLExbMvcnXTOQxNajowMhcoqowbU+B6rXAQ18mNxhJT96dhJmSDesVM5oFIUh36us+M+jtjjAgMBAAECgYABtnxKIabF0wBD9Pf8KUsEmXPEDlaB55LyPFSMS+Ef2NlfUlgha+UQhwsxND6CEKqS5c0uG/se/2+4l0jXz+CTYBEh+USYB3gxcMKEo5XDFOGaM2Ncbc7FAKJIkYYN2DHmr4voSM5YkVibw5Lerw0kKdYyr0Xd0kmqTok3JLiLgQJBAOGZ1ao9oqWUzCKnpuTmXre8pZLmpWPhm6S1FU0vHjI0pZh/jusc8UXSRPnx1gLsgXq0ux30j968x/DmkESwxX8CQQCpY1+2p1aX2EzYO3UoTbBUTg7lCsopVNVf41xriek7XF1YyXOwEOSokp2SDQcRoKJ2PyPc2FJ/f54pigdsW0adAkAM8JTnydc9ZhZ7WmBhOrFuGnzoux/7ZaJWxSguoCg8OvbQk2hwJd3U4mWgbHWY/1XB4wHkivWBkhRpxd+6gOUjAkBH9qscS52zZzbGiwQsOk1Wk88qKdpXku4QDeUe3vmSuZwC85tNyu+KWrfM6/H74DYFbK/MzK7H8iz80uJye5jVAkAEqEB/LwlpXljFAxTID/SLZBb+bCIoV/kvg+2145F+CSSUjEWRhG/+OH0cQfqomfg36WrvHl0g/Xw06fg31HgK&quot;;</span><br><span class="line"> PKCS8EncodedKeySpec priPKCS8;</span><br><span class="line"> try &#123;</span><br><span class="line">  priPKCS8 = new PKCS8EncodedKeySpec(</span><br><span class="line">    new BASE64Decoder().decodeBuffer(priKey));</span><br><span class="line">  KeyFactory keyf = KeyFactory.getInstance(&quot;RSA&quot;);</span><br><span class="line">  privateKey = keyf.generatePrivate(priPKCS8);</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125; catch (InvalidKeySpecException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> return privateKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>创建docker镜像</title>
    <url>/2019/08/28/%E5%88%9B%E5%BB%BAdocker%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h3 id="查看镜像详情信息"><a href="#查看镜像详情信息" class="headerlink" title="查看镜像详情信息"></a>查看镜像详情信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 镜像名 命令来查看新创建的镜像的详细信息</span><br></pre></td></tr></table></figure>

<h3 id="commit命令创建镜像"><a href="#commit命令创建镜像" class="headerlink" title="commit命令创建镜像"></a>commit命令创建镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式： docker commit [-m=&quot;提交备注信息&quot; ] [--author=&quot;作者&quot;]  容器ID 新镜像名:标签 </span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:18.04 /bin/bash</span><br><span class="line">docker commit -m=&quot;A new image&quot; --author=&quot;Murray&quot; b437ffe4d630 test/ubuntu:v1</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile创建镜像"><a href="#Dockerfile创建镜像" class="headerlink" title="Dockerfile创建镜像"></a>Dockerfile创建镜像</h3><blockquote>
<p>执行docker build命令时，Dockerfile中的所有指令都会被执行并且提交，并且在该命令成功结束后返回一个新镜像。</p>
</blockquote>
<blockquote>
<p>格式：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build [ --no-cache] -t=&quot;仓库/镜像名&quot; .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用docker history命令看到新构建的test/ubuntu:v1镜像的每一层，以及创建这些层的Dockerfile指令。Dockerfile由一行行命令语句组成，并且支持用”#”开头作为注释，一般的，Dockerfile分为四部分：基础镜像信息，维护者信息，镜像操作指令和容器启动时执行的指令。</p>
</blockquote>
<blockquote>
<p>Dockerfile指令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、FROM</span><br><span class="line">格式：FROM &lt;image&gt;或 FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">第一条指令必须为FROM指令，并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个FROM指令（每个镜像一次）</span><br><span class="line"></span><br><span class="line">2、MAINTAINET</span><br><span class="line">格式：MAINTAINET &lt;name&gt;</span><br><span class="line">指定维护者的信息</span><br><span class="line"></span><br><span class="line">3、RUN</span><br><span class="line">格式：RUN &lt;command&gt; 或 RUN [&quot;&quot;, &quot;&quot;, &quot;&quot;]</span><br><span class="line">每条指令将在当前镜像基础上执行，并提交为新的镜像。（可以用&quot;\&quot;换行）</span><br><span class="line"></span><br><span class="line">4、CMD</span><br><span class="line">格式：CMD [&quot;&quot;,&quot;&quot;,&quot;&quot;]</span><br><span class="line">指定启动容器时执行的命令，每个Dockerfile只能有一条CMD指令，如果指定了多条指令，则最后一条执行。（会被启动时指定的命令覆盖）</span><br><span class="line"></span><br><span class="line">5、EXPOSE</span><br><span class="line">格式：EXPOSE &lt;port&gt;  [ &lt;port&gt; ...]</span><br><span class="line">告诉Docker服务端暴露端口，在容器启动时需要通过 -p 做端口映射</span><br><span class="line"></span><br><span class="line">6、ENV</span><br><span class="line">格式：ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">指定环境变量，会被RUN指令使用，并在容器运行时保存</span><br><span class="line"></span><br><span class="line">7、ADD</span><br><span class="line">格式：ADD  &lt;src&gt;  &lt;dest&gt;</span><br><span class="line">复制指定的&lt;src&gt;到容器的&lt;dest&gt;中，&lt;src&gt;可以是Dockerfile所在的目录的一个相对路径；可以是URL，也可以是tar.gz（自动解压）</span><br><span class="line">格式：COPY &lt;src&gt;  &lt;dest&gt;</span><br><span class="line">复制本地主机的 &lt;src&gt; （ 为 Dockerfile 所在目录的相对路径）到容器中的 &lt;dest&gt; （当使用本地目录为源目录时，推荐使用 COPY）</span><br><span class="line"></span><br><span class="line">9、ENTRYPOINT</span><br><span class="line">格式：ENTRYPOINT [&quot;&quot;,&quot;&quot;,&quot;&quot;]</span><br><span class="line">配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。（每个 Dockerfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效）</span><br><span class="line"></span><br><span class="line">10、VOLUME</span><br><span class="line">格式：VOLUME [&quot;/mnt&quot;] </span><br><span class="line">创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等</span><br><span class="line"></span><br><span class="line">11、USER</span><br><span class="line">格式：USER daemon</span><br><span class="line">指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。</span><br><span class="line"></span><br><span class="line">12、WORKDIR</span><br><span class="line">格式：WORKDIR /path/to/workdir</span><br><span class="line">为后续的 RUN 、 CMD 、 ENTRYPOINT 指令配置工作目录。（可以使用多个 WORKDIR	指令，后续命令如果参数是相对路径， 则会基于之前命令指定的路径）</span><br><span class="line"></span><br><span class="line">13、ONBUILD</span><br><span class="line">格式：ONBUILD [INSTRUCTION]</span><br><span class="line">配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令</span><br></pre></td></tr></table></figure>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><strong>vim Dockerfile</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">MAINTAINER Murray &quot;murray@qq.com&quot;</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line">RUN echo &#x27;Hi, I am in your container&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure>

<h3 id="从新镜像启动容器"><a href="#从新镜像启动容器" class="headerlink" title="从新镜像启动容器"></a>从新镜像启动容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80 --name static_web test/ubuntu:v1 nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-d 选项，告诉Docker以分离（detached）的方式在后台运行。<br><code>nginx -g &quot;daemon off;&quot;</code> 在容器中运行的命令，这将以前台运行的方式启动Nginx，来作为我们的Web服务器。</p>
</blockquote>
<blockquote>
<p>-p 选项，控制Docker在运行时应该公开哪些网络端口给外部（宿主机）</p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>判断IE浏览器类型</title>
    <url>/2018/06/02/%E5%88%A4%E6%96%ADIE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function checkBrower() &#123;</span><br><span class="line">    var userAgent = navigator.userAgent,</span><br><span class="line">    rMsie = /(msie\s|trident.*rv:)([\w.]+)/,</span><br><span class="line">    rFirefox = /(firefox)\/([\w.]+)/,</span><br><span class="line">    rOpera = /(opera).+version\/([\w.]+)/,</span><br><span class="line">    rChrome = /(chrome)\/([\w.]+)/,</span><br><span class="line">    rSafari = /version\/([\w.]+).*(safari)/;</span><br><span class="line">    var browser;</span><br><span class="line">    var version;</span><br><span class="line">    var ua = userAgent.toLowerCase();</span><br><span class="line"></span><br><span class="line">    function uaMatch(ua) &#123;</span><br><span class="line">        var match = rMsie.exec(ua);</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            return &#123;browser: &quot;IE&quot;, version: match[2] || &quot;0&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        var match = rFirefox.exec(ua);</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            return &#123;browser: match[1] || &quot;&quot;, version: match[2] || &quot;0&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        var match = rOpera.exec(ua);</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            return &#123;browser: match[1] || &quot;&quot;, version: match[2] || &quot;0&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        var match = rChrome.exec(ua);</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            return &#123;browser: match[1] || &quot;&quot;, version: match[2] || &quot;0&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        var match = rSafari.exec(ua);</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            return &#123;browser: match[2] || &quot;&quot;, version: match[1] || &quot;0&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (match != null) &#123;</span><br><span class="line">            return &#123;browser: &quot;&quot;, version: &quot;0&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var browserMatch = uaMatch(userAgent.toLowerCase());</span><br><span class="line">    if (browserMatch.browser) &#123;</span><br><span class="line">        browser = browserMatch.browser;</span><br><span class="line">        version = browserMatch.version;</span><br><span class="line">    &#125;</span><br><span class="line">    if (browser == &#x27;IE&#x27;) &#123;</span><br><span class="line">        if (version != &#x27;11.0&#x27;) &#123;</span><br><span class="line">            alert(&quot;请使用IE11、谷歌浏览器！&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var browser=navigator.appName</span><br><span class="line">var b_version=navigator.appVersion</span><br><span class="line">var version=b_version.split(&quot;;&quot;);</span><br><span class="line">var trim_Version=version[1].replace(/[ ]/g,&quot;&quot;);</span><br><span class="line">if(browser==&quot;Microsoft Internet Explorer&quot; &amp;&amp; trim_Version==&quot;MSIE6.0&quot;)&#123;</span><br><span class="line">alert(&quot;IE 6.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(browser==&quot;Microsoft Internet Explorer&quot; &amp;&amp; trim_Version==&quot;MSIE7.0&quot;)&#123;</span><br><span class="line">alert(&quot;IE 7.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(browser==&quot;Microsoft Internet Explorer&quot; &amp;&amp; trim_Version==&quot;MSIE8.0&quot;)&#123;</span><br><span class="line">alert(&quot;IE 8.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(browser==&quot;Microsoft Internet Explorer&quot; &amp;&amp; trim_Version==&quot;MSIE9.0&quot;)&#123;</span><br><span class="line">alert(&quot;IE 9.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">if(navigator.appName == &quot;Microsoft Internet Explorer&quot; &amp;&amp; navigator.appVersion.match(/7./i)==&quot;7.&quot;)&#123;</span><br><span class="line">alert(&quot;IE 7.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(navigator.appName == &quot;Microsoft Internet Explorer&quot; &amp;&amp; navigator.appVersion.match(/8./i)==&quot;8.&quot;)&#123;</span><br><span class="line">alert(&quot;IE 8.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(navigator.appName == &quot;Microsoft Internet Explorer&quot; &amp;&amp; navigator.appVersion.match(/9./i)==&quot;9.&quot;)&#123;</span><br><span class="line">alert(&quot;IE 9.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(navigator.appName == &quot;Microsoft Internet Explorer&quot;)&#123;</span><br><span class="line">alert(&quot;IE 6.0&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var  Sys = &#123;&#125;;</span><br><span class="line">if(navigator.userAgent.indexOf(&quot;MSIE&quot;)&gt;0)&#123;</span><br><span class="line">   Sys.ie=true;</span><br><span class="line">&#125;</span><br><span class="line">if(isFirefox=navigator.userAgent.indexOf(&quot;Firefox&quot;)&gt;0)&#123;</span><br><span class="line">    Sys.firefox=true;</span><br><span class="line">&#125;</span><br><span class="line">function checkFileChange(obj)&#123;</span><br><span class="line">  var filesize = 0;</span><br><span class="line">  if(Sys.firefox)&#123;</span><br><span class="line">      filesize = obj.files[0].fileSize;</span><br><span class="line">  &#125;else if(Sys.ie)&#123;</span><br><span class="line">    var fileobject = new ActiveXObject (&quot;Scripting.FileSystemObject&quot;);//获取上传文件的对象</span><br><span class="line">    var file = fileobject.GetFile (document.getElementById(&quot;fileText&quot;).value);//获取上传的文件</span><br><span class="line">    var filesize = file.Size;//文件大小</span><br><span class="line">  &#125;</span><br><span class="line">   alert(filesize);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">    * @desc   判断浏览器的版本以及浏览器内核</span><br><span class="line">    * @author wangyanling</span><br><span class="line">    * @date   2014年7月4日</span><br><span class="line">    */</span><br><span class="line">var browser = function() &#123;</span><br><span class="line">    var agent = navigator.userAgent.toLowerCase(), opera = window.opera, browser = &#123;</span><br><span class="line">        //检测当前浏览器是否为IE</span><br><span class="line">        ie : /(msie\s|trident.*rv:)([\w.]+)/.test(agent),</span><br><span class="line"></span><br><span class="line">        //检测当前浏览器是否为Opera</span><br><span class="line">        opera : (!!opera &amp;&amp; opera.version),</span><br><span class="line"></span><br><span class="line">        //检测当前浏览器是否是webkit内核的浏览器</span><br><span class="line">        webkit : (agent.indexOf(&#x27; applewebkit/&#x27;) &gt; -1),</span><br><span class="line"></span><br><span class="line">        //检测当前浏览器是否是运行在mac平台下</span><br><span class="line">        mac : (agent.indexOf(&#x27;macintosh&#x27;) &gt; -1),</span><br><span class="line"></span><br><span class="line">        //检测当前浏览器是否处于&quot;怪异模式&quot;下</span><br><span class="line">        quirks : (document.compatMode == &#x27;BackCompat&#x27;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //检测当前浏览器内核是否是gecko内核</span><br><span class="line">    browser.gecko = (navigator.product == &#x27;Gecko&#x27; &amp;&amp; !browser.webkit</span><br><span class="line">            &amp;&amp; !browser.opera &amp;&amp; !browser.ie);</span><br><span class="line"></span><br><span class="line">    var version = 0;</span><br><span class="line">    // Internet Explorer 6.0+</span><br><span class="line">    if (browser.ie) &#123;</span><br><span class="line">        var v1 = agent.match(/(?:msie\s([\w.]+))/);</span><br><span class="line">        var v2 = agent.match(/(?:trident.*rv:([\w.]+))/);</span><br><span class="line">        if (v1 &amp;&amp; v2 &amp;&amp; v1[1] &amp;&amp; v2[1]) &#123;</span><br><span class="line">            version = Math.max(v1[1] * 1, v2[1] * 1);</span><br><span class="line">        &#125; else if (v1 &amp;&amp; v1[1]) &#123;</span><br><span class="line">            version = v1[1] * 1;</span><br><span class="line">        &#125; else if (v2 &amp;&amp; v2[1]) &#123;</span><br><span class="line">            version = v2[1] * 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            version = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //检测浏览器模式是否为 IE11 兼容模式</span><br><span class="line">        browser.ie11Compat = document.documentMode == 11;</span><br><span class="line"></span><br><span class="line">        //检测浏览器模式是否为 IE9 兼容模式</span><br><span class="line">        browser.ie9Compat = document.documentMode == 9;</span><br><span class="line"></span><br><span class="line">        //检测浏览器模式是否为 IE10 兼容模式</span><br><span class="line">        browser.ie10Compat = document.documentMode == 10;</span><br><span class="line"></span><br><span class="line">        //检测浏览器是否是IE8浏览器</span><br><span class="line">        browser.ie8 = !!document.documentMode;</span><br><span class="line"></span><br><span class="line">        //检测浏览器模式是否为 IE8 兼容模式</span><br><span class="line">        browser.ie8Compat = document.documentMode == 8;</span><br><span class="line"></span><br><span class="line">        //检测浏览器模式是否为 IE7 兼容模式</span><br><span class="line">        browser.ie7Compat = ((version == 7 &amp;&amp; !document.documentMode) || document.documentMode == 7);</span><br><span class="line"></span><br><span class="line">        //检测浏览器模式是否为 IE6 模式 或者怪异模式</span><br><span class="line">        browser.ie6Compat = (version &lt; 7 || browser.quirks);</span><br><span class="line"></span><br><span class="line">        browser.ie9above = version &gt; 8;</span><br><span class="line"></span><br><span class="line">        browser.ie9below = version &lt; 9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Gecko.</span><br><span class="line">    if (browser.gecko) &#123;</span><br><span class="line">        var geckoRelease = agent.match(/rv:([\d\.]+)/);</span><br><span class="line">        if (geckoRelease) &#123;</span><br><span class="line">            geckoRelease = geckoRelease[1].split(&#x27;.&#x27;);</span><br><span class="line">            version = geckoRelease[0] * 10000 + (geckoRelease[1] || 0)</span><br><span class="line">                    * 100 + (geckoRelease[2] || 0) * 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号</span><br><span class="line">    if (/chrome\/(\d+\.\d)/i.test(agent)) &#123;</span><br><span class="line">        browser.chrome = +RegExp[&#x27;\x241&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号</span><br><span class="line">    if (/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent)</span><br><span class="line">            &amp;&amp; !/chrome/i.test(agent)) &#123;</span><br><span class="line">        browser.safari = +(RegExp[&#x27;\x241&#x27;] || RegExp[&#x27;\x242&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Opera 9.50+</span><br><span class="line">    if (browser.opera)</span><br><span class="line">        version = parseFloat(opera.version());</span><br><span class="line"></span><br><span class="line">    // WebKit 522+ (Safari 3+)</span><br><span class="line">    if (browser.webkit)</span><br><span class="line">        version = parseFloat(agent.match(/ applewebkit\/(\d+)/)[1]);</span><br><span class="line"></span><br><span class="line">    //检测当前浏览器版本号</span><br><span class="line">    browser.version = version;</span><br><span class="line"></span><br><span class="line">    return browser;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">if (!browser.ie &amp;&amp; !browser.mac) &#123;</span><br><span class="line">    var UA = navigator.userAgent.toLowerCase().toString();</span><br><span class="line">    //判断是不是IE内核下的非IE版本</span><br><span class="line">    if ((UA.indexOf(&#x27;360ee&#x27;) &gt; -1) || (UA.indexOf(&#x27;360se&#x27;) &gt; -1)</span><br><span class="line">            || (UA.indexOf(&#x27;se&#x27;) &gt; -1) || (UA.indexOf(&#x27;aoyou&#x27;) &gt; -1)</span><br><span class="line">            || (UA.indexOf(&#x27;theworld&#x27;) &gt; -1)</span><br><span class="line">            || (UA.indexOf(&#x27;worldchrome&#x27;) &gt; -1)</span><br><span class="line">            || (UA.indexOf(&#x27;greenbrowser&#x27;) &gt; -1)</span><br><span class="line">            || (UA.indexOf(&#x27;baidu&#x27;) &gt; -1)</span><br><span class="line">            || (UA.indexOf(&#x27;qqbrowser&#x27;) &gt; -1)) &#123;</span><br><span class="line">        //是的话切换兼容模式</span><br><span class="line">        alert(&quot;IE内核版本的&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //不是的话，建议更换浏览器</span><br><span class="line">        alert(&#x27;建议换成IE内核的浏览器&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //判断IE的版本型号</span><br><span class="line">    if ((browser.version == 10 &amp;&amp; browser.ie10Compat)</span><br><span class="line">            || (browser.version == 11 &amp;&amp; browser.ie11Compat)) &#123;</span><br><span class="line">        alert(&quot;IE10或IE11&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发工具</title>
    <url>/2019/06/02/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h3 id="前端开发工具："><a href="#前端开发工具：" class="headerlink" title="前端开发工具："></a>前端开发工具：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sublime</span><br><span class="line">webstorm</span><br></pre></td></tr></table></figure>

<h3 id="断点调试："><a href="#断点调试：" class="headerlink" title="断点调试："></a>断点调试：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chrome插件Batarang</span><br></pre></td></tr></table></figure>

<h3 id="版本管理工具："><a href="#版本管理工具：" class="headerlink" title="版本管理工具："></a>版本管理工具：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure>

<h3 id="代码合并与混合工具："><a href="#代码合并与混合工具：" class="headerlink" title="代码合并与混合工具："></a>代码合并与混合工具：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Grunt （通过npm安装）</span><br><span class="line"></span><br><span class="line">grunt-contrib-uglify 对代码进行混淆</span><br><span class="line">grunt-contrib-concat 合并文件</span><br><span class="line">grunt-contrib-watch 监控文件变化</span><br></pre></td></tr></table></figure>

<h3 id="依赖管理工具："><a href="#依赖管理工具：" class="headerlink" title="依赖管理工具："></a>依赖管理工具：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bower（自动安装依赖、依赖检测、兼容性检测）</span><br></pre></td></tr></table></figure>

<h3 id="模拟测试数据："><a href="#模拟测试数据：" class="headerlink" title="模拟测试数据："></a>模拟测试数据：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http-server（基于NodeJs）</span><br></pre></td></tr></table></figure>

<h3 id="单元测试："><a href="#单元测试：" class="headerlink" title="单元测试："></a>单元测试：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">karma</span><br><span class="line">jasmine</span><br></pre></td></tr></table></figure>

<h3 id="angularjs测试工具："><a href="#angularjs测试工具：" class="headerlink" title="angularjs测试工具："></a>angularjs测试工具：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Protractor</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩图片base64</title>
    <url>/2018/06/02/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87base64/</url>
    <content><![CDATA[<h3 id="Js压缩图片base64"><a href="#Js压缩图片base64" class="headerlink" title="Js压缩图片base64"></a>Js压缩图片base64</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//压缩图片base64</span><br><span class="line">function doCompressImgBase64(imgBase64)&#123;</span><br><span class="line">    var imgHead = imgBase64.match(/^data:(image\/\w+);base64,/),type=&quot;image/png&quot;;</span><br><span class="line">    if(imgHead!=null)&#123;</span><br><span class="line">        type = imgHead[1];</span><br><span class="line">    &#125;</span><br><span class="line">  var img = new Image,</span><br><span class="line">  height = 240,width = 320, //图片resize宽度</span><br><span class="line">  quality = 0.8, //图像质量</span><br><span class="line">  canvas = document.createElement(&quot;canvas&quot;),</span><br><span class="line">  drawer = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">  img.src = imgBase64;</span><br><span class="line">  var hh = height / img.height,</span><br><span class="line">      ww = width / img.width;</span><br><span class="line">  var rate = hh &gt; ww ? ww : hh;</span><br><span class="line">  if(rate &lt; 1)&#123;</span><br><span class="line">      canvas.width = img.width * rate;</span><br><span class="line">      canvas.height = img.height * rate;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      canvas.width = img.width;</span><br><span class="line">      canvas.height = img.height;</span><br><span class="line">  &#125;</span><br><span class="line">  drawer.drawImage(img, 0, 0, canvas.width, canvas.height);</span><br><span class="line">  img.src = canvas.toDataURL(type, quality);//&quot;image/png&quot;</span><br><span class="line">  var imgBase64Str = img.src;</span><br><span class="line">  return imgBase64Str;//imgBase64Str.replace(/^data:image\/\w+;base64,/, &quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩工具类</title>
    <url>/2020/06/02/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="Java图片压缩"><a href="#Java图片压缩" class="headerlink" title="Java图片压缩"></a>Java图片压缩</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"> </span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.Transparency;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.ByteArrayInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"> </span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line"> </span><br><span class="line">import org.bouncycastle.util.encoders.Base64;</span><br><span class="line"> </span><br><span class="line">import sun.misc.BASE64Decoder;</span><br><span class="line"> </span><br><span class="line">public class HxImgUtils &#123;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：指定宽高压缩图片</span><br><span class="line">     *</span><br><span class="line">     * @param base64Str</span><br><span class="line">     *            图片base64</span><br><span class="line">     * @param outputWidth</span><br><span class="line">     *            输出宽度</span><br><span class="line">     * @param outputHeight</span><br><span class="line">     *            输出高度</span><br><span class="line">     * @param proportion</span><br><span class="line">     *            是否等比压缩</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String compressPNG(String base64Str, int outputWidth,</span><br><span class="line">            int outputHeight,boolean proportion) throws Exception&#123;</span><br><span class="line">        return compressImage(base64Str, outputWidth, outputHeight, &quot;png&quot;, proportion);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：指定宽高压缩图片</span><br><span class="line">     *</span><br><span class="line">     * @param base64Str</span><br><span class="line">     *            图片base64</span><br><span class="line">     * @param outputWidth</span><br><span class="line">     *            输出宽度</span><br><span class="line">     * @param outputHeight</span><br><span class="line">     *            输出高度</span><br><span class="line">     * @param suffix</span><br><span class="line">     *            图片类型</span><br><span class="line">     * @param proportion</span><br><span class="line">     *            是否等比压缩</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String compressImage(String base64Str, int outputWidth,</span><br><span class="line">            int outputHeight, String suffix, boolean proportion) throws Exception &#123;</span><br><span class="line">        String tBase = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // base64 转换为流对象</span><br><span class="line">            ByteArrayInputStream stream = null;</span><br><span class="line">            BASE64Decoder decoder = new BASE64Decoder();</span><br><span class="line">            byte[] bytes = decoder.decodeBuffer(base64Str);</span><br><span class="line">            stream = new ByteArrayInputStream(bytes);</span><br><span class="line">            // 创建对象</span><br><span class="line">            BufferedImage ffbi = ImageIO.read(stream);</span><br><span class="line">            int newWidth;</span><br><span class="line">            int newHeight;</span><br><span class="line">            // 判断是否是等比缩放</span><br><span class="line">            if (proportion == true) &#123;</span><br><span class="line">                // 为等比缩放计算输出的图片宽度及高度</span><br><span class="line">                double rate1 = ((double) ffbi.getWidth(null))</span><br><span class="line">                        / (double) outputWidth + 0.1;</span><br><span class="line">                double rate2 = ((double) ffbi.getHeight(null))</span><br><span class="line">                        / (double) outputHeight + 0.1;</span><br><span class="line">                // 根据缩放比率大的进行缩放控制</span><br><span class="line">                double rate = rate1 &lt; rate2 ? rate1 : rate2;</span><br><span class="line">                newWidth = (int) (((double) ffbi.getWidth(null)) / rate);</span><br><span class="line">                newHeight = (int) (((double) ffbi.getHeight(null)) / rate);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                newWidth = outputWidth; // 输出的图片宽度</span><br><span class="line">                newHeight = outputHeight; // 输出的图片高度</span><br><span class="line">            &#125;</span><br><span class="line">            // 压缩</span><br><span class="line">            BufferedImage to = new BufferedImage(newWidth, newHeight,</span><br><span class="line">                    BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics2D g2d = to.createGraphics();</span><br><span class="line">            to = g2d.getDeviceConfiguration().createCompatibleImage(newWidth,</span><br><span class="line">                    newHeight, Transparency.TRANSLUCENT);</span><br><span class="line">            g2d.dispose();</span><br><span class="line">            g2d = to.createGraphics();</span><br><span class="line">            // SCALE_SMOOTH-平滑优先</span><br><span class="line">            // SCALE_FAST//速度优先</span><br><span class="line">            // SCALE_AREA_AVERAGING //区域均值</span><br><span class="line">            // SCALE_REPLICATE //像素复制型缩放</span><br><span class="line">            // SCALE_DEFAULT //默认缩放模式</span><br><span class="line">            Image from = ffbi.getScaledInstance(newWidth, newHeight,</span><br><span class="line">                    ffbi.SCALE_REPLICATE);</span><br><span class="line">            g2d.drawImage(from, 0, 0, null);</span><br><span class="line">            g2d.dispose();</span><br><span class="line">            // 创建对象缓存文件路径</span><br><span class="line">            String tempdir = System.getProperty(&quot;java.io.tmpdir&quot;);</span><br><span class="line">            new File(tempdir).mkdirs();</span><br><span class="line">            String toFileStr = tempdir + File.separator</span><br><span class="line">                    + UUID.randomUUID().toString();</span><br><span class="line">            File toFile = new File(toFileStr);</span><br><span class="line">            new File(toFileStr).mkdirs();</span><br><span class="line">            ImageIO.write(to, suffix, toFile);</span><br><span class="line">            tBase = getImageBinary(toFile,suffix);</span><br><span class="line">            toFile.delete();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return tBase;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：压缩图片</span><br><span class="line">     * @param fromFileStr 源文件</span><br><span class="line">     * @param toFileStr 目标文件</span><br><span class="line">     * @param outputWidth 输出宽度</span><br><span class="line">     * @param outputHeight 输出高度</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void compressPNG(String fromFileStr, String toFileStr,</span><br><span class="line">            int outputWidth, int outputHeight) throws Exception&#123;</span><br><span class="line">        compressImage(fromFileStr, toFileStr, outputWidth, outputHeight, &quot;png&quot;, true);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：压缩图片</span><br><span class="line">     * @param fromFileStr 源文件</span><br><span class="line">     * @param toFileStr 目标文件</span><br><span class="line">     * @param outputWidth 输出宽度</span><br><span class="line">     * @param outputHeight 输出高度</span><br><span class="line">     * @param suffix 图片类型</span><br><span class="line">     * @param proportion 是否等比例缩放</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void compressImage(String fromFileStr, String toFileStr,</span><br><span class="line">            int outputWidth, int outputHeight,String suffix, boolean proportion)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if(&quot;&quot;.equals(suffix)) suffix = &quot;png&quot;;</span><br><span class="line">            File fromFile = new File(fromFileStr);</span><br><span class="line">            BufferedImage ffbi = ImageIO.read(fromFile);</span><br><span class="line">            int newWidth;</span><br><span class="line">            int newHeight;</span><br><span class="line">            // 判断是否是等比缩放</span><br><span class="line">            if (proportion == true) &#123;</span><br><span class="line">                // 为等比缩放计算输出的图片宽度及高度</span><br><span class="line">                double rate1 = ((double) ffbi.getWidth(null))</span><br><span class="line">                        / (double) outputWidth + 0.1;</span><br><span class="line">                double rate2 = ((double) ffbi.getHeight(null))</span><br><span class="line">                        / (double) outputHeight + 0.1;</span><br><span class="line">                // 根据缩放比率大的进行缩放控制</span><br><span class="line">                double rate = rate1 &lt; rate2 ? rate1 : rate2;</span><br><span class="line">                newWidth = (int) (((double) ffbi.getWidth(null)) / rate);</span><br><span class="line">                newHeight = (int) (((double) ffbi.getHeight(null)) / rate);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                newWidth = outputWidth; // 输出的图片宽度</span><br><span class="line">                newHeight = outputHeight; // 输出的图片高度</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedImage to = new BufferedImage(newWidth, newHeight,</span><br><span class="line">                    BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics2D g2d = to.createGraphics();</span><br><span class="line">            to = g2d.getDeviceConfiguration().createCompatibleImage(newWidth,</span><br><span class="line">                    newHeight, Transparency.TRANSLUCENT);</span><br><span class="line">            g2d.dispose();</span><br><span class="line">            g2d = to.createGraphics();</span><br><span class="line">            // SCALE_SMOOTH//平滑优先</span><br><span class="line">            // SCALE_FAST//速度优先</span><br><span class="line">            // SCALE_AREA_AVERAGING //区域均值</span><br><span class="line">            // SCALE_REPLICATE //像素复制型缩放</span><br><span class="line">            // SCALE_DEFAULT //默认缩放模式</span><br><span class="line">            Image from = ffbi.getScaledInstance(newWidth, newHeight,</span><br><span class="line">                    ffbi.SCALE_REPLICATE);</span><br><span class="line">            g2d.drawImage(from, 0, 0, null);</span><br><span class="line">            g2d.dispose();</span><br><span class="line">            ImageIO.write(to, suffix, new File(toFileStr));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：图片文件转为base64字符串</span><br><span class="line">     * @param file 图片文件</span><br><span class="line">     * @param suffix 图片类型</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String getImageBinary(File file,String suffix) throws Exception &#123;</span><br><span class="line">        if(&quot;&quot;.equals(suffix))&#123;</span><br><span class="line">            suffix = &quot;png&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImage bi = ImageIO.read(file);</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        ImageIO.write(bi,suffix, baos);</span><br><span class="line">        byte[] bytes = baos.toByteArray();</span><br><span class="line">        return Base64.toBase64String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：图片base64转换为InputStream对象</span><br><span class="line">     * @param base64string 图片base64</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static InputStream BaseToInputStream(String base64string) &#123;</span><br><span class="line">        ByteArrayInputStream stream = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            BASE64Decoder decoder = new BASE64Decoder();</span><br><span class="line">            byte[] bytes1 = decoder.decodeBuffer(base64string);</span><br><span class="line">            stream = new ByteArrayInputStream(bytes1);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return stream;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：图片base64转换为BufferedImage对象</span><br><span class="line">     * @param base64string 图片base64</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage GetBufferedImage(String base64string) &#123;</span><br><span class="line">        BufferedImage image = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            InputStream stream = BaseToInputStream(base64string);</span><br><span class="line">            image = ImageIO.read(stream);</span><br><span class="line">            System.out.println(&quot;&gt;&gt;&gt;&quot; + image.getWidth() + &quot;,&quot; + image.getHeight() + &quot;&lt;&lt;&lt;&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>图片旋转img</title>
    <url>/2018/06/02/%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%ACimg/</url>
    <content><![CDATA[<p>图片旋转，每次旋转90°，并获取旋转后图片的base64。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//向左旋转</span><br><span class="line">var current = 0;</span><br><span class="line">function rotateLeft()&#123;</span><br><span class="line">    current = (current-90)%360;</span><br><span class="line">    $(&quot;#sealImgId&quot;).attr(&quot;style&quot;,&quot;-ms-transform:rotate(&quot;+current+&quot;deg);&quot;);//IE9</span><br><span class="line">    var img = document.getElementById(&#x27;sealImgId&#x27;);</span><br><span class="line">    img.style.transform = &#x27;rotate(&#x27;+current+&#x27;deg)&#x27;;</span><br><span class="line">    var data = getBase64Image(img,current);</span><br><span class="line">    sealImgBase64 = data;</span><br><span class="line">&#125;</span><br><span class="line">//向右旋转</span><br><span class="line">function rotateRight()&#123;</span><br><span class="line">    current = (current+90)%360;</span><br><span class="line">    $(&quot;#sealImgId&quot;).attr(&quot;style&quot;,&quot;-ms-transform:rotate(&quot;+current+&quot;deg);&quot;);//IE9</span><br><span class="line">    var img = document.getElementById(&#x27;sealImgId&#x27;);</span><br><span class="line">    img.style.transform = &#x27;rotate(&#x27;+current+&#x27;deg)&#x27;;</span><br><span class="line">    var data = getBase64Image(img,current);</span><br><span class="line">    sealImgBase64 = data;</span><br><span class="line">&#125;</span><br><span class="line">//获取img的base64</span><br><span class="line">function getBase64Image(img, curRotate) &#123;</span><br><span class="line">    var canvas = document.createElement(&quot;canvas&quot;),</span><br><span class="line">    width = img.width + 180, //图片微调</span><br><span class="line">    height = img.height + 180,</span><br><span class="line">    step = curRotate / 90;</span><br><span class="line">    //旋转角度以弧度值为参数 </span><br><span class="line">    var degree = curRotate * Math.PI / 180;</span><br><span class="line">    var ctx = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">    switch (step) &#123;</span><br><span class="line">    case -3:</span><br><span class="line">        canvas.width = height;</span><br><span class="line">        canvas.height = width;</span><br><span class="line">        ctx.rotate(degree);</span><br><span class="line">        ctx.drawImage(img, 0, -height, width, height);</span><br><span class="line">        break;</span><br><span class="line">    case -2:</span><br><span class="line">        canvas.width = width;</span><br><span class="line">        canvas.height = height;</span><br><span class="line">        ctx.rotate(degree);</span><br><span class="line">        ctx.drawImage(img, -width, -height, width, height);</span><br><span class="line">        break;</span><br><span class="line">    case -1:</span><br><span class="line">        canvas.width = height;</span><br><span class="line">        canvas.height = width;</span><br><span class="line">        ctx.rotate(degree);</span><br><span class="line">        ctx.drawImage(img, -width, 0, width, height);</span><br><span class="line">        break;</span><br><span class="line">    case 0:</span><br><span class="line">        canvas.width = width;</span><br><span class="line">        canvas.height = height;</span><br><span class="line">        ctx.drawImage(img, 0, 0, width, height);</span><br><span class="line">        break;</span><br><span class="line">    case 1:</span><br><span class="line">        canvas.width = height;</span><br><span class="line">        canvas.height = width;</span><br><span class="line">        ctx.rotate(degree);</span><br><span class="line">        ctx.drawImage(img, 0, -height, width, height);</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        canvas.width = width;</span><br><span class="line">        canvas.height = height;</span><br><span class="line">        ctx.rotate(degree);</span><br><span class="line">        ctx.drawImage(img, -width, -height, width, height);</span><br><span class="line">        break;</span><br><span class="line">    case 3:</span><br><span class="line">        canvas.width = height;</span><br><span class="line">        canvas.height = width;</span><br><span class="line">        ctx.rotate(degree);</span><br><span class="line">        ctx.drawImage(img, -width, 0, width, height);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    var dataURL = canvas.toDataURL(&quot;image/png&quot;);</span><br><span class="line">    //return dataURL.replace(/^data:image\/\w+;base64,/, &quot;&quot;);</span><br><span class="line">    return dataURL.replace(&quot;data:image/png;base64,&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Js</tag>
      </tags>
  </entry>
  <entry>
    <title>基本的单向加密算法</title>
    <url>/2018/01/01/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="基本的单向加密算法"><a href="#基本的单向加密算法" class="headerlink" title="基本的单向加密算法"></a>基本的单向加密算法</h3><ul>
<li>BASE64 严格地说，属于编码格式，而非加密算法</li>
<li>MD5(Message Digest algorithm 5，信息摘要算法)</li>
<li>SHA(Secure Hash Algorithm，安全散列算法)</li>
<li>HMAC(Hash Message Authentication Code，散列消息鉴别码)</li>
</ul>
<h3 id="复杂的对称加密（DES、PBE）、非对称加密算法："><a href="#复杂的对称加密（DES、PBE）、非对称加密算法：" class="headerlink" title="复杂的对称加密（DES、PBE）、非对称加密算法："></a>复杂的对称加密（DES、PBE）、非对称加密算法：</h3><ul>
<li>DES(Data Encryption Standard，数据加密算法)</li>
<li>PBE(Password-based encryption，基于密码验证)</li>
<li>RSA(算法的名字以发明者的名字命名：Ron Rivest, AdiShamir 和Leonard Adleman)</li>
<li>DH(Diffie-Hellman算法，密钥一致协议)</li>
<li>DSA(Digital Signature Algorithm，数字签名)</li>
<li>ECC(Elliptic Curves Cryptography，椭圆曲线密码编码学)</li>
</ul>
<h3 id="简要介绍BASE64、MD5、SHA、HMAC几种方法"><a href="#简要介绍BASE64、MD5、SHA、HMAC几种方法" class="headerlink" title="简要介绍BASE64、MD5、SHA、HMAC几种方法"></a>简要介绍BASE64、MD5、SHA、HMAC几种方法</h3><p>MD5、SHA、HMAC这三种加密算法，可谓是非可逆加密，就是不可解密的加密方法。我们通常只把他们作为加密的基础。单纯的以上三种的加密并不可靠。 </p>
<h3 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64"></a>BASE64</h3><p>按照RFC2045的定义，Base64被定义为：Base64内容传送编码被设计用来把任意序列的8位字节描述为一种不易被人直接识别的形式。（The Base64 Content-Transfer-Encoding is designed to represent arbitrary sequences of octets in a form that need not be humanly readable.）<br>常见于邮件、http加密，截取http信息，你就会发现登录操作的用户名、密码字段通过BASE64加密的。 </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-1.png"></p>
<p>通过java代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * BASE64解密</span><br><span class="line"> * </span><br><span class="line"> * @param key</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static byte[] decryptBASE64(String key) throws Exception &#123;</span><br><span class="line">    return (new BASE64Decoder()).decodeBuffer(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * BASE64加密</span><br><span class="line"> * </span><br><span class="line"> * @param key</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static String encryptBASE64(byte[] key) throws Exception &#123;</span><br><span class="line">    return (new BASE64Encoder()).encodeBuffer(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要就是BASE64Encoder、BASE64Decoder两个类，我们只需要知道使用对应的方法即可。另，BASE加密后产生的字节位数是8的倍数，如果不够位数以=符号填充。 </p>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5 – message-digest algorithm 5 （信息-摘要算法）缩写，广泛用于加密和解密技术，常用于文件校验。校验？不管文件多大，经过MD5后都能生成唯一的MD5值。好比现在的ISO校验，都 是MD5校验。怎么用？当然是把ISO经过MD5后产生MD5的值。一般下载linux-ISO的朋友都见过下载链接旁边放着MD5的串。就是用来验证文 件是否一致的。 </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-2.png"></p>
<p>通过java代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * MD5加密</span><br><span class="line"> * </span><br><span class="line"> * @param data</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static byte[] encryptMD5(byte[] data) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">    md5.update(data);</span><br><span class="line">    return md5.digest();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常我们不直接使用上述MD5加密。通常将MD5产生的字节数组交给BASE64再加密一把，得到相应的字符串。 </p>
<h3 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h3><p>SHA(Secure Hash Algorithm，安全散列算法），数字签名等密码学应用中重要的工具，被广泛地应用于电子商务等信息安全领域。虽然，SHA与MD5通过碰撞法都被破解了， 但是SHA仍然是公认的安全加密算法，较之MD5更为安全。 </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-3.png"></p>
<p>通过java代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * SHA加密</span><br><span class="line"> * </span><br><span class="line"> * @param data</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static byte[] encryptSHA(byte[] data) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span><br><span class="line">    sha.update(data);</span><br><span class="line"></span><br><span class="line">    return sha.digest();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h3><p>HMAC(Hash Message Authentication Code，散列消息鉴别码，基于密钥的Hash算法的认证协议。消息鉴别码实现鉴别的原理是，用公开函数和密钥产生一个固定长度的值作为认证标识，用这个 标识鉴别消息的完整性。使用一个密钥生成一个固定大小的小数据块，即MAC，并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证 等。 </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-4.png"></p>
<p>通过java代码实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 初始化HMAC密钥</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static String initMacKey() throws Exception &#123;</span><br><span class="line">    KeyGenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);</span><br><span class="line"></span><br><span class="line">    SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">    return encryptBASE64(secretKey.getEncoded());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * HMAC加密</span><br><span class="line"> * </span><br><span class="line"> * @param data</span><br><span class="line"> * @param key</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static byte[] encryptHMAC(byte[] data, String key) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    SecretKey secretKey = new SecretKeySpec(decryptBASE64(key), KEY_MAC);</span><br><span class="line">    Mac mac = Mac.getInstance(secretKey.getAlgorithm());</span><br><span class="line">    mac.init(secretKey);</span><br><span class="line"></span><br><span class="line">    return mac.doFinal(data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>给出一个完整类，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line">import javax.crypto.KeyGenerator;</span><br><span class="line">import javax.crypto.Mac;</span><br><span class="line">import javax.crypto.SecretKey;</span><br><span class="line"></span><br><span class="line">import sun.misc.BASE64Decoder;</span><br><span class="line">import sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 基础加密组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class Coder &#123;</span><br><span class="line">	public static final String KEY_SHA = &quot;SHA&quot;;</span><br><span class="line">	public static final String KEY_MD5 = &quot;MD5&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * MAC算法可选以下多种算法</span><br><span class="line">	 * </span><br><span class="line">	 * &lt;pre&gt;</span><br><span class="line">	 * HmacMD5 </span><br><span class="line">	 * HmacSHA1 </span><br><span class="line">	 * HmacSHA256 </span><br><span class="line">	 * HmacSHA384 </span><br><span class="line">	 * HmacSHA512</span><br><span class="line">	 * &lt;/pre&gt;</span><br><span class="line">	 */</span><br><span class="line">	public static final String KEY_MAC = &quot;HmacMD5&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * BASE64解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptBASE64(String key) throws Exception &#123;</span><br><span class="line">		return (new BASE64Decoder()).decodeBuffer(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * BASE64加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String encryptBASE64(byte[] key) throws Exception &#123;</span><br><span class="line">		return (new BASE64Encoder()).encodeBuffer(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * MD5加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptMD5(byte[] data) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		MessageDigest md5 = MessageDigest.getInstance(KEY_MD5);</span><br><span class="line">		md5.update(data);</span><br><span class="line"></span><br><span class="line">		return md5.digest();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * SHA加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptSHA(byte[] data) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span><br><span class="line">		sha.update(data);</span><br><span class="line"></span><br><span class="line">		return sha.digest();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 初始化HMAC密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String initMacKey() throws Exception &#123;</span><br><span class="line">		KeyGenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);</span><br><span class="line"></span><br><span class="line">		SecretKey secretKey = keyGenerator.generateKey();</span><br><span class="line">		return encryptBASE64(secretKey.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * HMAC加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptHMAC(byte[] data, String key) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		SecretKey secretKey = new SecretKeySpec(decryptBASE64(key), KEY_MAC);</span><br><span class="line">		Mac mac = Mac.getInstance(secretKey.getAlgorithm());</span><br><span class="line">		mac.init(secretKey);</span><br><span class="line"></span><br><span class="line">		return mac.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>再给出一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class CoderTest &#123;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		String inputStr = &quot;简单加密&quot;;</span><br><span class="line">		System.err.println(&quot;原文:\n&quot; + inputStr);</span><br><span class="line"></span><br><span class="line">		byte[] inputData = inputStr.getBytes();</span><br><span class="line">		String code = Coder.encryptBASE64(inputData);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;BASE64加密后:\n&quot; + code);</span><br><span class="line"></span><br><span class="line">		byte[] output = Coder.decryptBASE64(code);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(output);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;BASE64解密后:\n&quot; + outputStr);</span><br><span class="line"></span><br><span class="line">		// 验证BASE64加密解密一致性</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line"></span><br><span class="line">		// 验证MD5对于同一内容加密是否一致</span><br><span class="line">		assertArrayEquals(Coder.encryptMD5(inputData), Coder</span><br><span class="line">				.encryptMD5(inputData));</span><br><span class="line"></span><br><span class="line">		// 验证SHA对于同一内容加密是否一致</span><br><span class="line">		assertArrayEquals(Coder.encryptSHA(inputData), Coder</span><br><span class="line">				.encryptSHA(inputData));</span><br><span class="line"></span><br><span class="line">		String key = Coder.initMacKey();</span><br><span class="line">		System.err.println(&quot;Mac密钥:\n&quot; + key);</span><br><span class="line"></span><br><span class="line">		// 验证HMAC对于同一内容，同一密钥加密是否一致</span><br><span class="line">		assertArrayEquals(Coder.encryptHMAC(inputData, key), Coder.encryptHMAC(</span><br><span class="line">				inputData, key));</span><br><span class="line"></span><br><span class="line">		BigInteger md5 = new BigInteger(Coder.encryptMD5(inputData));</span><br><span class="line">		System.err.println(&quot;MD5:\n&quot; + md5.toString(16));</span><br><span class="line"></span><br><span class="line">		BigInteger sha = new BigInteger(Coder.encryptSHA(inputData));</span><br><span class="line">		System.err.println(&quot;SHA:\n&quot; + sha.toString(32));</span><br><span class="line"></span><br><span class="line">		BigInteger mac = new BigInteger(Coder.encryptHMAC(inputData, inputStr));</span><br><span class="line">		System.err.println(&quot;HMAC:\n&quot; + mac.toString(16));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="控制台输出："><a href="#控制台输出：" class="headerlink" title="控制台输出："></a>控制台输出：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原文:</span><br><span class="line">简单加密</span><br><span class="line">BASE64加密后:</span><br><span class="line">566A5Y2V5Yqg5a+G</span><br><span class="line"></span><br><span class="line">BASE64解密后:</span><br><span class="line">简单加密</span><br><span class="line">Mac密钥:</span><br><span class="line">uGxdHC+6ylRDaik++leFtGwiMbuYUJ6mqHWyhSgF4trVkVBBSQvY/a22xU8XT1RUemdCWW155Bke</span><br><span class="line">pBIpkd7QHg==</span><br><span class="line"></span><br><span class="line">MD5:</span><br><span class="line">-550b4d90349ad4629462113e7934de56</span><br><span class="line">SHA:</span><br><span class="line">91k9vo7p400cjkgfhjh0ia9qthsjagfn</span><br><span class="line">HMAC:</span><br><span class="line">2287d192387e95694bdbba2fa941009a</span><br></pre></td></tr></table></figure>

<ul>
<li>注意<br>编译时，可能会看到如下提示： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">警告：sun.misc.BASE64Decoder 是 Sun 的专用 API，可能会在未来版本中删除 </span><br><span class="line"></span><br><span class="line">import sun.misc.BASE64Decoder; </span><br><span class="line">               ^ </span><br><span class="line">警告：sun.misc.BASE64Encoder 是 Sun 的专用 API，可能会在未来版本中删除 </span><br><span class="line"></span><br><span class="line">import sun.misc.BASE64Encoder; </span><br><span class="line">               ^ </span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>BASE64Encoder 和BASE64Decoder是非官方JDK实现类。虽然可以在JDK里能找到并使用，但是在API里查不到。JRE 中 sun 和 com.sun 开头包的类都是未被文档化的，他们属于 java, javax 类库的基础，其中的实现大多数与底层平台有关，一般来说是不推荐使用的。 </p>
<p>BASE64的加密解密是双向的，可以求反解。 </p>
<p>MD5、SHA以及HMAC是单向加密，任何数据加密后只会产生唯一的一个加密串，通常用来校验数据在传输过程中是否被修改。其中HMAC算法有一个密钥，增强了数据传输过程中的安全性，强化了算法外的不可控因素。 </p>
<p>单向加密的用途主要是为了校验数据在传输过程中是否被修改。</p>
<p>接下来我们介绍对称加密算法，最常用的莫过于DES数据加密算法。 </p>
<h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p>DES-Data Encryption Standard,即数据加密算法。是IBM公司于1975年研究成功并公开发表的。DES算法的入口参数有三个:Key、Data、Mode。其中 Key为8个字节共64位,是DES算法的工作密钥;Data也为8个字节64位,是要被加密或被解密的数据;Mode为DES的工作方式,有两种:加密 或解密。 </p>
<p>DES算法把64位的明文输入块变为64位的密文输出块,它所使用的密钥也是64位。 </p>
<p>通过java代码实现如下：Coder类见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.KeyGenerator;</span><br><span class="line">import javax.crypto.SecretKey;</span><br><span class="line">import javax.crypto.SecretKeyFactory;</span><br><span class="line">import javax.crypto.spec.DESKeySpec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DES安全编码组件</span><br><span class="line"> * </span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * 支持 DES、DESede(TripleDES,就是3DES)、AES、Blowfish、RC2、RC4(ARCFOUR)</span><br><span class="line"> * DES          		key size must be equal to 56</span><br><span class="line"> * DESede(TripleDES) 	key size must be equal to 112 or 168</span><br><span class="line"> * AES          		key size must be equal to 128, 192 or 256,but 192 and 256 bits may not be available</span><br><span class="line"> * Blowfish     		key size must be multiple of 8, and can only range from 32 to 448 (inclusive)</span><br><span class="line"> * RC2          		key size must be between 40 and 1024 bits</span><br><span class="line"> * RC4(ARCFOUR) 		key size must be between 40 and 1024 bits</span><br><span class="line"> * 具体内容 需要关注 JDK Document http://.../docs/technotes/guides/security/SunProviders.html</span><br><span class="line"> * &lt;/pre&gt;</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class DESCoder extends Coder &#123;</span><br><span class="line">	/**</span><br><span class="line">	 * ALGORITHM 算法 &lt;br&gt;</span><br><span class="line">	 * 可替换为以下任意一种算法，同时key值的size相应改变。</span><br><span class="line">	 * </span><br><span class="line">	 * &lt;pre&gt;</span><br><span class="line">	 * DES          		key size must be equal to 56</span><br><span class="line">	 * DESede(TripleDES) 	key size must be equal to 112 or 168</span><br><span class="line">	 * AES          		key size must be equal to 128, 192 or 256,but 192 and 256 bits may not be available</span><br><span class="line">	 * Blowfish     		key size must be multiple of 8, and can only range from 32 to 448 (inclusive)</span><br><span class="line">	 * RC2          		key size must be between 40 and 1024 bits</span><br><span class="line">	 * RC4(ARCFOUR) 		key size must be between 40 and 1024 bits</span><br><span class="line">	 * &lt;/pre&gt;</span><br><span class="line">	 * </span><br><span class="line">	 * 在Key toKey(byte[] key)方法中使用下述代码</span><br><span class="line">	 * &lt;code&gt;SecretKey secretKey = new SecretKeySpec(key, ALGORITHM);&lt;/code&gt; 替换</span><br><span class="line">	 * &lt;code&gt;</span><br><span class="line">	 * DESKeySpec dks = new DESKeySpec(key);</span><br><span class="line">	 * SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);</span><br><span class="line">	 * SecretKey secretKey = keyFactory.generateSecret(dks);</span><br><span class="line">	 * &lt;/code&gt;</span><br><span class="line">	 */</span><br><span class="line">	public static final String ALGORITHM = &quot;DES&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 转换密钥&lt;br&gt;</span><br><span class="line">	 * </span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static Key toKey(byte[] key) throws Exception &#123;</span><br><span class="line">		DESKeySpec dks = new DESKeySpec(key);</span><br><span class="line">		SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);</span><br><span class="line">		SecretKey secretKey = keyFactory.generateSecret(dks);</span><br><span class="line"></span><br><span class="line">		// 当使用其他对称加密算法时，如AES、Blowfish等算法时，用下述代码替换上述三行代码</span><br><span class="line">		// SecretKey secretKey = new SecretKeySpec(key, ALGORITHM);</span><br><span class="line"></span><br><span class="line">		return secretKey;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decrypt(byte[] data, String key) throws Exception &#123;</span><br><span class="line">		Key k = toKey(decryptBASE64(key));</span><br><span class="line"></span><br><span class="line">		Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, k);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encrypt(byte[] data, String key) throws Exception &#123;</span><br><span class="line">		Key k = toKey(decryptBASE64(key));</span><br><span class="line">		Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, k);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 生成密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String initKey() throws Exception &#123;</span><br><span class="line">		return initKey(null);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 生成密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param seed</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String initKey(String seed) throws Exception &#123;</span><br><span class="line">		SecureRandom secureRandom = null;</span><br><span class="line"></span><br><span class="line">		if (seed != null) &#123;</span><br><span class="line">			secureRandom = new SecureRandom(decryptBASE64(seed));</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			secureRandom = new SecureRandom();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM);</span><br><span class="line">		kg.init(secureRandom);</span><br><span class="line"></span><br><span class="line">		SecretKey secretKey = kg.generateKey();</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(secretKey.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>延续上一个类的实现，我们通过MD5以及SHA对字符串加密生成密钥，这是比较常见的密钥生成方式。 </p>
<h3 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h3><p>再给出一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class DESCoderTest &#123;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		String inputStr = &quot;DES&quot;;</span><br><span class="line">		String key = DESCoder.initKey();</span><br><span class="line">		System.err.println(&quot;原文:\t&quot; + inputStr);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;密钥:\t&quot; + key);</span><br><span class="line"></span><br><span class="line">		byte[] inputData = inputStr.getBytes();</span><br><span class="line">		inputData = DESCoder.encrypt(inputData, key);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;加密后:\t&quot; + DESCoder.encryptBASE64(inputData));</span><br><span class="line"></span><br><span class="line">		byte[] outputData = DESCoder.decrypt(inputData, key);</span><br><span class="line">		String outputStr = new String(outputData);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;解密后:\t&quot; + outputStr);</span><br><span class="line"></span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的输出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原文:	DES</span><br><span class="line">密钥:	f3wEtRrV6q0=</span><br><span class="line"></span><br><span class="line">加密后:	C6qe9oNIzRY=</span><br><span class="line"></span><br><span class="line">解密后:	DES</span><br></pre></td></tr></table></figure>
<p>由控制台得到的输出，我们能够比对加密、解密后结果一致。这是一种简单的加密解密方式，只有一个密钥。<br>其实DES有很多同胞兄弟，如DESede(TripleDES)、AES、Blowfish、RC2、RC4(ARCFOUR)。这里就不过多阐述了，大同小异，只要换掉ALGORITHM换成对应的值，同时做一个代码替换SecretKey secretKey = new SecretKeySpec(key, ALGORITHM);就可以了，此外就是密钥长度不同了。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * DES          key size must be equal to 56</span><br><span class="line"> * DESede(TripleDES) key size must be equal to 112 or 168</span><br><span class="line"> * AES          key size must be equal to 128, 192 or 256,but 192 and 256 bits may not be available</span><br><span class="line"> * Blowfish     key size must be multiple of 8, and can only range from 32 to 448 (inclusive)</span><br><span class="line"> * RC2          key size must be between 40 and 1024 bits</span><br><span class="line"> * RC4(ARCFOUR) key size must be between 40 and 1024 bits</span><br><span class="line"> **/</span><br></pre></td></tr></table></figure>
<p>除了DES，我们还知道有DESede(TripleDES,就是3DES)、AES、Blowfish、RC2、RC4(ARCFOUR)等多种对称加密方式，其实现方式大同小异，这里介绍对称加密的另一个算法——PBE </p>
<h3 id="PBE"><a href="#PBE" class="headerlink" title="PBE"></a>PBE</h3><p>PBE——Password-based encryption（基于密码加密）。其特点在于口令由用户自己掌管，不借助任何物理媒体；采用随机数（这里我们叫做盐）杂凑多重加密等方法保证数据的安全性。是一种简便的加密方式。 </p>
<p>通过java代码实现如下：Coder类见 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.util.Random;</span><br><span class="line"> </span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.SecretKey;</span><br><span class="line">import javax.crypto.SecretKeyFactory;</span><br><span class="line">import javax.crypto.spec.PBEKeySpec;</span><br><span class="line">import javax.crypto.spec.PBEParameterSpec;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * PBE安全编码组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class PBECoder extends Coder &#123;</span><br><span class="line">	/**</span><br><span class="line">	 * 支持以下任意一种算法</span><br><span class="line">	 * </span><br><span class="line">	 * &lt;pre&gt;</span><br><span class="line">	 * PBEWithMD5AndDES </span><br><span class="line">	 * PBEWithMD5AndTripleDES </span><br><span class="line">	 * PBEWithSHA1AndDESede</span><br><span class="line">	 * PBEWithSHA1AndRC2_40</span><br><span class="line">	 * &lt;/pre&gt;</span><br><span class="line">	 */</span><br><span class="line">	public static final String ALGORITHM = &quot;PBEWITHMD5andDES&quot;;</span><br><span class="line"> </span><br><span class="line">	/**</span><br><span class="line">	 * 盐初始化</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] initSalt() throws Exception &#123;</span><br><span class="line">		byte[] salt = new byte[8];</span><br><span class="line">		Random random = new Random();</span><br><span class="line">		random.nextBytes(salt);</span><br><span class="line">		return salt;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	/**</span><br><span class="line">	 * 转换密钥&lt;br&gt;</span><br><span class="line">	 * </span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static Key toKey(String password) throws Exception &#123;</span><br><span class="line">		PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());</span><br><span class="line">		SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);</span><br><span class="line">		SecretKey secretKey = keyFactory.generateSecret(keySpec);</span><br><span class="line"> </span><br><span class="line">		return secretKey;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	/**</span><br><span class="line">	 * 加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data 数据</span><br><span class="line">	 * @param password 密码</span><br><span class="line">	 * @param salt  盐</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encrypt(byte[] data, String password, byte[] salt)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line"> </span><br><span class="line">		Key key = toKey(password);</span><br><span class="line"> </span><br><span class="line">		PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 100);</span><br><span class="line">		Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);</span><br><span class="line"> </span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	/**</span><br><span class="line">	 * 解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data  数据</span><br><span class="line">	 * @param password 密码</span><br><span class="line">	 * @param salt  盐</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decrypt(byte[] data, String password, byte[] salt)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line"> </span><br><span class="line">		Key key = toKey(password);</span><br><span class="line"> </span><br><span class="line">		PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 100);</span><br><span class="line">		Cipher cipher = Cipher.getInstance(ALGORITHM);</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, key, paramSpec);</span><br><span class="line"> </span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再给出一个测试类： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"> </span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class PBECoderTest &#123;</span><br><span class="line"> </span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		String inputStr = &quot;abc&quot;;</span><br><span class="line">		System.err.println(&quot;原文: &quot; + inputStr);</span><br><span class="line">		byte[] input = inputStr.getBytes();</span><br><span class="line"> </span><br><span class="line">		String pwd = &quot;efg&quot;;</span><br><span class="line">		System.err.println(&quot;密码: &quot; + pwd);</span><br><span class="line"> </span><br><span class="line">		byte[] salt = PBECoder.initSalt();</span><br><span class="line"> </span><br><span class="line">		byte[] data = PBECoder.encrypt(input, pwd, salt);</span><br><span class="line"> </span><br><span class="line">		System.err.println(&quot;加密后: &quot; + PBECoder.encryptBASE64(data));</span><br><span class="line"> </span><br><span class="line">		byte[] output = PBECoder.decrypt(data, pwd, salt);</span><br><span class="line">		String outputStr = new String(output);</span><br><span class="line"> </span><br><span class="line">		System.err.println(&quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原文: abc</span><br><span class="line">密码: efg</span><br><span class="line">加密后: iCZ0uRtaAhE=</span><br><span class="line"> </span><br><span class="line">解密后: abc</span><br></pre></td></tr></table></figure>

<p>后续我们会介绍非对称加密算法，如RSA、DSA、DH、ECC等。 </p>
<p>接下来我们介绍典型的非对称加密算法——RSA </p>
<h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>这种算法1978年就出现了，它是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。算法的名字以发明者的名字命名：Ron Rivest, AdiShamir 和Leonard Adleman。 </p>
<p>这种加密算法的特点主要是密钥的变化，上文我们看到DES只有一个密钥。相当于只有一把钥匙，如果这把钥匙丢了，数据也就不安全了。RSA同时有两把钥 匙，公钥与私钥。同时支持数字签名。数字签名的意义在于，对传输过来的数据进行校验。确保数据在传输工程中不被修改。 </p>
<p>流程分析： </p>
<ul>
<li>甲方构建密钥对儿，将公钥公布给乙方，将私钥保留。</li>
<li>甲方使用私钥加密数据，然后用私钥对加密后的数据签名，发送给乙方签名以及加密后的数据；乙方使用公钥、签名来验证待解密数据是否有效，如果有效使用公钥对数据解密。</li>
<li>乙方使用公钥加密数据，向甲方发送经过加密后的数据；甲方获得加密数据，通过私钥解密。</li>
</ul>
<p>按如上步骤给出序列图，如下： </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-5.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-6.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-7.png"></p>
<p>通过java代码实现如下：Coder类见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.KeyPair;</span><br><span class="line">import java.security.KeyPairGenerator;</span><br><span class="line">import java.security.PrivateKey;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.security.Signature;</span><br><span class="line">import java.security.interfaces.RSAPrivateKey;</span><br><span class="line">import java.security.interfaces.RSAPublicKey;</span><br><span class="line">import java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line">import java.security.spec.X509EncodedKeySpec;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * RSA安全编码组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class RSACoder extends Coder &#123;</span><br><span class="line">	public static final String KEY_ALGORITHM = &quot;RSA&quot;;</span><br><span class="line">	public static final String SIGNATURE_ALGORITHM = &quot;MD5withRSA&quot;;</span><br><span class="line"></span><br><span class="line">	private static final String PUBLIC_KEY = &quot;RSAPublicKey&quot;;</span><br><span class="line">	private static final String PRIVATE_KEY = &quot;RSAPrivateKey&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 用私钥对信息生成数字签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 *            加密数据</span><br><span class="line">	 * @param privateKey</span><br><span class="line">	 *            私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String sign(byte[] data, String privateKey) throws Exception &#123;</span><br><span class="line">		// 解密由base64编码的私钥</span><br><span class="line">		byte[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line"></span><br><span class="line">		// 构造PKCS8EncodedKeySpec对象</span><br><span class="line">		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line"></span><br><span class="line">		// KEY_ALGORITHM 指定的加密算法</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line"></span><br><span class="line">		// 取私钥匙对象</span><br><span class="line">		PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line"></span><br><span class="line">		// 用私钥对信息生成数字签名</span><br><span class="line">		Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">		signature.initSign(priKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(signature.sign());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 校验数字签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 *            加密数据</span><br><span class="line">	 * @param publicKey</span><br><span class="line">	 *            公钥</span><br><span class="line">	 * @param sign</span><br><span class="line">	 *            数字签名</span><br><span class="line">	 * </span><br><span class="line">	 * @return 校验成功返回true 失败返回false</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 * </span><br><span class="line">	 */</span><br><span class="line">	public static boolean verify(byte[] data, String publicKey, String sign)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// 解密由base64编码的公钥</span><br><span class="line">		byte[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line"></span><br><span class="line">		// 构造X509EncodedKeySpec对象</span><br><span class="line">		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);</span><br><span class="line"></span><br><span class="line">		// KEY_ALGORITHM 指定的加密算法</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line"></span><br><span class="line">		// 取公钥匙对象</span><br><span class="line">		PublicKey pubKey = keyFactory.generatePublic(keySpec);</span><br><span class="line"></span><br><span class="line">		Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">		signature.initVerify(pubKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line"></span><br><span class="line">		// 验证签名是否正常</span><br><span class="line">		return signature.verify(decryptBASE64(sign));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 解密&lt;br&gt;</span><br><span class="line">	 * 用私钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptByPrivateKey(byte[] data, String key)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 对密钥解密</span><br><span class="line">		byte[] keyBytes = decryptBASE64(key);</span><br><span class="line"></span><br><span class="line">		// 取得私钥</span><br><span class="line">		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line"></span><br><span class="line">		// 对数据解密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 解密&lt;br&gt;</span><br><span class="line">	 * 用私钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptByPublicKey(byte[] data, String key)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 对密钥解密</span><br><span class="line">		byte[] keyBytes = decryptBASE64(key);</span><br><span class="line"></span><br><span class="line">		// 取得公钥</span><br><span class="line">		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		Key publicKey = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line"></span><br><span class="line">		// 对数据解密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 加密&lt;br&gt;</span><br><span class="line">	 * 用公钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptByPublicKey(byte[] data, String key)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 对公钥解密</span><br><span class="line">		byte[] keyBytes = decryptBASE64(key);</span><br><span class="line"></span><br><span class="line">		// 取得公钥</span><br><span class="line">		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		Key publicKey = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 加密&lt;br&gt;</span><br><span class="line">	 * 用私钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptByPrivateKey(byte[] data, String key)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 对密钥解密</span><br><span class="line">		byte[] keyBytes = decryptBASE64(key);</span><br><span class="line"></span><br><span class="line">		// 取得私钥</span><br><span class="line">		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);</span><br><span class="line">		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPrivateKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得公钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPublicKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 初始化密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static Map&lt;String, Object&gt; initKey() throws Exception &#123;</span><br><span class="line">		KeyPairGenerator keyPairGen = KeyPairGenerator</span><br><span class="line">				.getInstance(KEY_ALGORITHM);</span><br><span class="line">		keyPairGen.initialize(1024);</span><br><span class="line"></span><br><span class="line">		KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line"></span><br><span class="line">		// 公钥</span><br><span class="line">		RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">		// 私钥</span><br><span class="line">		RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; keyMap = new HashMap&lt;String, Object&gt;(2);</span><br><span class="line"></span><br><span class="line">		keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">		keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line">		return keyMap;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再给出一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class RSACoderTest &#123;</span><br><span class="line">	private String publicKey;</span><br><span class="line">	private String privateKey;</span><br><span class="line"></span><br><span class="line">	@Before</span><br><span class="line">	public void setUp() throws Exception &#123;</span><br><span class="line">		Map&lt;String, Object&gt; keyMap = RSACoder.initKey();</span><br><span class="line"></span><br><span class="line">		publicKey = RSACoder.getPublicKey(keyMap);</span><br><span class="line">		privateKey = RSACoder.getPrivateKey(keyMap);</span><br><span class="line">		System.err.println(&quot;公钥: \n\r&quot; + publicKey);</span><br><span class="line">		System.err.println(&quot;私钥： \n\r&quot; + privateKey);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;公钥加密——私钥解密&quot;);</span><br><span class="line">		String inputStr = &quot;abc&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encodedData = RSACoder.encryptByPublicKey(data, publicKey);</span><br><span class="line"></span><br><span class="line">		byte[] decodedData = RSACoder.decryptByPrivateKey(encodedData,</span><br><span class="line">				privateKey);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(decodedData);</span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void testSign() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;私钥加密——公钥解密&quot;);</span><br><span class="line">		String inputStr = &quot;sign&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encodedData = RSACoder.encryptByPrivateKey(data, privateKey);</span><br><span class="line"></span><br><span class="line">		byte[] decodedData = RSACoder</span><br><span class="line">				.decryptByPublicKey(encodedData, publicKey);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(decodedData);</span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;私钥签名——公钥验证签名&quot;);</span><br><span class="line">		// 产生签名</span><br><span class="line">		String sign = RSACoder.sign(encodedData, privateKey);</span><br><span class="line">		System.err.println(&quot;签名:\r&quot; + sign);</span><br><span class="line"></span><br><span class="line">		// 验证签名</span><br><span class="line">		boolean status = RSACoder.verify(encodedData, publicKey, sign);</span><br><span class="line">		System.err.println(&quot;状态:\r&quot; + status);</span><br><span class="line">		assertTrue(status);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公钥: </span><br><span class="line"></span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCYU/+I0+z1aBl5X6DUUOHQ7FZpmBSDbKTtx89J</span><br><span class="line">EcB64jFCkunELT8qiKly7fzEqD03g8ALlu5XvX+bBqHFy7YPJJP0ekE2X3wjUnh2NxlqpH3/B/xm</span><br><span class="line">1ZdSlCwDIkbijhBVDjA/bu5BObhZqQmDwIxlQInL9oVz+o6FbAZCyHBd7wIDAQAB</span><br><span class="line"></span><br><span class="line">私钥： </span><br><span class="line"></span><br><span class="line">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJhT/4jT7PVoGXlfoNRQ4dDsVmmY</span><br><span class="line">FINspO3Hz0kRwHriMUKS6cQtPyqIqXLt/MSoPTeDwAuW7le9f5sGocXLtg8kk/R6QTZffCNSeHY3</span><br><span class="line">GWqkff8H/GbVl1KULAMiRuKOEFUOMD9u7kE5uFmpCYPAjGVAicv2hXP6joVsBkLIcF3vAgMBAAEC</span><br><span class="line">gYBvZHWoZHmS2EZQqKqeuGr58eobG9hcZzWQoJ4nq/CarBAjw/VovUHE490uK3S9ht4FW7Yzg3LV</span><br><span class="line">/MB06Huifh6qf/X9NQA7SeZRRC8gnCQk6JuDIEVJOud5jU+9tyumJakDKodQ3Jf2zQtNr+5ZdEPl</span><br><span class="line">uwWgv9c4kmpjhAdyMuQmYQJBANn6pcgvyYaia52dnu+yBUsGkaFfwXkzFSExIbi0MXTkhEb/ER/D</span><br><span class="line">rLytukkUu5S5ecz/KBa8U4xIslZDYQbLz5ECQQCy5dutt7RsxN4+dxCWn0/1FrkWl2G329Ucewm3</span><br><span class="line">QU9CKu4D+7Kqdj+Ha3lXP8F0Etaaapi7+EfkRUpukn2ItZV/AkEAlk+I0iphxT1rCB0Q5CjWDY5S</span><br><span class="line">Df2B5JmdEG5Y2o0nLXwG2w44OLct/k2uD4cEcuITY5Dvi/4BftMCZwm/dnhEgQJACIktJSnJwxLV</span><br><span class="line">o9dchENPtlsCM9C/Sd2EWpqISSUlmfugZbJBwR5pQ5XeMUqKeXZYpP+HEBj1nS+tMH9u2/IGEwJA</span><br><span class="line">fL8mZiZXan/oBKrblAbplNcKWGRVD/3y65042PAEeghahlJMiYquV5DzZajuuT0wbJ5xQuZB01+X</span><br><span class="line">nfpFpBJ2dw==</span><br><span class="line"></span><br><span class="line">公钥加密——私钥解密</span><br><span class="line">加密前: abc</span><br><span class="line"></span><br><span class="line">解密后: abc</span><br><span class="line">公钥: </span><br><span class="line"></span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdOj40yEB48XqWxmPILmJAc7UecIN7F32etSHF</span><br><span class="line">9rwbuEh3+iTPOGSxhoSQpOED0vOb0ZIMkBXZSgsxLaBSin2RZ09YKWRjtpCA0kDkiD11gj4tzTiM</span><br><span class="line">l9qq1kwSK7ZkGAgodEn3yIILVmQDuEImHOXFtulvJ71ka07u3LuwUNdB/wIDAQAB</span><br><span class="line"></span><br><span class="line">私钥： </span><br><span class="line"></span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAN06PjTIQHjxepbGY8guYkBztR5w</span><br><span class="line">g3sXfZ61IcX2vBu4SHf6JM84ZLGGhJCk4QPS85vRkgyQFdlKCzEtoFKKfZFnT1gpZGO2kIDSQOSI</span><br><span class="line">PXWCPi3NOIyX2qrWTBIrtmQYCCh0SffIggtWZAO4QiYc5cW26W8nvWRrTu7cu7BQ10H/AgMBAAEC</span><br><span class="line">gYEAz2JWBizjI31bqhP4XiP9PuY5F3vqBW4T+L9cFbQiyumKJc58yzTWUAUGKIIn3enXLG7dNqGr</span><br><span class="line">mbJro4JeFIJ3CiVDpXR9+FluIgI4SXm7ioGKF2NOMA9LR5Fu82W+pLfpTN2y2SaLYWEDZyp53BxY</span><br><span class="line">j9gUxaxi1MQs+C1ZgDF2xmECQQDy70bQntbRfysP+ppCtd56YRnES1Tyekw0wryS2tr+ivQJl7JF</span><br><span class="line">gp5rPAOXpgrq36xHDwUspQ0sJ0vj0O7ywxr1AkEA6SAaLhrJJrYucC0jxwAhUYyaPN+aOsWymaRh</span><br><span class="line">9jA/Wc0wp29SbGTh5CcMuGpXm1g0M+FKW3dGiHgS3rVUKim4owJAbnxgapUzAgiiHxxMeDaavnHW</span><br><span class="line">9C2GrtjsO7qtZOTgYI/1uT8itvZW8lJTF+9OW8/qXE76fXl7ai9dFnl5kzMk2QJBALfHz/vCsArt</span><br><span class="line">mkRiwY6zApE4Z6tPl1V33ymSVovvUzHnOdD1SKQdD5t+UV/crb3QVi8ED0t2B0u0ZSPfDT/D7kMC</span><br><span class="line">QDpwdj9k2F5aokLHBHUNJPFDAp7a5QMaT64gv/d48ITJ68Co+v5WzLMpzJBYXK6PAtqIhxbuPEc2</span><br><span class="line">I2k1Afmrwyw=</span><br><span class="line"></span><br><span class="line">私钥加密——公钥解密</span><br><span class="line">加密前: sign</span><br><span class="line"></span><br><span class="line">解密后: sign</span><br><span class="line">私钥签名——公钥验证签名</span><br><span class="line">签名:</span><br><span class="line">ud1RsIwmSC1pN22I4IXteg1VD2FbiehKUfNxgVSHzvQNIK+d20FCkHCqh9djP3h94iWnIUY0ifU+</span><br><span class="line">mbJkhAl/i5krExOE0hknOnPMcEP+lZV1RbJI2zG2YooSp2XDleqrQk5e/QF2Mx0Zxt8Xsg7ucVpn</span><br><span class="line">i3wwbYWs9wSzIf0UjlM=</span><br><span class="line"></span><br><span class="line">状态:</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>简要总结一下，使用公钥加密、私钥解密，完成了乙方到甲方的一次数据传递，通过私钥加密、公钥解密，同时通过私钥签名、公钥验证签名，完成了一次甲方到乙方的数据传递与验证，两次数据传递完成一整套的数据交互！ </p>
<p>类似数字签名，数字信封是这样描述的： </p>
<h4 id="数字信封"><a href="#数字信封" class="headerlink" title="数字信封"></a>数字信封</h4><p>数字信封用加密技术来保证只有特定的收信人才能阅读信的内容。 </p>
<h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p>信息发送方采用对称密钥来加密信息，然后再用接收方的公钥来加密此对称密钥（这部分称为数字信封），再将它和信息一起发送给接收方；接收方先用相应的私钥打开数字信封，得到对称密钥，然后使用对称密钥再解开信息。</p>
<p>接下来我们分析DH加密算法，一种适基于密钥一致协议的加密算法。 </p>
<h3 id="DH"><a href="#DH" class="headerlink" title="DH"></a>DH</h3><p>Diffie- Hellman算法(D-H算法)，密钥一致协议。是由公开密钥密码体制的奠基人Diffie和Hellman所提出的一种思想。简单的说就是允许两名用 户在公开媒体上交换信息以生成”一致”的、可以共享的密钥。换句话说，就是由甲方产出一对密钥（公钥、私钥），乙方依照甲方公钥产生乙方密钥对（公钥、私 钥）。以此为基线，作为数据传输保密基础，同时双方使用同一种对称加密算法构建本地密钥（SecretKey）对数据加密。这样，在互通了本地密钥 （SecretKey）算法后，甲乙双方公开自己的公钥，使用对方的公钥和刚才产生的私钥加密数据，同时可以使用对方的公钥和自己的私钥对数据解密。不单 单是甲乙双方两方，可以扩展为多方共享数据通讯，这样就完成了网络交互数据的安全通讯！该算法源于中国的同余定理——中国馀数定理。  </p>
<p>流程分析： </p>
<ul>
<li>1.甲方构建密钥对儿，将公钥公布给乙方，将私钥保留；双方约定数据加密算法；乙方通过甲方公钥构建密钥对儿，将公钥公布给甲方，将私钥保留。 </li>
<li>2.甲方使用私钥、乙方公钥、约定数据加密算法构建本地密钥，然后通过本地密钥加密数据，发送给乙方加密后的数据；乙方使用私钥、甲方公钥、约定数据加密算法构建本地密钥，然后通过本地密钥对数据解密。 </li>
<li>3.乙方使用私钥、甲方公钥、约定数据加密算法构建本地密钥，然后通过本地密钥加密数据，发送给甲方加密后的数据；甲方使用私钥、乙方公钥、约定数据加密算法构建本地密钥，然后通过本地密钥对数据解密。 </li>
</ul>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-8.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-9.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-10.png"></p>
<p>通过java代码实现如下：Coder类见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.KeyPair;</span><br><span class="line">import java.security.KeyPairGenerator;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line">import java.security.spec.X509EncodedKeySpec;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.KeyAgreement;</span><br><span class="line">import javax.crypto.SecretKey;</span><br><span class="line">import javax.crypto.interfaces.DHPrivateKey;</span><br><span class="line">import javax.crypto.interfaces.DHPublicKey;</span><br><span class="line">import javax.crypto.spec.DHParameterSpec;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DH安全编码组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class DHCoder extends Coder &#123;</span><br><span class="line">	public static final String ALGORITHM = &quot;DH&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 默认密钥字节数</span><br><span class="line">	 * </span><br><span class="line">	 * &lt;pre&gt;</span><br><span class="line">	 * DH</span><br><span class="line">	 * Default Keysize 1024  </span><br><span class="line">	 * Keysize must be a multiple of 64, ranging from 512 to 1024 (inclusive).</span><br><span class="line">	 * &lt;/pre&gt;</span><br><span class="line">	 */</span><br><span class="line">	private static final int KEY_SIZE = 1024;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * DH加密下需要一种对称加密算法对数据加密，这里我们使用DES，也可以使用其他对称加密算法。</span><br><span class="line">	 */</span><br><span class="line">	public static final String SECRET_ALGORITHM = &quot;DES&quot;;</span><br><span class="line">	private static final String PUBLIC_KEY = &quot;DHPublicKey&quot;;</span><br><span class="line">	private static final String PRIVATE_KEY = &quot;DHPrivateKey&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 初始化甲方密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static Map&lt;String, Object&gt; initKey() throws Exception &#123;</span><br><span class="line">		KeyPairGenerator keyPairGenerator = KeyPairGenerator</span><br><span class="line">				.getInstance(ALGORITHM);</span><br><span class="line">		keyPairGenerator.initialize(KEY_SIZE);</span><br><span class="line"></span><br><span class="line">		KeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class="line"></span><br><span class="line">		// 甲方公钥</span><br><span class="line">		DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">		// 甲方私钥</span><br><span class="line">		DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; keyMap = new HashMap&lt;String, Object&gt;(2);</span><br><span class="line"></span><br><span class="line">		keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">		keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line">		return keyMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 初始化乙方密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param key</span><br><span class="line">	 *            甲方公钥</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static Map&lt;String, Object&gt; initKey(String key) throws Exception &#123;</span><br><span class="line">		// 解析甲方公钥</span><br><span class="line">		byte[] keyBytes = decryptBASE64(key);</span><br><span class="line">		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line">		PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line"></span><br><span class="line">		// 由甲方公钥构建乙方密钥</span><br><span class="line">		DHParameterSpec dhParamSpec = ((DHPublicKey) pubKey).getParams();</span><br><span class="line"></span><br><span class="line">		KeyPairGenerator keyPairGenerator = KeyPairGenerator</span><br><span class="line">				.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		keyPairGenerator.initialize(dhParamSpec);</span><br><span class="line"></span><br><span class="line">		KeyPair keyPair = keyPairGenerator.generateKeyPair();</span><br><span class="line"></span><br><span class="line">		// 乙方公钥</span><br><span class="line">		DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();</span><br><span class="line"></span><br><span class="line">		// 乙方私钥</span><br><span class="line">		DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; keyMap = new HashMap&lt;String, Object&gt;(2);</span><br><span class="line"></span><br><span class="line">		keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">		keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line"></span><br><span class="line">		return keyMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 加密&lt;br&gt;</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 *            待加密数据</span><br><span class="line">	 * @param publicKey</span><br><span class="line">	 *            甲方公钥</span><br><span class="line">	 * @param privateKey</span><br><span class="line">	 *            乙方私钥</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encrypt(byte[] data, String publicKey,</span><br><span class="line">			String privateKey) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// 生成本地密钥</span><br><span class="line">		SecretKey secretKey = getSecretKey(publicKey, privateKey);</span><br><span class="line"></span><br><span class="line">		// 数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, secretKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 解密&lt;br&gt;</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 *            待解密数据</span><br><span class="line">	 * @param publicKey</span><br><span class="line">	 *            乙方公钥</span><br><span class="line">	 * @param privateKey</span><br><span class="line">	 *            乙方私钥</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decrypt(byte[] data, String publicKey,</span><br><span class="line">			String privateKey) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// 生成本地密钥</span><br><span class="line">		SecretKey secretKey = getSecretKey(publicKey, privateKey);</span><br><span class="line">		// 数据解密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, secretKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 构建密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param publicKey</span><br><span class="line">	 *            公钥</span><br><span class="line">	 * @param privateKey</span><br><span class="line">	 *            私钥</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static SecretKey getSecretKey(String publicKey, String privateKey)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 初始化公钥</span><br><span class="line">		byte[] pubKeyBytes = decryptBASE64(publicKey);</span><br><span class="line"></span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line">		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(pubKeyBytes);</span><br><span class="line">		PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line"></span><br><span class="line">		// 初始化私钥</span><br><span class="line">		byte[] priKeyBytes = decryptBASE64(privateKey);</span><br><span class="line"></span><br><span class="line">		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(priKeyBytes);</span><br><span class="line">		Key priKey = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line"></span><br><span class="line">		KeyAgreement keyAgree = KeyAgreement.getInstance(keyFactory</span><br><span class="line">				.getAlgorithm());</span><br><span class="line">		keyAgree.init(priKey);</span><br><span class="line">		keyAgree.doPhase(pubKey, true);</span><br><span class="line"></span><br><span class="line">		// 生成本地密钥</span><br><span class="line">		SecretKey secretKey = keyAgree.generateSecret(SECRET_ALGORITHM);</span><br><span class="line"></span><br><span class="line">		return secretKey;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPrivateKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得公钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPublicKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再给出一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class DHCoderTest &#123;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		// 生成甲方密钥对儿</span><br><span class="line">		Map&lt;String, Object&gt; aKeyMap = DHCoder.initKey();</span><br><span class="line">		String aPublicKey = DHCoder.getPublicKey(aKeyMap);</span><br><span class="line">		String aPrivateKey = DHCoder.getPrivateKey(aKeyMap);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;甲方公钥:\r&quot; + aPublicKey);</span><br><span class="line">		System.err.println(&quot;甲方私钥:\r&quot; + aPrivateKey);</span><br><span class="line">		</span><br><span class="line">		// 由甲方公钥产生本地密钥对儿</span><br><span class="line">		Map&lt;String, Object&gt; bKeyMap = DHCoder.initKey(aPublicKey);</span><br><span class="line">		String bPublicKey = DHCoder.getPublicKey(bKeyMap);</span><br><span class="line">		String bPrivateKey = DHCoder.getPrivateKey(bKeyMap);</span><br><span class="line">		</span><br><span class="line">		System.err.println(&quot;乙方公钥:\r&quot; + bPublicKey);</span><br><span class="line">		System.err.println(&quot;乙方私钥:\r&quot; + bPrivateKey);</span><br><span class="line">		</span><br><span class="line">		String aInput = &quot;abc &quot;;</span><br><span class="line">		System.err.println(&quot;原文: &quot; + aInput);</span><br><span class="line"></span><br><span class="line">		// 由甲方公钥，乙方私钥构建密文</span><br><span class="line">		byte[] aCode = DHCoder.encrypt(aInput.getBytes(), aPublicKey,</span><br><span class="line">				bPrivateKey);</span><br><span class="line"></span><br><span class="line">		// 由乙方公钥，甲方私钥解密</span><br><span class="line">		byte[] aDecode = DHCoder.decrypt(aCode, bPublicKey, aPrivateKey);</span><br><span class="line">		String aOutput = (new String(aDecode));</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;解密: &quot; + aOutput);</span><br><span class="line"></span><br><span class="line">		assertEquals(aInput, aOutput);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot; ===============反过来加密解密================== &quot;);</span><br><span class="line">		String bInput = &quot;def &quot;;</span><br><span class="line">		System.err.println(&quot;原文: &quot; + bInput);</span><br><span class="line"></span><br><span class="line">		// 由乙方公钥，甲方私钥构建密文</span><br><span class="line">		byte[] bCode = DHCoder.encrypt(bInput.getBytes(), bPublicKey,</span><br><span class="line">				aPrivateKey);</span><br><span class="line"></span><br><span class="line">		// 由甲方公钥，乙方私钥解密</span><br><span class="line">		byte[] bDecode = DHCoder.decrypt(bCode, aPublicKey, bPrivateKey);</span><br><span class="line">		String bOutput = (new String(bDecode));</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;解密: &quot; + bOutput);</span><br><span class="line"></span><br><span class="line">		assertEquals(bInput, bOutput);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">甲方公钥:</span><br><span class="line">MIHfMIGXBgkqhkiG9w0BAwEwgYkCQQD8poLOjhLKuibvzPcRDlJtsHiwXt7LzR60ogjzrhYXrgHz</span><br><span class="line">W5Gkfm32NBPF4S7QiZvNEyrNUNmRUb3EPuc3WS4XAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSG</span><br><span class="line">kx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykAgIBgANDAAJAdAWBVmIzqcko</span><br><span class="line">Ej6qFjLDL2+Y3FPq1iRbnOyOpDj71yKaK1K+FhTv04B0zy4DKcvAASV7/Gv0W+bgqdmffRkqrQ==</span><br><span class="line"></span><br><span class="line">甲方私钥:</span><br><span class="line">MIHRAgEAMIGXBgkqhkiG9w0BAwEwgYkCQQD8poLOjhLKuibvzPcRDlJtsHiwXt7LzR60ogjzrhYX</span><br><span class="line">rgHzW5Gkfm32NBPF4S7QiZvNEyrNUNmRUb3EPuc3WS4XAkBnhHGyepz0TukaScUUfbGpqvJE8FpD</span><br><span class="line">TWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykAgIBgAQyAjACJRfy1LyR</span><br><span class="line">eHyD+4Hfb+xR0uoIGR1oL9i9Nk6g2AAuaDPgEVWHn+QXID13yL/uDos=</span><br><span class="line"></span><br><span class="line">乙方公钥:</span><br><span class="line">MIHfMIGXBgkqhkiG9w0BAwEwgYkCQQD8poLOjhLKuibvzPcRDlJtsHiwXt7LzR60ogjzrhYXrgHz</span><br><span class="line">W5Gkfm32NBPF4S7QiZvNEyrNUNmRUb3EPuc3WS4XAkBnhHGyepz0TukaScUUfbGpqvJE8FpDTWSG</span><br><span class="line">kx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykAgIBgANDAAJAVEYSfBA+I9nr</span><br><span class="line">dWw3OBv475C+eBrWBBYqt0m6/eu4ptuDQHwV4MmUtKAC2wc2nNrdb1wmBhY1X8RnWkJ1XmdDbQ==</span><br><span class="line"></span><br><span class="line">乙方私钥:</span><br><span class="line">MIHSAgEAMIGXBgkqhkiG9w0BAwEwgYkCQQD8poLOjhLKuibvzPcRDlJtsHiwXt7LzR60ogjzrhYX</span><br><span class="line">rgHzW5Gkfm32NBPF4S7QiZvNEyrNUNmRUb3EPuc3WS4XAkBnhHGyepz0TukaScUUfbGpqvJE8FpD</span><br><span class="line">TWSGkx0tFCcbnjUDC3H9c9oXkGmzLik1Yw4cIGI1TQ2iCmxBblC+eUykAgIBgAQzAjEAqaZiCdXp</span><br><span class="line">2iNpdBlHRaO9ir70wo2n32xNlIzIX19VLSPCDdeUWkgRv4CEj/8k+/yd</span><br><span class="line"></span><br><span class="line">原文: abc </span><br><span class="line">解密: abc </span><br><span class="line"> ===============反过来加密解密================== </span><br><span class="line">原文: def </span><br><span class="line">解密: def</span><br></pre></td></tr></table></figure>

<p>如我所言，甲乙双方在获得对方公钥后可以对发送给对方的数据加密，同时也能对接收到的数据解密，达到了数据安全通信的目的！</p>
<p>接下来我们介绍DSA数字签名，非对称加密的另一种实现。 </p>
<h3 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h3><p>DSA-Digital Signature Algorithm 是Schnorr和ElGamal签名算法的变种，被美国NIST作为DSS(DigitalSignature Standard)。简单的说，这是一种更高级的验证方式，用作数字签名。不单单只有公钥、私钥，还有数字签名。私钥加密生成数字签名，公钥验证数据及签 名。如果数据和签名不匹配则认为验证失败！数字签名的作用就是校验数据在传输过程中不被修改。数字签名，是单向加密的升级！ </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-11.png"><br><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-12.png"></p>
<p>通过java代码实现如下：Coder类见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.security.Key;</span><br><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.KeyPair;</span><br><span class="line">import java.security.KeyPairGenerator;</span><br><span class="line">import java.security.PrivateKey;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.security.SecureRandom;</span><br><span class="line">import java.security.Signature;</span><br><span class="line">import java.security.interfaces.DSAPrivateKey;</span><br><span class="line">import java.security.interfaces.DSAPublicKey;</span><br><span class="line">import java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line">import java.security.spec.X509EncodedKeySpec;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DSA安全编码组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class DSACoder extends Coder &#123;</span><br><span class="line"></span><br><span class="line">	public static final String ALGORITHM = &quot;DSA&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 默认密钥字节数</span><br><span class="line">	 * </span><br><span class="line">	 * &lt;pre&gt;</span><br><span class="line">	 * DSA </span><br><span class="line">	 * Default Keysize 1024  </span><br><span class="line">	 * Keysize must be a multiple of 64, ranging from 512 to 1024 (inclusive).</span><br><span class="line">	 * &lt;/pre&gt;</span><br><span class="line">	 */</span><br><span class="line">	private static final int KEY_SIZE = 1024;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 默认种子</span><br><span class="line">	 */</span><br><span class="line">	private static final String DEFAULT_SEED = &quot;0f22507a10bbddd07d8a3082122966e3&quot;;</span><br><span class="line"></span><br><span class="line">	private static final String PUBLIC_KEY = &quot;DSAPublicKey&quot;;</span><br><span class="line">	private static final String PRIVATE_KEY = &quot;DSAPrivateKey&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 用私钥对信息生成数字签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 *            加密数据</span><br><span class="line">	 * @param privateKey</span><br><span class="line">	 *            私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String sign(byte[] data, String privateKey) throws Exception &#123;</span><br><span class="line">		// 解密由base64编码的私钥</span><br><span class="line">		byte[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line"></span><br><span class="line">		// 构造PKCS8EncodedKeySpec对象</span><br><span class="line">		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line"></span><br><span class="line">		// KEY_ALGORITHM 指定的加密算法</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line"></span><br><span class="line">		// 取私钥匙对象</span><br><span class="line">		PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line"></span><br><span class="line">		// 用私钥对信息生成数字签名</span><br><span class="line">		Signature signature = Signature.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		signature.initSign(priKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(signature.sign());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 校验数字签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 *            加密数据</span><br><span class="line">	 * @param publicKey</span><br><span class="line">	 *            公钥</span><br><span class="line">	 * @param sign</span><br><span class="line">	 *            数字签名</span><br><span class="line">	 * </span><br><span class="line">	 * @return 校验成功返回true 失败返回false</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 * </span><br><span class="line">	 */</span><br><span class="line">	public static boolean verify(byte[] data, String publicKey, String sign)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// 解密由base64编码的公钥</span><br><span class="line">		byte[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line"></span><br><span class="line">		// 构造X509EncodedKeySpec对象</span><br><span class="line">		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);</span><br><span class="line"></span><br><span class="line">		// ALGORITHM 指定的加密算法</span><br><span class="line">		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);</span><br><span class="line"></span><br><span class="line">		// 取公钥匙对象</span><br><span class="line">		PublicKey pubKey = keyFactory.generatePublic(keySpec);</span><br><span class="line"></span><br><span class="line">		Signature signature = Signature.getInstance(keyFactory.getAlgorithm());</span><br><span class="line">		signature.initVerify(pubKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line"></span><br><span class="line">		// 验证签名是否正常</span><br><span class="line">		return signature.verify(decryptBASE64(sign));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 生成密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param seed</span><br><span class="line">	 *            种子</span><br><span class="line">	 * @return 密钥对象</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static Map&lt;String, Object&gt; initKey(String seed) throws Exception &#123;</span><br><span class="line">		KeyPairGenerator keygen = KeyPairGenerator.getInstance(ALGORITHM);</span><br><span class="line">		// 初始化随机产生器</span><br><span class="line">		SecureRandom secureRandom = new SecureRandom();</span><br><span class="line">		secureRandom.setSeed(seed.getBytes());</span><br><span class="line">		keygen.initialize(KEY_SIZE, secureRandom);</span><br><span class="line"></span><br><span class="line">		KeyPair keys = keygen.genKeyPair();</span><br><span class="line"></span><br><span class="line">		DSAPublicKey publicKey = (DSAPublicKey) keys.getPublic();</span><br><span class="line">		DSAPrivateKey privateKey = (DSAPrivateKey) keys.getPrivate();</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(2);</span><br><span class="line">		map.put(PUBLIC_KEY, publicKey);</span><br><span class="line">		map.put(PRIVATE_KEY, privateKey);</span><br><span class="line"></span><br><span class="line">		return map;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 默认生成密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return 密钥对象</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static Map&lt;String, Object&gt; initKey() throws Exception &#123;</span><br><span class="line">		return initKey(DEFAULT_SEED);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPrivateKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得公钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPublicKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再给出一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class DSACoderTest &#123;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		String inputStr = &quot;abc&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		// 构建密钥</span><br><span class="line">		Map&lt;String, Object&gt; keyMap = DSACoder.initKey();</span><br><span class="line"></span><br><span class="line">		// 获得密钥</span><br><span class="line">		String publicKey = DSACoder.getPublicKey(keyMap);</span><br><span class="line">		String privateKey = DSACoder.getPrivateKey(keyMap);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;公钥:\r&quot; + publicKey);</span><br><span class="line">		System.err.println(&quot;私钥:\r&quot; + privateKey);</span><br><span class="line"></span><br><span class="line">		// 产生签名</span><br><span class="line">		String sign = DSACoder.sign(data, privateKey);</span><br><span class="line">		System.err.println(&quot;签名:\r&quot; + sign);</span><br><span class="line"></span><br><span class="line">		// 验证签名</span><br><span class="line">		boolean status = DSACoder.verify(data, publicKey, sign);</span><br><span class="line">		System.err.println(&quot;状态:\r&quot; + status);</span><br><span class="line">		assertTrue(status);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公钥:</span><br><span class="line">MIIBtzCCASwGByqGSM44BAEwggEfAoGBAP1/U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2USZp</span><br><span class="line">RV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f6AR7ECLCT7up1/63xhv4O1fn</span><br><span class="line">xqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmCouuE</span><br><span class="line">C/BYHPUCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdRWVeOutRZT+ZxBxCBgLRJ</span><br><span class="line">FnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImo</span><br><span class="line">g9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoDgYQAAoGAIu4RUlcQLp49PI0MrbssOY+3uySVnp0TULSv</span><br><span class="line">5T4VaHoKzsLHgGTrwOvsGA+V3yCNl2WDu3D84bSLF7liTWgOj+SMOEaPk4VyRTlLXZWGPsf1Mfd9</span><br><span class="line">21XAbMeVyKDSHHVGbMjBScajf3bXooYQMlyoHiOt/WrCo+mv7efstMM0PGo=</span><br><span class="line"></span><br><span class="line">私钥:</span><br><span class="line">MIIBTAIBADCCASwGByqGSM44BAEwggEfAoGBAP1/U4EddRIpUt9KnC7s5Of2EbdSPO9EAMMeP4C2</span><br><span class="line">USZpRV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f6AR7ECLCT7up1/63xhv4</span><br><span class="line">O1fnxqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv8iIDGZ3RSAHHAhUAl2BQjxUjC8yykrmC</span><br><span class="line">ouuEC/BYHPUCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdRWVeOutRZT+ZxBxCB</span><br><span class="line">gLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhR</span><br><span class="line">kImog9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoEFwIVAIegLUtmm2oQKQJTOiLugHTSjl/q</span><br><span class="line"></span><br><span class="line">签名:</span><br><span class="line">MC0CFQCMg0J/uZmF8GuRpr3TNq48w60nDwIUJCyYNah+HtbU6NcQfy8Ac6LeLQs=</span><br><span class="line"></span><br><span class="line">状态:</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">注意状态为true，就验证成功！</span><br></pre></td></tr></table></figure>

<h3 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h3><p>ECC-Elliptic Curves Cryptography，椭圆曲线密码编码学，是目前已知的公钥体制中，对每比特所提供加密强度最高的一种体制。在软件注册保护方面起到很大的作用，一般的序列号通常由该算法产生。 </p>
<p>当我开始整理《Java加密技术（二）》的时候，我就已经在开始研究ECC了，但是关于Java实现ECC算法的资料实在是太少了，无论是国内还是国外的 资料，无论是官方还是非官方的解释，最终只有一种答案——ECC算法在jdk1.5后加入支持，目前仅仅只能完成密钥的生成与解析。 如果想要获得ECC算法实现，需要调用硬件完成加密/解密（ECC算法相当耗费资源，如果单纯使用CPU进行加密/解密，效率低下），涉及到Java Card领域，PKCS#11。 其实，PKCS#11配置很简单，但缺乏硬件设备，无法尝试！ </p>
<p>尽管如此，我照旧提供相应的Java实现代码，以供大家参考。 </p>
<p>通过java代码实现如下：Coder类见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.security.Key;</span><br><span class="line">import java.security.KeyFactory;</span><br><span class="line">import java.security.interfaces.ECPrivateKey;</span><br><span class="line">import java.security.interfaces.ECPublicKey;</span><br><span class="line">import java.security.spec.ECFieldF2m;</span><br><span class="line">import java.security.spec.ECParameterSpec;</span><br><span class="line">import java.security.spec.ECPoint;</span><br><span class="line">import java.security.spec.ECPrivateKeySpec;</span><br><span class="line">import java.security.spec.ECPublicKeySpec;</span><br><span class="line">import java.security.spec.EllipticCurve;</span><br><span class="line">import java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line">import java.security.spec.X509EncodedKeySpec;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.NullCipher;</span><br><span class="line"></span><br><span class="line">import sun.security.ec.ECKeyFactory;</span><br><span class="line">import sun.security.ec.ECPrivateKeyImpl;</span><br><span class="line">import sun.security.ec.ECPublicKeyImpl;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * ECC安全编码组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class ECCCoder extends Coder &#123;</span><br><span class="line"></span><br><span class="line">	public static final String ALGORITHM = &quot;EC&quot;;</span><br><span class="line">	private static final String PUBLIC_KEY = &quot;ECCPublicKey&quot;;</span><br><span class="line">	private static final String PRIVATE_KEY = &quot;ECCPrivateKey&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 解密&lt;br&gt;</span><br><span class="line">	 * 用私钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param key</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decrypt(byte[] data, String key) throws Exception &#123;</span><br><span class="line">		// 对密钥解密</span><br><span class="line">		byte[] keyBytes = decryptBASE64(key);</span><br><span class="line"></span><br><span class="line">		// 取得私钥</span><br><span class="line">		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = ECKeyFactory.INSTANCE;</span><br><span class="line"></span><br><span class="line">		ECPrivateKey priKey = (ECPrivateKey) keyFactory</span><br><span class="line">				.generatePrivate(pkcs8KeySpec);</span><br><span class="line"></span><br><span class="line">		ECPrivateKeySpec ecPrivateKeySpec = new ECPrivateKeySpec(priKey.getS(),</span><br><span class="line">				priKey.getParams());</span><br><span class="line"></span><br><span class="line">		// 对数据解密</span><br><span class="line">		// TODO Chipher不支持EC算法 未能实现</span><br><span class="line">		Cipher cipher = new NullCipher();</span><br><span class="line">		// Cipher.getInstance(ALGORITHM, keyFactory.getProvider());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, priKey, ecPrivateKeySpec.getParams());</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 加密&lt;br&gt;</span><br><span class="line">	 * 用公钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param privateKey</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encrypt(byte[] data, String privateKey)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 对公钥解密</span><br><span class="line">		byte[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line"></span><br><span class="line">		// 取得公钥</span><br><span class="line">		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);</span><br><span class="line">		KeyFactory keyFactory = ECKeyFactory.INSTANCE;</span><br><span class="line"></span><br><span class="line">		ECPublicKey pubKey = (ECPublicKey) keyFactory</span><br><span class="line">				.generatePublic(x509KeySpec);</span><br><span class="line"></span><br><span class="line">		ECPublicKeySpec ecPublicKeySpec = new ECPublicKeySpec(pubKey.getW(),</span><br><span class="line">				pubKey.getParams());</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		// TODO Chipher不支持EC算法 未能实现</span><br><span class="line">		Cipher cipher = new NullCipher();</span><br><span class="line">		// Cipher.getInstance(ALGORITHM, keyFactory.getProvider());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, pubKey, ecPublicKeySpec.getParams());</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPrivateKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 取得公钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyMap</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String getPublicKey(Map&lt;String, Object&gt; keyMap)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line"></span><br><span class="line">		return encryptBASE64(key.getEncoded());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 初始化密钥</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static Map&lt;String, Object&gt; initKey() throws Exception &#123;</span><br><span class="line">		BigInteger x1 = new BigInteger(</span><br><span class="line">				&quot;2fe13c0537bbc11acaa07d793de4e6d5e5c94eee8&quot;, 16);</span><br><span class="line">		BigInteger x2 = new BigInteger(</span><br><span class="line">				&quot;289070fb05d38ff58321f2e800536d538ccdaa3d9&quot;, 16);</span><br><span class="line"></span><br><span class="line">		ECPoint g = new ECPoint(x1, x2);</span><br><span class="line"></span><br><span class="line">		// the order of generator</span><br><span class="line">		BigInteger n = new BigInteger(</span><br><span class="line">				&quot;5846006549323611672814741753598448348329118574063&quot;, 10);</span><br><span class="line">		// the cofactor</span><br><span class="line">		int h = 2;</span><br><span class="line">		int m = 163;</span><br><span class="line">		int[] ks = &#123; 7, 6, 3 &#125;;</span><br><span class="line">		ECFieldF2m ecField = new ECFieldF2m(m, ks);</span><br><span class="line">		// y^2+xy=x^3+x^2+1</span><br><span class="line">		BigInteger a = new BigInteger(&quot;1&quot;, 2);</span><br><span class="line">		BigInteger b = new BigInteger(&quot;1&quot;, 2);</span><br><span class="line"></span><br><span class="line">		EllipticCurve ellipticCurve = new EllipticCurve(ecField, a, b);</span><br><span class="line"></span><br><span class="line">		ECParameterSpec ecParameterSpec = new ECParameterSpec(ellipticCurve, g,</span><br><span class="line">				n, h);</span><br><span class="line">		// 公钥</span><br><span class="line">		ECPublicKey publicKey = new ECPublicKeyImpl(g, ecParameterSpec);</span><br><span class="line"></span><br><span class="line">		BigInteger s = new BigInteger(</span><br><span class="line">				&quot;1234006549323611672814741753598448348329118574063&quot;, 10);</span><br><span class="line">		// 私钥</span><br><span class="line">		ECPrivateKey privateKey = new ECPrivateKeyImpl(s, ecParameterSpec);</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; keyMap = new HashMap&lt;String, Object&gt;(2);</span><br><span class="line"></span><br><span class="line">		keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">		keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line"></span><br><span class="line">		return keyMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意上述代码中的TODO内容，再次提醒注意，Chipher不支持EC算法 ，以上代码仅供参考。Chipher、Signature、KeyPairGenerator、KeyAgreement、SecretKey均不支持EC算法。为了确保程序能够正常执行，我们使用了NullCipher类，验证程序。</p>
<p>照旧提供一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.security.spec.ECFieldF2m;</span><br><span class="line">import java.security.spec.ECParameterSpec;</span><br><span class="line">import java.security.spec.ECPoint;</span><br><span class="line">import java.security.spec.ECPrivateKeySpec;</span><br><span class="line">import java.security.spec.ECPublicKeySpec;</span><br><span class="line">import java.security.spec.EllipticCurve;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class ECCCoderTest &#123;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		String inputStr = &quot;abc&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; keyMap = ECCCoder.initKey();</span><br><span class="line"></span><br><span class="line">		String publicKey = ECCCoder.getPublicKey(keyMap);</span><br><span class="line">		String privateKey = ECCCoder.getPrivateKey(keyMap);</span><br><span class="line">		System.err.println(&quot;公钥: \n&quot; + publicKey);</span><br><span class="line">		System.err.println(&quot;私钥： \n&quot; + privateKey);</span><br><span class="line"></span><br><span class="line">		byte[] encodedData = ECCCoder.encrypt(data, publicKey);</span><br><span class="line"></span><br><span class="line">		byte[] decodedData = ECCCoder.decrypt(encodedData, privateKey);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(decodedData);</span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公钥: </span><br><span class="line">MEAwEAYHKoZIzj0CAQYFK4EEAAEDLAAEAv4TwFN7vBGsqgfXk95ObV5clO7oAokHD7BdOP9YMh8u</span><br><span class="line">gAU21TjM2qPZ</span><br><span class="line"></span><br><span class="line">私钥： </span><br><span class="line">MDICAQAwEAYHKoZIzj0CAQYFK4EEAAEEGzAZAgEBBBTYJsR3BN7TFw7JHcAHFkwNmfil7w==</span><br><span class="line"></span><br><span class="line">加密前: abc</span><br><span class="line"></span><br><span class="line">解密后: abc</span><br><span class="line">    本篇的主要内容为Java证书体系的实现。 </span><br></pre></td></tr></table></figure>

<p>在构建Java代码实现前，我们需要完成证书的制作。 </p>
<h4 id="1-生成keyStroe文件"><a href="#1-生成keyStroe文件" class="headerlink" title="1.生成keyStroe文件"></a>1.生成keyStroe文件</h4><p>在命令行下执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -genkey -validity 36000 -alias www.zlex.org -keyalg RSA -keystore d:\zlex.keystore</span><br></pre></td></tr></table></figure>

<p>其中</p>
<ul>
<li>-genkey表示生成密钥 </li>
<li>-validity指定证书有效期，这里是36000天 </li>
<li>-alias指定别名，这里是<a href="http://www.zlex.org/">www.zlex.org</a> </li>
<li>-keyalg指定算法，这里是RSA </li>
<li>-keystore指定存储位置，这里是d:\zlex.keystore </li>
</ul>
<p>在这里我使用的密码为 123456 </p>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入keystore密码：</span><br><span class="line">再次输入新密码:</span><br><span class="line">您的名字与姓氏是什么？</span><br><span class="line">  [Unknown]：  www.zlex.org</span><br><span class="line">您的组织单位名称是什么？</span><br><span class="line">  [Unknown]：  zlex</span><br><span class="line">您的组织名称是什么？</span><br><span class="line">  [Unknown]：  zlex</span><br><span class="line">您所在的城市或区域名称是什么？</span><br><span class="line">  [Unknown]：  BJ</span><br><span class="line">您所在的州或省份名称是什么？</span><br><span class="line">  [Unknown]：  BJ</span><br><span class="line">该单位的两字母国家代码是什么</span><br><span class="line">  [Unknown]：  CN</span><br><span class="line">CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN 正确吗？</span><br><span class="line">  [否]：  Y</span><br><span class="line"></span><br><span class="line">输入&lt;tomcat&gt;的主密码</span><br><span class="line">        （如果和 keystore 密码相同，按回车）：</span><br><span class="line">再次输入新密码:</span><br><span class="line"></span><br><span class="line">这时，在D盘下会生成一个zlex.keystore的文件。 </span><br></pre></td></tr></table></figure>

<h4 id="2-生成自签名证书"><a href="#2-生成自签名证书" class="headerlink" title="2.生成自签名证书"></a>2.生成自签名证书</h4><p>光有keyStore文件是不够的，还需要证书文件，证书才是直接提供给外界使用的公钥凭证。<br>导出证书：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -export -keystore d:\zlex.keystore -alias www.zlex.org -file d:\zlex.cer -rfc</span><br></pre></td></tr></table></figure>

<p>其中 </p>
<ul>
<li>-export指定为导出操作 </li>
<li>-keystore指定keystore文件 </li>
<li>-alias指定导出keystore文件中的别名 </li>
<li>-file指向导出路径 </li>
<li>-rfc以文本格式输出，也就是以BASE64编码输出 </li>
</ul>
<p>这里的密码是 123456 </p>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入keystore密码：</span><br><span class="line">保存在文件中的认证 &lt;d:\zlex.cer&gt;</span><br></pre></td></tr></table></figure>

<p>当然，使用方是需要导入证书的！ </p>
<p>可以通过自签名证书完成CAS单点登录系统的构建！ </p>
<p>Ok，准备工作完成，开始Java实现！ </p>
<p>通过java代码实现如下：Coder类见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.security.KeyStore;</span><br><span class="line">import java.security.PrivateKey;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.security.Signature;</span><br><span class="line">import java.security.cert.Certificate;</span><br><span class="line">import java.security.cert.CertificateFactory;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 证书组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class CertificateCoder extends Coder &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * Java密钥库(Java Key Store，JKS)KEY_STORE</span><br><span class="line">	 */</span><br><span class="line">	public static final String KEY_STORE = &quot;JKS&quot;;</span><br><span class="line"></span><br><span class="line">	public static final String X509 = &quot;X.509&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 由KeyStore获得私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static PrivateKey getPrivateKey(String keyStorePath, String alias,</span><br><span class="line">			String password) throws Exception &#123;</span><br><span class="line">		KeyStore ks = getKeyStore(keyStorePath, password);</span><br><span class="line">		PrivateKey key = (PrivateKey) ks.getKey(alias, password.toCharArray());</span><br><span class="line">		return key;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 由Certificate获得公钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static PublicKey getPublicKey(String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Certificate certificate = getCertificate(certificatePath);</span><br><span class="line">		PublicKey key = certificate.getPublicKey();</span><br><span class="line">		return key;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static Certificate getCertificate(String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		CertificateFactory certificateFactory = CertificateFactory</span><br><span class="line">				.getInstance(X509);</span><br><span class="line">		FileInputStream in = new FileInputStream(certificatePath);</span><br><span class="line"></span><br><span class="line">		Certificate certificate = certificateFactory.generateCertificate(in);</span><br><span class="line">		in.close();</span><br><span class="line"></span><br><span class="line">		return certificate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static Certificate getCertificate(String keyStorePath,</span><br><span class="line">			String alias, String password) throws Exception &#123;</span><br><span class="line">		KeyStore ks = getKeyStore(keyStorePath, password);</span><br><span class="line">		Certificate certificate = ks.getCertificate(alias);</span><br><span class="line"></span><br><span class="line">		return certificate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得KeyStore</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static KeyStore getKeyStore(String keyStorePath, String password)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		FileInputStream is = new FileInputStream(keyStorePath);</span><br><span class="line">		KeyStore ks = KeyStore.getInstance(KEY_STORE);</span><br><span class="line">		ks.load(is, password.toCharArray());</span><br><span class="line">		is.close();</span><br><span class="line">		return ks;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 私钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptByPrivateKey(byte[] data, String keyStorePath,</span><br><span class="line">			String alias, String password) throws Exception &#123;</span><br><span class="line">		// 取得私钥</span><br><span class="line">		PrivateKey privateKey = getPrivateKey(keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 私钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptByPrivateKey(byte[] data, String keyStorePath,</span><br><span class="line">			String alias, String password) throws Exception &#123;</span><br><span class="line">		// 取得私钥</span><br><span class="line">		PrivateKey privateKey = getPrivateKey(keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 公钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptByPublicKey(byte[] data, String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// 取得公钥</span><br><span class="line">		PublicKey publicKey = getPublicKey(certificatePath);</span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(publicKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 公钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptByPublicKey(byte[] data, String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 取得公钥</span><br><span class="line">		PublicKey publicKey = getPublicKey(certificatePath);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(publicKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(String certificatePath) &#123;</span><br><span class="line">		return verifyCertificate(new Date(), certificatePath);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate是否过期或无效</span><br><span class="line">	 * </span><br><span class="line">	 * @param date</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(Date date, String certificatePath) &#123;</span><br><span class="line">		boolean status = true;</span><br><span class="line">		try &#123;</span><br><span class="line">			// 取得证书</span><br><span class="line">			Certificate certificate = getCertificate(certificatePath);</span><br><span class="line">			// 验证证书是否过期或无效</span><br><span class="line">			status = verifyCertificate(date, certificate);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			status = false;</span><br><span class="line">		&#125;</span><br><span class="line">		return status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证证书是否过期或无效</span><br><span class="line">	 * </span><br><span class="line">	 * @param date</span><br><span class="line">	 * @param certificate</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	private static boolean verifyCertificate(Date date, Certificate certificate) &#123;</span><br><span class="line">		boolean status = true;</span><br><span class="line">		try &#123;</span><br><span class="line">			X509Certificate x509Certificate = (X509Certificate) certificate;</span><br><span class="line">			x509Certificate.checkValidity(date);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			status = false;</span><br><span class="line">		&#125;</span><br><span class="line">		return status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String sign(byte[] sign, String keyStorePath, String alias,</span><br><span class="line">			String password) throws Exception &#123;</span><br><span class="line">		// 获得证书</span><br><span class="line">		X509Certificate x509Certificate = (X509Certificate) getCertificate(</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line">		// 获取私钥</span><br><span class="line">		KeyStore ks = getKeyStore(keyStorePath, password);</span><br><span class="line">		// 取得私钥</span><br><span class="line">		PrivateKey privateKey = (PrivateKey) ks.getKey(alias, password</span><br><span class="line">				.toCharArray());</span><br><span class="line"></span><br><span class="line">		// 构建签名</span><br><span class="line">		Signature signature = Signature.getInstance(x509Certificate</span><br><span class="line">				.getSigAlgName());</span><br><span class="line">		signature.initSign(privateKey);</span><br><span class="line">		signature.update(sign);</span><br><span class="line">		return encryptBASE64(signature.sign());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param sign</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verify(byte[] data, String sign,</span><br><span class="line">			String certificatePath) throws Exception &#123;</span><br><span class="line">		// 获得证书</span><br><span class="line">		X509Certificate x509Certificate = (X509Certificate) getCertificate(certificatePath);</span><br><span class="line">		// 获得公钥</span><br><span class="line">		PublicKey publicKey = x509Certificate.getPublicKey();</span><br><span class="line">		// 构建签名</span><br><span class="line">		Signature signature = Signature.getInstance(x509Certificate</span><br><span class="line">				.getSigAlgName());</span><br><span class="line">		signature.initVerify(publicKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line"></span><br><span class="line">		return signature.verify(decryptBASE64(sign));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(Date date, String keyStorePath,</span><br><span class="line">			String alias, String password) &#123;</span><br><span class="line">		boolean status = true;</span><br><span class="line">		try &#123;</span><br><span class="line">			Certificate certificate = getCertificate(keyStorePath, alias,</span><br><span class="line">					password);</span><br><span class="line">			status = verifyCertificate(date, certificate);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			status = false;</span><br><span class="line">		&#125;</span><br><span class="line">		return status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(String keyStorePath, String alias,</span><br><span class="line">			String password) &#123;</span><br><span class="line">		return verifyCertificate(new Date(), keyStorePath, alias, password);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再给出一个测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class CertificateCoderTest &#123;</span><br><span class="line">	private String password = &quot;123456&quot;;</span><br><span class="line">	private String alias = &quot;www.zlex.org&quot;;</span><br><span class="line">	private String certificatePath = &quot;d:/zlex.cer&quot;;</span><br><span class="line">	private String keyStorePath = &quot;d:/zlex.keystore&quot;;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;公钥加密——私钥解密&quot;);</span><br><span class="line">		String inputStr = &quot;Ceritifcate&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encrypt = CertificateCoder.encryptByPublicKey(data,</span><br><span class="line">				certificatePath);</span><br><span class="line"></span><br><span class="line">		byte[] decrypt = CertificateCoder.decryptByPrivateKey(encrypt,</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line">		String outputStr = new String(decrypt);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line"></span><br><span class="line">		// 验证数据一致</span><br><span class="line">		assertArrayEquals(data, decrypt);</span><br><span class="line"></span><br><span class="line">		// 验证证书有效</span><br><span class="line">		assertTrue(CertificateCoder.verifyCertificate(certificatePath));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void testSign() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;私钥加密——公钥解密&quot;);</span><br><span class="line"></span><br><span class="line">		String inputStr = &quot;sign&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encodedData = CertificateCoder.encryptByPrivateKey(data,</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		byte[] decodedData = CertificateCoder.decryptByPublicKey(encodedData,</span><br><span class="line">				certificatePath);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(decodedData);</span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;私钥签名——公钥验证签名&quot;);</span><br><span class="line">		// 产生签名</span><br><span class="line">		String sign = CertificateCoder.sign(encodedData, keyStorePath, alias,</span><br><span class="line">				password);</span><br><span class="line">		System.err.println(&quot;签名:\r&quot; + sign);</span><br><span class="line"></span><br><span class="line">		// 验证签名</span><br><span class="line">		boolean status = CertificateCoder.verify(encodedData, sign,</span><br><span class="line">				certificatePath);</span><br><span class="line">		System.err.println(&quot;状态:\r&quot; + status);</span><br><span class="line">		assertTrue(status);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公钥加密——私钥解密</span><br><span class="line">加密前: Ceritificate</span><br><span class="line"></span><br><span class="line">解密后: Ceritificate</span><br><span class="line"></span><br><span class="line">私钥加密——公钥解密</span><br><span class="line">加密前: sign</span><br><span class="line"></span><br><span class="line">解密后: sign</span><br><span class="line">私钥签名——公钥验证签名</span><br><span class="line">签名:</span><br><span class="line">pqBn5m6PJlfOjH0A6U2o2mUmBsfgyEY1NWCbiyA/I5Gc3gaVNVIdj/zkGNZRqTjhf3+J9a9z9EI7</span><br><span class="line">6F2eWYd7punHx5oh6hfNgcKbVb52EfItl4QEN+djbXiPynn07+Lbg1NOjULnpEd6ZhLP1YwrEAuM</span><br><span class="line">OfvX0e7/wplxLbySaKQ=</span><br><span class="line"></span><br><span class="line">状态:</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由此完成了证书验证体系！ </span><br></pre></td></tr></table></figure>

<p>同样，我们可以对代码做签名——代码签名！ </p>
<p>通过工具JarSigner可以完成代码签名。 </p>
<p>这里我们对tools.jar做代码签名，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jarsigner -storetype jks -keystore zlex.keystore -verbose tools.jar www.zlex.org</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入密钥库的口令短语：</span><br><span class="line"> 正在更新： META-INF/WWW_ZLEX.SF</span><br><span class="line"> 正在更新： META-INF/WWW_ZLEX.RSA</span><br><span class="line">  正在签名： org/zlex/security/Security.class</span><br><span class="line">  正在签名： org/zlex/tool/Main$1.class</span><br><span class="line">  正在签名： org/zlex/tool/Main$2.class</span><br><span class="line">  正在签名： org/zlex/tool/Main.class</span><br><span class="line"></span><br><span class="line">警告：</span><br><span class="line">签名者证书将在六个月内过期。</span><br></pre></td></tr></table></figure>

<p>此时，我们可以对签名后的jar做验证！ </p>
<p>验证tools.jar，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jarsigner -verify -verbose -certs tools.jar</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         402 Sat Jun 20 16:25:14 CST 2009 META-INF/MANIFEST.MF</span><br><span class="line">         532 Sat Jun 20 16:25:14 CST 2009 META-INF/WWW_ZLEX.SF</span><br><span class="line">         889 Sat Jun 20 16:25:14 CST 2009 META-INF/WWW_ZLEX.RSA</span><br><span class="line">sm       590 Wed Dec 10 13:03:42 CST 2008 org/zlex/security/Security.class</span><br><span class="line"></span><br><span class="line">      X.509, CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN</span><br><span class="line">      [证书将在 09-9-18 下午3:27 到期]</span><br><span class="line"></span><br><span class="line">sm       705 Tue Dec 16 18:00:56 CST 2008 org/zlex/tool/Main$1.class</span><br><span class="line"></span><br><span class="line">      X.509, CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN</span><br><span class="line">      [证书将在 09-9-18 下午3:27 到期]</span><br><span class="line"></span><br><span class="line">sm       779 Tue Dec 16 18:00:56 CST 2008 org/zlex/tool/Main$2.class</span><br><span class="line"></span><br><span class="line">      X.509, CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN</span><br><span class="line">      [证书将在 09-9-18 下午3:27 到期]</span><br><span class="line"></span><br><span class="line">sm     12672 Tue Dec 16 18:00:56 CST 2008 org/zlex/tool/Main.class</span><br><span class="line"></span><br><span class="line">      X.509, CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN</span><br><span class="line">      [证书将在 09-9-18 下午3:27 到期]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  s = 已验证签名</span><br><span class="line">  m = 在清单中列出条目</span><br><span class="line">  k = 在密钥库中至少找到了一个证书</span><br><span class="line">  i = 在身份作用域内至少找到了一个证书</span><br></pre></td></tr></table></figure>

<p>jar 已验证。</p>
<p>警告：</p>
<p>此 jar 包含签名者证书将在六个月内过期的条目。</p>
<p>代码签名认证的用途主要是对发布的软件做验证，支持 Sun Java .jar (Java Applet) 文件(J2SE)和 J2ME MIDlet Suite 文件。 </p>
<p>在中，我们模拟了一个基于RSA非对称加密网络的安全通信。现在我们深度了解一下现有的安全网络通信——SSL。 </p>
<p>我们需要构建一个由CA机构签发的有效证书，这里我们使用上文中生成的自签名证书zlex.cer </p>
<p>这里，我们将证书导入到我们的密钥库。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -import -alias www.zlex.org -file d:/zlex.cer -keystore d:/zlex.keystore</span><br></pre></td></tr></table></figure>

<p>其中 </p>
<ul>
<li>-import表示导入 </li>
<li>-alias指定别名，这里是<a href="http://www.zlex.org/">www.zlex.org</a> </li>
<li>-file指定算法，这里是d:/zlex.cer </li>
<li>-keystore指定存储位置，这里是d:/zlex.keystore </li>
</ul>
<p>在这里我使用的密码为654321 </p>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入keystore密码：</span><br><span class="line">再次输入新密码:</span><br><span class="line">所有者:CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN</span><br><span class="line">签发人:CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN</span><br><span class="line">序列号:4a1e48df</span><br><span class="line">有效期: Thu May 28 16:18:39 CST 2009 至Wed Aug 26 16:18:39 CST 2009</span><br><span class="line">证书指纹:</span><br><span class="line">         MD5:19:CA:E6:36:E2:DF:AD:96:31:97:2F:A9:AD:FC:37:6A</span><br><span class="line">         SHA1:49:88:30:59:29:45:F1:69:CA:97:A9:6D:8A:CF:08:D2:C3:D5:C0:C4</span><br><span class="line">         签名算法名称:SHA1withRSA</span><br><span class="line">         版本: 3</span><br><span class="line">信任这个认证？ [否]：  y</span><br><span class="line">认证已添加至keystore中</span><br></pre></td></tr></table></figure>

<p>OK，最复杂的准备工作已经完成。<br>接下来我们将域名<a href="http://www.zlex.org定位到本机上.打开c/Windows/System32/drivers/etc/hosts%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86www.zlex.org%E7%BB%91%E5%AE%9A%E5%9C%A8%E6%9C%AC%E6%9C%BA%E4%B8%8A%E3%80%82%E5%9C%A8%E6%96%87%E4%BB%B6%E6%9C%AB%E5%B0%BE%E8%BF%BD%E5%8A%A0127.0.0.1">www.zlex.org定位到本机上。打开C:\Windows\System32\drivers\etc\hosts文件，将www.zlex.org绑定在本机上。在文件末尾追加127.0.0.1</a>       <a href="http://www.zlex.org.现在通过地址栏访问http//www.zlex.org%EF%BC%8C%E6%88%96%E8%80%85%E9%80%9A%E8%BF%87ping%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E5%AE%9A%E4%BD%8D%E5%88%B0%E6%9C%AC%E6%9C%BA%EF%BC%8C%E5%9F%9F%E5%90%8D%E6%98%A0%E5%B0%84%E5%B0%B1%E6%90%9E%E5%AE%9A%E4%BA%86%E3%80%82">www.zlex.org。现在通过地址栏访问http://www.zlex.org，或者通过ping命令，如果能够定位到本机，域名映射就搞定了。</a><br>现在，配置tomcat。先将zlex.keystore拷贝到tomcat的conf目录下，然后配置server.xml。将如下内容加入配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Connector</span><br><span class="line">    SSLEnabled=&quot;true&quot;</span><br><span class="line">    URIEncoding=&quot;UTF-8&quot;</span><br><span class="line">    clientAuth=&quot;false&quot;</span><br><span class="line">    keystoreFile=&quot;conf/zlex.keystore&quot;</span><br><span class="line">    keystorePass=&quot;123456&quot;</span><br><span class="line">    maxThreads=&quot;150&quot;</span><br><span class="line">    port=&quot;443&quot;</span><br><span class="line">    protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">    scheme=&quot;https&quot;</span><br><span class="line">    secure=&quot;true&quot;</span><br><span class="line">    sslProtocol=&quot;TLS&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>注意clientAuth=”false”测试阶段，置为false，正式使用时建议使用true。现在启动tomcat，访问<a href="https://www.zlex.org/%E3%80%82">https://www.zlex.org/。</a></p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-13.png"></p>
<p>显然，证书未能通过认证，这个时候你可以选择安装证书（上文中的zlex.cer文件就是证书），作为受信任的根证书颁发机构导入，再次重启浏览器（IE，其他浏览器对于域名<a href="http://www.zlex.org不支持本地方式访问),访问https//www.zlex.org/%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%9C%B0%E5%9D%80%E6%A0%8F%E4%B8%AD%E4%BC%9A%E6%9C%89%E4%B8%AA%E5%B0%8F%E9%94%81">www.zlex.org不支持本地方式访问），访问https://www.zlex.org/，你会看到地址栏中会有个小锁</a></p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-14.png"></p>
<p>，就说明安装成功。所有的浏览器联网操作已经在RSA加密解密系统的保护之下了。但似乎我们感受不到。<br>这个时候很多人开始怀疑，如果我们要手工做一个这样的https的访问是不是需要把浏览器的这些个功能都实现呢？不需要！ </p>
<p>接着上篇内容，给出如下代码实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.security.KeyStore;</span><br><span class="line">import java.security.PrivateKey;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.security.Signature;</span><br><span class="line">import java.security.cert.Certificate;</span><br><span class="line">import java.security.cert.CertificateFactory;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.net.ssl.HttpsURLConnection;</span><br><span class="line">import javax.net.ssl.KeyManagerFactory;</span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import javax.net.ssl.SSLSocketFactory;</span><br><span class="line">import javax.net.ssl.TrustManagerFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 证书组件</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public abstract class CertificateCoder extends Coder &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * Java密钥库(Java Key Store，JKS)KEY_STORE</span><br><span class="line">	 */</span><br><span class="line">	public static final String KEY_STORE = &quot;JKS&quot;;</span><br><span class="line"></span><br><span class="line">	public static final String X509 = &quot;X.509&quot;;</span><br><span class="line">	public static final String SunX509 = &quot;SunX509&quot;;</span><br><span class="line">	public static final String SSL = &quot;SSL&quot;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 由KeyStore获得私钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static PrivateKey getPrivateKey(String keyStorePath, String alias,</span><br><span class="line">			String password) throws Exception &#123;</span><br><span class="line">		KeyStore ks = getKeyStore(keyStorePath, password);</span><br><span class="line">		PrivateKey key = (PrivateKey) ks.getKey(alias, password.toCharArray());</span><br><span class="line">		return key;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 由Certificate获得公钥</span><br><span class="line">	 * </span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static PublicKey getPublicKey(String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		Certificate certificate = getCertificate(certificatePath);</span><br><span class="line">		PublicKey key = certificate.getPublicKey();</span><br><span class="line">		return key;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static Certificate getCertificate(String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		CertificateFactory certificateFactory = CertificateFactory</span><br><span class="line">				.getInstance(X509);</span><br><span class="line">		FileInputStream in = new FileInputStream(certificatePath);</span><br><span class="line"></span><br><span class="line">		Certificate certificate = certificateFactory.generateCertificate(in);</span><br><span class="line">		in.close();</span><br><span class="line"></span><br><span class="line">		return certificate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static Certificate getCertificate(String keyStorePath,</span><br><span class="line">			String alias, String password) throws Exception &#123;</span><br><span class="line">		KeyStore ks = getKeyStore(keyStorePath, password);</span><br><span class="line">		Certificate certificate = ks.getCertificate(alias);</span><br><span class="line"></span><br><span class="line">		return certificate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得KeyStore</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static KeyStore getKeyStore(String keyStorePath, String password)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		FileInputStream is = new FileInputStream(keyStorePath);</span><br><span class="line">		KeyStore ks = KeyStore.getInstance(KEY_STORE);</span><br><span class="line">		ks.load(is, password.toCharArray());</span><br><span class="line">		is.close();</span><br><span class="line">		return ks;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 私钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptByPrivateKey(byte[] data, String keyStorePath,</span><br><span class="line">			String alias, String password) throws Exception &#123;</span><br><span class="line">		// 取得私钥</span><br><span class="line">		PrivateKey privateKey = getPrivateKey(keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 私钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptByPrivateKey(byte[] data, String keyStorePath,</span><br><span class="line">			String alias, String password) throws Exception &#123;</span><br><span class="line">		// 取得私钥</span><br><span class="line">		PrivateKey privateKey = getPrivateKey(keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 公钥加密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] encryptByPublicKey(byte[] data, String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// 取得公钥</span><br><span class="line">		PublicKey publicKey = getPublicKey(certificatePath);</span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(publicKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 公钥解密</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static byte[] decryptByPublicKey(byte[] data, String certificatePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		// 取得公钥</span><br><span class="line">		PublicKey publicKey = getPublicKey(certificatePath);</span><br><span class="line"></span><br><span class="line">		// 对数据加密</span><br><span class="line">		Cipher cipher = Cipher.getInstance(publicKey.getAlgorithm());</span><br><span class="line">		cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">		return cipher.doFinal(data);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(String certificatePath) &#123;</span><br><span class="line">		return verifyCertificate(new Date(), certificatePath);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate是否过期或无效</span><br><span class="line">	 * </span><br><span class="line">	 * @param date</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(Date date, String certificatePath) &#123;</span><br><span class="line">		boolean status = true;</span><br><span class="line">		try &#123;</span><br><span class="line">			// 取得证书</span><br><span class="line">			Certificate certificate = getCertificate(certificatePath);</span><br><span class="line">			// 验证证书是否过期或无效</span><br><span class="line">			status = verifyCertificate(date, certificate);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			status = false;</span><br><span class="line">		&#125;</span><br><span class="line">		return status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证证书是否过期或无效</span><br><span class="line">	 * </span><br><span class="line">	 * @param date</span><br><span class="line">	 * @param certificate</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	private static boolean verifyCertificate(Date date, Certificate certificate) &#123;</span><br><span class="line">		boolean status = true;</span><br><span class="line">		try &#123;</span><br><span class="line">			X509Certificate x509Certificate = (X509Certificate) certificate;</span><br><span class="line">			x509Certificate.checkValidity(date);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			status = false;</span><br><span class="line">		&#125;</span><br><span class="line">		return status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * </span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static String sign(byte[] sign, String keyStorePath, String alias,</span><br><span class="line">			String password) throws Exception &#123;</span><br><span class="line">		// 获得证书</span><br><span class="line">		X509Certificate x509Certificate = (X509Certificate) getCertificate(</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line">		// 获取私钥</span><br><span class="line">		KeyStore ks = getKeyStore(keyStorePath, password);</span><br><span class="line">		// 取得私钥</span><br><span class="line">		PrivateKey privateKey = (PrivateKey) ks.getKey(alias, password</span><br><span class="line">				.toCharArray());</span><br><span class="line"></span><br><span class="line">		// 构建签名</span><br><span class="line">		Signature signature = Signature.getInstance(x509Certificate</span><br><span class="line">				.getSigAlgName());</span><br><span class="line">		signature.initSign(privateKey);</span><br><span class="line">		signature.update(sign);</span><br><span class="line">		return encryptBASE64(signature.sign());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证签名</span><br><span class="line">	 * </span><br><span class="line">	 * @param data</span><br><span class="line">	 * @param sign</span><br><span class="line">	 * @param certificatePath</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verify(byte[] data, String sign,</span><br><span class="line">			String certificatePath) throws Exception &#123;</span><br><span class="line">		// 获得证书</span><br><span class="line">		X509Certificate x509Certificate = (X509Certificate) getCertificate(certificatePath);</span><br><span class="line">		// 获得公钥</span><br><span class="line">		PublicKey publicKey = x509Certificate.getPublicKey();</span><br><span class="line">		// 构建签名</span><br><span class="line">		Signature signature = Signature.getInstance(x509Certificate</span><br><span class="line">				.getSigAlgName());</span><br><span class="line">		signature.initVerify(publicKey);</span><br><span class="line">		signature.update(data);</span><br><span class="line"></span><br><span class="line">		return signature.verify(decryptBASE64(sign));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(Date date, String keyStorePath,</span><br><span class="line">			String alias, String password) &#123;</span><br><span class="line">		boolean status = true;</span><br><span class="line">		try &#123;</span><br><span class="line">			Certificate certificate = getCertificate(keyStorePath, alias,</span><br><span class="line">					password);</span><br><span class="line">			status = verifyCertificate(date, certificate);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			status = false;</span><br><span class="line">		&#125;</span><br><span class="line">		return status;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 验证Certificate</span><br><span class="line">	 * </span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 * @param alias</span><br><span class="line">	 * @param password</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static boolean verifyCertificate(String keyStorePath, String alias,</span><br><span class="line">			String password) &#123;</span><br><span class="line">		return verifyCertificate(new Date(), keyStorePath, alias, password);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获得SSLSocektFactory</span><br><span class="line">	 * </span><br><span class="line">	 * @param password</span><br><span class="line">	 *            密码</span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 *            密钥库路径</span><br><span class="line">	 * </span><br><span class="line">	 * @param trustKeyStorePath</span><br><span class="line">	 *            信任库路径</span><br><span class="line">	 * @return</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	private static SSLSocketFactory getSSLSocketFactory(String password,</span><br><span class="line">			String keyStorePath, String trustKeyStorePath) throws Exception &#123;</span><br><span class="line">		// 初始化密钥库</span><br><span class="line">		KeyManagerFactory keyManagerFactory = KeyManagerFactory</span><br><span class="line">				.getInstance(SunX509);</span><br><span class="line">		KeyStore keyStore = getKeyStore(keyStorePath, password);</span><br><span class="line">		keyManagerFactory.init(keyStore, password.toCharArray());</span><br><span class="line"></span><br><span class="line">		// 初始化信任库</span><br><span class="line">		TrustManagerFactory trustManagerFactory = TrustManagerFactory</span><br><span class="line">				.getInstance(SunX509);</span><br><span class="line">		KeyStore trustkeyStore = getKeyStore(trustKeyStorePath, password);</span><br><span class="line">		trustManagerFactory.init(trustkeyStore);</span><br><span class="line"></span><br><span class="line">		// 初始化SSL上下文</span><br><span class="line">		SSLContext ctx = SSLContext.getInstance(SSL);</span><br><span class="line">		ctx.init(keyManagerFactory.getKeyManagers(), trustManagerFactory</span><br><span class="line">				.getTrustManagers(), null);</span><br><span class="line">		SSLSocketFactory sf = ctx.getSocketFactory();</span><br><span class="line"></span><br><span class="line">		return sf;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 为HttpsURLConnection配置SSLSocketFactory</span><br><span class="line">	 * </span><br><span class="line">	 * @param conn</span><br><span class="line">	 *            HttpsURLConnection</span><br><span class="line">	 * @param password</span><br><span class="line">	 *            密码</span><br><span class="line">	 * @param keyStorePath</span><br><span class="line">	 *            密钥库路径</span><br><span class="line">	 * </span><br><span class="line">	 * @param trustKeyStorePath</span><br><span class="line">	 *            信任库路径</span><br><span class="line">	 * @throws Exception</span><br><span class="line">	 */</span><br><span class="line">	public static void configSSLSocketFactory(HttpsURLConnection conn,</span><br><span class="line">			String password, String keyStorePath, String trustKeyStorePath)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		conn.setSSLSocketFactory(getSSLSocketFactory(password, keyStorePath,</span><br><span class="line">				trustKeyStorePath));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加了configSSLSocketFactory方法供外界调用，该方法为 HttpsURLConnection配置了SSLSocketFactory。当HttpsURLConnection配置了 SSLSocketFactory后，我们就可以通过HttpsURLConnection的getInputStream、 getOutputStream，像往常使用HttpURLConnection做操作了。尤其要说明一点，未配置SSLSocketFactory 前，HttpsURLConnection的getContentLength()获得值永远都是-1。 </p>
<p>给出相应测试类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.io.DataInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.HttpsURLConnection;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class CertificateCoderTest &#123;</span><br><span class="line">	private String password = &quot;123456&quot;;</span><br><span class="line">	private String alias = &quot;www.zlex.org&quot;;</span><br><span class="line">	private String certificatePath = &quot;d:/zlex.cer&quot;;</span><br><span class="line">	private String keyStorePath = &quot;d:/zlex.keystore&quot;;</span><br><span class="line">	private String clientKeyStorePath = &quot;d:/zlex-client.keystore&quot;;</span><br><span class="line">	private String clientPassword = &quot;654321&quot;;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;公钥加密——私钥解密&quot;);</span><br><span class="line">		String inputStr = &quot;Ceritifcate&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encrypt = CertificateCoder.encryptByPublicKey(data,</span><br><span class="line">				certificatePath);</span><br><span class="line"></span><br><span class="line">		byte[] decrypt = CertificateCoder.decryptByPrivateKey(encrypt,</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line">		String outputStr = new String(decrypt);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line"></span><br><span class="line">		// 验证数据一致</span><br><span class="line">		assertArrayEquals(data, decrypt);</span><br><span class="line"></span><br><span class="line">		// 验证证书有效</span><br><span class="line">		assertTrue(CertificateCoder.verifyCertificate(certificatePath));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void testSign() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;私钥加密——公钥解密&quot;);</span><br><span class="line"></span><br><span class="line">		String inputStr = &quot;sign&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encodedData = CertificateCoder.encryptByPrivateKey(data,</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		byte[] decodedData = CertificateCoder.decryptByPublicKey(encodedData,</span><br><span class="line">				certificatePath);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(decodedData);</span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;私钥签名——公钥验证签名&quot;);</span><br><span class="line">		// 产生签名</span><br><span class="line">		String sign = CertificateCoder.sign(encodedData, keyStorePath, alias,</span><br><span class="line">				password);</span><br><span class="line">		System.err.println(&quot;签名:\r&quot; + sign);</span><br><span class="line"></span><br><span class="line">		// 验证签名</span><br><span class="line">		boolean status = CertificateCoder.verify(encodedData, sign,</span><br><span class="line">				certificatePath);</span><br><span class="line">		System.err.println(&quot;状态:\r&quot; + status);</span><br><span class="line">		assertTrue(status);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void testHttps() throws Exception &#123;</span><br><span class="line">		URL url = new URL(&quot;https://www.zlex.org/examples/&quot;);</span><br><span class="line">		HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">		conn.setDoInput(true);</span><br><span class="line">		conn.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">		CertificateCoder.configSSLSocketFactory(conn, clientPassword,</span><br><span class="line">				clientKeyStorePath, clientKeyStorePath);</span><br><span class="line"></span><br><span class="line">		InputStream is = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">		int length = conn.getContentLength();</span><br><span class="line"></span><br><span class="line">		DataInputStream dis = new DataInputStream(is);</span><br><span class="line">		byte[] data = new byte[length];</span><br><span class="line">		dis.readFully(data);</span><br><span class="line"></span><br><span class="line">		dis.close();</span><br><span class="line">		System.err.println(new String(data));</span><br><span class="line">		conn.disconnect();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意testHttps方法，几乎和我们往常做HTTP访问没有差别，我们来看控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">  Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line">  contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line">  this work for additional information regarding copyright ownership.</span><br><span class="line">  The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line">  (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="line">  the License.  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;</span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Apache Tomcat Examples&lt;/TITLE&gt;</span><br><span class="line">&lt;META http-equiv=Content-Type content=&quot;text/html&quot;&gt;</span><br><span class="line">&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;</span><br><span class="line">&lt;P&gt;</span><br><span class="line">&lt;H3&gt;Apache Tomcat Examples&lt;/H3&gt;</span><br><span class="line">&lt;P&gt;&lt;/P&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;http://javaeye.shaduwang.com/?snowolf/blog/servlets&quot;&gt;Servlets examples&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;http://javaeye.shaduwang.com/?snowolf/blog/jsp&quot;&gt;JSP Examples&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>

<p>通过浏览器直接访问<a href="https://www.zlex.org/examples/%E4%BD%A0">https://www.zlex.org/examples/你</a> 也会获得上述内容。也就是说应用甲方作为服务器构建tomcat服务，乙方可以通过上述方式访问甲方受保护的SSL应用，并且不需要考虑具体的加密解密问 题。甲乙双方可以经过相应配置，通过双方的tomcat配置有效的SSL服务，简化上述代码实现，完全通过证书配置完成SSL双向认证！</p>
<p>我们使用自签名证书完成了认证。接下来，我们使用第三方CA签名机构完成证书签名。 </p>
<p>这里我们使用thawte提供的测试用21天免费ca证书。 </p>
<ul>
<li>1.要在该网站上注明你的域名，这里使用<a href="http://www.zlex.org作为测试用域名(请勿使用该域名作为你的域名地址,该域名受法律保护!请使用其他非注册域名!)./">www.zlex.org作为测试用域名（请勿使用该域名作为你的域名地址，该域名受法律保护！请使用其他非注册域名！）。</a> </li>
<li>2.如果域名有效，你会收到邮件要求你访问<a href="https://www.thawte.com/cgi/server/try.exe%E8%8E%B7%E5%BE%97ca%E8%AF%81%E4%B9%A6%E3%80%82">https://www.thawte.com/cgi/server/try.exe获得ca证书。</a> </li>
<li>3.复述密钥库的创建。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -genkey -validity 36000 -alias www.zlex.org -keyalg RSA -keystore d:\zlex.keystore</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在这里我使用的密码为 123456 </p>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入keystore密码：</span><br><span class="line">再次输入新密码:</span><br><span class="line">您的名字与姓氏是什么？</span><br><span class="line">  [Unknown]：  www.zlex.org</span><br><span class="line">您的组织单位名称是什么？</span><br><span class="line">  [Unknown]：  zlex</span><br><span class="line">您的组织名称是什么？</span><br><span class="line">  [Unknown]：  zlex</span><br><span class="line">您所在的城市或区域名称是什么？</span><br><span class="line">  [Unknown]：  BJ</span><br><span class="line">您所在的州或省份名称是什么？</span><br><span class="line">  [Unknown]：  BJ</span><br><span class="line">该单位的两字母国家代码是什么</span><br><span class="line">  [Unknown]：  CN</span><br><span class="line">CN=www.zlex.org, OU=zlex, O=zlex, L=BJ, ST=BJ, C=CN 正确吗？</span><br><span class="line">  [否]：  Y</span><br><span class="line"></span><br><span class="line">输入&lt;tomcat&gt;的主密码</span><br><span class="line">        （如果和 keystore 密码相同，按回车）：</span><br><span class="line">再次输入新密码:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>4.通过如下命令，从zlex.keystore中导出CA证书申请。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -certreq -alias www.zlex.org -file d:\zlex.csr -keystore d:\zlex.keystore -v</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>你会获得zlex.csr文件，可以用记事本打开，内容如下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN NEW CERTIFICATE REQUEST-----</span><br><span class="line">MIIBnDCCAQUCAQAwXDELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjENMAsG</span><br><span class="line">A1UEChMEemxleDENMAsGA1UECxMEemxleDEVMBMGA1UEAxMMd3d3LnpsZXgub3JnMIGfMA0GCSqG</span><br><span class="line">SIb3DQEBAQUAA4GNADCBiQKBgQCR6DXU9Mp+mCKO7cv9JPsj0n1Ec/GpM09qvhpgX3FNad/ZWSDc</span><br><span class="line">vU77YXZSoF9hQp3w1LC+eeKgd2MlVpXTvbVwBNVd2HiQPp37ic6BUUjSaX8LHtCl7l0BIEye9qQ2</span><br><span class="line">j8G0kak7e8ZA0s7nb3Ymq/K8BV7v0MQIdhIc1bifK9ZDewIDAQABoAAwDQYJKoZIhvcNAQEFBQAD</span><br><span class="line">gYEAMA1r2fbZPtNx37U9TRwadCH2TZZecwKJS/hskNm6ryPKIAp9APWwAyj8WJHRBz5SpZM4zmYO</span><br><span class="line">oMCI8BcnY2A4JP+R7/SwXTdH/xcg7NVghd9A2SCgqMpF7KMfc5dE3iygdiPu+UhY200Dvpjx8gmJ</span><br><span class="line">1UbH3+nqMUyCrZgURFslOUY=</span><br><span class="line">-----END NEW CERTIFICATE REQUEST-----</span><br></pre></td></tr></table></figure>
<ul>
<li>5.将上述文件内容拷贝到<a href="https://www.thawte.com/cgi/server/try.exe%E4%B8%AD%EF%BC%8C%E7%82%B9%E5%87%BBnext%EF%BC%8C%E8%8E%B7%E5%BE%97%E5%9B%9E%E5%BA%94%E5%86%85%E5%AE%B9%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AFp7b%E6%A0%BC%E5%BC%8F%E3%80%82">https://www.thawte.com/cgi/server/try.exe中，点击next，获得回应内容，这里是p7b格式。</a> </li>
</ul>
<p>内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PKCS7-----</span><br><span class="line">MIIF3AYJKoZIhvcNAQcCoIIFzTCCBckCAQExADALBgkqhkiG9w0BBwGgggWxMIID</span><br><span class="line">EDCCAnmgAwIBAgIQA/mx/pKoaB+KGX2hveFU9zANBgkqhkiG9w0BAQUFADCBhzEL</span><br><span class="line">MAkGA1UEBhMCWkExIjAgBgNVBAgTGUZPUiBURVNUSU5HIFBVUlBPU0VTIE9OTFkx</span><br><span class="line">HTAbBgNVBAoTFFRoYXd0ZSBDZXJ0aWZpY2F0aW9uMRcwFQYDVQQLEw5URVNUIFRF</span><br><span class="line">U1QgVEVTVDEcMBoGA1UEAxMTVGhhd3RlIFRlc3QgQ0EgUm9vdDAeFw0wOTA1Mjgw</span><br><span class="line">MDIxMzlaFw0wOTA2MTgwMDIxMzlaMFwxCzAJBgNVBAYTAkNOMQswCQYDVQQIEwJC</span><br><span class="line">SjELMAkGA1UEBxMCQkoxDTALBgNVBAoTBHpsZXgxDTALBgNVBAsTBHpsZXgxFTAT</span><br><span class="line">BgNVBAMTDHd3dy56bGV4Lm9yZzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA</span><br><span class="line">keg11PTKfpgiju3L/ST7I9J9RHPxqTNPar4aYF9xTWnf2Vkg3L1O+2F2UqBfYUKd</span><br><span class="line">8NSwvnnioHdjJVaV0721cATVXdh4kD6d+4nOgVFI0ml/Cx7Qpe5dASBMnvakNo/B</span><br><span class="line">tJGpO3vGQNLO5292JqvyvAVe79DECHYSHNW4nyvWQ3sCAwEAAaOBpjCBozAMBgNV</span><br><span class="line">HRMBAf8EAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBABgNVHR8E</span><br><span class="line">OTA3MDWgM6Axhi9odHRwOi8vY3JsLnRoYXd0ZS5jb20vVGhhd3RlUHJlbWl1bVNl</span><br><span class="line">cnZlckNBLmNybDAyBggrBgEFBQcBAQQmMCQwIgYIKwYBBQUHMAGGFmh0dHA6Ly9v</span><br><span class="line">Y3NwLnRoYXd0ZS5jb20wDQYJKoZIhvcNAQEFBQADgYEATPuxZbtJJSPmXvfrr1yz</span><br><span class="line">xqM06IwTZ6UU0lZRG7I0WufMjNMKdpn8hklUhE17mxAhGSpewLVVeLR7uzBLFkuC</span><br><span class="line">X7wMXxhoYdJZtNai72izU6Rd1oknao7diahvRxPK4IuQ7y2oZ511/4T4vgY6iRAj</span><br><span class="line">q4q76HhPJrVRL/sduaiu+gYwggKZMIICAqADAgECAgEAMA0GCSqGSIb3DQEBBAUA</span><br><span class="line">MIGHMQswCQYDVQQGEwJaQTEiMCAGA1UECBMZRk9SIFRFU1RJTkcgUFVSUE9TRVMg</span><br><span class="line">T05MWTEdMBsGA1UEChMUVGhhd3RlIENlcnRpZmljYXRpb24xFzAVBgNVBAsTDlRF</span><br><span class="line">U1QgVEVTVCBURVNUMRwwGgYDVQQDExNUaGF3dGUgVGVzdCBDQSBSb290MB4XDTk2</span><br><span class="line">MDgwMTAwMDAwMFoXDTIwMTIzMTIxNTk1OVowgYcxCzAJBgNVBAYTAlpBMSIwIAYD</span><br><span class="line">VQQIExlGT1IgVEVTVElORyBQVVJQT1NFUyBPTkxZMR0wGwYDVQQKExRUaGF3dGUg</span><br><span class="line">Q2VydGlmaWNhdGlvbjEXMBUGA1UECxMOVEVTVCBURVNUIFRFU1QxHDAaBgNVBAMT</span><br><span class="line">E1RoYXd0ZSBUZXN0IENBIFJvb3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGB</span><br><span class="line">ALV9kG+Os6x/DOhm+tKUQfzVMWGhE95sFmEtkMMTX2Zi4n6i6BvzoReJ5njzt1LF</span><br><span class="line">cqu4EUk9Ji20egKKfmqRzmQFLP7+1niSdfJEUE7cKY40QoI99270PTrLjJeaMcCl</span><br><span class="line">+AYl+kD+RL5BtuKKU3PurYcsCsre6aTvjMcqpTJOGeSPAgMBAAGjEzARMA8GA1Ud</span><br><span class="line">EwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEEBQADgYEAgozj7BkD9O8si2V0v+EZ/t7E</span><br><span class="line">fz/LC8y6mD7IBUziHy5/53ymGAGLtyhXHvX+UIE6UWbHro3IqVkrmY5uC93Z2Wew</span><br><span class="line">A/6edK3KFUcUikrLeewM7gmqsiASEKx2mKRKlu12jXyNS5tXrPWRDvUKtFC1uL9a</span><br><span class="line">12rFAQS2BkIk7aU+ghYxAA==</span><br><span class="line">-----END PKCS7-----</span><br></pre></td></tr></table></figure>
<p>将其存储为zlex.p7b </p>
<ul>
<li>6.将由CA签发的证书导入密钥库。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -import -trustcacerts -alias www.zlex.org -file d:\zlex.p7b -keystore d:\zlex.keystore -v</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在这里我使用的密码为 123456 </p>
<p>控制台输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入keystore密码：</span><br><span class="line"></span><br><span class="line">回复中的最高级认证：</span><br><span class="line"></span><br><span class="line">所有者:CN=Thawte Test CA Root, OU=TEST TEST TEST, O=Thawte Certification, ST=FOR</span><br><span class="line"> TESTING PURPOSES ONLY, C=ZA</span><br><span class="line">签发人:CN=Thawte Test CA Root, OU=TEST TEST TEST, O=Thawte Certification, ST=FOR</span><br><span class="line"> TESTING PURPOSES ONLY, C=ZA</span><br><span class="line">序列号:0</span><br><span class="line">有效期: Thu Aug 01 08:00:00 CST 1996 至Fri Jan 01 05:59:59 CST 2021</span><br><span class="line">证书指纹:</span><br><span class="line">         MD5:5E:E0:0E:1D:17:B7:CA:A5:7D:36:D6:02:DF:4D:26:A4</span><br><span class="line">         SHA1:39:C6:9D:27:AF:DC:EB:47:D6:33:36:6A:B2:05:F1:47:A9:B4:DA:EA</span><br><span class="line">         签名算法名称:MD5withRSA</span><br><span class="line">         版本: 3</span><br></pre></td></tr></table></figure>

<p>扩展:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1: ObjectId: 2.5.29.19 Criticality=true</span><br><span class="line">BasicConstraints:[</span><br><span class="line">  CA:true</span><br><span class="line">  PathLen:2147483647</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">... 是不可信的。 还是要安装回复？ [否]：  Y</span><br><span class="line">认证回复已安装在 keystore中</span><br><span class="line">[正在存储 d:\zlex.keystore]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    7.域名定位 </span><br><span class="line">    将域名www.zlex.org定位到本机上。打开C:\Windows\System32\drivers\etc\hosts文件，将 www.zlex.org绑定在本机上。在文件末尾追加127.0.0.1       www.zlex.org。现在通过地址栏访问http://www.zlex.org，或者通过ping命令，如果能够定位到本机，域名映射就搞定 了。 </span><br><span class="line"></span><br><span class="line">    8.配置server.xml</span><br><span class="line">&lt;Connector</span><br><span class="line">			keystoreFile=&quot;conf/zlex.keystore&quot;</span><br><span class="line">			keystorePass=&quot;123456&quot; </span><br><span class="line">			truststoreFile=&quot;conf/zlex.keystore&quot;    </span><br><span class="line">			truststorePass=&quot;123456&quot;     </span><br><span class="line">			SSLEnabled=&quot;true&quot;</span><br><span class="line">			URIEncoding=&quot;UTF-8&quot;</span><br><span class="line">			clientAuth=&quot;false&quot;			</span><br><span class="line">			maxThreads=&quot;150&quot;</span><br><span class="line">			port=&quot;443&quot;</span><br><span class="line">			protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">			scheme=&quot;https&quot;</span><br><span class="line">			secure=&quot;true&quot;</span><br><span class="line">			sslProtocol=&quot;TLS&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将文件zlex.keystore拷贝到tomcat的conf目录下，重新启动tomcat。访问<a href="https://www.zlex.org/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%91%E7%8E%B0%E8%81%94%E7%BD%91%E6%9C%89%E4%BA%9B%E8%BF%9F%E9%92%9D%E3%80%82%E5%A4%A7%E7%BA%A65%E7%A7%92%E9%92%9F%E5%90%8E%EF%BC%8C%E7%BD%91%E9%A1%B5%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%EF%BC%8C%E5%90%8C%E6%97%B6%E6%9C%89%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">https://www.zlex.org/，我们发现联网有些迟钝。大约5秒钟后，网页正常显示，同时有如下图所示：</a> </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-15.png"></p>
<p>浏览器验证了该CA机构的有效性。 </p>
<p>打开证书，如下图所示： </p>
<p><img src="https://gitee.com/sunglowrise/images/raw/master/note/%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95-16.png"></p>
<p>调整测试类： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">import java.io.DataInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.HttpsURLConnection;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @author 梁栋</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 1.0</span><br><span class="line"> */</span><br><span class="line">public class CertificateCoderTest &#123;</span><br><span class="line">	private String password = &quot;123456&quot;;</span><br><span class="line">	private String alias = &quot;www.zlex.org&quot;;</span><br><span class="line">	private String certificatePath = &quot;d:/zlex.cer&quot;;</span><br><span class="line">	private String keyStorePath = &quot;d:/zlex.keystore&quot;;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void test() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;公钥加密——私钥解密&quot;);</span><br><span class="line">		String inputStr = &quot;Ceritifcate&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encrypt = CertificateCoder.encryptByPublicKey(data,</span><br><span class="line">				certificatePath);</span><br><span class="line"></span><br><span class="line">		byte[] decrypt = CertificateCoder.decryptByPrivateKey(encrypt,</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line">		String outputStr = new String(decrypt);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line"></span><br><span class="line">		// 验证数据一致</span><br><span class="line">		assertArrayEquals(data, decrypt);</span><br><span class="line"></span><br><span class="line">		// 验证证书有效</span><br><span class="line">		assertTrue(CertificateCoder.verifyCertificate(certificatePath));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void testSign() throws Exception &#123;</span><br><span class="line">		System.err.println(&quot;私钥加密——公钥解密&quot;);</span><br><span class="line"></span><br><span class="line">		String inputStr = &quot;sign&quot;;</span><br><span class="line">		byte[] data = inputStr.getBytes();</span><br><span class="line"></span><br><span class="line">		byte[] encodedData = CertificateCoder.encryptByPrivateKey(data,</span><br><span class="line">				keyStorePath, alias, password);</span><br><span class="line"></span><br><span class="line">		byte[] decodedData = CertificateCoder.decryptByPublicKey(encodedData,</span><br><span class="line">				certificatePath);</span><br><span class="line"></span><br><span class="line">		String outputStr = new String(decodedData);</span><br><span class="line">		System.err.println(&quot;加密前: &quot; + inputStr + &quot;\n\r&quot; + &quot;解密后: &quot; + outputStr);</span><br><span class="line">		assertEquals(inputStr, outputStr);</span><br><span class="line"></span><br><span class="line">		System.err.println(&quot;私钥签名——公钥验证签名&quot;);</span><br><span class="line">		// 产生签名</span><br><span class="line">		String sign = CertificateCoder.sign(encodedData, keyStorePath, alias,</span><br><span class="line">				password);</span><br><span class="line">		System.err.println(&quot;签名:\r&quot; + sign);</span><br><span class="line"></span><br><span class="line">		// 验证签名</span><br><span class="line">		boolean status = CertificateCoder.verify(encodedData, sign,</span><br><span class="line">				certificatePath);</span><br><span class="line">		System.err.println(&quot;状态:\r&quot; + status);</span><br><span class="line">		assertTrue(status);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void testHttps() throws Exception &#123;</span><br><span class="line">		URL url = new URL(&quot;https://www.zlex.org/examples/&quot;);</span><br><span class="line">		HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">		conn.setDoInput(true);</span><br><span class="line">		conn.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">		CertificateCoder.configSSLSocketFactory(conn, password, keyStorePath,</span><br><span class="line">				keyStorePath);</span><br><span class="line"></span><br><span class="line">		InputStream is = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">		int length = conn.getContentLength();</span><br><span class="line"></span><br><span class="line">		DataInputStream dis = new DataInputStream(is);</span><br><span class="line">		byte[] data = new byte[length];</span><br><span class="line">		dis.readFully(data);</span><br><span class="line"></span><br><span class="line">		dis.close();</span><br><span class="line">		conn.disconnect();</span><br><span class="line">		System.err.println(new String(data));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次执行，验证通过！ </p>
<p>由此，我们了基于SSL协议的认证过程。测试类的testHttps方法模拟了一次浏览器的HTTPS访问。</p>
<p>来源： <a href="http://www.open-open.com/lib/view/open1397274257325.html">http://www.open-open.com/lib/view/open1397274257325.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>增量打包使用方法</title>
    <url>/2018/01/01/%E5%A2%9E%E9%87%8F%E6%89%93%E5%8C%85%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="增量打包的方案"><a href="#增量打包的方案" class="headerlink" title="增量打包的方案"></a>增量打包的方案</h3><h4 id="1、获取要打包的文件"><a href="#1、获取要打包的文件" class="headerlink" title="1、获取要打包的文件"></a>1、获取要打包的文件</h4><p>a、根据svn信息历史记录：获取版本号<br>b、根据版本号获取文件：<br>项目根目录-&gt;右键-&gt;TortoiseSVN-&gt;Revision Graph<br>-&gt;选择两个版本-&gt;右键-&gt;Compare revisions<br>-&gt;全选差异文件-&gt;右键-&gt;Export selection to…</p>
<p>导出文件完成。</p>
<h4 id="2、增量打包"><a href="#2、增量打包" class="headerlink" title="2、增量打包"></a>2、增量打包</h4><p>执行：HxPackIncermentEpassnew </p>
<ul>
<li>a、配置文件：<br>hxpackepass.properties<br>如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#项目名称(打包的文件名)</span><br><span class="line">projectName = onlinesign</span><br><span class="line">#项目目录</span><br><span class="line">projectRoot = E:\\Workspaces\\eclipse\\onlinesign\\branches\\shelidengji</span><br><span class="line">#svn版本差异导出目录</span><br><span class="line">svnOutputRoot = C:\\Users\\MaYawei\\Desktop\\svn</span><br><span class="line">#生成的打包文件目录</span><br><span class="line">copyToRoot = C:\\Users\\MaYawei\\Desktop\\codeToPackage\\onlinesign\\package</span><br><span class="line">#是否重新编译项目Y/N</span><br><span class="line">compileProject = N</span><br><span class="line">#打包文件生成之后删除导出文件 Y/N</span><br><span class="line">deleteSvnOutputFile = N  </span><br></pre></td></tr></table></figure></li>
<li>b、工具类<br>ProjectIncrementCopy.java<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.plugin.hxpackincrement.tools;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.ResourceBundle;</span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">/**</span><br><span class="line"> * 描述:项目增量拷贝.</span><br><span class="line"> * </span><br><span class="line"> * @author 张小燕</span><br><span class="line"> * @date 2014年7月22日</span><br><span class="line"> */</span><br><span class="line">public class ProjectIncrementCopy &#123;</span><br><span class="line">    public static Logger logger = Logger.getLogger(ProjectIncrementCopy.class);</span><br><span class="line">    private List&lt;String&gt; fileNamels = new ArrayList&lt;String&gt;();</span><br><span class="line">    private String filesp = System.getProperty(&quot;file.separator&quot;);</span><br><span class="line">    private String currentRoot;</span><br><span class="line">    /**</span><br><span class="line">     * 全部待更新的目录， 查找内部类使用</span><br><span class="line">     */</span><br><span class="line">    private List&lt;String&gt; javaSourceDirectory = new ArrayList&lt;String&gt;();</span><br><span class="line">    /**</span><br><span class="line">     * 是否提取目录下所有的文件，false:只提取java文件相对应的.class文件，true:提取java文件相对应的.class文件与其它文件</span><br><span class="line">     */</span><br><span class="line">    private boolean isExportAll = true;</span><br><span class="line">    /**</span><br><span class="line">     *  svn版本差异导出目录</span><br><span class="line">     */</span><br><span class="line">    private static String svnOutputRoot;</span><br><span class="line">    /**</span><br><span class="line">     * 需要打包的根目录(java,resource,webapp的根目录)</span><br><span class="line">     */</span><br><span class="line">    private static String svnOutputNeedPackRoot;</span><br><span class="line">    /**</span><br><span class="line">     * 项目classes文件的路径</span><br><span class="line">     */</span><br><span class="line">    private static String projectClassesPath;</span><br><span class="line">    /**</span><br><span class="line">     * 生成的打包文件目录</span><br><span class="line">     */</span><br><span class="line">    private static String copyToRoot;</span><br><span class="line">    /**</span><br><span class="line">     * 属性文件中的项目目录</span><br><span class="line">     */</span><br><span class="line">    private static String projectRoot;</span><br><span class="line">    /**</span><br><span class="line">     * 项目是否重新编译</span><br><span class="line">     */</span><br><span class="line">    private static String compileProject;</span><br><span class="line">    /**</span><br><span class="line">     * 打包文件生成之后是否删除导出文件</span><br><span class="line">     */</span><br><span class="line">    private static String deleteSvnOutputFile;</span><br><span class="line">    /**</span><br><span class="line">     * 构造类</span><br><span class="line">     */</span><br><span class="line">    public ProjectIncrementCopy(String propertiesName) &#123;</span><br><span class="line">        if(StringUtils.isBlank(propertiesName))&#123;</span><br><span class="line">            propertiesName=&quot;hxpackincrement&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        ResourceBundle rb = ResourceBundle.getBundle(propertiesName);</span><br><span class="line">        svnOutputRoot = rb.getString(&quot;svnOutputRoot&quot;);</span><br><span class="line">        svnOutputNeedPackRoot = rb.getString(&quot;svnOutputRoot&quot;)+&quot;\\src\\main&quot;;</span><br><span class="line">        </span><br><span class="line">        projectRoot = rb.getString(&quot;projectRoot&quot;);</span><br><span class="line">        projectClassesPath = rb.getString(&quot;projectRoot&quot;)+&quot;\\target\\classes&quot;;</span><br><span class="line">        </span><br><span class="line">        copyToRoot = rb.getString(&quot;copyToRoot&quot;)</span><br><span class="line">                + File.separator</span><br><span class="line">                +rb.getString(&quot;projectName&quot;)</span><br><span class="line">                + &quot;(&quot;</span><br><span class="line">                + DateFormatUtils.format(Calendar.getInstance(),</span><br><span class="line">                        &quot;yyyy-MM-dd HHmmss&quot;) + &quot;)\\&quot;</span><br><span class="line">                + rb.getString(&quot;projectName&quot;);</span><br><span class="line">        </span><br><span class="line">        compileProject = rb.getString(&quot;compileProject&quot;);</span><br><span class="line">        deleteSvnOutputFile = rb.getString(&quot;deleteSvnOutputFile&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @功能：根据svn提取的文件目录,对文件进行拷贝提取.</span><br><span class="line">     * @描述： 根据svn导出更新的文件， &lt;br/&gt;</span><br><span class="line">     *      把需要更新的java对应的class文件拷贝到copyToRoot对应的目录下,</span><br><span class="line">     *      把导出的webapp目录下的文件拷贝到copyToRoot对应的目录下，</span><br><span class="line">     *      把导出的resources目录下的文件拷贝到copyToRoot对应的目录下 copyToRoot下的文件即为所要更新的所有文件.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     */</span><br><span class="line">    public void copyUpdateFile() &#123;</span><br><span class="line">        // 属性文件检查</span><br><span class="line">        if (!propertiesCheck()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 是否重新编译</span><br><span class="line">        if (&quot;Y&quot;.equalsIgnoreCase(compileProject)) &#123;</span><br><span class="line">            CompileProject.doCompileProject(projectRoot);</span><br><span class="line">        &#125;</span><br><span class="line">        // 删除要生成拷贝内容的目录</span><br><span class="line">        deleteFile(copyToRoot);</span><br><span class="line">        logger.debug(&quot;svnUpdateNeedPackRoot:&quot; + svnOutputNeedPackRoot);</span><br><span class="line">        logger.debug(&quot;projectClassesPath:&quot; + projectClassesPath);</span><br><span class="line">        logger.debug(&quot;copyToRoot:&quot; + copyToRoot);</span><br><span class="line">        File root = new File(svnOutputNeedPackRoot);</span><br><span class="line">        if (!root.exists()) &#123;</span><br><span class="line">            logger.info(&quot;文件或目录：&quot; + root.getAbsolutePath() + &quot;不存在&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        File[] fileList = root.listFiles();</span><br><span class="line">        for (int i = 0; i &lt; fileList.length; i++) &#123;</span><br><span class="line">            if (fileList[i].getName().equals(&quot;java&quot;)) &#123;</span><br><span class="line">                logger.info(&quot;提取&quot; + fileList[i].getName() + &quot;下的文件&quot;);</span><br><span class="line">                exportClass();</span><br><span class="line">            &#125;</span><br><span class="line">            if (fileList[i].getName().equals(&quot;resources&quot;)) &#123;</span><br><span class="line">                logger.info(&quot;提取&quot; + fileList[i].getName() + &quot;下的文件&quot;);</span><br><span class="line">                exportResouce();</span><br><span class="line">            &#125;</span><br><span class="line">            if (fileList[i].getName().equals(&quot;webapp&quot;)) &#123;</span><br><span class="line">                logger.info(&quot;提取&quot; + fileList[i].getName() + &quot;下的文件&quot;);</span><br><span class="line">                exportWebapp();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 是否要删除svn导出目录</span><br><span class="line">        if (&quot;Y&quot;.equalsIgnoreCase(deleteSvnOutputFile)) &#123;</span><br><span class="line">            deleteFile(svnOutputRoot);</span><br><span class="line">            (new File(svnOutputRoot)).mkdirs();</span><br><span class="line">            logger.info(&quot;svn导出文件已删除&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：配置属性检查.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     */</span><br><span class="line">    public boolean propertiesCheck() &#123;</span><br><span class="line">        if (!(new File(svnOutputRoot)).exists()) &#123;</span><br><span class="line">            System.err.println(&quot;svnOutputRoot 未配置或配置错误或未导出差异文件&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!(new File(svnOutputNeedPackRoot)).exists()) &#123;</span><br><span class="line">            System.err.println(&quot;svnOutputNeedPackRoot 未配置或配置错误或未导出差异文件&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!(new File(projectClassesPath)).exists()) &#123;</span><br><span class="line">            System.err.println(&quot;projectClassesPath 未配置或配置错误&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @描述：根据svn提取的文件目录，导出webapp下文件.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     */</span><br><span class="line">    public void exportWebapp() &#123;</span><br><span class="line">        this.currentRoot = &quot;webapp&quot;;</span><br><span class="line">        this.fileNamels.clear();</span><br><span class="line">        String srcRootWebapp = svnOutputNeedPackRoot + this.filesp + &quot;webapp&quot;;</span><br><span class="line">        String desRootWebapp = copyToRoot;</span><br><span class="line">        logger.info(&quot;webapp 文件来源:&quot; + srcRootWebapp + &quot; 文件保存到:&quot; + desRootWebapp);</span><br><span class="line">        this.listFile(new File(srcRootWebapp));</span><br><span class="line">        for (String fileName : fileNamels) &#123;</span><br><span class="line">            copyFile(srcRootWebapp + this.filesp + fileName, desRootWebapp</span><br><span class="line">                    + this.filesp + fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：根据svn提取的文件目录，导出resouces下文件.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     */</span><br><span class="line">    public void exportResouce() &#123;</span><br><span class="line">        this.currentRoot = &quot;resources&quot;;</span><br><span class="line">        this.fileNamels.clear();</span><br><span class="line">        String srcRootJava = svnOutputNeedPackRoot + this.filesp + &quot;resources&quot;;</span><br><span class="line">        String desRootJava = copyToRoot + this.filesp + &quot;WEB-INF&quot; + this.filesp</span><br><span class="line">                + &quot;classes&quot;;</span><br><span class="line">        logger.info(&quot;resources 文件来源:&quot; + srcRootJava + &quot; 文件的保存到:&quot; + desRootJava);</span><br><span class="line">        this.listFile(new File(srcRootJava));</span><br><span class="line">        for (String fileName : fileNamels) &#123;</span><br><span class="line">            copyFile(srcRootJava + this.filesp + fileName, desRootJava</span><br><span class="line">                    + this.filesp + fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @描述：导出class文件.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     */</span><br><span class="line">    public void exportClass() &#123;</span><br><span class="line">        this.currentRoot = &quot;java&quot;;</span><br><span class="line">        this.fileNamels.clear();</span><br><span class="line">        String srcRootJava = svnOutputNeedPackRoot + this.filesp + &quot;java&quot;;</span><br><span class="line">        String desRootJava = copyToRoot + this.filesp + &quot;WEB-INF&quot; + this.filesp</span><br><span class="line">                + &quot;classes&quot;;</span><br><span class="line">        logger.info(&quot;class 需要拷贝文件目录:&quot; + srcRootJava + &quot; 文件来源:&quot;</span><br><span class="line">                + projectClassesPath + &quot; 文件保存到:&quot; + desRootJava);</span><br><span class="line">        this.listFile(new File(srcRootJava));</span><br><span class="line">        // 内部类</span><br><span class="line">        getInnerClass();</span><br><span class="line">        for (String fileName : fileNamels) &#123;</span><br><span class="line">            copyFile(projectClassesPath + this.filesp + fileName, desRootJava</span><br><span class="line">                    + this.filesp + fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：列出svn 更新时导出的文件中 src\\main目录下所有文件的文件名</span><br><span class="line">     *           （包括相对src\\main的全路径，java文件名变为相对应的class文件名）.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     * @param f</span><br><span class="line">     */</span><br><span class="line">    public void listFile(File f) &#123;</span><br><span class="line">        if (!f.exists()) &#123;</span><br><span class="line">            System.err.println(&quot;文件或目录：&quot; + f.getAbsolutePath() + &quot;不存在&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = f.getAbsolutePath();</span><br><span class="line">        int findCurrentRootPos = fileName.indexOf(filesp + currentRoot + filesp);</span><br><span class="line">        int dirPos = findCurrentRootPos + currentRoot.length() + 1;</span><br><span class="line">        if (f.isDirectory()) &#123;</span><br><span class="line">            if (findCurrentRootPos != -1) &#123;</span><br><span class="line">                javaSourceDirectory.add(fileName.substring(dirPos));</span><br><span class="line">            &#125;</span><br><span class="line">            File[] t = f.listFiles();</span><br><span class="line">            for (int i = 0; i &lt; t.length; i++) &#123;</span><br><span class="line">                listFile(t[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (findCurrentRootPos != -1) &#123;</span><br><span class="line">                if (fileName.lastIndexOf(&quot;.java&quot;) != -1) &#123;</span><br><span class="line">                    String javaFile = fileName.substring(dirPos,</span><br><span class="line">                            fileName.lastIndexOf(&quot;.java&quot;))</span><br><span class="line">                            + &quot;.class&quot;;</span><br><span class="line">                    this.fileNamels.add(javaFile);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (this.isExportAll) &#123;</span><br><span class="line">                        String otherFile = fileName.substring(dirPos);</span><br><span class="line">                        this.fileNamels.add(otherFile);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：文件复制.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     * @param oldPath</span><br><span class="line">     * @param newPath</span><br><span class="line">     */</span><br><span class="line">    private void copyFile(String oldPath, String newPath) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            File oldfile = new File(oldPath);</span><br><span class="line">            File newfile = new File(newPath);</span><br><span class="line">            // 拷贝文件</span><br><span class="line">            FileUtils.copyFile(oldfile, newfile);</span><br><span class="line">            logger.info(&quot;文件：&quot; + newfile.getName() + &quot; 大小：&quot;</span><br><span class="line">                    + FileUtils.sizeOf(newfile) + &quot; byte&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.err.println(&quot;复制单个文件操作出错&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：删除目录下的全部文件，包括本身目录.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     * @param deletePath</span><br><span class="line">     */</span><br><span class="line">    public boolean deleteFile(String deletePath) &#123;</span><br><span class="line">        return FileUtils.deleteQuietly(new File(deletePath));</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @描述：查找提取文件中是否存在内部类，存在则提取出来.</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年7月23日</span><br><span class="line">     */</span><br><span class="line">    private void getInnerClass() &#123;</span><br><span class="line">        for (int i = 0; i &lt; javaSourceDirectory.size(); i++) &#123;</span><br><span class="line">            String currentDir = javaSourceDirectory.get(i);</span><br><span class="line">            String directory = projectClassesPath + currentDir;</span><br><span class="line">            File[] fs = (new File(directory)).listFiles();</span><br><span class="line">            for (File tempFile : fs) &#123;</span><br><span class="line">                if (!tempFile.isDirectory()) &#123;</span><br><span class="line">                    String tempFileName = tempFile.getName();</span><br><span class="line">                    boolean isInner = tempFileName.indexOf(&quot;$&quot;) != -1</span><br><span class="line">                            &amp;&amp; tempFileName.endsWith(&quot;.class&quot;);</span><br><span class="line">                    if (isInner) &#123;</span><br><span class="line">                        String innerClassFather = currentDir</span><br><span class="line">                                + this.filesp</span><br><span class="line">                                + tempFileName.substring(0,</span><br><span class="line">                                        tempFileName.indexOf(&quot;$&quot;)) + &quot;.class&quot;;</span><br><span class="line">                        if (this.fileNamels.contains(innerClassFather)) &#123;</span><br><span class="line">                            this.fileNamels.add(currentDir + this.filesp</span><br><span class="line">                                    + tempFileName);</span><br><span class="line">                            logger.info(&quot;innerClass:&quot; + currentDir</span><br><span class="line">                                    + this.filesp + tempFileName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>CompileProject.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package tool.incpackage;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:生成最新的项目文件(重新编译).</span><br><span class="line"> * </span><br><span class="line"> * @author 张小燕</span><br><span class="line"> * @date 2014年8月11日</span><br><span class="line"> */</span><br><span class="line">public class CompileProject &#123;</span><br><span class="line"></span><br><span class="line">	public static void doCompileProject(String projectRoot) &#123;</span><br><span class="line">		//得到jar所在目录</span><br><span class="line">		String path = CompileProject.class.getProtectionDomain()</span><br><span class="line">				.getCodeSource().getLocation().getFile();</span><br><span class="line">		path = path.substring(0, path.lastIndexOf(&quot;/&quot;))</span><br><span class="line">				+ &quot;/compile_project.bat&quot;;</span><br><span class="line"></span><br><span class="line">		Runtime run = Runtime.getRuntime();</span><br><span class="line">		try &#123;</span><br><span class="line">			File batFile = new File(path);</span><br><span class="line">			if (!batFile.exists()) &#123;</span><br><span class="line">				Collection&lt;String&gt; a = new ArrayList&lt;String&gt;();</span><br><span class="line">				a.add(&quot;cd /d %1&quot;);</span><br><span class="line">				a.add(&quot;@echo 重新编译项目&quot;);</span><br><span class="line">				a.add(&quot;mvn compile&quot;);</span><br><span class="line">				FileUtils.writeLines(new File(path), a, true);</span><br><span class="line">			&#125;</span><br><span class="line">			String cmd = path + &quot; &quot; + projectRoot;</span><br><span class="line">			System.out.println(cmd);</span><br><span class="line">			Process p = run.exec(cmd);</span><br><span class="line">			BufferedInputStream in = new BufferedInputStream(p.getInputStream());</span><br><span class="line">			BufferedReader inBr = new BufferedReader(new InputStreamReader(in));</span><br><span class="line">			String lineStr;</span><br><span class="line">			while ((lineStr = inBr.readLine()) != null) &#123;</span><br><span class="line">				System.out.println(lineStr);// 打印输出信息</span><br><span class="line">			&#125;</span><br><span class="line">			// 检查命令是否执行失败。</span><br><span class="line">			if (p.waitFor() != 0) &#123;</span><br><span class="line">				if (p.exitValue() == 1)// p.exitValue()==0表示正常结束，1：非正常结束</span><br><span class="line">					System.err.println(&quot;命令执行失败!&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			inBr.close();</span><br><span class="line">			in.close();</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		CompileProject.doCompileProject(&quot;E:\\workspace\\epassnew&quot;);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>HxPack.java</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.icinfo.plugin.hxpackincrement;</span><br><span class="line">import com.icinfo.plugin.hxpackincrement.tools.ProjectIncrementCopy;</span><br><span class="line">/**</span><br><span class="line"> * 描述:.</span><br><span class="line"> * </span><br><span class="line"> * @author 张小燕</span><br><span class="line"> * @date 2014年9月15日</span><br><span class="line"> */</span><br><span class="line">public class HxPack &#123;</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @描述：打包，外部调用HxPack.doPack().</span><br><span class="line">     * @author 张小燕</span><br><span class="line">     * @date 2014年9月15日</span><br><span class="line">     */</span><br><span class="line">    public static void doPack(String... propertiesName) &#123;</span><br><span class="line">        String pn;</span><br><span class="line">        if (propertiesName == null || propertiesName.length == 0) &#123;</span><br><span class="line">            pn = &quot;&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pn = propertiesName[0];</span><br><span class="line">        &#125;</span><br><span class="line">        ProjectIncrementCopy pic = new ProjectIncrementCopy(pn);</span><br><span class="line">        pic.copyUpdateFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>compile_project.bat</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /d %1</span><br><span class="line">@echo 重新编译项目</span><br><span class="line">mvn compile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>c、调用<br>HxPackTest.java<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import tool.incpackage.HxPack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述:E照通增量打包.</span><br><span class="line"> * @author ZhangXiaoYan</span><br><span class="line"> * @date 2014年9月26日</span><br><span class="line"> */</span><br><span class="line">public class HxPackTest &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		System.err.println(&quot;\n增量打包&gt;&gt;&gt;开始&quot;);</span><br><span class="line">		HxPack.doPack(&quot;hxpackepass&quot;);</span><br><span class="line">		System.err.println(&quot;\n增量打包&gt;&gt;&gt;结束&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>如何清理Virtualbox虚拟机VDI镜像文件的空间大小</title>
    <url>/2020/10/01/%E5%A6%82%E4%BD%95%E6%B8%85%E7%90%86Virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BAVDI%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h3 id="如何清理Virtualbox虚拟机VDI镜像文件的空间大小"><a href="#如何清理Virtualbox虚拟机VDI镜像文件的空间大小" class="headerlink" title="如何清理Virtualbox虚拟机VDI镜像文件的空间大小"></a>如何清理Virtualbox虚拟机VDI镜像文件的空间大小</h3><p>虚拟机使用久了就会发现虚拟硬盘越来越大，但是进入虚拟机里的系统用命令看了下，实际占用的空间远没有虚拟硬盘大小那么大，这个让人很不爽，而且在分享虚拟机镜像的时候也很不方便。VirtualBox似乎没有提供图形界面的方式可以让我们来压缩虚拟硬盘大小，但是可以通过命令行来实现。经过实际测试，我的一个30多G的虚拟硬盘可以压缩到13G大小，可见效果还是非常显著的，这个可以压缩的空间取决于你虚拟机内真实的空间占用大小。</p>
<blockquote>
<p> VirtualBox同时支持自己的虚拟硬盘格式VDI和Vmware的VMDK格式，两种格式的压缩略有不同。</p>
</blockquote>
<h4 id="1-碎片整理"><a href="#1-碎片整理" class="headerlink" title="1. 碎片整理"></a>1. 碎片整理</h4><p>第一步要做的是碎片整理，打开虚拟机，执行下面的命令：</p>
<ul>
<li><p>Linux系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/EMPTY bs=1M</span><br><span class="line">sudo rm -f /EMPTY</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows系统需要下载Sysinternals Suite并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdelete –z</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-压缩磁盘"><a href="#2-压缩磁盘" class="headerlink" title="2. 压缩磁盘"></a>2. 压缩磁盘</h4><p>关闭虚拟机，现在可以开始压缩虚拟硬盘了</p>
<blockquote>
<p>如果你的虚拟硬盘是VirtualBox自己的VDI格式，找到虚拟硬盘文件，执行命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyhd mydisk.vdi --compact</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你的虚拟硬盘是Vmware的VMDK格式，那就要麻烦点，因为VirtualBox不支持直接压缩VMDK格式，但是可以变通下：先转换成VDI并压缩，再转回VMDK。执行命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VBoxManage clonehd &quot;source.vmdk&quot; &quot;cloned.vdi&quot; --format vdi</span><br><span class="line">VBoxManage modifyhd cloned.vdi --compact</span><br><span class="line">VBoxManage clonehd &quot;cloned.vdi&quot; &quot;compressed.vmdk&quot; --format vmdk</span><br></pre></td></tr></table></figure>

<blockquote>
<p>事实上，执行命令的过程中可以发现：在从VMDK转换到VDI的过程中似乎已经做了压缩，文件大小已经减少了很多，第二条命令反而没见到文件大小有什么变化，所以这里第二条命令应该可以省略了。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串工具类(StrUtil.java)</title>
    <url>/2020/06/02/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A5%E5%85%B7%E7%B1%BB(StrUtil.java)/</url>
    <content><![CDATA[<h3 id="Java工具类"><a href="#Java工具类" class="headerlink" title="Java工具类"></a>Java工具类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.murray.common.utils;</span><br><span class="line"> </span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">* 描述: Request 工具类</span><br><span class="line">* @date 2014-10-13</span><br><span class="line">*/</span><br><span class="line">public class MlRequestUtil &#123;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取 request 中所有参数</span><br><span class="line">     * @date 2014-10-14</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">    public static Map&lt;String, String&gt; getAllParam(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String,String&gt; tempMap = new HashMap&lt;String,String&gt;();</span><br><span class="line">        Enumeration enuParam = request.getParameterNames(); </span><br><span class="line">        while(enuParam.hasMoreElements())&#123; </span><br><span class="line">            String paramName = (String) enuParam.nextElement();</span><br><span class="line">            String [] arrParamValue = request.getParameterValues(paramName);</span><br><span class="line">            String paramValue = MlStringUtil.arrayToString(arrParamValue, &quot;,&quot;);</span><br><span class="line">            // 过滤掉空值</span><br><span class="line">            if(paramValue!=null &amp;&amp; paramValue.length()&gt;0)&#123;</span><br><span class="line">                tempMap.put(paramName, paramValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tempMap;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 过滤  request 中特殊字符</span><br><span class="line">     * @date 2014-5-16</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">    public static HttpServletRequest filterSpecialCharacter(HttpServletRequest request)</span><br><span class="line">    &#123;</span><br><span class="line">        Enumeration enuParam = request.getParameterNames();</span><br><span class="line">        // 循环读取参数</span><br><span class="line">        while(enuParam.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            String paramValue = &quot;&quot;;</span><br><span class="line">            String paramName = (String) enuParam.nextElement();</span><br><span class="line">            String[] arrParamValue = request.getParameterValues(paramName);</span><br><span class="line">            for (String tempValue : arrParamValue)&#123;</span><br><span class="line">                if(paramValue.equals(&quot;&quot;))&#123;</span><br><span class="line">                    paramValue = MlStringUtil.strToHtml(tempValue) ;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    paramValue = paramValue + &quot;, &quot; + MlStringUtil.strToHtml(tempValue) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            request.setAttribute(MlStringUtil.strToHtml(paramName), paramValue);</span><br><span class="line">        &#125;</span><br><span class="line">        return request;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 通过 request 对象获取IP地址</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getIpAddress(HttpServletRequest request)</span><br><span class="line">    &#123;</span><br><span class="line">        if(request!=null)&#123;</span><br><span class="line">            String ipAddress = request.getHeader(&quot;X-Forwarded-For&quot;);</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;Proxy-Client-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;X-Real-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">            &#125;</span><br><span class="line">            return ipAddress;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 从 request 中获取 cookie 值</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param request</span><br><span class="line">     * @param cookieName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Cookie getCookieValue(HttpServletRequest request,String cookieName) &#123;</span><br><span class="line">        Cookie[] cookie = request.getCookies();</span><br><span class="line">        for (int i = 0; cookie != null &amp;&amp; i &lt; cookie.length; i++) &#123;</span><br><span class="line">            if (cookie[i].getName().equals(cookieName))</span><br><span class="line">                return cookie[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 从 request 中获取字符串信息</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param request</span><br><span class="line">     * @param encode</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getStringFromStream(HttpServletRequest request,String encode) &#123;</span><br><span class="line">        String requestXML = &quot;&quot;;</span><br><span class="line">        try&#123;</span><br><span class="line">            InputStream inputStream = request.getInputStream();</span><br><span class="line">            if(inputStream!=null)&#123;</span><br><span class="line">                InputStreamReader inStreamRead = new InputStreamReader(inputStream,encode);</span><br><span class="line">                BufferedReader buffRead = new BufferedReader(inStreamRead);</span><br><span class="line">                String line;</span><br><span class="line">                while((line = buffRead.readLine()) != null)&#123;</span><br><span class="line">                    requestXML += line;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch(Exception er)&#123;</span><br><span class="line">            er.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return requestXML;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: POST 流提交,解析返回的ZLib压缩的二进制流</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param strUrl  请求地址</span><br><span class="line">     * @param content 请求内容</span><br><span class="line">     * @param encode  编码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postStreamForZLib(String strUrl, String content, String encode)</span><br><span class="line">    &#123;</span><br><span class="line">        HttpURLConnection urlCon = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            URL url = new URL(strUrl);</span><br><span class="line">            urlCon = (HttpURLConnection) url.openConnection();</span><br><span class="line"> </span><br><span class="line">            urlCon.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            urlCon.setRequestProperty(&quot;content-type&quot;, &quot;text/html&quot;);</span><br><span class="line">            urlCon.setDoOutput(true);</span><br><span class="line"> </span><br><span class="line">            urlCon.getOutputStream().write(content.getBytes(encode));</span><br><span class="line">            urlCon.getOutputStream().flush();</span><br><span class="line">            urlCon.getOutputStream().close();</span><br><span class="line"> </span><br><span class="line">            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();</span><br><span class="line">            int read = -1;</span><br><span class="line">            while((read = urlCon.getInputStream().read())!=-1)&#123;</span><br><span class="line">                byteStream.write(read);</span><br><span class="line">            &#125;</span><br><span class="line">            byte bXml [] = byteStream.toByteArray();</span><br><span class="line">            String respXML = new String(MlStringUtil.ZLibUnCompress(bXml));</span><br><span class="line">            return respXML;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            if (urlCon != null)&#123;</span><br><span class="line">                urlCon.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: POST 参数提交</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param strUrl  请求地址</span><br><span class="line">     * @param requestMap 请求参数</span><br><span class="line">     * @param encode  编码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postParam(String strUrl, Map&lt;String,String&gt; requestMap,String encode)&#123;</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        BufferedReader in = null;</span><br><span class="line">        StringBuffer result = new StringBuffer();</span><br><span class="line">        try&#123;</span><br><span class="line">            URL url = new URL(strUrl);</span><br><span class="line">            HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();</span><br><span class="line">            // 设置通用的请求属性</span><br><span class="line">            urlCon.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            urlCon.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class="line">            urlCon.setDoOutput(true);</span><br><span class="line">            out = new PrintWriter(urlCon.getOutputStream());</span><br><span class="line">            out.print(MlStringUtil.mapToUrlParam(requestMap,encode));</span><br><span class="line">            out.flush();</span><br><span class="line"> </span><br><span class="line">            // 定义BufferedReader输入流来读取URL的响应</span><br><span class="line">            in = new BufferedReader(new InputStreamReader(urlCon.getInputStream(),encode));</span><br><span class="line">            String line = &quot;&quot;;</span><br><span class="line">            while ((line = in.readLine()) != null)&#123;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                if (out != null)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                    out = null;</span><br><span class="line">                &#125;</span><br><span class="line">                if (in != null)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                    in = null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception ex)&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: POST 流提交</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param strUrl  请求地址</span><br><span class="line">     * @param content 请求内容</span><br><span class="line">     * @param encode  编码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postStream(String strUrl, String content, String encode)</span><br><span class="line">    &#123;</span><br><span class="line">        HttpURLConnection urlCon = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            URL url = new URL(strUrl);</span><br><span class="line">            urlCon = (HttpURLConnection) url.openConnection();</span><br><span class="line"> </span><br><span class="line">            urlCon.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            urlCon.setRequestProperty(&quot;content-type&quot;, &quot;text/html&quot;);</span><br><span class="line">            urlCon.setDoOutput(true);</span><br><span class="line"> </span><br><span class="line">            urlCon.getOutputStream().write(content.getBytes(encode));</span><br><span class="line">            urlCon.getOutputStream().flush();</span><br><span class="line">            urlCon.getOutputStream().close();</span><br><span class="line"> </span><br><span class="line">            BufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream(), encode));</span><br><span class="line"> </span><br><span class="line">            String line;</span><br><span class="line">            String respXML = &quot;&quot;;</span><br><span class="line">            while ((line = in.readLine()) != null)&#123;</span><br><span class="line">                respXML += line;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line"> </span><br><span class="line">            return respXML;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            if (urlCon != null)&#123;</span><br><span class="line">                urlCon.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>安全漏洞-脚本攻击</title>
    <url>/2018/01/01/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E-%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h3 id="1、sql中值用-代替"><a href="#1、sql中值用-代替" class="headerlink" title="1、sql中值用#代替$"></a>1、sql中值用#代替$</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">如：SELECT * FROM orginfo WHERE fname LIKE &#x27;%$众华$%&#x27; 存在安全漏洞，</span><br><span class="line">应修改为SELECT * FROM orginfo WHERE fname LIKE &#x27;%#众华#%&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2、关闭不安全的http-方法"><a href="#2、关闭不安全的http-方法" class="headerlink" title="2、关闭不安全的http 方法"></a>2、关闭不安全的http 方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 关闭不安全的http 方法 --&gt;</span><br><span class="line">&lt;security-constraint&gt;</span><br><span class="line">&lt;web-resource-collection&gt;</span><br><span class="line">&lt;web-resource-name&gt;anyname&lt;/web-resource-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;http-method&gt;PUT&lt;/http-method&gt;</span><br><span class="line">&lt;http-method&gt;DELETE&lt;/http-method&gt;</span><br><span class="line">&lt;http-method&gt;HEAD&lt;/http-method&gt;</span><br><span class="line">&lt;http-method&gt;OPTIONS&lt;/http-method&gt;</span><br><span class="line">&lt;http-method&gt;TRACE&lt;/http-method&gt;</span><br><span class="line">&lt;/web-resource-collection&gt;</span><br><span class="line">&lt;auth-constraint&gt;</span><br><span class="line">&lt;/auth-constraint&gt;    </span><br><span class="line"> &lt;/security-constraint&gt;    </span><br><span class="line"> &lt;login-config&gt;    </span><br><span class="line">   &lt;auth-method&gt;BASIC&lt;/auth-method&gt;    </span><br><span class="line"> &lt;/login-config&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 docker、docker-compose</title>
    <url>/2020/01/01/%E5%AE%89%E8%A3%85%20docker%E3%80%81docker-compose/</url>
    <content><![CDATA[<h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载老版本</span></span><br><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置仓库</span></span><br><span class="line"><span class="comment"># Update the apt package index</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install packages to allow apt to use a repository over HTTPS</span></span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add Docker&#x27;s official GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line"><span class="comment"># set up the stable repository</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the latest version of Docker CE and containerd</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><blockquote>
<p>老版本的Docker包叫做docker或者docker-engine，如果安装了老版本的docker得先卸载然后再安装新版本的docker。</p>
</blockquote>
<blockquote>
<p>docker的发展非常迅速，apt源的更新往往比较滞后。所以docker官网推荐的安装方式都是下载docker安装脚本安装。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载老旧的版本（若未安装过可省略此步）：</span></span><br><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新的docker：</span></span><br><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># shell会提示你输入sudo的密码，然后开始执行最新的docker过程 或者</span></span><br><span class="line">$ curl -sSL https://get.docker.com/ | sh </span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认Docker成功最新的docker：</span></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><blockquote>
<p>两种最新的docker安装方式</p>
</blockquote>
<h4 id="1-从github上下载docker-compose二进制文件安装"><a href="#1-从github上下载docker-compose二进制文件安装" class="headerlink" title="1. 从github上下载docker-compose二进制文件安装"></a>1. 从github上下载docker-compose二进制文件安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载最新版的docker-compose文件(https://github.com/docker/compose/releases)</span><br><span class="line"></span><br><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 添加可执行权限</span><br><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 测试安装结果</span><br><span class="line">$ docker-compose --version</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-pip安装"><a href="#2-pip安装" class="headerlink" title="2. pip安装"></a>2. pip安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>vim快捷键及技巧</title>
    <url>/2020/10/01/vim%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="vim快捷键及技巧"><a href="#vim快捷键及技巧" class="headerlink" title="vim快捷键及技巧"></a>vim快捷键及技巧</h2><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 进入命令行模式，按ctrl + v进入 visual block模式（可视快模式），然后按j, 或者k选中多行，把需要注释的行标记起来</span><br><span class="line">2. 按大写字母i，再插入注释符</span><br><span class="line">3. 按esc键两下就会全部注释了</span><br></pre></td></tr></table></figure>

<h3 id="取消多行注释"><a href="#取消多行注释" class="headerlink" title="取消多行注释"></a>取消多行注释</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 进入命令行模式，按ctrl + v进入 visual block模式（可视快模式），按小写字母L横向选中列的个数</span><br><span class="line">2. 按字母j，或者k选中注释符号</span><br><span class="line">3. 按d键就可全部取消注释</span><br></pre></td></tr></table></figure>

<h3 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim file 打开单个文件</span><br><span class="line">vim file1 file2 file3 ... 同时打开多个文件</span><br><span class="line">:open file 在vim窗口中打开一个新文件</span><br><span class="line">:bn 切换到下一个文件</span><br><span class="line">:bp 切换到上一个文件</span><br><span class="line">:args 查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。</span><br></pre></td></tr></table></figure>

<h3 id="打开远程文件"><a href="#打开远程文件" class="headerlink" title="打开远程文件"></a>打开远程文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:e ftp://192.168.10.76/abc.txt  打开ftp文件</span><br><span class="line">:e \\qadrive\test\abc.txt 打开share folder</span><br></pre></td></tr></table></figure>

<h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i 在当前位置生前插入</span><br><span class="line">I 在当前行首插入</span><br><span class="line">a 在当前位置后插入</span><br><span class="line">A 在当前行尾插入</span><br><span class="line">o 在当前行之后插入一行</span><br><span class="line">O 在当前行之前插入一行</span><br></pre></td></tr></table></figure>

<h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/text 查找text，按n健查找下一个，按N健查找前一个。</span><br><span class="line">?text 查找text，反向查找，按n健查找下一个，按N健查找前一个。</span><br><span class="line">:nohl 取消高亮</span><br><span class="line">vim中有一些特殊字符在查找时需要转义 .*[]^%/?~$</span><br><span class="line">:set ignorecas 忽略大小写的查找</span><br><span class="line">:set noignorecase 不忽略大小写的查找</span><br><span class="line">将光标移动到某单词上，按*键可对该单词进行搜索，相当于/搜索。而按#命令相当于?搜索。</span><br><span class="line">:set hlsearch 高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</span><br><span class="line">:set nohlsearch 关闭高亮搜索显示</span><br><span class="line">:nohlsearch 关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</span><br><span class="line">:set incsearch 逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</span><br><span class="line">:set wrapscan 重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</span><br><span class="line">:set number 显示行号</span><br><span class="line">:set nonumber 隐藏行号</span><br></pre></td></tr></table></figure>

<h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r&lt;x&gt; 将当前字符替换为x，当期字符即光标所在字符。</span><br><span class="line">:s/old/new/ 用old替换new，替换当前行的第一个匹配</span><br><span class="line">:s/old/new/g 用old替换new，替换当前行的所有匹配</span><br><span class="line">:%s/old/new/ 用old替换new，替换所有行的第一个匹配</span><br><span class="line">:%s/old/new/g 用old替换new，替换整个文件的所有匹配</span><br><span class="line">:10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进</span><br><span class="line">:n1,n2s/old/new/g 将n1到n2行出现old字符的替换为new</span><br><span class="line">:n1,$s/old/new/g 将n1到最后一行出现old字符的替换为new</span><br><span class="line"></span><br><span class="line">ctrl + p 自动完成功能</span><br><span class="line">ctrl + g 查看当前文件全路径</span><br><span class="line"></span><br><span class="line">ddp 交换光标所在行和其下紧邻的一行。</span><br><span class="line">xp交换当前字符和其后一个字符</span><br></pre></td></tr></table></figure>

<h3 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h 左移一个字符</span><br><span class="line">l 右移一个字符，这个命令很少用，一般用w代替。</span><br><span class="line">k 上移一个字符</span><br><span class="line">j 下移一个字符</span><br><span class="line"></span><br><span class="line">n&lt;space&gt; ：n表示数字，光标会向右移动这一行的n个字符(常用)</span><br><span class="line">0或者home键：光标移动到这一行的最前面(常用)</span><br><span class="line">$或者end键：光标移动到这一行的最后面(常用)</span><br><span class="line">G              ：移动到文件的最后一行(常用)</span><br><span class="line">nG            ：n表示数字，光标移动到文件的第n行(常用)，相当于]]</span><br><span class="line">gg             ：光标移动到文件的第一行(常用) ，相当于[[</span><br><span class="line">n+回车键  ：光标向下移动n行(常用)</span><br><span class="line">:n+回车键 ： n代表数字，光标移动到第n行(常用) 或 行号n+G</span><br><span class="line"></span><br><span class="line">w 向前移动一个单词（光标停在单词首部）</span><br><span class="line">b 向后移动一个单词 2b 向后移动2个单词</span><br><span class="line">e，同w，只不过是光标停在单词尾部</span><br><span class="line">ge，同b，光标停在单词尾部。</span><br><span class="line">^ 移动到本行第一个非空白字符上。</span><br><span class="line">f（find）命令也可用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。F 同f，反向查找。</span><br><span class="line"></span><br><span class="line">ctrl + e 向下滚动一行</span><br><span class="line">ctrl + y 向上滚动一行</span><br><span class="line">ctrl + d 向下滚动半屏</span><br><span class="line">ctrl + u 向上滚动半屏</span><br><span class="line">ctrl + f 向下滚动一屏</span><br><span class="line">ctrl + b 向上滚动一屏</span><br></pre></td></tr></table></figure>

<h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u 撤销（Undo）</span><br><span class="line">U 撤销对整行的操作</span><br><span class="line">ctrl + r 重做（Redo），即撤销的撤销。</span><br></pre></td></tr></table></figure>

<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x 删除当前字符</span><br><span class="line">3x 删除当前光标开始向后三个字符</span><br><span class="line">X 删除当前字符的前一个字符。X=dh</span><br><span class="line">dl 删除当前字符， dl=x</span><br><span class="line">dh 删除前一个字符</span><br><span class="line">dd 删除当前行</span><br><span class="line">dj 删除上一行</span><br><span class="line">dk 删除下一行</span><br><span class="line">D 删除当前字符至行尾。D=d$</span><br><span class="line">d$ 删除当前字符之后的所有字符（本行）</span><br><span class="line">kdgg 删除当前行之前所有行（不包括当前行）</span><br><span class="line">jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）</span><br><span class="line">:1,10d 删除1-10行</span><br><span class="line">:11,$d 删除11行及以后所有的行</span><br><span class="line">:1,$d 删除所有行</span><br><span class="line">J(shift + j) 删除两行之间的空行，实际上是合并两行。</span><br></pre></td></tr></table></figure>

<h3 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a>拷贝和粘贴</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yy 拷贝当前行</span><br><span class="line">nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</span><br><span class="line">p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</span><br><span class="line">shift+p 在当前行前粘贴</span><br><span class="line">:1,10 co 20 将1-10行插入到第20行之后。</span><br><span class="line">:1,$ co $ 将整个文件复制一份并添加到文件尾部。</span><br></pre></td></tr></table></figure>

<h3 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</span><br><span class="line">ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</span><br><span class="line">:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</span><br><span class="line">:1, 10 m 20 将第1-10行移动到第20行之后。</span><br></pre></td></tr></table></figure>

<h3 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq 保存并退出</span><br><span class="line">ZZ 保存并退出</span><br><span class="line">:q! 强制退出并忽略所有更改</span><br><span class="line">:e! 放弃所有修改，并打开原来文件。</span><br></pre></td></tr></table></figure>

<h3 id="录制宏"><a href="#录制宏" class="headerlink" title="录制宏"></a>录制宏</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按q键加任意字母开始录制，再按q键结束录制（vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</span><br></pre></td></tr></table></figure>

<h3 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:!command</span><br><span class="line">:!ls 列出当前目录下文件</span><br><span class="line">:suspend 或 ctrl + z 挂起vim，回到shell，按fg可以返回vim。</span><br></pre></td></tr></table></figure>

<h3 id="注释命令"><a href="#注释命令" class="headerlink" title="注释命令"></a>注释命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">要注释某些行，只需在行首加入#</span><br><span class="line">3,5 s/^/#/g 注释第3-5行</span><br><span class="line">3,5 s/^#//g 解除3-5行的注释</span><br><span class="line">1,$ s/^/#/g 注释整个文档</span><br><span class="line">:%s/^/#/g 注释整个文档</span><br></pre></td></tr></table></figure>

<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:help or F1 显示整个帮助</span><br><span class="line">:help xxx 显示xxx的帮助，比如 :help i, :help ctrl-[（即ctrl+[的帮助）</span><br><span class="line">:help &#x27;number&#x27; Vim选项的帮助用单引号括起</span><br><span class="line">:help &lt;Esc&gt; 特殊键的帮助用&lt;&gt;扩起</span><br><span class="line">:help -t Vim启动参数的帮助用</span><br><span class="line">:help i_&lt;Esc&gt; 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式</span><br><span class="line">帮助文件中位于||之间的内容是超链接，可以用ctrl+]进入链接，ctrl+o（Ctrl + t）返回</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、使用vim时，如果不小心按了 ctrl+ s后不能输入任何东西，像死掉了一般，其实vim并没有死掉，这时vim只是停止向终端输出而已，要想退出这种状态，只需按ctrl+ q 即可恢复正常。</span><br><span class="line"></span><br><span class="line">2、按crtl+z 把vim暂时丢到后台(不是关闭)，再输入 fg 就可以恢复</span><br><span class="line">前台进程的挂起：ctrl+z</span><br><span class="line">后台进程的终止：</span><br><span class="line">         通过jobs命令查看job号（假设为num），然后执行kill %num</span><br><span class="line">        或 通过ps命令查看job的进程号（PID，假设为pid），然后执行kill pid</span><br><span class="line">前台进程的终止：ctrl+c</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">fg、bg、jobs、&amp;、ctrl + z都是跟系统任务有关的。</span><br><span class="line">&amp; 最经常被用到，这个用在一个命令的最后，可以把这个命令放到后台执行</span><br><span class="line">ctrl + z 可以将一个正在前台执行的命令放到后台，并且暂停</span><br><span class="line">jobs 查看当前有多少在后台运行的命令</span><br><span class="line">fg 将后台中的命令调至前台继续运行，如果后台中有多个命令，可以用 fg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)</span><br><span class="line">bg 将一个在后台暂停的命令，变成继续执行，如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)</span><br><span class="line"></span><br><span class="line">3、窗口分割的命令</span><br><span class="line">水平窗口分割：</span><br><span class="line">:split（开启另一个窗口察看同一文件）</span><br><span class="line">:split 文件名（开启另一个窗口察看指定文件）</span><br><span class="line"></span><br><span class="line">垂直窗口分割：</span><br><span class="line">:vsplit（开启另一个窗口察看同一文件）</span><br><span class="line">:vsplit 文件名（开启另一个窗口察看指定文件）</span><br><span class="line"></span><br><span class="line">在窗口之间进行切换：</span><br><span class="line">ctrl+w+w：按住Ctrl键，同时按下两次w键。从一个窗口切换到另一个窗口。</span><br><span class="line">ctrl+w+h    跳转到左边的窗口</span><br><span class="line">ctrl+w+j     跳转到下面的窗口</span><br><span class="line">ctrl+w+k    跳转到上面的窗口</span><br><span class="line">ctrl+w+l     跳转到右边的窗口</span><br><span class="line">ctrl+w+t     跳转到最顶上的窗口</span><br><span class="line">ctrl+w+b    跳转到最底下的窗口</span><br></pre></td></tr></table></figure>

<h3 id="关闭当前文件"><a href="#关闭当前文件" class="headerlink" title="关闭当前文件"></a>关闭当前文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 光标切换到当前窗口 :q 命令 或者 :close 关闭当前窗口</span><br><span class="line">② 关闭所有窗口文件 :qall 命令关闭所有窗口</span><br><span class="line">③ 关闭除当前窗口之外的文件 :only。</span><br><span class="line"></span><br><span class="line">vim tab设置为4个空格</span><br><span class="line">在/etc/vimrc 中添加:</span><br><span class="line">set ts=4  (注：ts是tabstop的缩写，设TAB宽4个空格)</span><br><span class="line">set expandtab</span><br><span class="line">set autoindent</span><br><span class="line">重启vim即可实现按TAB产生4个空格.</span><br><span class="line"></span><br><span class="line">对于已保存的文件，可以使用下面的方法进行空格和TAB的替换：</span><br><span class="line">TAB替换为空格：</span><br><span class="line">:set ts=4</span><br><span class="line">:set expandtab</span><br><span class="line">:%retab!</span><br><span class="line"></span><br><span class="line">空格替换为TAB：</span><br><span class="line">:set ts=4</span><br><span class="line">:set noexpandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>忽略配置.gitignore</title>
    <url>/2020/02/01/%E5%BF%BD%E7%95%A5%E9%85%8D%E7%BD%AE.gitignore/</url>
    <content><![CDATA[<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Python：.gitignore</span><br><span class="line"></span><br><span class="line"># Byte-compiled / optimized / DLL files</span><br><span class="line">__pycache__/</span><br><span class="line">*.py[cod]</span><br><span class="line">*$py.class</span><br><span class="line"></span><br><span class="line"># C extensions</span><br><span class="line">*.so</span><br><span class="line"></span><br><span class="line"># Distribution / packaging</span><br><span class="line">.Python</span><br><span class="line">build/</span><br><span class="line">develop-eggs/</span><br><span class="line">dist/</span><br><span class="line">downloads/</span><br><span class="line">eggs/</span><br><span class="line">.eggs/</span><br><span class="line">lib/</span><br><span class="line">lib64/</span><br><span class="line">parts/</span><br><span class="line">sdist/</span><br><span class="line">var/</span><br><span class="line">wheels/</span><br><span class="line">*.egg-info/</span><br><span class="line">.installed.cfg</span><br><span class="line">*.egg</span><br><span class="line">MANIFEST</span><br><span class="line"></span><br><span class="line"># PyInstaller</span><br><span class="line">#  Usually these files are written by a python script from a template</span><br><span class="line">#  before PyInstaller builds the exe, so as to inject date/other infos into it.</span><br><span class="line">*.manifest</span><br><span class="line">*.spec</span><br><span class="line"></span><br><span class="line"># Installer logs</span><br><span class="line">pip-log.txt</span><br><span class="line">pip-delete-this-directory.txt</span><br><span class="line"></span><br><span class="line"># Unit test / coverage reports</span><br><span class="line">htmlcov/</span><br><span class="line">.tox/</span><br><span class="line">.coverage</span><br><span class="line">.coverage.*</span><br><span class="line">.cache</span><br><span class="line">nosetests.xml</span><br><span class="line">coverage.xml</span><br><span class="line">*.cover</span><br><span class="line">.hypothesis/</span><br><span class="line"></span><br><span class="line"># Translations</span><br><span class="line">*.mo</span><br><span class="line">*.pot</span><br><span class="line"></span><br><span class="line"># Django stuff:</span><br><span class="line">*.log</span><br><span class="line">.static_storage/</span><br><span class="line">.media/</span><br><span class="line">local_settings.py</span><br><span class="line"></span><br><span class="line"># Flask stuff:</span><br><span class="line">instance/</span><br><span class="line">.webassets-cache</span><br><span class="line"></span><br><span class="line"># Scrapy stuff:</span><br><span class="line">.scrapy</span><br><span class="line"></span><br><span class="line"># Sphinx documentation</span><br><span class="line">docs/_build/</span><br><span class="line"></span><br><span class="line"># PyBuilder</span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"># Jupyter Notebook</span><br><span class="line">.ipynb_checkpoints</span><br><span class="line"></span><br><span class="line"># pyenv</span><br><span class="line">.python-version</span><br><span class="line"></span><br><span class="line"># celery beat schedule file</span><br><span class="line">celerybeat-schedule</span><br><span class="line"></span><br><span class="line"># SageMath parsed files</span><br><span class="line">*.sage.py</span><br><span class="line"></span><br><span class="line"># Environments</span><br><span class="line">.env</span><br><span class="line">.venv</span><br><span class="line">env/</span><br><span class="line">venv/</span><br><span class="line">ENV/</span><br><span class="line">env.bak/</span><br><span class="line">venv.bak/</span><br><span class="line"></span><br><span class="line"># Spyder project settings</span><br><span class="line">.spyderproject</span><br><span class="line">.spyproject</span><br><span class="line"></span><br><span class="line"># Rope project settings</span><br><span class="line">.ropeproject</span><br><span class="line"></span><br><span class="line"># mkdocs documentation</span><br><span class="line">/site</span><br><span class="line"></span><br><span class="line"># mypy</span><br><span class="line">.mypy_cache/</span><br><span class="line"></span><br><span class="line"># idea</span><br><span class="line">.idea/</span><br><span class="line"></span><br><span class="line"># migrations</span><br><span class="line">migrations/</span><br></pre></td></tr></table></figure>

<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Java.gitignore</span><br><span class="line"></span><br><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">.idea/</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>技术栈总结</title>
    <url>/2021/10/02/%E6%8A%80%E6%9C%AF%E6%A0%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="redis相关"><a href="#redis相关" class="headerlink" title="redis相关"></a>redis相关</h4><ol>
<li><p>在项目中使用redis，主要是从两个角度去考虑:性能和并发。</p>
</li>
<li><p>redis还具备可以做分布式锁等其他功能</p>
</li>
<li><p>使用redis主要是四个问题：</p>
<blockquote>
<p>(1) 缓存和数据库双写一致性问题<br><br>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>(2) 缓存雪崩问题<br><br>缓存雪崩，即缓存同一时间大面积的失效，这个时候又来了一波请求，结果请求都怼到数据库上，从而导致数据库连接异常。<br><br>解决方案:<br><br>(一)给缓存的失效时间，加上一个随机值，避免集体失效。<br><br>(二)使用互斥锁，但是该方案吞吐量明显下降了。<br><br>(三)双缓存。我们有两个缓存，缓存A和缓存B。缓存A的失效时间为20分钟，缓存B不设失效时间。自己做缓存预热操作。<br><br>然后细分以下几个小点<br><br>I 从缓存A读数据库，有则直接返回<br><br>II A没有数据，直接从B读数据，直接返回，并且异步启动一个更新线程。<br><br>III 更新线程同时更新缓存A和缓存B。</p>
</blockquote>
<blockquote>
<p>(3)缓存击穿问题<br><br>缓存穿透，即黑客故意去请求缓存中不存在的数据，导致所有的请求都怼到数据库上，从而数据库连接异常。<br><br>解决方案:<br><br>(一)利用互斥锁，缓存失效的时候，先去获得锁，得到锁了，再去请求数据库。没得到锁，则休眠一段时间重试<br><br>(二)采用异步更新策略，无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。<br><br>(三)提供一个能迅速判断请求是否有效的拦截机制，比如，利用布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的Key是否合法有效。如果不合法，则直接返回。</p>
</blockquote>
<blockquote>
<p>(4)缓存的并发竞争问题<br><br>分析:这个问题大致就是，同时有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。需要说明一下，博主提前百度了一下，发现答案基本都是推荐用redis事务机制。博主不推荐使用redis的事务机制。因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，redis的事务机制，十分鸡肋。<br><br>回答:<br><br>(1)如果对这个key操作，不要求顺序<br>这种情况下，准备一个分布式锁，大家去抢锁，抢到锁就做set操作即可，比较简单。<br><br>(2)如果对这个key操作，要求顺序<br>假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.期望按照key1的value值按照valueA–&gt;valueB–&gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。</p>
</blockquote>
<ol start="4">
<li>redis的过期策略以及内存淘汰机制</li>
</ol>
<blockquote>
<p>定期删除<br><br>用一个定时器来负责监视key,过期则自动删除,虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略</p>
</blockquote>
<blockquote>
<p>惰性删除<br><br>在获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p>
</blockquote>
<blockquote>
<p>内存淘汰机制<br><br>1）noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人用吧。<br>2）allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。推荐使用，目前项目在用这种。<br>3）allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。应该也没人用吧，你不删最少使用Key,去随机删。<br>4）volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。这种情况一般是把redis既当缓存，又做持久化存储的时候才用。不推荐<br>5）volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。依然不推荐<br>6）volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。不推荐<br>ps：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。</p>
</blockquote>
<ol start="5">
<li>redis实现分布式锁功能<br></li>
</ol>
<blockquote>
<p>实现思想<br></p>
</blockquote>
<ul>
<li>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</li>
<li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li>
<li>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放</li>
</ul>
<h4 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h4><ol>
<li>索引对于增删改操作的性能影响比较</li>
</ol>
<ul>
<li>insert操作</li>
</ul>
<blockquote>
<p>insert过程为，先把数据插入到表中，然后再把数据插入到相关索引中，如果这个表有5个索引，那么就得维护这5个索引，不管这个插入的数据是否为NULL值。所以，索引个数越多，对于insert操作来说，维护的成本就越大，插入一条数据的速度也就越慢。如果发现插入速度很慢，可以检查一下是否这个表的索引太多了。</p>
</blockquote>
<blockquote>
<p>把数据插入索引的过程中，为了维护索引中字段的顺序，会先在索引中查找这个值，如果能找到，就把这个值查到后面空闲的地方，如果没有找到，就先把值加入到叶子节点，然后在分支节点中新增这个值 和 指向叶子节点的指针（就是一个地址）。在这个过程中，如果某个页满了，还要新申请一个空的页，把满的页拆分开，把一半的索引数据放到空闲页中，而且为了保证数据的一致性（这个插入操作是并发的，可能有几十上百个线程同时进行），会给相关的索引页加上闩锁（一种更低级别的内存锁）。如此看来，这个过程的开销是很大的。</p>
</blockquote>
<ul>
<li>delete操作</li>
</ul>
<blockquote>
<p>delete操作刚好和isnert相反，当删除一条数据时，会把这条数据涉及到的多个索引中的数据删除。<br><br>比如：A表包含字段 ID，name，age，memo，biz_date，storeID，employeeID，update_date，等字段，在name、age、biz_date、storeID、employeeID字段上分别创建了索引，也就是总共有5个索引。<br><br>现在运行 delete from A where ID = 100, 就得把ID=100的这条数据，在各个索引中删掉，开销要比insert小。</p>
</blockquote>
<ul>
<li>update操作</li>
</ul>
<blockquote>
<p>这个操作不同于insert，delete，只有当update的这个字段，涉及到索引时，才需要维护索引，相对来说开销要小一些。<br><br>比如：update A set memo=’备注信息’ where ID = 100， 因为更新的memo字段上并没有索引，所以不需要维护索引，<br>而update A set storeID=12345 where ID = 100，只需要更新storeID字段的索引，其他4个索引不需要维护。</p>
</blockquote>
<ol start="2">
<li>sql优化</li>
</ol>
<ul>
<li><p>使用索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 经常出现在Where子句中的字段，特别是大表的字段，应该建立索引</span><br><span class="line">② 经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。</span><br><span class="line">③ 数据唯一性强的字段建立索引</span><br><span class="line">④ 经常变动的数据字段不要建立索引</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>sql语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">对于创建的多列索引,只要查询的条件中用到了最左边的列,索引一般就会被使用</span><br><span class="line">对于使用 like 的查询,后面如果是常量并且只有%号不在第一个字符,索引才可能会被使用</span><br><span class="line">应尽量避免在 where 中对字段进行null值判断，否则将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">应尽量避免在 where 中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</span><br><span class="line">尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销</span><br><span class="line">尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些</span><br><span class="line">任何地方都不要使用 select * from t ，用具体的字段列表代替&quot;*&quot;，不要返回用不到的任何字段</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>排查mysql数据库连接未关闭问题的过程</title>
    <url>/2019/01/01/%E6%8E%92%E6%9F%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%9C%AA%E5%85%B3%E9%97%AD%E9%97%AE%E9%A2%98%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>连接不释放会导致连接池无法回收连接，进而数据库连接逐渐被占满，直到超出数据库设置的最大连接数而拒绝服务，显而易见这是不能接受的；同时由于数据库连接也是tcp连接，未释放的连接会占用应用服务器和数据库服务器之间的tcp连接，有些情况下会导致无法应对突发流量（已经没有足够多的tcp连接）。</p>
</blockquote>
<h3 id="数据库层面排查"><a href="#数据库层面排查" class="headerlink" title="数据库层面排查"></a>数据库层面排查</h3><blockquote>
<p>如果未关闭连接，则其事务就不会被提交；通过mysql提供的事务表和开启performance_schema后的线程表即可定位未提交事务执行的sql，根据sql反向查找代码，以定位问题所在.</p>
</blockquote>
<ol>
<li><p>查看mysql事务表，得到thread_id(其实是processlist_id)，即使 trx_mysql_thread_id。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from information_schema.INNODB_TRX;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据processlist_id查询performance_schema线程信息，得到thread_id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from `performance_schema`.threads where PROCESSLIST_ID = &lt;trx_mysql_thread_id&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>根据thread_id查询具体的sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from `performance_schema`.events_statements_current where THREAD_ID = &lt;thread_id&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>数字签名</title>
    <url>/2018/01/01/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h4 id="数字签名技术"><a href="#数字签名技术" class="headerlink" title="数字签名技术"></a>数字签名技术</h4><blockquote>
<p>作用：<br>保证信息传输的完整性、发送者的身份认证、防止交易中的抵赖发生。</p>
</blockquote>
<blockquote>
<p>数字签名技术是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。</p>
</blockquote>
<h4 id="对称加密技术"><a href="#对称加密技术" class="headerlink" title="对称加密技术"></a>对称加密技术</h4><blockquote>
<p>对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密密钥算法或单密钥算法。</p>
</blockquote>
<blockquote>
<p>对称加密算法的特点是算法公开、计算量小、加密速度快、加密效率高。</p>
</blockquote>
<blockquote>
<p>最常见的对称加密算法是DES</p>
</blockquote>
<h4 id="非对称加密技术"><a href="#非对称加密技术" class="headerlink" title="非对称加密技术"></a>非对称加密技术</h4><blockquote>
<p>非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>
</blockquote>
<blockquote>
<p>最常用的非对称加密算法是RSA</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PKI</tag>
      </tags>
  </entry>
  <entry>
    <title>日期工具类(DateUtil.java)</title>
    <url>/2020/06/02/%E6%97%A5%E6%9C%9F%E5%B7%A5%E5%85%B7%E7%B1%BB(DateUtil.java)/</url>
    <content><![CDATA[<h3 id="日期工具"><a href="#日期工具" class="headerlink" title="日期工具"></a>日期工具</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.mhiywf.common.utils;</span><br><span class="line"> </span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Date;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">* 描述: 日期工具类&lt;br&gt;</span><br><span class="line">*</span><br><span class="line">* @author MaYawei</span><br><span class="line">* @date 2016-01-14</span><br><span class="line">*/</span><br><span class="line">public final class MlDateUtil &#123;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 日期转为字符串</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param date</span><br><span class="line">     * @param format</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String dateToString(Date date, String format) &#123;</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        if (date != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                SimpleDateFormat sdf = new SimpleDateFormat(format);</span><br><span class="line">                result = sdf.format(date);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                result = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 字符串转为日期类型</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param strDate</span><br><span class="line">     * @param format</span><br><span class="line">     * @return Date</span><br><span class="line">     */</span><br><span class="line">    public static Date stringToDate(String strDate, String format) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            SimpleDateFormat sdf = new SimpleDateFormat(format);</span><br><span class="line">            return sdf.parse(strDate);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取当前完整时间</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @return String</span><br><span class="line">     */</span><br><span class="line">    public static String getCurrentTime() &#123;</span><br><span class="line">        return dateToString(new Date(), &quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取当前年份</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getCurrentYear() &#123;</span><br><span class="line">        return dateToString(new Date(), &quot;yyyy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取当前日期</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getCurrentDate() &#123;</span><br><span class="line">        return dateToString(new Date(), &quot;yyyy-MM-dd&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取当前时间(时、分、秒)</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getCurrentSimpleTime() &#123;</span><br><span class="line">        return dateToString(new Date(), &quot;HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 把日期转成完整格式。如：2016-1-1 转化后为 2016-01-01</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param strDate</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String toComplexDate(String strDate) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String resStr = null;</span><br><span class="line">            resStr = toComplexDate(strDate, &quot;yyyy-MM-dd&quot;);</span><br><span class="line">            if (resStr == null)</span><br><span class="line">                resStr = toComplexDate(strDate, &quot;yyyy/MM/dd&quot;);</span><br><span class="line">            if (resStr == null)</span><br><span class="line">                resStr = toComplexDate(strDate, &quot;yyyy.MM.dd&quot;);</span><br><span class="line">            if (resStr == null)</span><br><span class="line">                resStr = toComplexDate(strDate, &quot;yyyy年MM月dd日&quot;);</span><br><span class="line"> </span><br><span class="line">            if (resStr == null)</span><br><span class="line">                resStr = strDate;</span><br><span class="line">            return resStr;</span><br><span class="line">            // String tmp_date[] = strDate.split(&quot;-&quot;);</span><br><span class="line">            // String tmp_year = tmp_date[0];</span><br><span class="line">            // String tmp_month = tmp_date[1];</span><br><span class="line">            // String tmp_day = tmp_date[2];</span><br><span class="line">            // if (Integer.parseInt(tmp_month) &lt;= 9) &#123;</span><br><span class="line">            // tmp_month = &quot;0&quot; + tmp_month;</span><br><span class="line">            // &#125;</span><br><span class="line">            // if (Integer.parseInt(tmp_day) &lt;= 9) &#123;</span><br><span class="line">            // tmp_day = &quot;0&quot; + tmp_day;</span><br><span class="line">            // &#125;</span><br><span class="line">            // return tmp_year + &quot;-&quot; + tmp_month + &quot;-&quot; + tmp_day;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return strDate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 描述: 把日期转成完整格式</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param strDate</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String toComplexDate(String strDate, String format) &#123;</span><br><span class="line">        String resultStr = null;</span><br><span class="line">        Date date = stringToDate(strDate, format);</span><br><span class="line">        if (date != null) &#123;</span><br><span class="line">            resultStr = dateToString(date, format);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取N年后日期</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param date</span><br><span class="line">     * @param years</span><br><span class="line">     *            年数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getAfterDateByYears(Date date, int years) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Calendar c = Calendar.getInstance();</span><br><span class="line">            c.setTime(date);</span><br><span class="line">            c.add(Calendar.YEAR, years);</span><br><span class="line">            return c.getTime();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取N月后日期</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param date</span><br><span class="line">     * @param months</span><br><span class="line">     *            月数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getAfterDateByMonths(Date date, int months) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Calendar c = Calendar.getInstance();</span><br><span class="line">            c.setTime(date);</span><br><span class="line">            c.add(Calendar.MONTH, months);</span><br><span class="line">            return c.getTime();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取N天后日期</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param date</span><br><span class="line">     * @param months</span><br><span class="line">     *            月数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getAfterDateByDays(Date date, int days) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Calendar c = Calendar.getInstance();</span><br><span class="line">            c.setTime(date);</span><br><span class="line">            c.add(Calendar.DAY_OF_YEAR, days);</span><br><span class="line">            return c.getTime();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取N小时后日期</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param date</span><br><span class="line">     * @param hours</span><br><span class="line">     *            小时数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getAfterDateByHours(Date date, int hours) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Calendar c = Calendar.getInstance();</span><br><span class="line">            c.setTime(date);</span><br><span class="line">            c.add(Calendar.HOUR, hours);</span><br><span class="line">            return c.getTime();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取N分钟后日期</span><br><span class="line">     *</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param date</span><br><span class="line">     * @param hours</span><br><span class="line">     *            小时数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getAfterDateByMinutes(Date date, int minutes) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Calendar c = Calendar.getInstance();</span><br><span class="line">            c.setTime(date);</span><br><span class="line">            c.add(Calendar.MINUTE, minutes);</span><br><span class="line">            return c.getTime();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return date;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 计算两日期相差天数</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-14</span><br><span class="line">     * @param startDate</span><br><span class="line">     *            开始日期</span><br><span class="line">     * @param endDate</span><br><span class="line">     *            结束日期</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int getBetweenDays(Date startDate, Date endDate) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Calendar startCal = Calendar.getInstance();</span><br><span class="line">            startCal.setTime(startDate);</span><br><span class="line">            long startTime = startCal.getTimeInMillis();</span><br><span class="line">            Calendar endCal = Calendar.getInstance();</span><br><span class="line">            endCal.setTime(endDate);</span><br><span class="line">            long endTime = endCal.getTimeInMillis();</span><br><span class="line">            long between_days = (endTime - startTime) / (1000 * 60 * 60 * 24);</span><br><span class="line">            return Integer.parseInt(String.valueOf(between_days));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>椭圆印章生成工具</title>
    <url>/2020/06/02/%E6%A4%AD%E5%9C%86%E5%8D%B0%E7%AB%A0%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h3 id="椭圆印章实现"><a href="#椭圆印章实现" class="headerlink" title="椭圆印章实现"></a>椭圆印章实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.awt.BasicStroke;</span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.Font;</span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.geom.AffineTransform;</span><br><span class="line">import java.awt.geom.Ellipse2D;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line">import org.bouncycastle.util.encoders.Base64;</span><br><span class="line"></span><br><span class="line">public class HxGenSealImgUtils &#123;</span><br><span class="line">	//0:上面 1：中间 2：下水平 3：数字 4:下圆弧</span><br><span class="line">	private static final int POS_TOP = 0;</span><br><span class="line">	private static final int POS_CERTER = 1;</span><br><span class="line">	private static final int POS_FOOT_LINE = 2;</span><br><span class="line">	private static final int POS_FOOT_NUM = 3;</span><br><span class="line">	private static final int POS_FOOT_CURVE = 4;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		int canvasWidth = 400;</span><br><span class="line">		int canvasHeight = 300;</span><br><span class="line">		String savePath = &quot;imgseal.png&quot;;</span><br><span class="line">		float topArcAng = 210;// 角度</span><br><span class="line">		float footArcAng = 60;// 角度</span><br><span class="line">//		String headText = &quot;中国石油天然气股份有限公司河南商丘销售分公司&quot;;</span><br><span class="line">//		String centerText = &quot;41140270673271X&quot;;</span><br><span class="line">		String headText = &quot;浙江汇信科技有限公司浙江汇信科技有限公司浙江汇信科技有限公司浙江汇信科技有限公司&quot;;</span><br><span class="line">		String centerText = &quot;91330000755918469E&quot;;</span><br><span class="line">//		String headText = &quot;河南科技速冻食品有限公司&quot;;//河南科技速冻食品有限公司</span><br><span class="line">//		String centerText = &quot;914100007967953030&quot;;//914100007967953030</span><br><span class="line">		String footText = &quot;发票专用章&quot;;</span><br><span class="line">		String footNumText =&quot;66&quot;;</span><br><span class="line">		createSealPicToFile(savePath,canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText,footNumText ,true);</span><br><span class="line">		//String base64 = createSealPicToBase64(canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText, true);</span><br><span class="line">//		String base64 = createStandardSealPicToBase64(headText, centerText);</span><br><span class="line">//		System.err.println(base64);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：创建标准发票专用章</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param headText 纳税人名称</span><br><span class="line">	 * @param centerText 税号</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static String createStandardSealPicToBase64(String headText, String centerText)&#123;</span><br><span class="line">		int canvasWidth = 400;</span><br><span class="line">		int canvasHeight = 300;</span><br><span class="line">		float topArcAng = 210;// 角度</span><br><span class="line">		float footArcAng = 60;// 角度</span><br><span class="line">		String footText = &quot;发票专用章&quot;;</span><br><span class="line">		return createSealPicToBase64(canvasWidth, canvasHeight, topArcAng, footArcAng, </span><br><span class="line">				headText, centerText, footText, true);</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：创建标准发票专用章</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param headText 纳税人名称</span><br><span class="line">	 * @param centerText 税号</span><br><span class="line">	 * @param footNumText </span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	public static String createStandardSealPicToBase64(String headText, String centerText,String footNumText)&#123;</span><br><span class="line">		int canvasWidth = 400;</span><br><span class="line">		int canvasHeight = 300;</span><br><span class="line">		float topArcAng = 210;// 角度</span><br><span class="line">		float footArcAng = 60;// 角度</span><br><span class="line">		String footText = &quot;发票专用章&quot;;</span><br><span class="line">		return createSealPicToBase64(canvasWidth, canvasHeight, topArcAng, footArcAng, </span><br><span class="line">				headText, centerText, footText,footNumText, &quot;&quot;,true);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：创建图章输出图片base64</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param width 画布的宽</span><br><span class="line">	 * @param height 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return base64</span><br><span class="line">	 */</span><br><span class="line">	public static String createSealPicToBase64(int canvasWidth, int canvasHeight, float topArcAng,float footArcAng, </span><br><span class="line">			String headText, String centerText, String footText, boolean isAutoAng) &#123;</span><br><span class="line">		return createSealPicToBase64(canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText, &quot;&quot;,&quot;&quot;, isAutoAng);</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：创建图章输出图片base64</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param width 画布的宽</span><br><span class="line">	 * @param height 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param footNumText</span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return base64</span><br><span class="line">	 */</span><br><span class="line">	public static String createSealPicToBase64(int canvasWidth, int canvasHeight, float topArcAng,float footArcAng, </span><br><span class="line">			String headText, String centerText, String footText,String footNumText, boolean isAutoAng) &#123;</span><br><span class="line">		return createSealPicToBase64(canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText, footNumText,&quot;&quot;, isAutoAng);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：创建图章输出图片base64</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param width 画布的宽</span><br><span class="line">	 * @param height 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param footNumText </span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return base64</span><br><span class="line">	 */</span><br><span class="line">	public static String createSealPicToBase64(int canvasWidth, int canvasHeight, float topArcAng,float footArcAng, </span><br><span class="line">			String headText, String centerText, String footText,String footNumText,String footCurveText, boolean isAutoAng) &#123;</span><br><span class="line">		String savePath = UUID.randomUUID()+&quot;-imgseal.png&quot;;</span><br><span class="line">		BufferedImage image = createSealPicImg(savePath, 0, 0,</span><br><span class="line">				canvasWidth, canvasHeight, topArcAng, footArcAng, headText,</span><br><span class="line">				centerText, footText,footNumText,footCurveText,isAutoAng);</span><br><span class="line">		try &#123;</span><br><span class="line">			File file = new File(savePath);</span><br><span class="line">			ImageIO.write(image, &quot;PNG&quot;, file);</span><br><span class="line">			byte[] data = null; // 读取图片字节数组</span><br><span class="line">			InputStream in = new FileInputStream(savePath);</span><br><span class="line">			data = new byte[in.available()];</span><br><span class="line">			in.read(data);</span><br><span class="line">			in.close();</span><br><span class="line">			file.delete();</span><br><span class="line">			return new String(Base64.encode(data));</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：保存图章到文件</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param savePath 保存路径</span><br><span class="line">	 * @param width 画布的宽</span><br><span class="line">	 * @param height 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return true保存成功 false保存失败</span><br><span class="line">	 */</span><br><span class="line">	public static boolean createSealPicToFile(String savePath,int canvasWidth,int canvasHeight,</span><br><span class="line">			float topArcAng,float footArcAng,String headText,String centerText,String footText,boolean isAutoAng)&#123;</span><br><span class="line">		return  createSealPicToFile(savePath, canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText, &quot;&quot;,&quot;&quot;, isAutoAng);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：保存图章到文件</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param savePath 保存路径</span><br><span class="line">	 * @param width 画布的宽</span><br><span class="line">	 * @param height 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param footNumText</span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return true保存成功 false保存失败</span><br><span class="line">	 */</span><br><span class="line">	public static boolean createSealPicToFile(String savePath,int canvasWidth,int canvasHeight,</span><br><span class="line">			float topArcAng,float footArcAng,String headText,String centerText,String footText,String footNumText,boolean isAutoAng)&#123;</span><br><span class="line">		return  createSealPicToFile(savePath, canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText, footNumText,&quot;&quot;, isAutoAng);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：保存图章到文件</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年12月1日</span><br><span class="line">	 * @param savePath 保存路径</span><br><span class="line">	 * @param width 画布的宽</span><br><span class="line">	 * @param height 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param footNumText </span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return true保存成功 false保存失败</span><br><span class="line">	 */</span><br><span class="line">	public static boolean createSealPicToFile(String savePath,int canvasWidth,int canvasHeight,</span><br><span class="line">			float topArcAng,float footArcAng,String headText,String centerText,String footText,String footNumText,String footCurveText,boolean isAutoAng)&#123;</span><br><span class="line">		boolean flag = false;</span><br><span class="line">		</span><br><span class="line">		BufferedImage image = createSealPicImg(savePath, 0, 0, canvasWidth, canvasHeight, topArcAng, footArcAng, headText, centerText, footText,footNumText,footCurveText,isAutoAng);</span><br><span class="line">		try &#123;</span><br><span class="line">			ImageIO.write(image, &quot;PNG&quot;, new File(savePath));</span><br><span class="line">			flag = true;</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		return flag;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：生成图章</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param savePath 保存路径</span><br><span class="line">	 * @param leftX 左上角x坐标</span><br><span class="line">	 * @param leftY 左上角y坐标</span><br><span class="line">	 * @param canvasWidth 画布的宽</span><br><span class="line">	 * @param canvasHeight 画布的高</span><br><span class="line">	 * @param topArcAng 上文字角度</span><br><span class="line">	 * @param footArcAng 下文字角度</span><br><span class="line">	 * @param headText 上文字</span><br><span class="line">	 * @param centerText 中间文字</span><br><span class="line">	 * @param footText 下文字</span><br><span class="line">	 * @param footNumText 编号</span><br><span class="line">	 * @param footCurveText 下圆弧文字</span><br><span class="line">	 * @param isAutoAng 是否自动修正上角度</span><br><span class="line">	 * @return BufferedImage</span><br><span class="line">	 */</span><br><span class="line">	private static BufferedImage createSealPicImg(String savePath,int leftX,int leftY,int canvasWidth,int canvasHeight,</span><br><span class="line">			float topArcAng,float footArcAng,String headText,String centerText,String footText,String footNumText,String footCurveText,boolean isAutoAng)&#123;</span><br><span class="line">		//画椭圆</span><br><span class="line">		BufferedImage image = new BufferedImage(leftX+canvasWidth,leftY+ canvasHeight, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">		Graphics2D g2d = image.createGraphics();</span><br><span class="line">		Ellipse2D ellipse = new Ellipse2D.Double();</span><br><span class="line">		ellipse.setFrame(leftX+5, leftY+5,canvasWidth-10,canvasHeight-10);</span><br><span class="line">		g2d.setPaint(new Color(232,12,19));</span><br><span class="line">		g2d.setStroke(new BasicStroke(12));// 设置画笔的粗度</span><br><span class="line">		g2d.draw(ellipse);</span><br><span class="line">		//写文字</span><br><span class="line">		Font topFont = new Font(&quot;仿宋&quot;, Font.PLAIN, 42);</span><br><span class="line">		Font centerFont = new Font(&quot;Arial&quot;, Font.PLAIN, 40);</span><br><span class="line">		Font footFont = new Font(&quot;仿宋&quot;, Font.BOLD, 40);</span><br><span class="line">		Font footNumFont = new Font(&quot;仿宋&quot;, Font.BOLD, 36);</span><br><span class="line">		SealCenter center = new SealCenter(leftX, leftY, canvasWidth, canvasHeight);</span><br><span class="line">		if(isNotBlank(headText))&#123;</span><br><span class="line">			drawOneText(g2d, topFont, center, (canvasWidth-75)/2, (canvasHeight-75)/2, (float) topArcAng, 0.30f, headText, POS_TOP,isAutoAng);</span><br><span class="line">		&#125;</span><br><span class="line">		if(isNotBlank(centerText))&#123;</span><br><span class="line">			drawOneText(g2d, centerFont, center, canvasWidth/2, canvasHeight/2, (float) footArcAng, 0.65f, centerText, POS_CERTER,isAutoAng);</span><br><span class="line">		&#125;</span><br><span class="line">		if(isNotBlank(footText))&#123;</span><br><span class="line">			drawOneText(g2d, footFont, center, canvasWidth/2, canvasHeight/2, (float) footArcAng, 0.45f, footText, POS_FOOT_LINE,isAutoAng);</span><br><span class="line">		&#125;</span><br><span class="line">		if(isNotBlank(footNumText))&#123;</span><br><span class="line">			drawOneText(g2d, footNumFont, center, canvasWidth/2, canvasHeight/2, (float) footArcAng, 0.20f, footNumText, POS_FOOT_NUM,isAutoAng);</span><br><span class="line">		&#125;</span><br><span class="line">		if(isNotBlank(footCurveText))&#123;</span><br><span class="line">			drawOneText(g2d, footFont, center, canvasWidth/2, canvasHeight/2, (float) footArcAng, 0.20f, footText, POS_FOOT_CURVE,isAutoAng);</span><br><span class="line">		&#125;</span><br><span class="line">		g2d.dispose();</span><br><span class="line">		return image;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：字符串是否不为空</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年12月1日</span><br><span class="line">	 * @param headText</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	private static boolean isNotBlank(String string) &#123;</span><br><span class="line">		if(string != null &amp;&amp; !&quot;&quot;.equals(string.trim()))&#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 描述：给印章图片写文字</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月29日</span><br><span class="line">	 * @param g2d </span><br><span class="line">	 * @param font 字体</span><br><span class="line">	 * @param center 中心点</span><br><span class="line">	 * @param radiusA 椭圆长轴a</span><br><span class="line">	 * @param radiusB 椭圆短轴b</span><br><span class="line">	 * @param totalArcAng 总的角跨度 </span><br><span class="line">	 * @param minRat 从边线向中心的移动因子</span><br><span class="line">	 * @param text 字符串</span><br><span class="line">	 * @param top 是否顶部</span><br><span class="line">	 * @param isAutoAng 是否自动计算角度 true：是 false：否 （最大角度290°）</span><br><span class="line">	 */</span><br><span class="line">	private static void drawOneText(Graphics2D g2d, Font font, SealCenter center,</span><br><span class="line">			float radiusA, float radiusB,float totalArcAng, float minRat, String text, int position,boolean isAutoAng) &#123;</span><br><span class="line">		if(text == null) text = &quot;&quot;;</span><br><span class="line">		g2d.setFont(font);</span><br><span class="line">		if(position == POS_TOP || position == POS_FOOT_CURVE)&#123;</span><br><span class="line">			//获取自适应角度</span><br><span class="line">			if(isAutoAng)&#123;</span><br><span class="line">				float fontWidth = g2d.getFontMetrics(font).getWidths()[0];</span><br><span class="line">				totalArcAng = autoGetAng(fontWidth, center, radiusA, radiusB, totalArcAng, text, position);</span><br><span class="line">			&#125;</span><br><span class="line">			//获取字体宽度比例</span><br><span class="line">			float scale = getWidthScale(g2d.getFontMetrics(font).getWidths()[0], center, radiusA, radiusB, totalArcAng, text, position);</span><br><span class="line">			//开始角度</span><br><span class="line">			double startAng = 0;</span><br><span class="line">			//结束角度</span><br><span class="line">			if(position == POS_TOP)&#123;</span><br><span class="line">				startAng = -90F - totalArcAng / 2f + 1.2F/scale;</span><br><span class="line">				g2d.setColor(new Color(232, 7, 16));</span><br><span class="line">			&#125;else&#123;</span><br><span class="line">				startAng = 90F - totalArcAng / 2f;</span><br><span class="line">				g2d.setColor(new Color(232, 0, 11));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			int count = text.length();</span><br><span class="line">			double step = 0.2;</span><br><span class="line">			int alCount = (int) Math.ceil(totalArcAng / step);//分段数</span><br><span class="line">						double[] angArr = new double[alCount];//角度数组</span><br><span class="line">			double[] arcLenArr = new double[alCount];//弧长数组</span><br><span class="line">			int num = 0;</span><br><span class="line">			double accArcLen = 0.0;</span><br><span class="line">			angArr[num] = startAng;</span><br><span class="line">			arcLenArr[num] = accArcLen;</span><br><span class="line">			num++;</span><br><span class="line">			double angR = startAng * Math.PI / 180.0;</span><br><span class="line">			double lastX = radiusA * Math.cos(angR) + center.X;</span><br><span class="line">			double laxtY = radiusB * Math.sin(angR) + center.Y;</span><br><span class="line"></span><br><span class="line">			for (double i = startAng + step; num &lt; alCount; i += step) &#123;</span><br><span class="line">				angR = i * Math.PI / 180.0;</span><br><span class="line">				double x = radiusA * Math.cos(angR) + center.X, </span><br><span class="line">						y = radiusB * Math.sin(angR) + center.Y;</span><br><span class="line">				accArcLen += Math.sqrt((lastX - x) * (lastX - x) + (laxtY - y) * (laxtY - y));</span><br><span class="line">				angArr[num] = i;</span><br><span class="line">				arcLenArr[num] = accArcLen;</span><br><span class="line">				lastX = x;</span><br><span class="line">				laxtY = y;</span><br><span class="line">				num++;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			double arcPer = accArcLen / count;</span><br><span class="line">			for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">				double arcL = i * arcPer + arcPer / 2.0;</span><br><span class="line">				double ang = 0.0;</span><br><span class="line">				for (int p = 0; p &lt; arcLenArr.length - 1; p++) &#123;</span><br><span class="line">					if (arcLenArr[p] &lt;= arcL &amp;&amp; arcL &lt;= arcLenArr[p + 1]) &#123;</span><br><span class="line">						ang = (arcL &gt;= ((arcLenArr[p] + arcLenArr[p + 1]) / 2.0)) ? angArr[p + 1] : angArr[p];</span><br><span class="line">						break;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				angR = (ang * Math.PI / 180f);</span><br><span class="line">				float x = radiusA * (float) Math.cos(angR) + center.X, </span><br><span class="line">						y = radiusB * (float) Math.sin(angR) + center.Y;</span><br><span class="line">				</span><br><span class="line">				int beginIndex = 0;</span><br><span class="line">				int endIndex = 0;</span><br><span class="line">				if(position == POS_TOP)&#123;</span><br><span class="line">					beginIndex = i;</span><br><span class="line">					endIndex = i+1;</span><br><span class="line">				&#125;else&#123;</span><br><span class="line">					beginIndex = text.length() - 1 - i;</span><br><span class="line">					endIndex = text.length()- i;</span><br><span class="line">				&#125;</span><br><span class="line">				String word = text.substring(beginIndex, endIndex);</span><br><span class="line">				</span><br><span class="line">				double qxang = Math.atan2(radiusB * Math.cos(angR),-radiusA * Math.sin(angR)), </span><br><span class="line">						fxang = qxang + Math.PI / 2.0;</span><br><span class="line">				AffineTransform transform = null;</span><br><span class="line">				float w = g2d.getFontMetrics(font).getWidths()[0], </span><br><span class="line">					  h = g2d.getFontMetrics(font).getHeight();</span><br><span class="line">				if (position == POS_TOP) &#123;</span><br><span class="line">					x += h * minRat * (float) Math.cos(fxang);</span><br><span class="line">					y += h * minRat * (float) Math.sin(fxang);</span><br><span class="line">					x += -w / 2f * (float) Math.cos(qxang);</span><br><span class="line">					y += -w / 2f * (float) Math.sin(qxang);</span><br><span class="line">					transform =AffineTransform.getRotateInstance((fxang * 180.0 / Math.PI-90)*Math.PI/180.0);</span><br><span class="line">					transform.concatenate(AffineTransform.getScaleInstance(scale, 1.0));</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					x += (-h * minRat + h) * (float) Math.cos(fxang);</span><br><span class="line">					y += (-h * minRat + h) * (float) Math.sin(fxang);</span><br><span class="line">					x += w / 2f * (float) Math.cos(qxang);</span><br><span class="line">					y += w / 2f * (float) Math.sin(qxang);</span><br><span class="line">					transform = AffineTransform.getRotateInstance((fxang * 180.0 / Math.PI+90)*Math.PI/180.0);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				Font font2 = font.deriveFont(transform);</span><br><span class="line">				g2d.setFont(font2);</span><br><span class="line">				g2d.drawString(word, x, y);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		else if(position == POS_CERTER)&#123;</span><br><span class="line">			g2d.setColor(new Color(231, 0, 11));</span><br><span class="line">			int count = text.length();</span><br><span class="line">			float lineLen = 2*radiusA*minRat;</span><br><span class="line">			float linePer = lineLen/count;</span><br><span class="line">			float h = g2d.getFontMetrics(font).getHeight();</span><br><span class="line">			float x = center.X - lineLen/2;</span><br><span class="line">			float y = center.Y + h/3;</span><br><span class="line">			font = font.deriveFont(AffineTransform.getScaleInstance(0.6, 1.3));</span><br><span class="line">			for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">				String word = text.substring(j, j+1);</span><br><span class="line">				x += j==0 ? 0:linePer;</span><br><span class="line">				g2d.setFont(font);</span><br><span class="line">				g2d.drawString(word, x, y);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(position == POS_FOOT_LINE)&#123;</span><br><span class="line">			g2d.setColor(new Color(231, 0, 11));</span><br><span class="line">			int count = text.length();</span><br><span class="line">			float lineLen = 2*radiusA*minRat;</span><br><span class="line">			float linePer = lineLen/count;</span><br><span class="line">			float h = g2d.getFontMetrics(font).getHeight();</span><br><span class="line">			float x = center.X - lineLen/2;</span><br><span class="line">			//float y = center.Y + center.Y/3 + h/2;</span><br><span class="line">			float y = center.Y + center.Y*5/12 + h/2;</span><br><span class="line">			font = font.deriveFont(AffineTransform.getScaleInstance(0.8, 1.0));</span><br><span class="line">			for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">				String word = text.substring(j, j+1);</span><br><span class="line">				x += j==0 ? 0:linePer;</span><br><span class="line">				g2d.setFont(font);</span><br><span class="line">				g2d.drawString(word, x, y);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(position == POS_FOOT_NUM)&#123;</span><br><span class="line">			g2d.setColor(new Color(231, 0, 11));</span><br><span class="line">			text = &quot;(&quot;+text+&quot;)&quot;;</span><br><span class="line">			int count = text.length();</span><br><span class="line">			float lineLen = 2*radiusA*minRat;</span><br><span class="line">			float linePer = lineLen/count;</span><br><span class="line">			float h = g2d.getFontMetrics(font).getHeight();</span><br><span class="line">			float x = center.X - lineLen/2;</span><br><span class="line">			float y = center.Y + center.Y*3/4 + h/4;</span><br><span class="line">			font = font.deriveFont(AffineTransform.getScaleInstance(0.8, 1.0));</span><br><span class="line">			for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">				String word = text.substring(j, j+1);</span><br><span class="line">				x += j==0 ? 0:linePer;</span><br><span class="line">				g2d.setFont(font);</span><br><span class="line">				g2d.drawString(word, x, y);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：根据字数校正总角度</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param fontWidth 字宽</span><br><span class="line">	 * @param font 字体</span><br><span class="line">	 * @param center 图章中心类实例</span><br><span class="line">	 * @param radiusA 椭圆长轴a</span><br><span class="line">	 * @param radiusB 椭圆短轴b</span><br><span class="line">	 * @param totalArcAng 文字总角度</span><br><span class="line">	 * @param text 文字</span><br><span class="line">	 * @param position 位置 0:上圆弧 1：中间 2：下水平 3：下圆弧</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	private static float autoGetAng(float fontWidth,SealCenter center,</span><br><span class="line">			float radiusA, float radiusB,float totalArcAng,String text, int position)&#123;</span><br><span class="line">		double accArcLen = getArcLen(center, radiusA, radiusB, totalArcAng,position);</span><br><span class="line">		int count = text.length()+1;</span><br><span class="line">		if(fontWidth*count&lt;accArcLen || totalArcAng&gt;250)&#123;</span><br><span class="line">			return totalArcAng;</span><br><span class="line">		&#125;</span><br><span class="line">		float totalAng = -1;</span><br><span class="line">		if(totalAng&lt;0)&#123;</span><br><span class="line">			totalArcAng += 10;</span><br><span class="line">			totalAng = autoGetAng(fontWidth,center, radiusA, radiusB, totalArcAng, text, position);</span><br><span class="line">		&#125;</span><br><span class="line">		return totalAng;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：根据字数获取字体宽度比例</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年11月30日</span><br><span class="line">	 * @param fontWidth 字宽</span><br><span class="line">	 * @param font 字体</span><br><span class="line">	 * @param center 图章中心类实例</span><br><span class="line">	 * @param radiusA 椭圆长轴a</span><br><span class="line">	 * @param radiusB 椭圆短轴b</span><br><span class="line">	 * @param totalArcAng 文字总角度</span><br><span class="line">	 * @param text 文字</span><br><span class="line">	 * @param position 位置 0:上圆弧 1：中间 2：下水平 3：下圆弧</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	private static float getWidthScale(float fontWidth, SealCenter center,</span><br><span class="line">			float radiusA, float radiusB,float totalArcAng,String text, int position)&#123;</span><br><span class="line">		double accArcLen = getArcLen(center, radiusA, radiusB, totalArcAng,position);</span><br><span class="line">		int count = text.length()-1;</span><br><span class="line">		float len = count * fontWidth;</span><br><span class="line">		if(len&lt;accArcLen)&#123;</span><br><span class="line">			return (float) 1.0;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			return (float) (accArcLen/len);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 描述：获取总弧长</span><br><span class="line">	 *</span><br><span class="line">	 * @author MaYawei</span><br><span class="line">	 * @date 2016年12月1日</span><br><span class="line">	 * @param center</span><br><span class="line">	 * @param radiusA</span><br><span class="line">	 * @param radiusB</span><br><span class="line">	 * @param totalArcAng</span><br><span class="line">	 * @param position</span><br><span class="line">	 * @return</span><br><span class="line">	 */</span><br><span class="line">	private static double getArcLen(SealCenter center, float radiusA,</span><br><span class="line">			float radiusB, float totalArcAng, int position) &#123;</span><br><span class="line">		double startAng = 0;</span><br><span class="line">		if(position == POS_TOP)&#123;</span><br><span class="line">			startAng = -90F - totalArcAng / 2F;</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			startAng = 90F - totalArcAng / 2F;</span><br><span class="line">		&#125;</span><br><span class="line">		double step = 0.2;</span><br><span class="line">		int alCount = (int) Math.ceil(totalArcAng / step);//分段数</span><br><span class="line">		int num = 0;</span><br><span class="line">		double accArcLen = 0.0;</span><br><span class="line">		num++;</span><br><span class="line">		double angR = startAng * Math.PI / 180.0;</span><br><span class="line">		double lastX = radiusA * Math.cos(angR) + center.X;</span><br><span class="line">		double laxtY = radiusB * Math.sin(angR) + center.Y;</span><br><span class="line">		for (double i = startAng + step; num &lt; alCount; i += step) &#123;</span><br><span class="line">			angR = i * Math.PI / 180.0;</span><br><span class="line">			double x = radiusA * Math.cos(angR) + center.X, </span><br><span class="line">					y = radiusB * Math.sin(angR) + center.Y;</span><br><span class="line">			accArcLen += Math.sqrt((lastX - x) * (lastX - x) + (laxtY - y) * (laxtY - y));</span><br><span class="line">			lastX = x;</span><br><span class="line">			laxtY = y;</span><br><span class="line">			num++;</span><br><span class="line">		&#125;</span><br><span class="line">		return accArcLen;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述：计算图章中心类</span><br><span class="line"> * </span><br><span class="line"> * @author MaYawei</span><br><span class="line"> * @date 2016-11-30</span><br><span class="line"> */</span><br><span class="line">class SealCenter&#123;</span><br><span class="line">	public int X;</span><br><span class="line">	public int Y;</span><br><span class="line">	public SealCenter(int leftX,int leftY,int width,int height)&#123;</span><br><span class="line">		this.X = leftX + width/2 ;</span><br><span class="line">		this.Y = leftY + height/2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2018/08/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="常用的正则表达式元字符"><a href="#常用的正则表达式元字符" class="headerlink" title="常用的正则表达式元字符"></a>常用的正则表达式元字符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 匹配重复零次或多次前一字符 </span><br><span class="line">+ 匹配一个或多个前面的字符.它的作用和*很相似,但唯一的区别是它不匹配零个字 符的情况</span><br><span class="line"></span><br><span class="line">? 匹配零或一个前面的字符。它一般用于匹配单个字符 </span><br><span class="line"></span><br><span class="line">. 匹配任意字符( 除换行符 ) </span><br><span class="line"></span><br><span class="line">^ 匹配一行的开头,但依赖于上下文环境,可能在正则表达式中表示否定一个字符 集的意思</span><br><span class="line"></span><br><span class="line">[...] 匹配集合中任意字符 如&quot;[xyz]&quot; 匹配字符 x, y, 或z</span><br><span class="line"></span><br><span class="line">[^...] 匹配不属集合 中 任意字符</span><br><span class="line"></span><br><span class="line">^, $ 匹配 行首、行尾</span><br><span class="line"></span><br><span class="line">\&lt;, \&gt; 用于表示单词的边界。\&lt; 匹配词首，\&gt;词尾，如&quot;\&lt;the\&gt;&quot; 匹配单词&quot;the&quot;</span><br><span class="line">... 正则表达式分组。进行子字符串提取(substring extraction)一起使用很有用</span><br><span class="line"></span><br><span class="line">\n 第 n 个分组内容  </span><br><span class="line"></span><br><span class="line">\ 转义(escapes) 一个特殊的字符,使这个字符表示原来字面上的意思。&quot;\$&quot;表示 了原来的字面意思&quot;$&quot;,而不是在正则表达式中表达的匹配行尾的意思.&quot;\\&quot;也被 解释成了字面上的意思&quot;\&quot;</span><br><span class="line"></span><br><span class="line">\&#123; \&#125; 指示前面正则表达式匹配的次数. </span><br><span class="line"></span><br><span class="line">要转义是因为不转义的话大括号只是表示他们字面上的意思.这个用法只是技巧上 的而不是基本正则表达式的内容.&quot;[0-9]\&#123;5\&#125;&quot; 精确匹配5个数字(从0到9的数字). </span><br><span class="line"></span><br><span class="line">| &quot;或&quot;，正则操作符用于匹配一组可选的字符</span><br><span class="line"></span><br><span class="line">&#123;n&#125; n是一个非负整数。匹配确定的n次。例如，&#x27;&#x27;o&#123;2&#125;&#x27;&#x27; 不能匹配 &quot;Bob&quot;中的&#x27;&#x27;o&#x27;&#x27;，但是能匹配&quot;food&quot; 中的两个o。</span><br><span class="line"></span><br><span class="line">&#123;n,&#125; n是一个非负整数。至少匹配n次。例如，&#x27;&#x27;o&#123;2,&#125;&#x27;&#x27; 不能匹配&quot;Bob&quot;中的&#x27;o&#x27;&#x27;，但能匹配 &quot;foooood&quot;中的所有o。&#x27;&#x27;o&#123;1,&#125;&#x27;&#x27;等价于&#x27;&#x27;o+&#x27;&#x27;。&#x27;&#x27;o&#123;0,&#125;&#x27;&#x27;则等价于&#x27;&#x27;o*&#x27;&#x27;。</span><br><span class="line"></span><br><span class="line">&#123;n,m&#125; m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，&quot;o&#123;1,3&#125;&quot;将匹配 &quot;fooooood&quot;中的前三个o。&#x27;&#x27;o&#123;0,1&#125;&#x27;&#x27;等价于&#x27;&#x27;o?&#x27;&#x27;。请注意在逗号和两个数之间不能有空格。</span><br><span class="line"></span><br><span class="line">\b 匹配一个单词边界，也就是指单词和空格间的位置。例如，&#x27;&#x27;er\b&#x27;&#x27; 可以匹配&quot;never&quot; 中的&#x27;&#x27;er&#x27;&#x27;，但不能匹配 &quot;verb&quot;中的 &#x27;&#x27;er&#x27;&#x27;。 </span><br><span class="line"></span><br><span class="line">\B 匹配非单词边界。&#x27;&#x27;er\B&#x27;&#x27;能匹配&quot;verb&quot;中的&#x27;&#x27;er&#x27;&#x27;，但不能匹配&quot;never&quot;中的 &#x27;&#x27;er&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">\w 匹配包括下划线的任何单词字符。等价于&#x27;&#x27;[A-Za-z0-9_]&#x27;&#x27;。</span><br><span class="line"></span><br><span class="line">\W 匹配任何非单词字符。等价于&#x27;&#x27;[^A-Za-z0-9_]&#x27;&#x27;。</span><br><span class="line"></span><br><span class="line">\d 匹配一个数字字符。等价于[0-9]。</span><br><span class="line"></span><br><span class="line">\D 匹配一个非数字字符。等价于[^0-9]。</span><br><span class="line"></span><br><span class="line">\f 匹配一个换页符。等价于\x0c和\cL。</span><br><span class="line"></span><br><span class="line">\n 匹配一个换行符。等价于\x0a和\cJ。</span><br><span class="line"></span><br><span class="line">\r 匹配一个回车符。等价于\x0d和\cM。</span><br><span class="line"></span><br><span class="line">\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]。</span><br><span class="line"></span><br><span class="line">\S 匹配任何非空白字符。等价于[^\f\n\r\t\v]。</span><br><span class="line"></span><br><span class="line">\t 匹配一个制表符。等价于\x09 和 \cI。</span><br><span class="line"></span><br><span class="line">\v 匹配一个垂直制表符。等价于\x0b和\cK。</span><br></pre></td></tr></table></figure>

<h3 id="常用子模式扩展语法"><a href="#常用子模式扩展语法" class="headerlink" title="常用子模式扩展语法"></a>常用子模式扩展语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(?P&lt;groupname&gt;)    为子模式命名</span><br><span class="line">(?P=groupname)  调用已匹配的命名组</span><br><span class="line">(? iLmsux)  设置匹配标志，可以是几个字母的组合，每个字母含义与编译标志相同</span><br><span class="line">(?:...) 匹配但不捕获该匹配的子表达式</span><br><span class="line">(?imx)	正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</span><br><span class="line">(?-imx)	正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</span><br><span class="line">(?: re)	类似 (...), 但是不表示一个组</span><br><span class="line">(?imx: re)	在括号中使用i, m, 或 x 可选标志</span><br><span class="line">(?-imx: re)	在括号中不使用i, m, 或 x 可选标志</span><br><span class="line">(?P=groupname) 表示在此之前的命名为groupname的子模式</span><br><span class="line">(?#...)    表示注释</span><br><span class="line">(?=...)    后向肯定界定符。用于正则表达式之后，表示如果&#x27;=&#x27;后面的内容在字符串中出现则匹配，但不反回&#x27;=&#x27;之后的内容</span><br><span class="line">(?!...)    后向否定界定符.用于正则表达式之后，表示如果&#x27;!&#x27;后2的内容在字符串中不出现则匹配，但不返回&#x27;=&#x27;之后的内容</span><br><span class="line">(?&lt;=...)   前向肯定界定符。前向界定括号中的表达式必须是常值，用于正则表达式之前，与(? =...)含义相同</span><br><span class="line">(?&lt;!...)   前向否定界定符。用于正则表达式之前，与(?! ...)含义相同</span><br><span class="line">(?&gt; re)	匹配的独立模式，省去回溯。</span><br></pre></td></tr></table></figure>

<h3 id="re模块使用"><a href="#re模块使用" class="headerlink" title="re模块使用"></a>re模块使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.compile()   # 创建模式对象</span><br><span class="line">re.search()    # 在这种整个字符串中寻找模式，返回match对象或None</span><br><span class="line">re.match()     # 从字符串的开始处匹配模式，返回match对象或None</span><br><span class="line">re.findall()   # 列出字符串中模式的所有匹配项,返回一个list</span><br><span class="line">re.split()     # 根据模式匹配项分割字符串</span><br><span class="line">re.sub()       # 将字符串中所有pat的匹配项用repl替换</span><br><span class="line">re.escape()    # 将字符串中所有特殊正则表达式转义</span><br></pre></td></tr></table></figure>

<h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>修饰符 | 描述<br>| — | — |<br>re.I | 使匹配对大小写不敏感<br>re.L | 做本地化识别（locale-aware）匹配<br>re.M | 多行匹配，影响 ^ 和 $<br>re.S | 使 . 匹配包括换行在内的所有字符<br>re.U | 根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.<br>re.X | 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</p>
<h3 id="正则表达实例"><a href="#正则表达实例" class="headerlink" title="正则表达实例"></a>正则表达实例</h3><p><strong>判断URL是否合法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://ischool.h3c.com:3003/openproject-media/pic/image/s.jpg&#x27;</span></span><br><span class="line"><span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^https?:/&#123;2&#125;\w.+$&#x27;</span>, url):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This looks valid.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This looks invalid.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>替换字符串</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line=<span class="string">&quot;this hdr-biz model args= server&quot;</span></span><br><span class="line">patt=<span class="string">r&#x27;args=&#x27;</span></span><br><span class="line">name = re.sub(patt, <span class="string">&quot;&quot;</span>, line)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure>

<p><strong>分割字符串</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;David comes from china. he loves watching tv shows. Tom is an american, he loves games. Rick blablabla&quot;</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">&quot;David&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Rick&quot;</span>]</span><br><span class="line"></span><br><span class="line">result = re.split(<span class="string">r&#x27;(?&lt;=\.)\s*(?=%s)&#x27;</span> % <span class="string">&#x27;|&#x27;</span>.join(names), string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p><strong>校验字符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 汉字</span><br><span class="line">^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br><span class="line"></span><br><span class="line"># 由数字、英文字母或者下划线组成的字符串</span><br><span class="line">^\w+$</span><br><span class="line"></span><br><span class="line"># 中文、英文、数字包括下划线</span><br><span class="line">^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line"></span><br><span class="line"># Email地址</span><br><span class="line">^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line"></span><br><span class="line"># 域名</span><br><span class="line">[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line"></span><br><span class="line"># InternetURL</span><br><span class="line">[a-zA-z]+://[^\s]*</span><br><span class="line">^https?://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line"></span><br><span class="line"># 中国邮政编码</span><br><span class="line">[1-9]\d&#123;5&#125;(?!\d) </span><br><span class="line"></span><br><span class="line"># IP地址</span><br><span class="line">\d+\.\d+\.\d+\.\d+</span><br><span class="line">((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>添加用户(组)user&amp;group</title>
    <url>/2020/10/01/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7(%E7%BB%84)user&amp;group/</url>
    <content><![CDATA[<h4 id="用户组操作"><a href="#用户组操作" class="headerlink" title="用户组操作"></a>用户组操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户组</span><br><span class="line">gourpadd [-g GID] &lt;group_name&gt; # -g参数指定了新建用户组的GID</span><br><span class="line"></span><br><span class="line"># 查看组信息</span><br><span class="line">cat /etc/group | grep &lt;group_name&gt;</span><br><span class="line"></span><br><span class="line"># 删除用户组</span><br><span class="line">groupdel &lt;group_name&gt;</span><br><span class="line"></span><br><span class="line"># 注：在删除用户组时，如果该组为某个成员的私有组，则无法删除，必须先删除组里面的成员，才能成功删除该组</span><br></pre></td></tr></table></figure>


<h4 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">useradd -g G/GID -m 宿主目录</span><br><span class="line"># -u：指定UID标记号</span><br><span class="line"># -d：指定宿主目录，缺省为/home/用户名</span><br><span class="line"># -e：指定账号失效时间</span><br><span class="line"># -g：指定所属的基本组（组名或GID）</span><br><span class="line"># -G：指定所属的附加组（组名或GID）</span><br><span class="line"># -m：创建用户并初始化宿主目录</span><br><span class="line"># -M：不为用户建立并初始化宿主目录</span><br><span class="line"># -s：指定用户的登录shell（默认为/bin/bash，一般不用改，在建立非登录用户的时候可以指定为/sbin/nologin）</span><br><span class="line"></span><br><span class="line"># 查看用户信息</span><br><span class="line">id U/UID</span><br><span class="line"></span><br><span class="line"># 删除用户</span><br><span class="line">userdel [-r] &lt;user_name&gt; # -r选项，宿主目录/用户邮件也一并删除</span><br><span class="line"></span><br><span class="line"># 为用户添加密码</span><br><span class="line">passwd &lt;user_name&gt;</span><br><span class="line"># 选项有：</span><br><span class="line"># -d ：清空用户的密码，使之无需密码即可登录</span><br><span class="line"># -l ：锁定用户账号</span><br><span class="line"># -S ：查看用户账号的状态（是否被锁定）</span><br><span class="line"># -u ：解锁用户账号</span><br><span class="line"></span><br><span class="line"># 查看是否有密码</span><br><span class="line">cat /etc/shadow | grep &lt;user_name&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="赋予root权限"><a href="#赋予root权限" class="headerlink" title="赋予root权限"></a>赋予root权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1： </span></span><br><span class="line"><span class="comment"># 修改 /etc/sudoers 文件，找到下面一行，把前面的注释（#）去掉 </span></span><br><span class="line"><span class="comment">## Allows people in group wheel to run all commands</span></span><br><span class="line">%wheel    ALL=(ALL)    ALL</span><br><span class="line"><span class="comment"># 然后修改用户，使其属于root组（wheel），命令如下：</span></span><br><span class="line">usermod -g root tommy</span><br><span class="line"><span class="comment"># 修改完毕，可以用tommy帐号登录，然后用命令 su - ，即可获得root权限进行操作。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法2： </span></span><br><span class="line"><span class="comment"># 修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行，如下所示：</span></span><br><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">tommy   ALL=(ALL)     ALL</span><br><span class="line"><span class="comment"># 修改完毕，现在可以用tommy帐号登录，然后用命令 su - ，即可获得root权限进行操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3： </span></span><br><span class="line"><span class="comment"># 修改 /etc/passwd 文件，找到如下行，把用户ID修改为 0 ，如下所示：</span></span><br><span class="line">tommy:x:500:500:tommy:/home/tommy:/bin/bash</span><br><span class="line"><span class="comment"># 修改后如下</span></span><br><span class="line">tommy:x:0:500:tommy:/home/tommy:/bin/bash</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>添加软件启动页面</title>
    <url>/2018/01/02/%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E5%90%AF%E5%8A%A8%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>思路：写一个activity作为mainactivity启动，在该activity中加载另外一个activity。</p>
<p>添加colors.xml文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&lt;!--白色 --&gt; </span><br><span class="line">&lt;/resources&gt;  </span><br></pre></td></tr></table></figure>

<p>准备启动画面start.png：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//存放到/res/drawable中。</span><br></pre></td></tr></table></figure>

<p>添加start.xml布局文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; </span><br><span class="line">    android:gravity=&quot;center|center&quot;</span><br><span class="line">    android:background=&quot;@color/white&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;ImageView </span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_horizontal&quot;        </span><br><span class="line">        android:src=&quot;@drawable/start&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;  </span><br></pre></td></tr></table></figure>

<p>编写StartActivity.java文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.cordova.CordovaActivity;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.graphics.PixelFormat;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.view.WindowManager;</span><br><span class="line">public class StartActivity extends CordovaActivity &#123;</span><br><span class="line">    private static final int LOAD_DISPLAY_TIME = 1500;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        getWindow().setFormat(PixelFormat.RGBA_8888);</span><br><span class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_DITHER);</span><br><span class="line">        setContentView(R.layout.start);</span><br><span class="line">        new Handler().postDelayed(new Runnable() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Intent mainIntent = new Intent(StartActivity.this,</span><br><span class="line">                        MainActivity.class);</span><br><span class="line">                StartActivity.this.startActivity(mainIntent);</span><br><span class="line">                StartActivity.this.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, LOAD_DISPLAY_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改AndroidManifest.xml文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="line">&lt;manifest android:hardwareAccelerated=&quot;true&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;0.0.1&quot; package=&quot;com.hzjava.activity&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;supports-screens android:anyDensity=&quot;true&quot; android:largeScreens=&quot;true&quot; android:normalScreens=&quot;true&quot; android:resizeable=&quot;true&quot; android:smallScreens=&quot;true&quot; android:xlargeScreens=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">&lt;!--     &lt;application android:hardwareAccelerated=&quot;true&quot; android:icon=&quot;@drawable/logo&quot; android:label=&quot;@string/app_name&quot; android:supportsRtl=&quot;true&quot;&gt; --&gt;</span><br><span class="line">&lt;!--         &lt;activity android:configChanges=&quot;orientation|keyboardHidden|keyboard|screenSize|locale&quot; android:label=&quot;@string/activity_name&quot; android:launchMode=&quot;singleTop&quot; android:name=&quot;MainActivity&quot; android:windowSoftInputMode=&quot;adjustResize&quot;&gt; --&gt;</span><br><span class="line">&lt;!--             &lt;intent-filter android:label=&quot;@string/launcher_name&quot;&gt; --&gt;</span><br><span class="line">&lt;!--                 &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; --&gt;</span><br><span class="line">&lt;!--                 &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; --&gt;</span><br><span class="line">&lt;!--             &lt;/intent-filter&gt; --&gt;</span><br><span class="line">&lt;!--         &lt;/activity&gt; --&gt;</span><br><span class="line">&lt;!--     &lt;/application&gt; --&gt;</span><br><span class="line">    &lt;uses-sdk android:minSdkVersion=&quot;10&quot; android:targetSdkVersion=&quot;23&quot; /&gt;</span><br><span class="line">    &lt;application android:hardwareAccelerated=&quot;true&quot; android:icon=&quot;@drawable/logo&quot; android:label=&quot;@string/app_name&quot; android:supportsRtl=&quot;true&quot;&gt;</span><br><span class="line">    &lt;activity android:name=&quot;.StartActivity&quot;</span><br><span class="line">                      android:screenOrientation=&quot;portrait&quot;</span><br><span class="line">                       android:theme=&quot;@android:style/Theme.NoTitleBar&quot;&gt;</span><br><span class="line">                 &lt;intent-filter&gt;</span><br><span class="line">                     &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line">                    &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">                &lt;/intent-filter&gt;</span><br><span class="line">            &lt;/activity&gt;</span><br><span class="line">            &lt;activity android:name=&quot;.MainActivity&quot;&gt;</span><br><span class="line">            &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>状态码 response code</title>
    <url>/2021/04/01/%E7%8A%B6%E6%80%81%E7%A0%81%20response%20code/</url>
    <content><![CDATA[<h3 id="定义状态码一"><a href="#定义状态码一" class="headerlink" title="定义状态码一"></a>定义状态码一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line">SUCCESS = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">UNKNOWN_ERROR = <span class="number">1000</span></span><br><span class="line">NOT_SUPPORT = <span class="number">1001</span></span><br><span class="line">BAD_REQUEST = <span class="number">1002</span></span><br><span class="line">QUERY_FAILED = <span class="number">1003</span></span><br><span class="line">CREATE_FAILED = <span class="number">1004</span></span><br><span class="line">DELETE_FAILED = <span class="number">1005</span></span><br><span class="line">UPDATE_FAILED = <span class="number">1006</span></span><br><span class="line">VALID_FAILED = <span class="number">1007</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数相关</span></span><br><span class="line">PARAMS_ERROR = <span class="number">2000</span></span><br><span class="line">PARAMS_VALID = <span class="number">2001</span></span><br><span class="line">PARAMS_NULL = <span class="number">2002</span></span><br><span class="line">ATTR_ERROR = <span class="number">2003</span></span><br><span class="line">VALUE_ERROR = <span class="number">2004</span></span><br><span class="line">FILE_INVALID = <span class="number">2005</span></span><br><span class="line">FILE_TOO_LARGE = <span class="number">2006</span></span><br><span class="line">FILE_NOT_FOUND = <span class="number">2007</span></span><br><span class="line">CODE_NOT_VALID = <span class="number">2008</span></span><br><span class="line">EMAIL_NOT_VALID = <span class="number">2009</span></span><br><span class="line">PHONE_NOT_VALID = <span class="number">2010</span></span><br><span class="line">ONLY_SUPPORT_XLSX = <span class="number">2011</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限相关</span></span><br><span class="line">NOT_AUTH = <span class="number">3000</span></span><br><span class="line">PERMISSION_DENIED = <span class="number">3001</span></span><br><span class="line">AUTH_FAILED = <span class="number">3002</span></span><br><span class="line">AUTH_EXPIRED = <span class="number">3003</span></span><br><span class="line">AUTH_LIMIT = <span class="number">3004</span></span><br><span class="line">LOGIN_FAILED = <span class="number">3005</span></span><br><span class="line">LOGIN_REQUIRED = <span class="number">3006</span></span><br><span class="line">USER_PASSWORD_FAILED = <span class="number">3007</span></span><br><span class="line">USER_PASSWORD_NULL = <span class="number">3008</span></span><br><span class="line">TOKEN_INVALID = <span class="number">3009</span></span><br><span class="line">TOKEN_EXPIRED = <span class="number">3010</span></span><br><span class="line">USER_EXIST = <span class="number">3011</span></span><br><span class="line">ACTIVE_USER = <span class="number">3012</span></span><br><span class="line">NOT_ACTIVE_USER = <span class="number">3013</span></span><br><span class="line">CHECK_PASS = <span class="number">3014</span></span><br><span class="line">CHECK_FAILED = <span class="number">3015</span></span><br><span class="line">REQUEST_FREQUENT = <span class="number">3016</span></span><br><span class="line">FREQUENT_UPPER_LIMIT = <span class="number">3017</span></span><br><span class="line">LOGIN_FAILED_TOO_MANY = <span class="number">3018</span></span><br><span class="line">USER_NOT_EXIST = <span class="number">3019</span></span><br><span class="line">USER_NOT_FOUND = <span class="number">3020</span></span><br><span class="line">LICENSE_EXPIRING = <span class="number">3021</span></span><br><span class="line">LICENSE_LIMIT = <span class="number">3022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 资源相关</span></span><br><span class="line">DATABASE_ERROR = <span class="number">4001</span></span><br><span class="line">MYSQL_GONE_AWAY = <span class="number">4002</span></span><br><span class="line">CONNECT_TIMEOUT = <span class="number">4003</span></span><br><span class="line">SOURCE_NOT_FOUND = <span class="number">4004</span></span><br><span class="line">UPGRADE_FILE_INVALID = <span class="number">4005</span></span><br><span class="line">DATA_CONFLICT = <span class="number">4006</span></span><br><span class="line">DELETE_FORBIDDEN = <span class="number">4007</span></span><br><span class="line">NOT_ACTIVE_LINK = <span class="number">4008</span></span><br><span class="line">MENU_TOO_MANY = <span class="number">4009</span></span><br><span class="line"></span><br><span class="line">MESSAGE = &#123;</span><br><span class="line">    SUCCESS: _(<span class="string">&#x27;正常&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    UNKNOWN_ERROR: _(<span class="string">&#x27;未知错误&#x27;</span>),</span><br><span class="line">    NOT_SUPPORT: _(<span class="string">&#x27;暂不支持&#x27;</span>),</span><br><span class="line">    BAD_REQUEST: _(<span class="string">&#x27;错误请求&#x27;</span>),</span><br><span class="line">    QUERY_FAILED: _(<span class="string">&#x27;查询失败&#x27;</span>),</span><br><span class="line">    CREATE_FAILED: _(<span class="string">&#x27;创建失败&#x27;</span>),</span><br><span class="line">    DELETE_FAILED: _(<span class="string">&#x27;删除失败&#x27;</span>),</span><br><span class="line">    UPDATE_FAILED: _(<span class="string">&#x27;更新失败&#x27;</span>),</span><br><span class="line">    VALID_FAILED: _(<span class="string">&#x27;验证失败&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    PARAMS_ERROR: _(<span class="string">&#x27;参数错误&#x27;</span>),</span><br><span class="line">    PARAMS_VALID: _(<span class="string">&#x27;无效参数&#x27;</span>),</span><br><span class="line">    PARAMS_NULL: _(<span class="string">&#x27;参数为空&#x27;</span>),</span><br><span class="line">    ATTR_ERROR: _(<span class="string">&#x27;属性错误&#x27;</span>),</span><br><span class="line">    VALUE_ERROR: _(<span class="string">&#x27;属性值错误&#x27;</span>),</span><br><span class="line">    FILE_INVALID: _(<span class="string">&#x27;文件无效&#x27;</span>),</span><br><span class="line">    FILE_TOO_LARGE: _(<span class="string">&#x27;文件太大&#x27;</span>),</span><br><span class="line">    FILE_NOT_FOUND: _(<span class="string">&#x27;无法找到文件&#x27;</span>),</span><br><span class="line">    USER_EXIST: _(<span class="string">&#x27;用户已存在&#x27;</span>),</span><br><span class="line">    ACTIVE_USER: _(<span class="string">&#x27;用户已激活&#x27;</span>),</span><br><span class="line">    NOT_ACTIVE_USER: _(<span class="string">&#x27;用户未激活&#x27;</span>),</span><br><span class="line">    CODE_NOT_VALID: _(<span class="string">&#x27;无效验证码&#x27;</span>),</span><br><span class="line">    EMAIL_NOT_VALID: _(<span class="string">&#x27;邮箱地址不合法&#x27;</span>),</span><br><span class="line">    PHONE_NOT_VALID: _(<span class="string">&#x27;手机号码不合法&#x27;</span>),</span><br><span class="line">    ONLY_SUPPORT_XLSX: _(<span class="string">&#x27;仅支持xlsx格式&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    NOT_AUTH: _(<span class="string">&#x27;未认证，无权访问&#x27;</span>),</span><br><span class="line">    PERMISSION_DENIED: _(<span class="string">&#x27;无访问权限&#x27;</span>),</span><br><span class="line">    AUTH_FAILED: _(<span class="string">&#x27;认证授权失败&#x27;</span>),</span><br><span class="line">    AUTH_EXPIRED: _(<span class="string">&#x27;认证已过期&#x27;</span>),</span><br><span class="line">    AUTH_LIMIT: _(<span class="string">&#x27;认证受限&#x27;</span>),</span><br><span class="line">    TOKEN_INVALID: _(<span class="string">&#x27;令牌无效&#x27;</span>),</span><br><span class="line">    TOKEN_EXPIRED: _(<span class="string">&#x27;令牌已过期&#x27;</span>),</span><br><span class="line">    CHECK_PASS: _(<span class="string">&#x27;审核通过&#x27;</span>),</span><br><span class="line">    CHECK_FAILED: _(<span class="string">&#x27;审核未通过&#x27;</span>),</span><br><span class="line">    REQUEST_FREQUENT: _(<span class="string">&#x27;请求过于频繁&#x27;</span>),</span><br><span class="line">    FREQUENT_UPPER_LIMIT: _(<span class="string">&#x27;请求次数达到上限&#x27;</span>),</span><br><span class="line">    LOGIN_FAILED: _(<span class="string">&#x27;登录失败&#x27;</span>),</span><br><span class="line">    LOGIN_REQUIRED: _(<span class="string">&#x27;请登录&#x27;</span>),</span><br><span class="line">    USER_PASSWORD_FAILED: _(<span class="string">&#x27;用户名或密码错误&#x27;</span>),</span><br><span class="line">    USER_PASSWORD_NULL: _(<span class="string">&#x27;用户名或密码为空&#x27;</span>),</span><br><span class="line">    LOGIN_FAILED_TOO_MANY: _(<span class="string">&#x27;连续登录失败超过 3 次，1 分钟内不允许再次登录&#x27;</span>),</span><br><span class="line">    USER_NOT_EXIST: _(<span class="string">&#x27;用户不存在&#x27;</span>),</span><br><span class="line">    USER_NOT_FOUND: _(<span class="string">&#x27;找不到用户&#x27;</span>),</span><br><span class="line">    LICENSE_EXPIRING: _(<span class="string">&#x27;授权已过期或未授权，请联系管理员&#x27;</span>),</span><br><span class="line">    LICENSE_LIMIT: _(<span class="string">&#x27;超过授权账户最大允许的用户数，请联系管理员&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    DATABASE_ERROR: _(<span class="string">&#x27;数据库错误&#x27;</span>),</span><br><span class="line">    MYSQL_GONE_AWAY: _(<span class="string">&#x27;数据库连接失败&#x27;</span>),</span><br><span class="line">    CONNECT_TIMEOUT: _(<span class="string">&#x27;连接超时&#x27;</span>),</span><br><span class="line">    SOURCE_NOT_FOUND: _(<span class="string">&#x27;资源不存在&#x27;</span>),</span><br><span class="line">    UPGRADE_FILE_INVALID: _(<span class="string">&#x27;升级文件无效&#x27;</span>),</span><br><span class="line">    DATA_CONFLICT: _(<span class="string">&#x27;数据冲突&#x27;</span>),</span><br><span class="line">    DELETE_FORBIDDEN: _(<span class="string">&#x27;禁止删除&#x27;</span>),</span><br><span class="line">    NOT_ACTIVE_LINK: _(<span class="string">&#x27;激活链接无效或已过期&#x27;</span>),</span><br><span class="line">    MENU_TOO_MANY: _(<span class="string">&#x27;定制菜单超过数量&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="定义状态码二"><a href="#定义状态码二" class="headerlink" title="定义状态码二"></a>定义状态码二</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line">SUCCESS = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">UNKNOWN_ERROR = <span class="number">1000</span></span><br><span class="line">NOT_SUPPORT = <span class="number">1001</span></span><br><span class="line">BAD_REQUEST = <span class="number">1002</span></span><br><span class="line">QUERY_FAILED = <span class="number">1003</span></span><br><span class="line">CREATE_FAILED = <span class="number">1004</span></span><br><span class="line">DELETE_FAILED = <span class="number">1005</span></span><br><span class="line">UPDATE_FAILED = <span class="number">1006</span></span><br><span class="line">VALID_FAILED = <span class="number">1007</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数相关</span></span><br><span class="line">PARAMS_ERROR = <span class="number">2000</span></span><br><span class="line">PARAMS_VALID = <span class="number">2001</span></span><br><span class="line">PARAMS_NULL = <span class="number">2002</span></span><br><span class="line">ATTR_ERROR = <span class="number">2003</span></span><br><span class="line">VALUE_ERROR = <span class="number">2004</span></span><br><span class="line">FILE_INVALID = <span class="number">2005</span></span><br><span class="line">FILE_TOO_LARGE = <span class="number">2006</span></span><br><span class="line">FILE_NOT_FOUND = <span class="number">2007</span></span><br><span class="line">CODE_NOT_VALID = <span class="number">2008</span></span><br><span class="line">EMAIL_NOT_VALID = <span class="number">2009</span></span><br><span class="line">PHONE_NOT_VALID = <span class="number">2010</span></span><br><span class="line">ONLY_SUPPORT_XLSX = <span class="number">2011</span></span><br><span class="line">EXIST_APPLICATION_NAME = <span class="number">2012</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限相关</span></span><br><span class="line">NOT_AUTH = <span class="number">3000</span></span><br><span class="line">PERMISSION_DENIED = <span class="number">3001</span></span><br><span class="line">AUTH_FAILED = <span class="number">3002</span></span><br><span class="line">AUTH_EXPIRED = <span class="number">3003</span></span><br><span class="line">AUTH_LIMIT = <span class="number">3004</span></span><br><span class="line">LOGIN_FAILED = <span class="number">3005</span></span><br><span class="line">LOGIN_REQUIRED = <span class="number">3006</span></span><br><span class="line">USER_PASSWORD_ERROR = <span class="number">3007</span></span><br><span class="line">USER_PASSWORD_NULL = <span class="number">3008</span></span><br><span class="line">TOKEN_INVALID = <span class="number">3009</span></span><br><span class="line">TOKEN_EXPIRED = <span class="number">3010</span></span><br><span class="line">USER_EXIST = <span class="number">3011</span></span><br><span class="line">ACTIVE_USER = <span class="number">3012</span></span><br><span class="line">NOT_ACTIVE_USER = <span class="number">3013</span></span><br><span class="line">CHECK_PASS = <span class="number">3014</span></span><br><span class="line">CHECK_FAILED = <span class="number">3015</span></span><br><span class="line">REQUEST_FREQUENT = <span class="number">3016</span></span><br><span class="line">FREQUENT_UPPER_LIMIT = <span class="number">3017</span></span><br><span class="line">LOGIN_FAILED_TOO_MANY = <span class="number">3018</span></span><br><span class="line">USER_NOT_EXIST = <span class="number">3019</span></span><br><span class="line">USER_NOT_FOUND = <span class="number">3020</span></span><br><span class="line">LICENSE_EXPIRING = <span class="number">3021</span></span><br><span class="line">LICENSE_LIMIT = <span class="number">3022</span></span><br><span class="line">SSO_LOGIN_FAILED = <span class="number">3023</span></span><br><span class="line">SSO_USER_PASSWORD_ERROR = <span class="number">3024</span></span><br><span class="line">CLIENT_ID_ERROR = <span class="number">3025</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 资源相关</span></span><br><span class="line">DATABASE_ERROR = <span class="number">4001</span></span><br><span class="line">MYSQL_GONE_AWAY = <span class="number">4002</span></span><br><span class="line">CONNECT_TIMEOUT = <span class="number">4003</span></span><br><span class="line">SOURCE_NOT_FOUND = <span class="number">4004</span></span><br><span class="line">NOT_EXIST_SOURCE = <span class="number">4005</span></span><br><span class="line">UPGRADE_FILE_INVALID = <span class="number">4006</span></span><br><span class="line">DATA_CONFLICT = <span class="number">4007</span></span><br><span class="line">DELETE_FORBIDDEN = <span class="number">4008</span></span><br><span class="line">NOT_ACTIVE_LINK = <span class="number">4009</span></span><br><span class="line">MENU_TOO_MANY = <span class="number">4010</span></span><br><span class="line">DEFAULT_APP = <span class="number">4011</span></span><br><span class="line">APP_INSTALLED = <span class="number">4012</span></span><br><span class="line">NOT_INSTALL_APP = <span class="number">4013</span></span><br><span class="line">NOT_SUBSCRIBE_APP = <span class="number">4014</span></span><br><span class="line">NOT_CHECK_PASS = <span class="number">4015</span></span><br><span class="line">NOT_PUBLISH = <span class="number">4016</span></span><br><span class="line">NOT_FIRST_GET = <span class="number">4017</span></span><br><span class="line"></span><br><span class="line">MESSAGE = &#123;</span><br><span class="line">    SUCCESS: _(<span class="string">&#x27;正常&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    UNKNOWN_ERROR: _(<span class="string">&#x27;未知错误&#x27;</span>),</span><br><span class="line">    NOT_SUPPORT: _(<span class="string">&#x27;暂不支持&#x27;</span>),</span><br><span class="line">    BAD_REQUEST: _(<span class="string">&#x27;错误请求&#x27;</span>),</span><br><span class="line">    QUERY_FAILED: _(<span class="string">&#x27;查询失败&#x27;</span>),</span><br><span class="line">    CREATE_FAILED: _(<span class="string">&#x27;创建失败&#x27;</span>),</span><br><span class="line">    DELETE_FAILED: _(<span class="string">&#x27;删除失败&#x27;</span>),</span><br><span class="line">    UPDATE_FAILED: _(<span class="string">&#x27;更新失败&#x27;</span>),</span><br><span class="line">    VALID_FAILED: _(<span class="string">&#x27;验证失败&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    PARAMS_ERROR: _(<span class="string">&#x27;参数错误&#x27;</span>),</span><br><span class="line">    PARAMS_VALID: _(<span class="string">&#x27;无效参数&#x27;</span>),</span><br><span class="line">    PARAMS_NULL: _(<span class="string">&#x27;参数为空&#x27;</span>),</span><br><span class="line">    ATTR_ERROR: _(<span class="string">&#x27;属性错误&#x27;</span>),</span><br><span class="line">    VALUE_ERROR: _(<span class="string">&#x27;属性值错误&#x27;</span>),</span><br><span class="line">    FILE_INVALID: _(<span class="string">&#x27;文件无效&#x27;</span>),</span><br><span class="line">    FILE_TOO_LARGE: _(<span class="string">&#x27;文件太大&#x27;</span>),</span><br><span class="line">    FILE_NOT_FOUND: _(<span class="string">&#x27;无法找到文件&#x27;</span>),</span><br><span class="line">    USER_EXIST: _(<span class="string">&#x27;用户已存在&#x27;</span>),</span><br><span class="line">    ACTIVE_USER: _(<span class="string">&#x27;用户已激活&#x27;</span>),</span><br><span class="line">    NOT_ACTIVE_USER: _(<span class="string">&#x27;用户未激活&#x27;</span>),</span><br><span class="line">    CODE_NOT_VALID: _(<span class="string">&#x27;无效验证码&#x27;</span>),</span><br><span class="line">    EMAIL_NOT_VALID: _(<span class="string">&#x27;邮箱地址不合法&#x27;</span>),</span><br><span class="line">    PHONE_NOT_VALID: _(<span class="string">&#x27;手机号码不合法&#x27;</span>),</span><br><span class="line">    ONLY_SUPPORT_XLSX: _(<span class="string">&#x27;仅支持xlsx格式&#x27;</span>),</span><br><span class="line">    EXIST_APPLICATION_NAME: _(<span class="string">&#x27;应用名已存在&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    NOT_AUTH: _(<span class="string">&#x27;未认证，无权访问&#x27;</span>),</span><br><span class="line">    PERMISSION_DENIED: _(<span class="string">&#x27;无访问权限&#x27;</span>),</span><br><span class="line">    AUTH_FAILED: _(<span class="string">&#x27;认证授权失败&#x27;</span>),</span><br><span class="line">    AUTH_EXPIRED: _(<span class="string">&#x27;认证已过期&#x27;</span>),</span><br><span class="line">    AUTH_LIMIT: _(<span class="string">&#x27;认证受限&#x27;</span>),</span><br><span class="line">    TOKEN_INVALID: _(<span class="string">&#x27;令牌无效&#x27;</span>),</span><br><span class="line">    TOKEN_EXPIRED: _(<span class="string">&#x27;令牌已过期&#x27;</span>),</span><br><span class="line">    CHECK_PASS: _(<span class="string">&#x27;审核通过&#x27;</span>),</span><br><span class="line">    CHECK_FAILED: _(<span class="string">&#x27;审核未通过&#x27;</span>),</span><br><span class="line">    REQUEST_FREQUENT: _(<span class="string">&#x27;请求过于频繁&#x27;</span>),</span><br><span class="line">    FREQUENT_UPPER_LIMIT: _(<span class="string">&#x27;请求次数达到上限&#x27;</span>),</span><br><span class="line">    LOGIN_FAILED: _(<span class="string">&#x27;登录失败&#x27;</span>),</span><br><span class="line">    LOGIN_REQUIRED: _(<span class="string">&#x27;请登录&#x27;</span>),</span><br><span class="line">    USER_PASSWORD_ERROR: _(<span class="string">&#x27;用户名或密码错误&#x27;</span>),</span><br><span class="line">    USER_PASSWORD_NULL: _(<span class="string">&#x27;用户名或密码为空&#x27;</span>),</span><br><span class="line">    LOGIN_FAILED_TOO_MANY: _(<span class="string">&#x27;连续登录失败超过 3 次，1 分钟内不允许再次登录&#x27;</span>),</span><br><span class="line">    USER_NOT_EXIST: _(<span class="string">&#x27;用户不存在&#x27;</span>),</span><br><span class="line">    USER_NOT_FOUND: _(<span class="string">&#x27;找不到用户&#x27;</span>),</span><br><span class="line">    LICENSE_EXPIRING: _(<span class="string">&#x27;授权已过期或未授权，请联系管理员&#x27;</span>),</span><br><span class="line">    LICENSE_LIMIT: _(<span class="string">&#x27;超过授权账户最大允许的用户数，请联系管理员&#x27;</span>),</span><br><span class="line">    SSO_LOGIN_FAILED: _(<span class="string">&#x27;用户中心授权失败&#x27;</span>),</span><br><span class="line">    SSO_USER_PASSWORD_ERROR: _(<span class="string">&#x27;用户名或密码错误&#x27;</span>),</span><br><span class="line">    CLIENT_ID_ERROR: _(<span class="string">&#x27;Client ID 无效&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    DATABASE_ERROR: _(<span class="string">&#x27;数据库错误&#x27;</span>),</span><br><span class="line">    MYSQL_GONE_AWAY: _(<span class="string">&#x27;数据库连接失败&#x27;</span>),</span><br><span class="line">    CONNECT_TIMEOUT: _(<span class="string">&#x27;连接超时&#x27;</span>),</span><br><span class="line">    SOURCE_NOT_FOUND: _(<span class="string">&#x27;未找到资源&#x27;</span>),</span><br><span class="line">    NOT_EXIST_SOURCE: _(<span class="string">&#x27;资源不存在&#x27;</span>),</span><br><span class="line">    UPGRADE_FILE_INVALID: _(<span class="string">&#x27;升级文件无效&#x27;</span>),</span><br><span class="line">    DATA_CONFLICT: _(<span class="string">&#x27;数据冲突&#x27;</span>),</span><br><span class="line">    DELETE_FORBIDDEN: _(<span class="string">&#x27;禁止删除&#x27;</span>),</span><br><span class="line">    NOT_ACTIVE_LINK: _(<span class="string">&#x27;激活链接无效或已过期&#x27;</span>),</span><br><span class="line">    MENU_TOO_MANY: _(<span class="string">&#x27;定制菜单超过数量&#x27;</span>),</span><br><span class="line">    DEFAULT_APP: _(<span class="string">&#x27;默认应用&#x27;</span>),</span><br><span class="line">    APP_INSTALLED: _(<span class="string">&#x27;应用已安装&#x27;</span>),</span><br><span class="line">    NOT_INSTALL_APP: _(<span class="string">&#x27;未安装该应用&#x27;</span>),</span><br><span class="line">    NOT_SUBSCRIBE_APP: _(<span class="string">&#x27;未订阅该学习号&#x27;</span>),</span><br><span class="line">    NOT_CHECK_PASS: _(<span class="string">&#x27;应用尚未申请通过&#x27;</span>),</span><br><span class="line">    NOT_PUBLISH: _(<span class="string">&#x27;应用未发布&#x27;</span>),</span><br><span class="line">    NOT_FIRST_GET: _(<span class="string">&#x27;已获取过数据&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云(CentOS)搭建Hexo博客</title>
    <url>/2020/09/08/%E8%85%BE%E8%AE%AF%E4%BA%91(CentOS)%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="腾讯云-CentOS-搭建Hexo静态博客"><a href="#腾讯云-CentOS-搭建Hexo静态博客" class="headerlink" title="腾讯云(CentOS)搭建Hexo静态博客"></a>腾讯云(CentOS)搭建Hexo静态博客</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>Hexo是基于Node.js的一个博客框架，安装Hexo前需要安装Node.js，也要安装 git，因为 Hexo 开源且基于 Node.js 环境，所以大量主题和设置需要通过 git 完成。</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install git gcc gcc-c++ curl wget</span><br></pre></td></tr></table></figure>

<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo官方文档使用cURL和Wget获取nvm（Node.js管理器）来安装Node.js，但腾讯云基础服务器1M/s的带宽下载太慢，推荐使用yum进行安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum install -y nodejs</span><br><span class="line"># npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用npm安装Hexo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># npm install -g hexo-cli</span><br><span class="line"># npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>注：<br>第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装</p>
<h3 id="新建用户（可忽略）"><a href="#新建用户（可忽略）" class="headerlink" title="新建用户（可忽略）"></a>新建用户（可忽略）</h3><p>安装Hexo完成后，执行hexo init <folder>命令即可初始化Hexo框架。但此时用户默认是root，之后通过域名访问站点文件夹时，需要开放root用户的部分权限（755），如果不希望开放此权限，可以新建用户在其家目录建立站点文件夹。</p>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>-m选项表示生成用户主目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># useradd -m murray</span><br></pre></td></tr></table></figure>

<h4 id="添加密码"><a href="#添加密码" class="headerlink" title="添加密码"></a>添加密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwd murray</span><br></pre></td></tr></table></figure>

<h4 id="赋予sudo权限"><a href="#赋予sudo权限" class="headerlink" title="赋予sudo权限"></a>赋予sudo权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum install -y vim</span><br><span class="line"># vim /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>/etc/sudoers文件97行左右修改成如下格式：（:wq!退出）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)   ALL</span><br><span class="line">murray  ALL=(ALL)   ALL</span><br></pre></td></tr></table></figure>

<h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># su murray</span><br><span class="line">$ cd ~</span><br></pre></td></tr></table></figure>

<h4 id="创建站点文件夹"><a href="#创建站点文件夹" class="headerlink" title="创建站点文件夹"></a>创建站点文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir Codes</span><br><span class="line">$ cd Codes</span><br></pre></td></tr></table></figure>

<h3 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h3><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>

<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd blog</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y nginx</span><br></pre></td></tr></table></figure>

<h4 id="配置server"><a href="#配置server" class="headerlink" title="配置server"></a>配置server</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>http块的server部分root后值修改为/home/murray/Codes/blog/public</p>
<h4 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo service nginx start</span><br></pre></td></tr></table></figure>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>进入域名管理后，点击新手快捷设置,输入云主机公网IP，会自动设置两条记录，@和www，即可通过直接访问域名（murray.me），或添加www（<a href="http://www.murray.me),来访问博客./">www.murray.me），来访问博客。</a></p>
<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>由于权限问题，此时访问域名会返回403错误——服务器上文件或目录拒绝访问。<br>修改博客根目录为755（rwxr-xr-x）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo chmod -R 755 /home/murray</span><br></pre></td></tr></table></figure>
<p>再次访问域名，即可进入博客。</p>
<h3 id="修复Hexo分类与标签无法显示"><a href="#修复Hexo分类与标签无法显示" class="headerlink" title="修复Hexo分类与标签无法显示"></a>修复Hexo分类与标签无法显示</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 新建一个页面，命名为 tags 。命令如下：</span><br><span class="line">$ hexo new page &quot;tags&quot;</span><br><span class="line">② 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</span><br><span class="line">---</span><br><span class="line">title: Murray Tag</span><br><span class="line">date: 2018-05-12 16:53:23</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>注：如果有启用多说 或者 Disqus 评论，默认页面也会带有评论，需要关闭的话，请添加字段 comments 并将值设置为 false。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① 新建一个页面，命名为 categories 。命令如下：</span><br><span class="line">$ hexo new page &quot;categories&quot;</span><br><span class="line">② 编辑刚新建的页面，将页面的类型设置为 categories，主题将自动为这个页面显示标签云。页面内容如下：</span><br><span class="line">---</span><br><span class="line">title: Murray Categories</span><br><span class="line">date: 2018-05-12 17:06:37</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<p>参考资料<br>Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>获取NTP时间</title>
    <url>/2020/06/02/%E8%8E%B7%E5%8F%96NTP%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h3 id="NTP服务器"><a href="#NTP服务器" class="headerlink" title="NTP服务器"></a>NTP服务器</h3><h4 id="NTP服务器地址"><a href="#NTP服务器地址" class="headerlink" title="NTP服务器地址"></a>NTP服务器地址</h4><p>210.72.145.39 或者202.112.29.82</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static Date getNtpTime(String addr)&#123;</span><br><span class="line">    //创建NTP客户端</span><br><span class="line">    NTPUDPClient ntpudpClient = new NTPUDPClient();</span><br><span class="line">    //设置默认超时时间5000毫秒</span><br><span class="line">    ntpudpClient.setDefaultTimeout(5000);</span><br><span class="line">    Date date = new Date();</span><br><span class="line">    try&#123;</span><br><span class="line">        ntpudpClient.open();</span><br><span class="line">        //配置远程时钟服务器地址</span><br><span class="line">        InetAddress remoteAddr = InetAddress.getByName(addr);</span><br><span class="line">        TimeInfo timeInfo = ntpudpClient.getTime(remoteAddr);</span><br><span class="line">        //获取时间</span><br><span class="line">        date = TimeStamp.getNtpTime(timeInfo.getReturnTime()).getDate();</span><br><span class="line">    &#125;catch(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        //关闭客户端</span><br><span class="line">        ntpudpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">    return date;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Ntp</tag>
      </tags>
  </entry>
  <entry>
    <title>表格工具类（POIUtils.java）</title>
    <url>/2020/06/02/%E8%A1%A8%E6%A0%BC%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88POIUtils.java%EF%BC%89/</url>
    <content><![CDATA[<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.mhiywf.common.utils;</span><br><span class="line"> </span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.apache.poi.hssf.usermodel.HSSFCell;</span><br><span class="line">import org.apache.poi.hssf.usermodel.HSSFSheet;</span><br><span class="line">import org.apache.poi.ss.usermodel.Cell;</span><br><span class="line">import org.apache.poi.ss.usermodel.DateUtil;</span><br><span class="line">import org.apache.poi.ss.util.CellRangeAddress;</span><br><span class="line"> </span><br><span class="line">public class POIUtils &#123;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：判断cell是否为null或空格</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-04</span><br><span class="line">     * @param paramCell</span><br><span class="line">     * @return boolean&lt;br/&gt;</span><br><span class="line">     *         true：为空、false:非空</span><br><span class="line">     */</span><br><span class="line">    public static Boolean isBlankCell(Cell paramCell)&#123;</span><br><span class="line">        boolean flag = false;</span><br><span class="line">        if(paramCell==null||&quot;&quot;.equals(paramCell.toString().trim()))</span><br><span class="line">                flag = true;</span><br><span class="line"> </span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：将yyyy年MM月dd日，yyyy-MM-dd，yyyy.MM.dd，yyyy/MM/dd格式Cell转换为指定格式format 日期字符串</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2015-12-23</span><br><span class="line">     * @param paramCell Cell</span><br><span class="line">     * @return String &lt;br/&gt;  format格式的日期字符串</span><br><span class="line">     */</span><br><span class="line">    public static String parseDateCellToString(Cell paramCell,String format)&#123;</span><br><span class="line"> </span><br><span class="line">        if (isBlankCell(paramCell)) return null;</span><br><span class="line">        String dateStr = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Date tempDate = parseCellToDate(paramCell);</span><br><span class="line">            if(tempDate!=null)</span><br><span class="line">                dateStr = new SimpleDateFormat(format).format(tempDate);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            dateStr = null;</span><br><span class="line">        &#125;</span><br><span class="line">        return dateStr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：将yyyy年MM月dd日，yyyy-MM-dd，yyyy.MM.dd，yyyy/MM/dd格式Cell转换为Date类型</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2015-12-23</span><br><span class="line">     * @param paramCell Cell</span><br><span class="line">     * @return String &lt;br/&gt;yyyy-MM-dd HH:mm:ss格式的日期字符串</span><br><span class="line">     */</span><br><span class="line">    public static Date parseDateCellToDate(Cell paramCell)&#123;</span><br><span class="line"> </span><br><span class="line">        if (isBlankCell(paramCell)) return null;</span><br><span class="line">        Date tempDate = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            tempDate = parseCellToDate(paramCell);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            tempDate = null;</span><br><span class="line">        &#125;</span><br><span class="line">        return tempDate;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：解析cell成Date</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2015-12-31</span><br><span class="line">     * @param paramCell</span><br><span class="line">     * @param paramDate</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static Date parseCellToDate(Cell paramCell) &#123;</span><br><span class="line">        if(isBlankCell(paramCell)) return null;</span><br><span class="line">        Date paramDate = null;</span><br><span class="line">        if (paramCell.getCellType() == 0 &amp;&amp;</span><br><span class="line">                (paramCell.toString().contains(&quot;月&quot;)||paramCell.toString().contains(&quot;-&quot;)))&#123;//数值格式 非中文</span><br><span class="line">            paramDate = paramCell.getDateCellValue();</span><br><span class="line">        &#125;else if (paramCell.getCellType() == 0)&#123;//数值格式 中文</span><br><span class="line">            paramDate = DateUtil.getJavaDate(paramCell.getNumericCellValue());</span><br><span class="line">        &#125;else if (paramCell.getCellType() == 1)&#123;//文本格式</span><br><span class="line">            String cellStrVal = paramCell.getStringCellValue();</span><br><span class="line">            paramDate = MlDateUtil.stringToDate(cellStrVal,&quot;yyyy年MM月dd日&quot;);</span><br><span class="line">            if(paramDate==null)</span><br><span class="line">                paramDate = MlDateUtil.stringToDate(cellStrVal,&quot;yyyy-MM-dd&quot;);</span><br><span class="line">            if(paramDate==null)</span><br><span class="line">                paramDate = MlDateUtil.stringToDate(cellStrVal,&quot;yyyyMMdd&quot;);</span><br><span class="line">            if(paramDate==null)</span><br><span class="line">                paramDate = MlDateUtil.stringToDate(cellStrVal,&quot;yyyy.MM.dd&quot;);</span><br><span class="line">            if(paramDate==null)</span><br><span class="line">                paramDate = MlDateUtil.stringToDate(cellStrVal,&quot;yyyy/MM/dd&quot;);</span><br><span class="line">            if(paramDate==null)</span><br><span class="line">                paramDate = MlDateUtil.stringToDate(cellStrVal,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return paramDate;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：合并单元格补全处理</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-05</span><br><span class="line">     * @param sheet</span><br><span class="line">     * @return HSSFSheet</span><br><span class="line">     */</span><br><span class="line">    public static HSSFSheet getFullCellSheet(HSSFSheet sheet) &#123;</span><br><span class="line">        // 获得 sheet中合并单元格的数量</span><br><span class="line">        int mergerCount = sheet.getNumMergedRegions();</span><br><span class="line">        // 遍历合并单元格</span><br><span class="line">        for (int i = 0; i &lt; mergerCount; i++) &#123;</span><br><span class="line">            //合并单元格补全处理</span><br><span class="line">            CellRangeAddress cra = sheet.getMergedRegion(i);</span><br><span class="line">            int firstRow = cra.getFirstRow();</span><br><span class="line">            int lastRow = cra.getLastRow();</span><br><span class="line">            int firstCol = cra.getFirstColumn();</span><br><span class="line">            int lastCol = cra.getLastColumn();</span><br><span class="line">            for (int j = firstCol; j &lt;= lastCol; j++) &#123;</span><br><span class="line">                for (int k = firstRow; k &lt;= lastRow; k++) &#123;</span><br><span class="line">                    HSSFCell cell = sheet.getRow(firstRow).getCell(firstCol);</span><br><span class="line">                    if(cell.getCellType()==0)&#123;</span><br><span class="line">                        sheet.getRow(k).getCell(j).setCellValue(cell.getNumericCellValue());</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        sheet.getRow(k).getCell(j).setCellValue(cell.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sheet;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：合并单元格补全处理</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-09-21</span><br><span class="line">     * @param sheet</span><br><span class="line">     * @return Sheet</span><br><span class="line">     */</span><br><span class="line">    public static Sheet getFillSheet(Sheet sheet) &#123;</span><br><span class="line">        // 获得 sheet中合并单元格的数量</span><br><span class="line">        int sheetmergerCount = sheet.getNumMergedRegions();</span><br><span class="line">        // 遍历合并单元格</span><br><span class="line">        for (int i = 0; i &lt; sheetmergerCount; i++) &#123;</span><br><span class="line">            //合并单元格补全处理</span><br><span class="line">            CellRangeAddress cra = sheet.getMergedRegion(i);</span><br><span class="line">            int rowFirst = cra.getFirstRow();</span><br><span class="line">            int rowLast = cra.getLastRow();</span><br><span class="line">            int colFirst = cra.getFirstColumn();</span><br><span class="line">            int colLast = cra.getLastColumn();</span><br><span class="line">            Cell valCell = sheet.getRow(rowFirst).getCell(colFirst);</span><br><span class="line">            for (int k = rowFirst; k &lt;= rowLast; k++) &#123;</span><br><span class="line">                for (int j = colFirst; j &lt;= colLast; j++) &#123;</span><br><span class="line">                    Row row = sheet.getRow(k)==null?sheet.createRow(k):sheet.getRow(k);</span><br><span class="line">                    Cell cell = row.getCell(j)==null?cell = row.createCell(j):row.getCell(j);</span><br><span class="line">                    cell.setCellStyle(valCell.getCellStyle());</span><br><span class="line">                    if(valCell.getCellType()==0)&#123;</span><br><span class="line">                        cell.setCellValue(valCell.getNumericCellValue());</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        cell.setCellValue(valCell.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sheet;</span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：合并单元格位置信息</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-05</span><br><span class="line">     * @param sheet</span><br><span class="line">     * @return List&lt;CellRangeAddress&gt;</span><br><span class="line">     */</span><br><span class="line">    public static List&lt;CellRangeAddress&gt; getCombineCell(HSSFSheet sheet) &#123;</span><br><span class="line">        //存储单元格位置信息List</span><br><span class="line">        List&lt;CellRangeAddress&gt; list = new ArrayList&lt;CellRangeAddress&gt;();</span><br><span class="line">        //获得sheet中合并单元格的数量</span><br><span class="line">        int mergerCount = sheet.getNumMergedRegions();</span><br><span class="line">        //遍历合并单元格</span><br><span class="line">        for (int i = 0; i &lt; mergerCount; i++) &#123;</span><br><span class="line">            //合并单元格存入list</span><br><span class="line">            CellRangeAddress cra = sheet.getMergedRegion(i);</span><br><span class="line">            list.add(cra);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述：判断单元格是否为合并单元格</span><br><span class="line">     * @author MaYawei</span><br><span class="line">     * @date 2016-01-05</span><br><span class="line">     * @param listCombineCell&lt;br/&gt;存放合并单元格的list</span><br><span class="line">     * @param cell&lt;br/&gt;需要判断的单元格</span><br><span class="line">     * @param sheet&lt;br/&gt;sheet</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Boolean isCombineCell(List&lt;CellRangeAddress&gt; listCombineCell,</span><br><span class="line">            HSSFCell cell) &#123;</span><br><span class="line">        int firstCol = 0;</span><br><span class="line">        int lastCol = 0;</span><br><span class="line">        int firstRow = 0;</span><br><span class="line">        int lastRow = 0;</span><br><span class="line">        for (CellRangeAddress cra : listCombineCell) &#123;</span><br><span class="line">            //合并单元格起始行、结束行、起始列、结束列</span><br><span class="line">            firstCol = cra.getFirstColumn();</span><br><span class="line">            lastCol = cra.getLastColumn();</span><br><span class="line">            firstRow = cra.getFirstRow();</span><br><span class="line">            lastRow = cra.getLastRow();</span><br><span class="line">            if (cell.getColumnIndex() &lt;= lastCol &amp;&amp; cell.getColumnIndex() &gt;= firstCol) &#123;</span><br><span class="line">                if (cell.getRowIndex() &lt;= lastRow &amp;&amp; cell.getRowIndex() &gt;= firstRow) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决端口占用问题port</title>
    <url>/2020/06/02/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98port/</url>
    <content><![CDATA[<ul>
<li><p>查询端口：<code>netstat -aon | findstr &quot;8083&quot;</code></p>
</li>
<li><p>查看进程：<code>tasklist | findstr &quot;8788&quot;</code></p>
</li>
<li><p>或根据PID在任务管理器中找到对应的PID进程</p>
</li>
<li><p>杀死进程：<code>taskkill /f /t /im tor.exe</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TASKKILL /IM notepad.exe</span><br><span class="line">TASKKILL /PID 1230 /PID 1241 /PID 1253 /T</span><br><span class="line">TASKKILL /F /IM cmd.exe /T</span><br><span class="line">TASKKILL /F /FI &quot;PID ge 1000&quot; /FI &quot;WINDOWTITLE ne untitle*&quot;</span><br><span class="line">TASKKILL /F /FI &quot;USERNAME eq NT AUTHORITY\SYSTEM&quot; /IM notepad.exe</span><br><span class="line">TASKKILL /S system /U 域\用户名 /FI &quot;用户名 ne NT*&quot; /IM *</span><br><span class="line">TASKKILL /S system /U username /P password /FI &quot;IMAGENAME eq note*&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Dos</tag>
      </tags>
  </entry>
  <entry>
    <title>解码 Unicode</title>
    <url>/2020/06/02/%E8%A7%A3%E7%A0%81%20Unicode/</url>
    <content><![CDATA[<h3 id="解码Unicode"><a href="#解码Unicode" class="headerlink" title="解码Unicode"></a>解码Unicode</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 描述：解码 Unicode \\uXXXX</span><br><span class="line">    *</span><br><span class="line">    * @author MaYawei</span><br><span class="line">    * @date 2016年12月9日</span><br><span class="line">    * @param str</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">public static String decodeUnicode(String str) &#123;  </span><br><span class="line">    Charset set = Charset.forName(&quot;UTF-16&quot;);  </span><br><span class="line">    Pattern p = Pattern.compile(&quot;\\\\u([0-9a-fA-F]&#123;4&#125;)&quot;);  </span><br><span class="line">    Matcher m = p.matcher( str );  </span><br><span class="line">    int start = 0 ;  </span><br><span class="line">    int start2 = 0 ;  </span><br><span class="line">    StringBuffer sb = new StringBuffer();  </span><br><span class="line">    while( m.find( start ) ) &#123;  </span><br><span class="line">        start2 = m.start() ;  </span><br><span class="line">        if( start2 &gt; start )&#123;  </span><br><span class="line">            String seg = str.substring(start, start2) ;  </span><br><span class="line">            sb.append( seg );  </span><br><span class="line">        &#125;  </span><br><span class="line">        String code = m.group( 1 );  </span><br><span class="line">        int i = Integer.valueOf( code , 16 );  </span><br><span class="line">        byte[] bb = new byte[ 4 ] ;  </span><br><span class="line">        bb[ 0 ] = (byte) ((i &gt;&gt; 8) &amp; 0xFF );  </span><br><span class="line">        bb[ 1 ] = (byte) ( i &amp; 0xFF ) ;  </span><br><span class="line">        ByteBuffer b = ByteBuffer.wrap(bb);  </span><br><span class="line">        sb.append( String.valueOf( set.decode(b) ).trim() );  </span><br><span class="line">        start = m.end() ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    start2 = str.length() ;  </span><br><span class="line">    if( start2 &gt; start )&#123;  </span><br><span class="line">        String seg = str.substring(start, start2) ;  </span><br><span class="line">        sb.append( seg );  </span><br><span class="line">    &#125;  </span><br><span class="line">    return sb.toString() ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>让linux每天定时备份MySQL数据库并删除五天前的备份文件</title>
    <url>/2019/01/01/%E8%AE%A9linux%E6%AF%8F%E5%A4%A9%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%88%A0%E9%99%A4%E4%BA%94%E5%A4%A9%E5%89%8D%E7%9A%84%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>Mysql定期备份是一项重要的工作，但人工操作太繁琐，也难避免有所疏漏，使用下面的方法即可让系统定期备份数据。</p>
</blockquote>
<blockquote>
<p>利用系统crontab来定时执行备份文件，按日期对备份结果进行保存，达到备份的目的。</p>
</blockquote>
<h4 id="1、创建备份文件夹"><a href="#1、创建备份文件夹" class="headerlink" title="1、创建备份文件夹"></a>1、创建备份文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /backup</span><br><span class="line">mkdir mysql_backup</span><br></pre></td></tr></table></figure>

<h4 id="2、编写运行脚本"><a href="#2、编写运行脚本" class="headerlink" title="2、编写运行脚本"></a>2、编写运行脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mysql_backup_script.sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>脚本 mysql_backup_script.sh</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Name: mysql_backup_script.sh</span><br><span class="line"># This is a ShellScript For Auto Database Backup and Delete old Backup</span><br><span class="line">#</span><br><span class="line">mysql_username=&#x27;root&#x27;</span><br><span class="line">mysql_password=123456</span><br><span class="line">database=&#x27;gongdiyun&#x27;</span><br><span class="line">mysql_host=&#x27;127.0.0.1&#x27;</span><br><span class="line"></span><br><span class="line">backupdir=/backup/mysql_backup</span><br><span class="line">mysql_bin_dir=/usr/bin</span><br><span class="line">time=` date +%Y%m%d%H%M%S `</span><br><span class="line"></span><br><span class="line"># 备份数据库</span><br><span class="line"># 表结构和数据</span><br><span class="line">$mysql_bin_dir/mysqldump -c -h$mysql_host -u$mysql_username -p$mysql_password $database | gzip &gt; $backupdir/$database&#x27;_&#x27;$time.sql.gz</span><br><span class="line"></span><br><span class="line"># 仅表结构</span><br><span class="line">$mysql_bin_dir/mysqldump -c -h$mysql_host -u$mysql_username -p$mysql_password --opt -d $database | gzip &gt; $backupdir/$database&#x27;_structure_&#x27;$time.sql.gz</span><br><span class="line"></span><br><span class="line"># 仅表数据</span><br><span class="line">$mysql_bin_dir/mysqldump -c -h$mysql_host -u$mysql_username -p$mysql_password -t $database | gzip &gt; $backupdir/$database&#x27;_data_&#x27;$time.sql.gz</span><br><span class="line"></span><br><span class="line"># 删除超过5天的备份</span><br><span class="line">find $backupdir -name &quot;$database*.sql.gz&quot; -type f -mtime +5 -exec rm &#123;&#125; \; &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>保存退出</p>
</blockquote>
<blockquote>
<p>说明</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码中time=` date +%Y%m%d%H `也可写为time=&quot;$(date +&quot;%Y%m%d$H&quot;)&quot;， 其中`符号是TAB键上面的符号，不是ENTER左边的&#x27;符号，还有date后要有一个空格。</span><br><span class="line">mysql_bin_dir：mysql的bin路径；</span><br><span class="line">database：数据库名；</span><br><span class="line">mysql_username：数据库用户名；</span><br><span class="line">mysql_password：用户密码；</span><br><span class="line">-type f 表示查找普通类型的文件，f表示普通文件。</span><br><span class="line">-mtime +5 按照文件的更改时间来查找文件，+5表示文件更改时间距现在5天以前；如果是 -mmin +5 表示文件更改时间距现在5分钟以前。</span><br><span class="line">-exec rm &#123;&#125; \; 表示执行一段shell命令，exec选项后面跟随着所要执行的命令或脚本，然后是一对儿&#123; &#125;，一个空格和一个\，最后是一个分号。</span><br><span class="line">/dev/null 2&gt;&amp;1 把标准出错重定向到标准输出，然后扔到/DEV/NULL下面去。通俗的说，就是把所有标准输出和标准出错都扔到垃圾桶里面；其中的&amp; 表示让该命令在后台执行。</span><br><span class="line">-t是不增加create table建表和drop table语句</span><br><span class="line">-c是在insert中增加具体的字段名。这样对目的表结构不同原表，情况下更有用.</span><br></pre></td></tr></table></figure>

<h4 id="3、为脚本添加执行权限"><a href="#3、为脚本添加执行权限" class="headerlink" title="3、为脚本添加执行权限"></a>3、为脚本添加执行权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/sbin/mysql_backup_script.sh</span><br></pre></td></tr></table></figure>

<h4 id="4、修改-etc-crontab-或-crontab-e"><a href="#4、修改-etc-crontab-或-crontab-e" class="headerlink" title="4、修改/etc/crontab 或  crontab -e"></a>4、修改/etc/crontab 或  crontab -e</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查有没安装crond,如果没有，先安装</span></span><br><span class="line">yum -y install vixie-cron</span><br><span class="line">yum -y install crontabs</span><br><span class="line"></span><br><span class="line">vim /etc/crontab</span><br><span class="line"><span class="comment"># 在最后一行中加入：</span></span><br><span class="line"><span class="comment"># 数据库备份，每天1点00分执行</span></span><br><span class="line">00 1 * * * root /usr/sbin/mysql_backup_script.sh  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：crontab配置文件格式如下：</span></span><br><span class="line"><span class="comment"># 分 时 日 月 周  命令</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Redhat方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redhat的crontab采用按时间调用4个目录（/etc/cron.hourly：每小时；</span><br><span class="line">/etc/cron.daily：每天；</span><br><span class="line">/etc/cron.weekly：每周；</span><br><span class="line">/etc/cron.monthly：每月）中脚本出来运行的方式。</span><br><span class="line">Redhat中只需要将刚才编辑的脚本复制到相应的目录即可。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5、重启crontab"><a href="#5、重启crontab" class="headerlink" title="5、重启crontab"></a>5、重启crontab</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/rc.d/init.d/crond restart </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">service cron restart</span><br></pre></td></tr></table></figure>

<h4 id="6、恢复数据备份文件"><a href="#6、恢复数据备份文件" class="headerlink" title="6、恢复数据备份文件"></a>6、恢复数据备份文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 非压缩备份文件恢复</span><br><span class="line">mysql -u root -p database&lt; name_20190909.sql</span><br><span class="line"># 从压缩文件直接恢复</span><br><span class="line">gzip &lt; name_20190909.sql.gz | mysql -u root -p database</span><br><span class="line"># 或</span><br><span class="line">zcat name_20190909.sql.gz | mysql -u root -p</span><br></pre></td></tr></table></figure>


<h3 id="脚本实例-mysql-backup-script-sh"><a href="#脚本实例-mysql-backup-script-sh" class="headerlink" title="脚本实例(mysql_backup_script.sh)"></a>脚本实例(mysql_backup_script.sh)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Name: mysql_backup_script.sh</span></span><br><span class="line"><span class="comment"># This is a ShellScript For Auto Database Backup and Delete old Backup</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">mysql_username=<span class="string">&#x27;admin&#x27;</span></span><br><span class="line">mysql_password=<span class="string">&#x27;1q2w3e&#x27;</span></span><br><span class="line">database=<span class="string">&#x27;gongdiyun&#x27;</span></span><br><span class="line">mysql_host=<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"></span><br><span class="line">backup_server=<span class="string">&#x27;47.96.158.93&#x27;</span></span><br><span class="line">backup_target_dir=<span class="string">&#x27;/home/mysql/backup&#x27;</span></span><br><span class="line"></span><br><span class="line">tables=<span class="string">&#x27;gd_company gd_project_info gd_monitor_spot gd_device env_device gd_tc_device gd_tip_device&#x27;</span></span><br><span class="line"></span><br><span class="line">keep_days=10</span><br><span class="line"></span><br><span class="line">backup_dir=/backup/mysql_godiyun</span><br><span class="line">mysql_bin_dir=/usr/bin</span><br><span class="line">time=` <span class="built_in">date</span> +%Y%m%d%H `</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$backup_dir</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$backup_dir</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 备份数据库</span></span><br><span class="line"><span class="variable">$mysql_bin_dir</span>/mysqldump -c -h<span class="variable">$mysql_host</span> -u<span class="variable">$mysql_username</span> -p<span class="variable">$mysql_password</span> <span class="variable">$database</span> | gzip &gt; <span class="variable">$backup_dir</span>/<span class="variable">$database</span><span class="string">&#x27;_&#x27;</span><span class="variable">$time</span>.sql.gz</span><br><span class="line"><span class="comment"># 仅表结构</span></span><br><span class="line"><span class="comment"># $mysql_bin_dir/mysqldump -c -h$mysql_host -u$mysql_username -p$mysql_password --opt -d $database | gzip &gt; $backupdir/$database&#x27;_structure_&#x27;$time.sql.gz</span></span><br><span class="line"><span class="comment"># 仅表数据</span></span><br><span class="line"><span class="comment"># $mysql_bin_dir/mysqldump -c -h$mysql_host -u$mysql_username -p$mysql_password -t $database | gzip &gt; $backupdir/$database&#x27;_data_&#x27;$time.sql.gz</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除超过keep_days天的备份</span></span><br><span class="line">find <span class="variable">$backup_dir</span> -name <span class="string">&quot;<span class="variable">$database</span>*.sql.gz&quot;</span> -<span class="built_in">type</span> f -mtime +<span class="variable">$keep_days</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">&quot;<span class="variable">$backup_dir</span>/major&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$backup_dir</span>/major&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份关键数据表</span></span><br><span class="line"><span class="variable">$mysql_bin_dir</span>/mysqldump -c -h<span class="variable">$mysql_host</span> -u<span class="variable">$mysql_username</span> -p<span class="variable">$mysql_password</span> <span class="variable">$database</span> <span class="variable">$tables</span> | gzip &gt; <span class="variable">$backup_dir</span>/major/<span class="variable">$database</span><span class="string">&#x27;_major_&#x27;</span><span class="variable">$time</span>.sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除超过keep_days天的备份</span></span><br><span class="line">find <span class="variable">$backup_dir</span>/major -name <span class="string">&quot;<span class="variable">$database</span>*.sql.gz&quot;</span> -<span class="built_in">type</span> f -mtime +<span class="variable">$keep_days</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送备份文件到远程服务器</span></span><br><span class="line"><span class="comment"># 1. 配置免密登录</span></span><br><span class="line"><span class="comment">#    ① 生产SSH KEY：ssh-keygen -t rsa</span></span><br><span class="line"><span class="comment"># 	 ② ssh-copy-id生产：ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;romte_ip&gt;</span></span><br><span class="line"><span class="comment"># 2. 使用scp命令</span></span><br><span class="line"></span><br><span class="line">scp -r <span class="variable">$backup_dir</span>/<span class="variable">$database</span><span class="string">&#x27;_&#x27;</span><span class="variable">$time</span>.sql.gz <span class="variable">$backup_dir</span>/major/<span class="variable">$database</span><span class="string">&#x27;_major_&#x27;</span><span class="variable">$time</span>.sql.gz <span class="variable">$backup_server</span>:<span class="variable">$backup_target_dir</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>诡异的Linux指令</title>
    <url>/2020/10/01/%E8%AF%A1%E5%BC%82%E7%9A%84Linux%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="诡异的Linux指令"><a href="#诡异的Linux指令" class="headerlink" title="诡异的Linux指令"></a>诡异的Linux指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. rev</span></span><br><span class="line"><span class="comment"># 创建一个文件，在文件里面输入几个单词，rev命令会将你写的反转输出到控制台。</span></span><br><span class="line">rev &lt;file name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. fortune</span></span><br><span class="line"><span class="comment"># fortune命令会随机显示一些句子</span></span><br><span class="line">sudo apt-get install fortune</span><br><span class="line"><span class="comment"># 利用fortune命令的-s选项，他会限制一个句子的输出长度。</span></span><br><span class="line">fortune -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. yes</span></span><br><span class="line"><span class="comment"># 这个命令会不停打印字符串，直到用户把这进程给结束掉.</span></span><br><span class="line"><span class="built_in">yes</span> &lt;string&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. figlet</span></span><br><span class="line"><span class="comment"># 用apt安装，安装之后，在/usr/share/figlet可以看到一些ASCII字体文件。</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/figlet</span><br><span class="line">figlet -f &lt;font&gt; &lt;string&gt; </span><br><span class="line">figlet -f big.flf hello</span><br><span class="line">figlet -f block.flf hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.bb</span></span><br><span class="line">apt install bb </span><br><span class="line">bb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. sl</span></span><br><span class="line"><span class="comment"># sl是一个命令，如果打sl的话，就会看到一个移动的火车头</span></span><br><span class="line">apt-get install sl</span><br><span class="line">sl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. cowsay</span></span><br><span class="line"><span class="comment"># 一个很常见的命令，它会用ASCII显示你想说的话。</span></span><br><span class="line">apt install cowsay</span><br><span class="line">cowsay &lt;string&gt;</span><br><span class="line"><span class="comment"># 或者，你可以用其他的角色来取代默认角色来说这句话，这些角色都存储在/usr/share/cowsay/cows目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/cowsay/cows</span><br><span class="line">cowsay -f ghostbusters.cow hello</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">cowsay -f bud-frogs.cow Hello</span><br><span class="line">cowsay -f tux <span class="string">&quot;坑爹呀&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. toilet</span></span><br><span class="line"><span class="comment"># 将字符串以彩色的ASCII字符串形式输出到终端</span></span><br><span class="line">apt install toilet</span><br><span class="line">toilet --gay unixmen </span><br><span class="line">toilet -F border -F gay unixmen</span><br><span class="line">toilet -f mono12 -F metal unixmen</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 9. aafire</span></span><br><span class="line"><span class="comment"># 能让终端燃起来。</span></span><br><span class="line">apt install libaa-bin</span><br><span class="line">aafire</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10. cmatrix</span></span><br><span class="line">sudo apt install cmatrix</span><br><span class="line">cmatrix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11. oneko</span></span><br><span class="line">sudo apt-get install oneko</span><br><span class="line">oneko</span><br><span class="line">ctrl + c 结束</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12. xeyes</span></span><br><span class="line">sudo apt-get install x11-apps</span><br><span class="line">xeyes</span><br><span class="line"></span><br><span class="line">13. asciiview</span><br><span class="line"><span class="comment"># 图片转字符串</span></span><br><span class="line">sudo apt install aview imagemagick</span><br><span class="line">asciiview image.png</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>请求工具类(RequestUtil.java)</title>
    <url>/2020/06/02/%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E7%B1%BB(RequestUtil.java)/</url>
    <content><![CDATA[<h3 id="请求工具类"><a href="#请求工具类" class="headerlink" title="请求工具类"></a>请求工具类</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.mhiywf.common.utils;</span><br><span class="line"> </span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import javax.servlet.http.Cookie;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">* 描述: Request 工具类</span><br><span class="line">* @date 2014-10-13</span><br><span class="line">*/</span><br><span class="line">public class MlRequestUtil &#123;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 获取 request 中所有参数</span><br><span class="line">     * @date 2014-10-14</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">    public static Map&lt;String, String&gt; getAllParam(HttpServletRequest request) &#123;</span><br><span class="line">        Map&lt;String,String&gt; tempMap = new HashMap&lt;String,String&gt;();</span><br><span class="line">        Enumeration enuParam = request.getParameterNames(); </span><br><span class="line">        while(enuParam.hasMoreElements())&#123; </span><br><span class="line">            String paramName = (String) enuParam.nextElement();</span><br><span class="line">            String [] arrParamValue = request.getParameterValues(paramName);</span><br><span class="line">            String paramValue = MlStringUtil.arrayToString(arrParamValue, &quot;,&quot;);</span><br><span class="line">            // 过滤掉空值</span><br><span class="line">            if(paramValue!=null &amp;&amp; paramValue.length()&gt;0)&#123;</span><br><span class="line">                tempMap.put(paramName, paramValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tempMap;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 过滤  request 中特殊字符</span><br><span class="line">     * @date 2014-5-16</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">    public static HttpServletRequest filterSpecialCharacter(HttpServletRequest request)</span><br><span class="line">    &#123;</span><br><span class="line">        Enumeration enuParam = request.getParameterNames();</span><br><span class="line">        // 循环读取参数</span><br><span class="line">        while(enuParam.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            String paramValue = &quot;&quot;;</span><br><span class="line">            String paramName = (String) enuParam.nextElement();</span><br><span class="line">            String[] arrParamValue = request.getParameterValues(paramName);</span><br><span class="line">            for (String tempValue : arrParamValue)&#123;</span><br><span class="line">                if(paramValue.equals(&quot;&quot;))&#123;</span><br><span class="line">                    paramValue = MlStringUtil.strToHtml(tempValue) ;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    paramValue = paramValue + &quot;, &quot; + MlStringUtil.strToHtml(tempValue) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            request.setAttribute(MlStringUtil.strToHtml(paramName), paramValue);</span><br><span class="line">        &#125;</span><br><span class="line">        return request;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 通过 request 对象获取IP地址</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getIpAddress(HttpServletRequest request)</span><br><span class="line">    &#123;</span><br><span class="line">        if(request!=null)&#123;</span><br><span class="line">            String ipAddress = request.getHeader(&quot;X-Forwarded-For&quot;);</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;Proxy-Client-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getHeader(&quot;X-Real-IP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(ipAddress == null || ipAddress.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ipAddress)) &#123;</span><br><span class="line">                ipAddress = request.getRemoteAddr();</span><br><span class="line">            &#125;</span><br><span class="line">            return ipAddress;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 从 request 中获取 cookie 值</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param request</span><br><span class="line">     * @param cookieName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Cookie getCookieValue(HttpServletRequest request,String cookieName) &#123;</span><br><span class="line">        Cookie[] cookie = request.getCookies();</span><br><span class="line">        for (int i = 0; cookie != null &amp;&amp; i &lt; cookie.length; i++) &#123;</span><br><span class="line">            if (cookie[i].getName().equals(cookieName))</span><br><span class="line">                return cookie[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: 从 request 中获取字符串信息</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param request</span><br><span class="line">     * @param encode</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getStringFromStream(HttpServletRequest request,String encode) &#123;</span><br><span class="line">        String requestXML = &quot;&quot;;</span><br><span class="line">        try&#123;</span><br><span class="line">            InputStream inputStream = request.getInputStream();</span><br><span class="line">            if(inputStream!=null)&#123;</span><br><span class="line">                InputStreamReader inStreamRead = new InputStreamReader(inputStream,encode);</span><br><span class="line">                BufferedReader buffRead = new BufferedReader(inStreamRead);</span><br><span class="line">                String line;</span><br><span class="line">                while((line = buffRead.readLine()) != null)&#123;</span><br><span class="line">                    requestXML += line;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch(Exception er)&#123;</span><br><span class="line">            er.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return requestXML;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: POST 流提交,解析返回的ZLib压缩的二进制流</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param strUrl  请求地址</span><br><span class="line">     * @param content 请求内容</span><br><span class="line">     * @param encode  编码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postStreamForZLib(String strUrl, String content, String encode)</span><br><span class="line">    &#123;</span><br><span class="line">        HttpURLConnection urlCon = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            URL url = new URL(strUrl);</span><br><span class="line">            urlCon = (HttpURLConnection) url.openConnection();</span><br><span class="line"> </span><br><span class="line">            urlCon.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            urlCon.setRequestProperty(&quot;content-type&quot;, &quot;text/html&quot;);</span><br><span class="line">            urlCon.setDoOutput(true);</span><br><span class="line"> </span><br><span class="line">            urlCon.getOutputStream().write(content.getBytes(encode));</span><br><span class="line">            urlCon.getOutputStream().flush();</span><br><span class="line">            urlCon.getOutputStream().close();</span><br><span class="line"> </span><br><span class="line">            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();</span><br><span class="line">            int read = -1;</span><br><span class="line">            while((read = urlCon.getInputStream().read())!=-1)&#123;</span><br><span class="line">                byteStream.write(read);</span><br><span class="line">            &#125;</span><br><span class="line">            byte bXml [] = byteStream.toByteArray();</span><br><span class="line">            String respXML = new String(MlStringUtil.ZLibUnCompress(bXml));</span><br><span class="line">            return respXML;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            if (urlCon != null)&#123;</span><br><span class="line">                urlCon.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: POST 参数提交</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param strUrl  请求地址</span><br><span class="line">     * @param requestMap 请求参数</span><br><span class="line">     * @param encode  编码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postParam(String strUrl, Map&lt;String,String&gt; requestMap,String encode)&#123;</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        BufferedReader in = null;</span><br><span class="line">        StringBuffer result = new StringBuffer();</span><br><span class="line">        try&#123;</span><br><span class="line">            URL url = new URL(strUrl);</span><br><span class="line">            HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();</span><br><span class="line">            // 设置通用的请求属性</span><br><span class="line">            urlCon.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            urlCon.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class="line">            urlCon.setDoOutput(true);</span><br><span class="line">            out = new PrintWriter(urlCon.getOutputStream());</span><br><span class="line">            out.print(MlStringUtil.mapToUrlParam(requestMap,encode));</span><br><span class="line">            out.flush();</span><br><span class="line"> </span><br><span class="line">            // 定义BufferedReader输入流来读取URL的响应</span><br><span class="line">            in = new BufferedReader(new InputStreamReader(urlCon.getInputStream(),encode));</span><br><span class="line">            String line = &quot;&quot;;</span><br><span class="line">            while ((line = in.readLine()) != null)&#123;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                if (out != null)&#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                    out = null;</span><br><span class="line">                &#125;</span><br><span class="line">                if (in != null)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                    in = null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception ex)&#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 描述: POST 流提交</span><br><span class="line">     * @date 2014-10-13</span><br><span class="line">     * @param strUrl  请求地址</span><br><span class="line">     * @param content 请求内容</span><br><span class="line">     * @param encode  编码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postStream(String strUrl, String content, String encode)</span><br><span class="line">    &#123;</span><br><span class="line">        HttpURLConnection urlCon = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            URL url = new URL(strUrl);</span><br><span class="line">            urlCon = (HttpURLConnection) url.openConnection();</span><br><span class="line"> </span><br><span class="line">            urlCon.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">            urlCon.setRequestProperty(&quot;content-type&quot;, &quot;text/html&quot;);</span><br><span class="line">            urlCon.setDoOutput(true);</span><br><span class="line"> </span><br><span class="line">            urlCon.getOutputStream().write(content.getBytes(encode));</span><br><span class="line">            urlCon.getOutputStream().flush();</span><br><span class="line">            urlCon.getOutputStream().close();</span><br><span class="line"> </span><br><span class="line">            BufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream(), encode));</span><br><span class="line"> </span><br><span class="line">            String line;</span><br><span class="line">            String respXML = &quot;&quot;;</span><br><span class="line">            while ((line = in.readLine()) != null)&#123;</span><br><span class="line">                respXML += line;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line"> </span><br><span class="line">            return respXML;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            if (urlCon != null)&#123;</span><br><span class="line">                urlCon.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>读取properties文件</title>
    <url>/2018/01/01/%E8%AF%BB%E5%8F%96properties%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="spring中配置"><a href="#spring中配置" class="headerlink" title="spring中配置"></a>spring中配置</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 读取配置文件 --&gt;</span><br><span class="line">    &lt;bean id=&quot;propertyConfigurer&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;classpath:spring.properties&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt; </span><br></pre></td></tr></table></figure>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;context:property-placeholder location=&quot;classpath:mysql.properties&quot; /&gt;  </span><br></pre></td></tr></table></figure>


<h3 id="网上常见的获取properties文件的方法："><a href="#网上常见的获取properties文件的方法：" class="headerlink" title="网上常见的获取properties文件的方法："></a>网上常见的获取properties文件的方法：</h3><p>1、使用java.util.Properties类的load()方法<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String filePath = &quot;E:/workspace/ssmdemo/src/main/resources/jdbc.properties&quot;;</span><br><span class="line">InputStream in = new BufferedInputStream(new FileInputStream(filePath));  </span><br><span class="line">Properties p = new Properties();  </span><br><span class="line">p.load(in);</span><br><span class="line">String url = (String) p.get(&quot;jdbc.url&quot;);  </span><br></pre></td></tr></table></figure>

<p>2、使用java.util.ResourceBundle类的getBundle()方法<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ResourceBundle bundle = ResourceBundle.getBundle(&quot;jdbc&quot;);</span><br><span class="line">String url = bundle.getString(&quot;jdbc.url&quot;);  </span><br><span class="line">或者</span><br><span class="line">ResourceBundle bundle = ResourceBundle.getBundle(&quot;jdbc&quot;,Locale.getDefault());</span><br><span class="line">String url = bundle.getString(&quot;jdbc.url&quot;);  </span><br></pre></td></tr></table></figure>
<p>注：用ResourceBundle读取.properties文件可避免路径问题，fileName为process为文件名，切记不要加 .properties</p>
<p>3、使用java.util.PropertyResourceBundle类的构造函数<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String filePath = &quot;E:/workspace/ssmdemo/src/main/resources/jdbc.properties&quot;;</span><br><span class="line">InputStream in = new BufferedInputStream(new FileInputStream(filePath));  </span><br><span class="line">ResourceBundle bundle = new PropertyResourceBundle(in);</span><br><span class="line">String url = bundle.getString(&quot;jdbc.url&quot;); </span><br></pre></td></tr></table></figure>
<p>4、使用class变量的getResourceAsStream()方法<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InputStream in = 类名.class.getResourceAsStream(filePath);  </span><br><span class="line">Properties p = new Properties();  </span><br><span class="line">p.load(in);  </span><br></pre></td></tr></table></figure>

<p>5、使用class.getClassLoader()所得到的java.lang.ClassLoader的getResourceAsStream()方法<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InputStream in = 类名.class.getClassLoader().getResourceAsStream(filePath);  </span><br><span class="line">Properties p = new Properties();  </span><br><span class="line">p.load(in);  </span><br></pre></td></tr></table></figure>

<p>6、使用java.lang.ClassLoader类的getSystemResourceAsStream()静态方法<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InputStream in = ClassLoader.getSystemResourceAsStream(filePath);  </span><br><span class="line">Properties p = new Properties();  </span><br><span class="line">p.load(in);  </span><br></pre></td></tr></table></figure>

<p>7、Servlet中可以使用javax.servlet.ServletContext的getResourceAsStream()方法<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InputStream in = context.getResourceAsStream(filePath);  </span><br><span class="line">Properties p = new Properties();  </span><br><span class="line">p.load(in); </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级BI工具superset安装使用 Docker</title>
    <url>/2020/01/01/%E8%BD%BB%E9%87%8F%E7%BA%A7BI%E5%B7%A5%E5%85%B7superset%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%20Docker/</url>
    <content><![CDATA[<h3 id="Superset-Docker安装"><a href="#Superset-Docker安装" class="headerlink" title="Superset Docker安装"></a>Superset Docker安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择superset镜像</span></span><br><span class="line">docker search superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择STARS最高的amancevice/superset 并拉取镜像</span></span><br><span class="line">docker pull amancevice/superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动superset容器</span></span><br><span class="line">docker run --name superset --network host -d -p 8088:8088 -v /data/superset:/home/superset amancevice/superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="comment"># 设置用户名和密码</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; fabmanager create-admin --app superset</span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; superset db upgrade</span><br><span class="line"><span class="comment"># 下载examples,可略过</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; superset load_examples</span><br><span class="line"><span class="comment"># superset初始化</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; superset init</span><br><span class="line"><span class="comment"># 开启superset服务</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; superset runserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container-id&gt; /bin/bash</span><br><span class="line"><span class="comment"># 设置用户名和密码</span></span><br><span class="line">fabmanager create-admin --app superset</span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">superset db upgrade</span><br><span class="line"><span class="comment"># 下载examples</span></span><br><span class="line">superset load_examples</span><br><span class="line"><span class="comment"># superset初始化</span></span><br><span class="line">superset init</span><br><span class="line"><span class="comment"># 开启superset服务</span></span><br><span class="line">superset runserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问superset</span></span><br><span class="line">http://&lt;server-ip&gt;:8088</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Superset-源码安装"><a href="#Superset-源码安装" class="headerlink" title="Superset 源码安装"></a>Superset 源码安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/apache/incubator-superset/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建docker镜像</span></span><br><span class="line"><span class="built_in">cd</span> incubator-superset/contrib/docker</span><br><span class="line">docker-compose -f docker-compose-prd.yml -p superset build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line"><span class="comment"># prefix with SUPERSET_LOAD_EXAMPLES=yes to load examples:</span></span><br><span class="line">docker-compose -f docker-compose-prd.yml -p superset run -e SUPERSET_LOAD_EXAMPLES=<span class="built_in">yes</span> --<span class="built_in">rm</span> superset ./docker-init.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动superset</span></span><br><span class="line">docker-compose -f docker-compose-prd.yml -p superset up -d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="docker-compose示例-docker-compose-prd-yml"><a href="#docker-compose示例-docker-compose-prd-yml" class="headerlink" title="docker-compose示例(docker-compose-prd.yml)"></a>docker-compose示例(docker-compose-prd.yml)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3.0-alpine</span><br><span class="line">    restart: always</span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - 6379:6379</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/superset/redis:/data</span><br><span class="line"></span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:10-alpine</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_DB: superset</span><br><span class="line">      POSTGRES_PASSWORD: superset</span><br><span class="line">      POSTGRES_USER: superset</span><br><span class="line"><span class="comment">#    ports:</span></span><br><span class="line"><span class="comment">#      - 5432:5432</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/superset/postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  superset:</span><br><span class="line">    build:</span><br><span class="line">      context: ../../</span><br><span class="line">      dockerfile: contrib/docker/Dockerfile-prd</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_DB: superset</span><br><span class="line">      POSTGRES_USER: superset</span><br><span class="line">      POSTGRES_PASSWORD: superset</span><br><span class="line">      POSTGRES_HOST: postgres</span><br><span class="line">      POSTGRES_PORT: 5432</span><br><span class="line">      REDIS_HOST: redis</span><br><span class="line">      REDIS_PORT: 6379</span><br><span class="line">      SUPERSET_ENV: production</span><br><span class="line">    ports:</span><br><span class="line">      - 8088:8088</span><br><span class="line">    depends_on:</span><br><span class="line">      - postgres</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  postgres:</span><br><span class="line">    external: <span class="literal">false</span></span><br><span class="line">  redis:</span><br><span class="line">    external: <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile-Dockerfile-prd"><a href="#Dockerfile-Dockerfile-prd" class="headerlink" title="Dockerfile(Dockerfile-prd)"></a>Dockerfile(Dockerfile-prd)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM python:3.6</span><br><span class="line"></span><br><span class="line">RUN useradd --user-group --create-home --no-log-init --shell /bin/bash superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure environment</span></span><br><span class="line">ENV LANG=C.UTF-8 \</span><br><span class="line">    LC_ALL=C.UTF-8</span><br><span class="line"></span><br><span class="line">RUN apt-get update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install dependencies to fix `curl https support error` and `elaying package configuration warning`</span></span><br><span class="line">RUN apt-get install -y apt-transport-https apt-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install superset dependencies</span></span><br><span class="line"><span class="comment"># https://superset.incubator.apache.org/installation.html#os-dependencies</span></span><br><span class="line">RUN apt-get install -y build-essential libssl-dev \</span><br><span class="line">    libffi-dev python3-dev libsasl2-dev libldap2-dev libxi-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install extra useful tool for development</span></span><br><span class="line">RUN apt-get install -y vim less postgresql-client redis-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install nodejs for custom build</span></span><br><span class="line"><span class="comment"># https://superset.incubator.apache.org/installation.html#making-your-own-build</span></span><br><span class="line"><span class="comment"># https://nodejs.org/en/download/package-manager/</span></span><br><span class="line">RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line">WORKDIR /home/superset</span><br><span class="line"></span><br><span class="line">COPY requirements.txt .</span><br><span class="line">COPY requirements-dev.txt .</span><br><span class="line"></span><br><span class="line">RUN pip install --upgrade setuptools pip \</span><br><span class="line">    &amp;&amp; pip install -i https://pypi.douban.com/simple -r requirements.txt -r requirements-dev.txt \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf /root/.cache/pip</span><br><span class="line"></span><br><span class="line"><span class="comment">#COPY --chown=superset:superset superset superset</span></span><br><span class="line">COPY --<span class="built_in">chown</span>=superset:superset . /home/superset</span><br><span class="line">RUN <span class="built_in">cd</span> /home/superset &amp;&amp; <span class="built_in">cp</span> contrib/docker/superset_config.py superset/superset_config.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV PATH=/home/superset/superset/bin:<span class="variable">$PATH</span> \</span><br><span class="line">    PYTHONPATH=/home/superset/superset/:<span class="variable">$PYTHONPATH</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">cd</span> superset/assets \</span><br><span class="line">    &amp;&amp; npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org \</span><br><span class="line">    &amp;&amp; npm ci \</span><br><span class="line">    &amp;&amp; npm run build \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf node_modules</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">cd</span> /home/superset/superset &amp;&amp; <span class="built_in">mkdir</span> -p static &amp;&amp; <span class="built_in">cd</span> static &amp;&amp; <span class="built_in">rm</span> -rf assets \</span><br><span class="line">    &amp;&amp; <span class="built_in">cp</span> -rf ../assets ../static/assets</span><br><span class="line"></span><br><span class="line">COPY contrib/docker/docker-init.sh .</span><br><span class="line">COPY contrib/docker/docker-entrypoint.sh /entrypoint.sh</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">chown</span> -R superset:superset /home/superset</span><br><span class="line">RUN <span class="built_in">chmod</span> -R +x /home/superset/superset/bin</span><br><span class="line">RUN <span class="built_in">chmod</span> -R +x docker-init.sh</span><br><span class="line">RUN <span class="built_in">chmod</span> -R +x /entrypoint.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER superset</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/entrypoint.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line">HEALTHCHECK CMD [<span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:8088/health&quot;</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 8088</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BI</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>BI</tag>
        <tag>Superset</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器与拦截器的区别</title>
    <url>/2018/01/01/%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%8E%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="java-web-过滤器跟拦截器的区别和使用"><a href="#java-web-过滤器跟拦截器的区别和使用" class="headerlink" title="java web 过滤器跟拦截器的区别和使用"></a>java web 过滤器跟拦截器的区别和使用</h3><h4 id="1、首先要明确什么是拦截器、什么是过滤器"><a href="#1、首先要明确什么是拦截器、什么是过滤器" class="headerlink" title="1、首先要明确什么是拦截器、什么是过滤器"></a>1、首先要明确什么是拦截器、什么是过滤器</h4><ol>
<li><p>什么是拦截器：<br>拦截器，在AOP（Aspect-Oriented Programming）中用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。拦截是AOP的一种实现策略。<br>在Webwork的中文文档的解释为——拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行。同时也是提供了一种可以提取action中可重用的部分的方式。<br>谈到拦截器，还有一个词大家应该知道——拦截器链（Interceptor Chain，在Struts 2中称为拦截器栈 Interceptor Stack）。拦截器链就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。 </p>
</li>
<li><p>拦截器的实现原理：<br>大部分时候，拦截器方法都是通过代理的方式来调用的。Struts 2的拦截器实现相对简单。当请求到达Struts 2的ServletDispatcher时，Struts 2会查找配置文件，并根据其配置实例化相对的拦截器对象，然后串成一个列表（list），最后一个一个地调用列表中的拦截器。</p>
</li>
<li><p>什么是过滤器<br>过滤器是一个程序，它先于与之相关的servlet或JSP页面运行在服务器上。过滤器可附加到一个或多个servlet或JSP页面上，并且可以检查进入这些资源的请求信息。在这之后，过滤器可以作如下的选择：<br>①以常规的方式调用资源（即，调用servlet或JSP页面）。<br>②利用修改过的请求信息调用资源。<br>③调用资源，但在发送响应到客户机前对其进行修改。<br>④阻止该资源调用，代之以转到其他的资源，返回一个特定的状态代码或生成替换输出。</p>
</li>
<li><p>Servlet过滤器的基本原理<br>在Servlet作为过滤器使用时，它可以对客户的请求进行处理。处理完成后，它会交给下一个过滤器处理，这样，客户的请求在过滤链里逐个处理，直到请求发送到目标为止。例如，某网站里有提交”修改的注册信息”的网页，当用户填写完修改信息并提交后，服务器在进行处理时需要做两项工作：判断客户端的会话是否有效；对提交的数据进行统一编码。这两项工作可以在由两个过滤器组成的过滤链里进行处理。当过滤器处理成功后，把提交的数据发送到最终目标；如果过滤器处理不成功，将把视图派发到指定的错误页面。</p>
<h4 id="2、拦截器与过滤器的区别-："><a href="#2、拦截器与过滤器的区别-：" class="headerlink" title="2、拦截器与过滤器的区别 ："></a>2、拦截器与过滤器的区别 ：</h4></li>
<li><p>拦截器是基于java的反射机制的，而过滤器是基于函数回调。</p>
</li>
<li><p>拦截器不依赖与servlet容器，过滤器依赖与servlet容器。 </p>
</li>
<li><p>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。</p>
</li>
<li><p>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。 </p>
</li>
<li><p>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次</p>
</li>
</ol>
<h3 id="拦截器的代码实现-以struts2为例"><a href="#拦截器的代码实现-以struts2为例" class="headerlink" title="拦截器的代码实现(以struts2为例)"></a>拦截器的代码实现(以struts2为例)</h3><h4 id="1、在xml文件中定义拦截器"><a href="#1、在xml文件中定义拦截器" class="headerlink" title="1、在xml文件中定义拦截器"></a>1、在xml文件中定义拦截器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;interceptors&gt;</span><br><span class="line"> &lt;interceptor name=&quot;filterIPInterceptor&quot; class=&quot;com.xxxx.web.FilterIPActionInterceptor&quot; /&gt;</span><br><span class="line">&lt;interceptor-stack name=&quot;filterIPStack&quot;&gt;</span><br><span class="line">&lt;interceptor-ref name=&quot;defaultStack&quot; /&gt;</span><br><span class="line">                              </span><br><span class="line">&lt;interceptor-ref name=&quot;filterIPInterceptor&quot; /&gt;</span><br><span class="line">&lt;/interceptor-stack&gt;</span><br><span class="line">&lt;/interceptors&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2、编写自定义拦截器"><a href="#2、编写自定义拦截器" class="headerlink" title="2、编写自定义拦截器"></a>2、编写自定义拦截器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FilterIPActionInterceptor extends AbstractInterceptor</span><br><span class="line">&#123;</span><br><span class="line">    /** 日志控制. */</span><br><span class="line">    private final Log log = LogFactory.getLog(getClass());</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * @see com.opensymphony.xwork2.interceptor.AbstractInterceptor#intercept(com.opensymphony.xwork2.ActionInvocation)</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public String intercept(ActionInvocation invocation) throws Exception</span><br><span class="line">    &#123;</span><br><span class="line">        String result = null;</span><br><span class="line">        // 获得当前方法名.</span><br><span class="line">        String methodName = invocation.getInvocationContext().getName();</span><br><span class="line">        String currIp = null;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            if (invocation.getAction() instanceof PortletAction)</span><br><span class="line">            &#123;</span><br><span class="line">                PortletAction action = (PortletAction) invocation.getAction();</span><br><span class="line">                currIp = action.getRequest().getRemoteAddr();</span><br><span class="line">            &#125;</span><br><span class="line">            String ip = ApplicationResource.getHotValue(&quot;ALLOW_CACHE_IP&quot;);</span><br><span class="line"> </span><br><span class="line">            if (StringUtils.isBlank(ip) || StringUtils.isBlank(currIp))</span><br><span class="line">            &#123;</span><br><span class="line">                log.error(&quot;允许刷新的IP不存在或当前请求的IP非法.&quot;);</span><br><span class="line">                throw new NoAllowIPException();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                String[] ips = ip.split(&quot;,&quot;);</span><br><span class="line">                boolean errorIp = true;</span><br><span class="line">                for (String s : ips)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (s.equals(currIp))</span><br><span class="line">                        errorIp = false;</span><br><span class="line">                &#125;</span><br><span class="line">                // 判断IP</span><br><span class="line">                if (errorIp)</span><br><span class="line">                    throw new NoAllowIPException();</span><br><span class="line">            &#125;</span><br><span class="line">            result = invocation.invoke();//调用被拦截的方法</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            log.error(&quot;异常类名:&quot; + invocation.getAction().getClass());</span><br><span class="line">            log.error(&quot;异常方法:&quot; + methodName, e);</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、编写过滤器"><a href="#3、编写过滤器" class="headerlink" title="3、编写过滤器"></a>3、编写过滤器</h4><p>1、在web.xml里面配置自定义的过滤器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;Redirect Filter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;com.xx.filter.RedirectFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"> </span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;Redirect Filter&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/xx/xx/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>2、编写自定义的过滤器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RedirectFilter implements Filter &#123;</span><br><span class="line">       public void doFilter(ServletRequest request, ServletResponse response,</span><br><span class="line">              FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">    // 获取URL</span><br><span class="line">   Long startTime = null;</span><br><span class="line">        if (log.isDebugEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            startTime = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">              HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">                          String url = httpRequest.getRequestURL().toString();</span><br><span class="line">                      if (url == null || url.trim().length() == 0) &#123;</span><br><span class="line">                                    return;</span><br><span class="line">                                                   &#125;</span><br><span class="line">                     if (url.indexOf(luceneCreateMapping) != -1</span><br><span class="line">                                  || url.indexOf(luceneSearchMapping) != -1) &#123;</span><br><span class="line">                               doFilterForxxx(request, response, url);</span><br><span class="line">                               &#125; else &#123;</span><br><span class="line">                                     doxxxx(request, response, url);</span><br><span class="line">                                    &#125;</span><br><span class="line">         if (log.isDebugEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            long endTime = System.currentTimeMillis();</span><br><span class="line">            Thread currentThread = Thread.currentThread();</span><br><span class="line">            String threadName = currentThread.getName();</span><br><span class="line">            log.debug(&quot;[&quot; + threadName + &quot;]&quot; + &quot;&lt; &quot;</span><br><span class="line">                    + this.getClass().getName() + &quot; &quot; + url + &quot; &quot;</span><br><span class="line">                    + (endTime - startTime) + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">// 激活下一个Filter</span><br><span class="line"> filterChain.doFilter(request, response);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>运维宝安装脚本</title>
    <url>/2020/10/01/%E8%BF%90%E7%BB%B4%E5%AE%9D%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="运维宝安装脚本"><a href="#运维宝安装脚本" class="headerlink" title="运维宝安装脚本"></a>运维宝安装脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########Global Parameters####</span></span><br><span class="line">hostname=<span class="string">&#x27;detedt.ywb72&#x27;</span></span><br><span class="line">serverip=<span class="string">&#x27;192.168.137.132&#x27;</span></span><br><span class="line">emailaddr=<span class="string">&#x27;alert@detedt.com&#x27;</span></span><br><span class="line">emailpwd=<span class="string">&#x27;1qaz2Wsx&#x27;</span></span><br><span class="line">emailserverhost=<span class="string">&#x27;smtp.detedt.com&#x27;</span></span><br><span class="line">emailport=<span class="string">&#x27;25&#x27;</span></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yum install -y telnet net-snmp-devel gnutls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install LAMPP Start####</span></span><br><span class="line">useradd mysql</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line"></span><br><span class="line">tar -zxvf lampp-v1.1.6.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /opt/lampp/var</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/lampp</span><br><span class="line"></span><br><span class="line">./lampp startmysql</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/lampp/bin</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^EZ.SERVER\s*=.*#EZ.SERVER  = <span class="variable">$serverip</span>#g&quot;</span> /opt/lampp/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^EZDB.SERVER\s*=.*#EZDB.SERVER  = <span class="variable">$serverip</span>#g&quot;</span> /opt/lampp/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^EZ.SERVER.NAME\s*=.*#EZ.SERVER.NAME  = <span class="variable">$hostname</span>#g&quot;</span> /opt/lampp/antx.properties</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/lampp/</span><br><span class="line"></span><br><span class="line">./mconfig.sh</span><br><span class="line"></span><br><span class="line">./lampp start</span><br><span class="line"></span><br><span class="line"><span class="comment">########Install LAMPP End####</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install Zabbix Server Start####</span></span><br><span class="line"><span class="comment">#default password for user zabbix is zabbix123 ####  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /opt/lampp/lib/libmysqlclient.so.18 /usr/lib64/</span><br><span class="line"><span class="built_in">ln</span> -s /opt/lampp/lib/libiksemel.so.3 /usr/lib64/</span><br><span class="line"><span class="built_in">ln</span> -s /opt/lampp/lib/libiconv.so.2.5.1 /usr/lib64/libiconv.so.2</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /usr/lib64/libnetsnmp.so.31 /usr/lib64/libnetsnmp.so.20</span><br><span class="line"><span class="built_in">ln</span> -s /usr/lib64/libgnutls.so.28 /usr/lib64/libgnutls.so.26</span><br><span class="line"></span><br><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix -m zabbix -p jLG/Lm94BS5.s</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line">tar -xzvf zabbix-2.4.2-server-rc01.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -R 755 zabbix-2.4.2</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R zabbix.zabbix zabbix-2.4.2</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^DBHost\s*=.*#DBHost               = <span class="variable">$serverip</span>#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">sed -i <span class="string">&quot;s#^SourceIP\s*=.*#SourceIP             = <span class="variable">$serverip</span>#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">sed -i <span class="string">&quot;s#^serverMonitorIp\s*=.*#serverMonitorIp      = <span class="variable">$serverip</span>#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">sed -i <span class="string">&quot;s#^serverMonitorPort\s*=.*#serverMonitorPort    = 80#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/zabbix-2.4.2</span><br><span class="line"></span><br><span class="line">./sconfig.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">su zabbix -c /opt/zabbix-2.4.2/sbin/zabbix_server</span><br><span class="line"></span><br><span class="line"><span class="comment">########Install Zabbix Server End####</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install FKM Start####</span></span><br><span class="line"><span class="comment">#default password for user monitor is zabbix123 ####  </span></span><br><span class="line"></span><br><span class="line">groupadd monitor</span><br><span class="line"></span><br><span class="line">useradd -g monitor -m monitor -p jLG/Lm94BS5.s</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line"></span><br><span class="line">tar -xzvf fkm-v1.1.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -R 755 fkm</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R monitor.monitor fkm</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^host.ip\s*=.*#host.ip  = <span class="variable">$serverip</span>#g&quot;</span> /opt/fkm/antx.properties</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/fkm/</span><br><span class="line"></span><br><span class="line">./mconfig.sh</span><br><span class="line"></span><br><span class="line">./fkm.sh configchange</span><br><span class="line"></span><br><span class="line">su monitor -c <span class="string">&quot;/opt/fkm/fkm.sh startfkm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install FKM End####</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install Report Server Start####</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;install Report Server &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">unzip -o ywb-tomcat-6.0.35.zip</span><br><span class="line">sed -i <span class="string">&quot;s/zabbix_mysql_server_ip/<span class="variable">$serverip</span>/g&quot;</span> /opt/ywb-tomcat-6.0.35/webapps/WebReport/WEB-INF/resources/datasource.xml</span><br><span class="line">sed -i <span class="string">&quot;s/zabbix_mysql_user/root/g&quot;</span> /opt/ywb-tomcat-6.0.35/webapps/WebReport/WEB-INF/resources/datasource.xml</span><br><span class="line">sed -i <span class="string">&quot;s/zabbix_mysql_password/detedt/g&quot;</span> /opt/ywb-tomcat-6.0.35/webapps/WebReport/WEB-INF/resources/datasource.xml</span><br><span class="line">sed -i <span class="string">&quot;s/zabbix_mysql_encrypt_password/false/g&quot;</span> /opt/ywb-tomcat-6.0.35/webapps/WebReport/WEB-INF/resources/datasource.xml</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/ywb-tomcat-6.0.35/bin</span><br><span class="line"><span class="built_in">chmod</span> -R 755 ../bin</span><br><span class="line">./startup.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install Report Server End####</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########Install YWB Web Start####</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line"><span class="built_in">mv</span> /opt/monitorweb*.tar.gz /opt/monitorweb.tar.gz</span><br><span class="line"> </span><br><span class="line">tar -xzvf monitorweb.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -R 755 monitorweb</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R monitor.monitor monitorweb</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^alarm.fromEmailAddr\s*=.*#alarm.fromEmailAddr        = <span class="variable">$emailaddr</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^alarm.fromEmailPassword\s*=.*#alarm.fromEmailPassword    = <span class="variable">$emailpwd</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^alarm.fromEmailServerHost\s*=.*#alarm.fromEmailServerHost  = <span class="variable">$emailserverhost</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^alarm.fromEmailServerPort\s*=.*#alarm.fromEmailServerPort  = <span class="variable">$emailport</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^eaglewiz.jdbc.datasource.driverClassName\s*=.*#eaglewiz.jdbc.datasource.driverClassName  = com.mysql.jdbc.Driver#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">jdbcurl=<span class="string">&quot;jdbc:mysql://<span class="variable">$serverip</span>:3306/zabbix?autoReconnect=true\&amp;characterEncoding=utf-8&quot;</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^eaglewiz.jdbc.datasource.url\s*=.*#eaglewiz.jdbc.datasource.url = <span class="variable">$jdbcurl</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^eaglewiz.jdbc.datasource.username\s*=.*#eaglewiz.jdbc.datasource.username  = root#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^eaglewiz.server.address\s*=.*#eaglewiz.server.address                  = <span class="variable">$serverip</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^zabbix.report.ip\s*=.*#zabbix.report.ip = <span class="variable">$serverip</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#^zabbix.server.ip\s*=.*#zabbix.server.ip    = <span class="variable">$serverip</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/monitorweb/</span><br><span class="line"></span><br><span class="line">./autoconfig monitorweb.war</span><br><span class="line"></span><br><span class="line">./monitor-web-run.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">########Install YWB Web End####</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="JDK安装脚本"><a href="#JDK安装脚本" class="headerlink" title="JDK安装脚本"></a>JDK安装脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### install JDK ####################</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">fileName=<span class="string">&quot;jdk-7u71-linux-x64.tar.gz&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$fileName</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/opt/<span class="variable">$fileName</span> is not exists&quot;</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"></span><br><span class="line">tar -zxvf <span class="variable">$fileName</span></span><br><span class="line"></span><br><span class="line">jdk_path=<span class="string">&quot;/opt/jdk1.7.0_71&quot;</span></span><br><span class="line">base_path=<span class="string">&quot;export PATH=\$JAVA_HOME/bin:\$PATH&quot;</span></span><br><span class="line">class_path=<span class="string">&quot;export CLASSPATH=.:\$JAVA_HOME/lib/dt.jar:\$JAVA_HOME/lib/tools.jar&quot;</span></span><br><span class="line"></span><br><span class="line">reg_str=<span class="string">&quot;^\s*export\s*JAVA_HOME=/opt/jdk*&quot;</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="variable">$reg_str</span> /etc/profile</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the jdk environment exists ,do need set again&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;defined jdk environment starting...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export JAVA_HOME=<span class="variable">$jdk_path</span>&quot;</span>&gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$base_path</span>&gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$class_path</span>&gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;defined jdk environment finished...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">grep <span class="variable">$reg_str</span> /etc/profile</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="运维宝打包脚本"><a href="#运维宝打包脚本" class="headerlink" title="运维宝打包脚本"></a>运维宝打包脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### package yunweibao server ###########################</span></span><br><span class="line">lamppFlag=<span class="string">&quot;lampp&quot;</span></span><br><span class="line">zabbixFlag=<span class="string">&quot;zabbix&quot;</span></span><br><span class="line">fkmFlag=<span class="string">&quot;fkm&quot;</span></span><br><span class="line">monitorwebFlag=<span class="string">&quot;monitorweb&quot;</span></span><br><span class="line">defaultIp=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">inFlag=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">inVersion=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### package lammp ##############################</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$inFlag</span>&quot;</span> = <span class="string">&quot;<span class="variable">$lamppFlag</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"></span><br><span class="line">count=`ps -ef | grep mysql | grep -v <span class="string">&quot;grep&quot;</span> | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -gt 0 ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;you need input a package version , eg: sh package_tools.sh lampp 1.1.6&quot;</span> </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to package <span class="variable">$inFlag</span> ......&quot;</span></span><br><span class="line">	<span class="comment"># 关闭zabbix</span></span><br><span class="line">	<span class="built_in">cd</span> /opt/</span><br><span class="line">	pkill zabbix_server</span><br><span class="line"></span><br><span class="line">	<span class="comment">#数据库清除原始数据</span></span><br><span class="line">	cmd=<span class="string">&quot;use zabbix;	</span></span><br><span class="line"><span class="string">	    DELETE FROM zabbix.trends;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.trends_uint;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.history;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.history_text;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.history_str;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.history_log;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.history_uint;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.sessions;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.events;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.alerts;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.auditlog_details;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.auditlog;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.his_table_partition_del_log;</span></span><br><span class="line"><span class="string">		DELETE FROM zabbix.housekeeper WHERE tablename IN (&#x27;history&#x27;,&#x27;history_log&#x27;,&#x27;history_str&#x27;,&#x27;history_text&#x27;,&#x27;history_unit&#x27;,&#x27;trends&#x27;,&#x27;trends_unit&#x27;);&quot;</span></span><br><span class="line">	<span class="built_in">cd</span> /opt/lampp/bin</span><br><span class="line">	/opt/lampp/bin/mysql -uroot -pdetedt -s -e <span class="string">&quot;<span class="variable">$&#123;cmd&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 数据优化</span></span><br><span class="line">	<span class="built_in">cd</span> /opt/lampp/bin</span><br><span class="line">	/opt/lampp/bin/mysqlcheck -o zabbix -uroot -pdetedt</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 修改配置文件</span></span><br><span class="line">	sed -i <span class="string">&quot;s#^EZ.SERVER\s*=.*#EZ.SERVER  = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/lampp/antx.properties</span><br><span class="line">	sed -i <span class="string">&quot;s#^EZDB.SERVER\s*=.*#EZDB.SERVER  = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/lampp/antx.properties</span><br><span class="line">	sed -i <span class="string">&quot;s#^EZ.SERVER.NAME\s*=.*#EZ.SERVER.NAME  = hostname#g&quot;</span> /opt/lampp/antx.properties </span><br><span class="line">	<span class="built_in">cd</span> /opt/lampp</span><br><span class="line">	/opt/lampp/mconfig.sh</span><br><span class="line"></span><br><span class="line">	<span class="comment">#关闭zabbix lampp</span></span><br><span class="line">	<span class="comment"># pkill zabbix_server</span></span><br><span class="line">	/opt/lampp/lampp stop</span><br><span class="line"></span><br><span class="line">	<span class="comment">#清除日志信息</span></span><br><span class="line">	<span class="built_in">rm</span> -rf /opt/lampp/htdocs/zabbix/frontends/php/latest.php</span><br><span class="line">	<span class="built_in">rm</span> -rf /opt/lampp/var/*.err</span><br><span class="line">	<span class="built_in">rm</span> -rf /opt/lampp/logs/*</span><br><span class="line">	<span class="built_in">rm</span> -rf /opt/lampp/var/mysql/*.err</span><br><span class="line">	<span class="built_in">rm</span> -rf /opt/lampp/var/mysql/*.pid</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 打包</span></span><br><span class="line">	<span class="built_in">cd</span> /opt</span><br><span class="line">	tar -czvf lampp-v<span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span>.tar.gz lampp/</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="variable">$inFlag</span> package finished......&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">	   </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; mysql is not running,please start lampp ......&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### package lammp ##############################</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$inFlag</span>&quot;</span> = <span class="string">&quot;<span class="variable">$fkmFlag</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;you need input a package version , eg: sh package_tools.sh fkm 1.1.7&quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to package <span class="variable">$inFlag</span> ......&quot;</span></span><br><span class="line">    <span class="comment"># 关闭monitorweb fkm</span></span><br><span class="line">    <span class="built_in">cd</span> /opt/monitorweb</span><br><span class="line">    /opt/monitorweb/monitor-web-stop.sh</span><br><span class="line">    <span class="built_in">cd</span> /opt/fkm</span><br><span class="line">    /opt/fkm/fkm.sh stopfkm</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 修改配置文件</span></span><br><span class="line">    sed -i <span class="string">&quot;s#^host.ip\s*=.*#host.ip  = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/fkm/antx.properties</span><br><span class="line">    /opt/fkm/mconfig.sh</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 清理数据</span></span><br><span class="line">    <span class="built_in">rm</span> -rf /opt/fkm/kafka/logs/*</span><br><span class="line">    <span class="built_in">rm</span> -rf /opt/fkm/mongodb/data/*</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为mongodb赋予权限</span></span><br><span class="line">    <span class="built_in">cd</span> /opt/fkm</span><br><span class="line">    /opt/fkm/fkm.sh startmongo</span><br><span class="line">    <span class="built_in">cd</span> /opt/fkm/mongodb/bin</span><br><span class="line">    mongocmd=<span class="string">&quot;use admin;db.createUser(</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		user: &#x27;root&#x27;,</span></span><br><span class="line"><span class="string">		pwd: &#x27;admin&#x27;,</span></span><br><span class="line"><span class="string">		roles: [ &#123; role: &#x27;root&#x27;, db:&#x27;admin&#x27; &#125; ]</span></span><br><span class="line"><span class="string">	&#125;)&quot;</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">    /opt/fkm/mongodb/bin/mongo --port 10060 &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">	use admin</span></span><br><span class="line"><span class="string">	db.createUser(&#123;</span></span><br><span class="line"><span class="string">		user: &#x27;root&#x27;,</span></span><br><span class="line"><span class="string">        	pwd: &#x27;admin&#x27;,</span></span><br><span class="line"><span class="string">        	roles: [ &#123; role: &#x27;root&#x27;, db:&#x27;admin&#x27; &#125; ]</span></span><br><span class="line"><span class="string">	&#125;	</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    </span><br><span class="line">   <span class="built_in">cd</span> /opt/fkm</span><br><span class="line">   /opt/fkm/fkm.sh stopmongo</span><br><span class="line">    </span><br><span class="line">   <span class="comment"># 删除文件</span></span><br><span class="line">   <span class="built_in">rm</span> -rf /opt/fkm/mongodb/mongo.pid</span><br><span class="line">   <span class="built_in">rm</span> -rf /opt/fkm/logs/flume/*</span><br><span class="line">   <span class="built_in">mkdir</span> /opt/fkm/logs/flume/flume.log</span><br><span class="line">   <span class="built_in">chown</span> monitor.monitor /opt/fkm/logs/flume/flume.log</span><br><span class="line">   <span class="built_in">chmod</span> 755 /opt/fkm/logs/flume/flume.log </span><br><span class="line">   <span class="built_in">rm</span> -rf /opt/fkm/logs/kafka/*</span><br><span class="line">   <span class="built_in">rm</span> -rf /opt/fkm/logs/mongodb/*</span><br><span class="line">   <span class="built_in">mkdir</span> /opt/fkm/logs/mongodb/mongodb.log</span><br><span class="line">   <span class="built_in">chown</span> monitor.monitor /opt/fkm/logs/mongodb/mongodb.log</span><br><span class="line">   <span class="built_in">chmod</span> 755 /opt/fkm/logs/mongodb/mongodb.log</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 打包</span></span><br><span class="line">   <span class="built_in">cd</span> /opt</span><br><span class="line">   tar -zcvf fkm-v<span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span>.tar.gz fkm/</span><br><span class="line"></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="variable">$inFlag</span> package finished......&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### package lammp ##############################</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$inFlag</span>&quot;</span> = <span class="string">&quot;<span class="variable">$zabbixFlag</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;you need input a package version , eg: sh package_tools.sh zabbix 2.4.2 &quot;</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to package <span class="variable">$inFlag</span> ......&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭zabbix服务</span></span><br><span class="line">    pkill zabbix_server</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改配置文件</span></span><br><span class="line">    sed -i <span class="string">&quot;s#^DBHost\s*=.*#DBHost               = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^SourceIP\s*=.*#SourceIP             = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^serverMonitorIp\s*=.*#serverMonitorIp      = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^serverMonitorPort\s*=.*#serverMonitorPort    = 80#g&quot;</span> /opt/zabbix-2.4.2/antx.properties</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cd</span> /opt/zabbix-2.4.2</span><br><span class="line">    /opt/zabbix-2.4.2/sconfig.sh</span><br><span class="line">    <span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打包</span></span><br><span class="line">    tar -zcvf zabbix-<span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span>-server-rc01.tar.gz zabbix-2.4.2/</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="variable">$inFlag</span> package finished......&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### package lammp ##############################</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$inFlag</span>&quot;</span> = <span class="string">&quot;<span class="variable">$monitorwebFlag</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; to package <span class="variable">$inFlag</span> ......&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;you need input a package version , eg: sh package_tools.sh monitor 20170707 &quot;</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cd</span> /opt/monitorweb</span><br><span class="line">    /opt/monitorweb/monitor-web-stop.sh</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改配置</span></span><br><span class="line">    sed -i <span class="string">&quot;s#^alarm.fromEmailAddr\s*=.*#alarm.fromEmailAddr        = #g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^alarm.fromEmailPassword\s*=.*#alarm.fromEmailPassword    = #g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^alarm.fromEmailServerHost\s*=.*#alarm.fromEmailServerHost  = #g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^alarm.fromEmailServerPort\s*=.*#alarm.fromEmailServerPort  = #g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^eaglewiz.jdbc.datasource.driverClassName\s*=.*#eaglewiz.jdbc.datasource.driverClassName  = com.mysql.jdbc.Driver#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    jdbcurl=<span class="string">&quot;jdbc:mysql://<span class="variable">$defaultIp</span>:3306/zabbix?autoReconnect=true\&amp;characterEncoding=utf-8&quot;</span></span><br><span class="line">    sed -i <span class="string">&quot;s#^eaglewiz.jdbc.datasource.url\s*=.*#eaglewiz.jdbc.datasource.url = <span class="variable">$jdbcurl</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^eaglewiz.jdbc.datasource.username\s*=.*#eaglewiz.jdbc.datasource.username  = root#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^eaglewiz.server.address\s*=.*#eaglewiz.server.address                  = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^zabbix.report.ip\s*=.*#zabbix.report.ip = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line">    sed -i <span class="string">&quot;s#^zabbix.server.ip\s*=.*#zabbix.server.ip    = <span class="variable">$defaultIp</span>#g&quot;</span> /opt/monitorweb/antx.properties</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> /opt/monitorweb</span><br><span class="line">    /opt/monitorweb/autoconfig monitorweb.war</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除日志文件</span></span><br><span class="line">    <span class="built_in">rm</span> -rf /opt/monitorweb/log/*</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打包</span></span><br><span class="line">    <span class="built_in">cd</span> /opt</span><br><span class="line">    tar -zcvf monitorweb-<span class="string">&quot;<span class="variable">$inVersion</span>&quot;</span>.tar.gz monitorweb/</span><br><span class="line">       </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="variable">$inFlag</span> package finished......&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">###################### package lammp ##############################</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; sorry,you input a wrong params......&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="运维宝启动与停止脚本"><a href="#运维宝启动与停止脚本" class="headerlink" title="运维宝启动与停止脚本"></a>运维宝启动与停止脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">stopFlg=<span class="string">&quot;stop&quot;</span></span><br><span class="line">startFlg=<span class="string">&quot;start&quot;</span></span><br><span class="line">inputFlg=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################ stop server #########################</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$inputFlg</span>&quot;</span> = <span class="string">&quot;<span class="variable">$stopFlg</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="comment">#########stop monitorweb #######</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; stop monitorweb &lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/monitorweb</span><br><span class="line">./monitor-web-stop.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## stop report server #######</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; stop report server &lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/ywb-tomcat-6.0.35/bin/</span><br><span class="line">./shutdown.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">######### stop fkm ###############</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; stop fkm &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/fkm</span><br><span class="line">su monitor -c <span class="string">&quot;/opt/fkm/fkm.sh stopfkm&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## stop zabbix server #######</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; stop zabbix server &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/zabbix-2.4.2</span><br><span class="line">su zabbix -c <span class="string">&quot;pkill zabbix_server&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####### stop lampp ############</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; stop lampp &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/lampp</span><br><span class="line">./lampp stop</span><br><span class="line"></span><br><span class="line"><span class="comment">################ start server ######################</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$inputFlg</span>&quot;</span> = <span class="string">&quot;<span class="variable">$startFlg</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="comment">######## start lampp ############</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; start lampp &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/lampp</span><br><span class="line">./lampp start</span><br><span class="line"></span><br><span class="line"><span class="comment">######## start zabbix server #######</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; start zabbix server &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/zabbix-2.4.2/sbin</span><br><span class="line">su zabbix -c <span class="string">&quot;/opt/zabbix-2.4.2/sbin/zabbix_server&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######### start fkm ###############</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; start fkm &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/fkm</span><br><span class="line">su monitor -c <span class="string">&quot;/opt/fkm/fkm.sh startfkm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########start report server #######</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; start report server &lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/ywb-tomcat-6.0.35/bin/</span><br><span class="line">./startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">######## start monitorweb #######</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; start monitorweb &lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /opt/monitorweb</span><br><span class="line">./monitor-web-run.sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the command you input is not right &quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云短信发送脚本</title>
    <url>/2017/12/24/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="阿里云短信发送脚本"><a href="#阿里云短信发送脚本" class="headerlink" title="阿里云短信发送脚本"></a>阿里云短信发送脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ！/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="comment"># ACCESS_KEY_ID/ACCESS_KEY_SECRET 根据实际申请的账号信息进行替换</span></span><br><span class="line">ACCESS_KEY_ID = <span class="string">&quot;$AccessKeyId&quot;</span></span><br><span class="line"></span><br><span class="line">ACCESS_KEY_SECRET = <span class="string">&quot;$AccessKeySecret&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliYunSMS</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.<span class="built_in">format</span> = <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        self.version = <span class="string">&quot;2017-05-25&quot;</span></span><br><span class="line">        self.key = ACCESS_KEY_ID</span><br><span class="line">        self.secret = ACCESS_KEY_SECRET</span><br><span class="line">        self.signature = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.signature_method = <span class="string">&quot;HMAC-SHA1&quot;</span></span><br><span class="line">        self.signature_version = <span class="string">&quot;1.0&quot;</span></span><br><span class="line">        self.signature_nonce = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">        self.timestamp = datetime.datetime.utcnow().isoformat(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">        self.region_id = ALIYUN_API_REGION_ID</span><br><span class="line"></span><br><span class="line">        self.gateway = ALISMS_GATEWAY</span><br><span class="line">        self.action = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.sign = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.template = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.phone = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_single</span>(<span class="params">self, phone, sign, template, params</span>):</span><br><span class="line">        self.action = <span class="string">&quot;SendSms&quot;</span></span><br><span class="line">        self.phone = phone</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.params = params</span><br><span class="line">        self.template = template</span><br><span class="line"></span><br><span class="line">        query_string = self.build_query_string()</span><br><span class="line"></span><br><span class="line">        resp = requests.get(self.gateway + <span class="string">&quot;?&quot;</span> + query_string)</span><br><span class="line">        resp = resp.json()</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_query_string</span>(<span class="params">self</span>):</span><br><span class="line">        query = []</span><br><span class="line">        query.append((<span class="string">&quot;Format&quot;</span>, self.<span class="built_in">format</span>))</span><br><span class="line">        query.append((<span class="string">&quot;Version&quot;</span>, self.version))</span><br><span class="line">        query.append((<span class="string">&quot;AccessKeyId&quot;</span>, self.key))</span><br><span class="line">        query.append((<span class="string">&quot;SignatureMethod&quot;</span>, self.signature_method))</span><br><span class="line">        query.append((<span class="string">&quot;SignatureVersion&quot;</span>, self.signature_version))</span><br><span class="line">        query.append((<span class="string">&quot;SignatureNonce&quot;</span>, self.signature_nonce))</span><br><span class="line">        query.append((<span class="string">&quot;Timestamp&quot;</span>, self.timestamp))</span><br><span class="line">        query.append((<span class="string">&quot;RegionId&quot;</span>, self.region_id))</span><br><span class="line">        query.append((<span class="string">&quot;Action&quot;</span>, self.action))</span><br><span class="line">        query.append((<span class="string">&quot;SignName&quot;</span>, self.sign))</span><br><span class="line">        query.append((<span class="string">&quot;TemplateCode&quot;</span>, self.template))</span><br><span class="line">        query.append((<span class="string">&quot;PhoneNumbers&quot;</span>, self.phone))</span><br><span class="line">        params = <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.params:</span><br><span class="line">            params += <span class="string">&quot;\&quot;&quot;</span> + param + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="built_in">str</span>(self.params[param]) + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;,&quot;</span></span><br><span class="line">        params = params[:-<span class="number">1</span>] + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">        query.append((<span class="string">&quot;TemplateParam&quot;</span>, params))</span><br><span class="line">        query = <span class="built_in">sorted</span>(query, key=<span class="keyword">lambda</span> key: key[<span class="number">0</span>])</span><br><span class="line">        query_string = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> query:</span><br><span class="line">            query_string += quote(item[<span class="number">0</span>], safe=<span class="string">&quot;~&quot;</span>) + <span class="string">&quot;=&quot;</span> + quote(item[<span class="number">1</span>], safe=<span class="string">&quot;~&quot;</span>) + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">        query_string = query_string[:-<span class="number">1</span>]</span><br><span class="line">        tosign = <span class="string">&quot;GET&amp;%2F&amp;&quot;</span> + quote(query_string, safe=<span class="string">&quot;~&quot;</span>)</span><br><span class="line">        secret = self.secret + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">        hmb = hmac.new(secret.encode(<span class="string">&quot;utf-8&quot;</span>), tosign.encode(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;sha1&quot;</span>).digest()</span><br><span class="line">        self.signature = quote(base64.standard_b64encode(hmb).decode(<span class="string">&quot;ascii&quot;</span>), safe=<span class="string">&quot;~&quot;</span>)</span><br><span class="line">        query_string += <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;Signature=&quot;</span> + self.signature</span><br><span class="line">        <span class="keyword">return</span> query_string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选XML</span></span><br><span class="line">ALIYUN_API_FORMAT = <span class="string">&quot;JSON&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 区域,可选</span></span><br><span class="line">ALIYUN_API_REGION_ID = <span class="string">&quot;cn-hangzhou&quot;</span></span><br><span class="line"></span><br><span class="line">ALISMS_GATEWAY = <span class="string">&quot;http://dysmsapi.aliyuncs.com/&quot;</span></span><br><span class="line">ALISMS_SIGN = <span class="string">&quot;&quot;</span></span><br><span class="line">ALISMS_TPL_REGISTER = <span class="string">&quot;SMS_5250008&quot;</span></span><br><span class="line"></span><br><span class="line">sms = AliYunSMS()</span><br><span class="line"><span class="comment"># :param phone: 手机号</span></span><br><span class="line"><span class="comment"># :param sign: 短信签名</span></span><br><span class="line"><span class="comment"># :param template: 短信模板</span></span><br><span class="line"><span class="comment"># :param params: 模板变量</span></span><br><span class="line"><span class="comment"># sms.send_singe(phone, sign, template, params)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TODO 调用短信记录查询接口，返回json</span></span><br><span class="line">response = sms.send_single(<span class="string">&quot;1300000000&quot;</span>, ALISMS_SIGN, ALISMS_TPL_REGISTER, &#123;<span class="string">&quot;code&quot;</span>: <span class="string">&quot;12345&quot;</span>, <span class="string">&quot;product&quot;</span>: <span class="string">&quot;云通信&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="阿里云云通信使用"><a href="#阿里云云通信使用" class="headerlink" title="阿里云云通信使用"></a>阿里云云通信使用</h3><h4 id="1-添加依赖SDK"><a href="#1-添加依赖SDK" class="headerlink" title="1. 添加依赖SDK"></a>1. 添加依赖SDK</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install aliyun-python-sdk-core==2.13.1</span><br></pre></td></tr></table></figure>

<h4 id="2-阿里云RPC-QuerySendDetailsRequest-py"><a href="#2-阿里云RPC-QuerySendDetailsRequest-py" class="headerlink" title="2. 阿里云RPC QuerySendDetailsRequest.py"></a>2. 阿里云RPC QuerySendDetailsRequest.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aliyunsdkcore.request <span class="keyword">import</span> RpcRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuerySendDetailsRequest</span>(<span class="title class_ inherited__">RpcRequest</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        RpcRequest.__init__(self, <span class="string">&#x27;Dysmsapi&#x27;</span>, <span class="string">&#x27;2017-05-25&#x27;</span>, <span class="string">&#x27;QuerySendDetails&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_SendDate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;SendDate&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_SendDate</span>(<span class="params">self, SendDate</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;SendDate&#x27;</span>, SendDate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_PageSize</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;PageSize&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_PageSize</span>(<span class="params">self, PageSize</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;PageSize&#x27;</span>, PageSize)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ResourceOwnerId</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;ResourceOwnerId&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_ResourceOwnerId</span>(<span class="params">self, ResourceOwnerId</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;ResourceOwnerId&#x27;</span>, ResourceOwnerId)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_OwnerId</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;OwnerId&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_OwnerId</span>(<span class="params">self, OwnerId</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;OwnerId&#x27;</span>, OwnerId)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_PhoneNumber</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;PhoneNumber&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_PhoneNumber</span>(<span class="params">self, PhoneNumber</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;PhoneNumber&#x27;</span>, PhoneNumber)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_CurrentPage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;CurrentPage&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_CurrentPage</span>(<span class="params">self, CurrentPage</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;CurrentPage&#x27;</span>, CurrentPage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_BizId</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;BizId&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_BizId</span>(<span class="params">self, BizId</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;BizId&#x27;</span>, BizId)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ResourceOwnerAccount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get_query_params().get(<span class="string">&#x27;ResourceOwnerAccount&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_ResourceOwnerAccount</span>(<span class="params">self, ResourceOwnerAccount</span>):</span><br><span class="line">        self.add_query_param(<span class="string">&#x27;ResourceOwnerAccount&#x27;</span>, ResourceOwnerAccount)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-脚本-aliyunsms-py"><a href="#3-脚本-aliyunsms-py" class="headerlink" title="3. 脚本 aliyunsms.py"></a>3. 脚本 aliyunsms.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ！/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> neon.utils.aliyun <span class="keyword">import</span> QuerySendDetailsRequest</span><br><span class="line"><span class="keyword">from</span> zeus.settings <span class="keyword">import</span> ALIYUN_SMS_SETTINGS</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">ACCESS_KEY_ID = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ACCESS_KEY_ID&quot;</span>)</span><br><span class="line">ACCESS_KEY_SECRET = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ACCESS_KEY_SECRET&quot;</span>)</span><br><span class="line">ALIYUN_API_FORMAT = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ALIYUN_API_FORMAT&quot;</span>)</span><br><span class="line">ALIYUN_API_REGION_ID = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ALIYUN_API_REGION_ID&quot;</span>)</span><br><span class="line">ALISMS_GATEWAY = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ALISMS_GATEWAY&quot;</span>)</span><br><span class="line">ALISMS_SIGN = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ALISMS_SIGN&quot;</span>)</span><br><span class="line">ALISMS_TPL_REGISTER = ALIYUN_SMS_SETTINGS.get(<span class="string">&quot;ALISMS_TPL_REGISTER&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliYunSMS</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.<span class="built_in">format</span> = <span class="string">&quot;JSON&quot;</span></span><br><span class="line">        self.version = <span class="string">&quot;2017-05-25&quot;</span></span><br><span class="line">        self.key = ACCESS_KEY_ID</span><br><span class="line">        self.secret = ACCESS_KEY_SECRET</span><br><span class="line">        self.signature = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.signature_method = <span class="string">&quot;HMAC-SHA1&quot;</span></span><br><span class="line">        self.signature_version = <span class="string">&quot;1.0&quot;</span></span><br><span class="line">        self.signature_nonce = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">        self.timestamp = datetime.datetime.utcnow().isoformat(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">        self.region_id = ALIYUN_API_REGION_ID</span><br><span class="line"></span><br><span class="line">        self.gateway = ALISMS_GATEWAY</span><br><span class="line">        self.action = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.sign = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.template = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.phone = <span class="literal">None</span></span><br><span class="line">        self.acs_client = AcsClient(ACCESS_KEY_ID, ACCESS_KEY_SECRET)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_single</span>(<span class="params">self, phone, sign, template, params</span>):</span><br><span class="line">        self.action = <span class="string">&quot;SendSms&quot;</span></span><br><span class="line">        self.phone = phone</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.params = params</span><br><span class="line">        self.template = template</span><br><span class="line"></span><br><span class="line">        query_string = self.build_query_string()</span><br><span class="line"></span><br><span class="line">        resp = requests.get(self.gateway + <span class="string">&quot;?&quot;</span> + query_string)</span><br><span class="line">        resp = resp.json()</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_query_string</span>(<span class="params">self</span>):</span><br><span class="line">        query = <span class="built_in">list</span>()</span><br><span class="line">        query.append((<span class="string">&quot;Format&quot;</span>, self.<span class="built_in">format</span>))</span><br><span class="line">        query.append((<span class="string">&quot;Version&quot;</span>, self.version))</span><br><span class="line">        query.append((<span class="string">&quot;AccessKeyId&quot;</span>, self.key))</span><br><span class="line">        query.append((<span class="string">&quot;SignatureMethod&quot;</span>, self.signature_method))</span><br><span class="line">        query.append((<span class="string">&quot;SignatureVersion&quot;</span>, self.signature_version))</span><br><span class="line">        query.append((<span class="string">&quot;SignatureNonce&quot;</span>, self.signature_nonce))</span><br><span class="line">        query.append((<span class="string">&quot;Timestamp&quot;</span>, self.timestamp))</span><br><span class="line">        query.append((<span class="string">&quot;RegionId&quot;</span>, self.region_id))</span><br><span class="line">        query.append((<span class="string">&quot;Action&quot;</span>, self.action))</span><br><span class="line">        query.append((<span class="string">&quot;SignName&quot;</span>, self.sign))</span><br><span class="line">        query.append((<span class="string">&quot;TemplateCode&quot;</span>, self.template))</span><br><span class="line">        query.append((<span class="string">&quot;PhoneNumbers&quot;</span>, self.phone))</span><br><span class="line">        params = <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.params:</span><br><span class="line">            params += <span class="string">&quot;\&quot;&quot;</span> + param + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + <span class="built_in">str</span>(self.params[param]) + <span class="string">&quot;\&quot;&quot;</span> + <span class="string">&quot;,&quot;</span></span><br><span class="line">        params = params[:-<span class="number">1</span>] + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">        query.append((<span class="string">&quot;TemplateParam&quot;</span>, params))</span><br><span class="line">        query = <span class="built_in">sorted</span>(query, key=<span class="keyword">lambda</span> key: key[<span class="number">0</span>])</span><br><span class="line">        query_string = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> query:</span><br><span class="line">            query_string += quote(item[<span class="number">0</span>], safe=<span class="string">&quot;~&quot;</span>) + <span class="string">&quot;=&quot;</span> + quote(item[<span class="number">1</span>], safe=<span class="string">&quot;~&quot;</span>) + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">        query_string = query_string[:-<span class="number">1</span>]</span><br><span class="line">        tosign = <span class="string">&quot;GET&amp;%2F&amp;&quot;</span> + quote(query_string, safe=<span class="string">&quot;~&quot;</span>)</span><br><span class="line">        secret = self.secret + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">        hmb = hmac.new(secret.encode(<span class="string">&quot;utf-8&quot;</span>), tosign.encode(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;sha1&quot;</span>).digest()</span><br><span class="line">        self.signature = quote(base64.standard_b64encode(hmb).decode(<span class="string">&quot;ascii&quot;</span>), safe=<span class="string">&quot;~&quot;</span>)</span><br><span class="line">        query_string += <span class="string">&quot;&amp;&quot;</span> + <span class="string">&quot;Signature=&quot;</span> + self.signature</span><br><span class="line">        <span class="keyword">return</span> query_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query_send_detail</span>(<span class="params">self, biz_id, phone_number, page_size, current_page, send_date</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        查询短信详情</span></span><br><span class="line"><span class="string">        :param biz_id: 流水号</span></span><br><span class="line"><span class="string">        :param phone_number: 手机号码</span></span><br><span class="line"><span class="string">        :param page_size: 页面大小</span></span><br><span class="line"><span class="string">        :param current_page: 当前页面</span></span><br><span class="line"><span class="string">        :param send_date: 发送日期</span></span><br><span class="line"><span class="string">        :return: 短线详情</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        query_request = QuerySendDetailsRequest.QuerySendDetailsRequest()</span><br><span class="line">        <span class="comment"># 查询的手机号码</span></span><br><span class="line">        query_request.set_PhoneNumber(phone_number)</span><br><span class="line">        <span class="comment"># 可选 - 流水号</span></span><br><span class="line">        query_request.set_BizId(biz_id)</span><br><span class="line">        <span class="comment"># 必填 - 发送日期 支持30天内记录查询，格式yyyyMMdd</span></span><br><span class="line">        query_request.set_SendDate(send_date)</span><br><span class="line">        <span class="comment"># 必填-当前页码从1开始计数</span></span><br><span class="line">        query_request.set_CurrentPage(current_page)</span><br><span class="line">        <span class="comment"># 必填-页大小</span></span><br><span class="line">        query_request.set_PageSize(page_size)</span><br><span class="line">        query_response = self.acs_client.do_action_with_exception(query_request)</span><br><span class="line">        <span class="keyword">return</span> query_response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_code_sms</span>(<span class="params">phone, code</span>):</span><br><span class="line">    sms = AliYunSMS()</span><br><span class="line">    <span class="comment"># :param phone: 手机号</span></span><br><span class="line">    <span class="comment"># :param sign: 短信签名</span></span><br><span class="line">    <span class="comment"># :param template: 短信模板</span></span><br><span class="line">    <span class="comment"># :param params: 模板变量</span></span><br><span class="line">    <span class="comment"># sms.send_singe(phone, sign, template, params)</span></span><br><span class="line">    response = sms.send_single(phone, ALISMS_SIGN, ALISMS_TPL_REGISTER, &#123;<span class="string">&quot;code&quot;</span>: code&#125;)</span><br><span class="line">    logger.info(<span class="string">&quot;短息发送状态：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(response))</span><br><span class="line">    <span class="comment"># detail = sms.query_send_detail(&#x27;398017915061830951^0&#x27;, &quot;15757184806&quot;, 1, 1, &#x27;20180104&#x27;)</span></span><br><span class="line">    <span class="comment"># print(detail)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     send_code_sms(&quot;15658153136&quot;, &quot;256894&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Aliyun</tag>
        <tag>SMS</tag>
      </tags>
  </entry>
  <entry>
    <title>python之threading多线程</title>
    <url>/2021/04/01/python%E4%B9%8Bthreading%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="python-threading多线程总结"><a href="#python-threading多线程总结" class="headerlink" title="python threading多线程总结"></a>python threading多线程总结</h3><blockquote>
<p>threading用于提供线程相关的操作，线程是应用程序中工作的最小单元。python当前版本的多线程库没有实现优先级、线程组，线程也不能被停止、暂停、恢复、中断。</p>
</blockquote>
<h4 id="threading模块提供的类"><a href="#threading模块提供的类" class="headerlink" title="threading模块提供的类"></a>threading模块提供的类</h4><ul>
<li>Thread, Lock, Rlock, Condition, [Bounded]Semaphore, Event, Timer, local。</li>
</ul>
<h4 id="threading-模块提供的常用方法"><a href="#threading-模块提供的常用方法" class="headerlink" title="threading 模块提供的常用方法"></a>threading 模块提供的常用方法</h4><ul>
<li>threading.currentThread(): 返回当前的线程变量。 </li>
<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。 </li>
<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>
</ul>
<h4 id="threading-模块提供的常量："><a href="#threading-模块提供的常量：" class="headerlink" title="threading 模块提供的常量："></a>threading 模块提供的常量：</h4><ul>
<li>threading.TIMEOUT_MAX 设置threading全局超时时间。</li>
</ul>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><blockquote>
<p>Thread是线程类，有两种使用方法，直接传入要运行的方法或从Thread继承并覆盖run()。</p>
</blockquote>
<p><strong>示例代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：将要执行的方法作为参数传给Thread的构造方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the arg is:%s\r&#x27;</span> %arg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">    t =threading.Thread(target=action,args=(i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main thread end!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：从Thread继承，并重写run()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,arg</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()  <span class="comment"># 注意：一定要显式的调用父类的初始化函数。</span></span><br><span class="line">        self.arg=arg</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  <span class="comment"># 定义每个线程要运行的函数</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the arg is:%s\r&#x27;</span> % self.arg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">    t =MyThread(i)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main thread end!&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ul>
<li><p>构造方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thread(group=None, target=None, name=None, args=(), kwargs=&#123;&#125;) </span><br><span class="line"></span><br><span class="line">参数说明： </span><br><span class="line">group: 线程组，目前还没有实现，库引用中提示必须是None； </span><br><span class="line">target: 要执行的方法； </span><br><span class="line">name: 线程名； </span><br><span class="line">args/kwargs: 要传入方法的参数。</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isAlive(): 返回线程是否在运行。正在运行指启动后、终止前。</span><br><span class="line">get/setName(name): 获取/设置线程名。 </span><br><span class="line">start():  线程准备就绪，等待CPU调度</span><br><span class="line">is/setDaemon(bool): 获取/设置是后台线程(在start之前设置,默认前台线程(False))</span><br><span class="line">    如果是后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，主线程和后台线程均停止</span><br><span class="line">    如果是前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止</span><br><span class="line">start(): 启动线程。 </span><br><span class="line">join([timeout]): 阻塞当前上下文环境的线程，直到调用此方法的线程终止或到达指定的timeout（可选参数）。</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><strong>示例一(未设置setDeamon)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sub thread start!the thread name is:%s\r&#x27;</span> % threading.currentThread().getName())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the arg is:%s\r&#x27;</span> %arg)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">    t =threading.Thread(target=action,args=(i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main_thread end!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行结果：</span></span><br><span class="line"><span class="comment"># main_thread end!</span></span><br><span class="line"><span class="comment"># sub thread start!the thread name is:Thread-2</span></span><br><span class="line"><span class="comment"># the arg is:1</span></span><br><span class="line"><span class="comment"># the arg is:0</span></span><br><span class="line"><span class="comment"># sub thread start!the thread name is:Thread-4</span></span><br><span class="line"><span class="comment"># the arg is:2</span></span><br><span class="line"><span class="comment"># the arg is:3</span></span><br><span class="line"><span class="comment"># Process finished with exit code 0</span></span><br><span class="line"><span class="comment"># 可以看出，创建的4个&quot;前台&quot;线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止。</span></span><br><span class="line"><span class="comment"># 验证了serDeamon(False)(默认)前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，主线程停止。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例二（setDeamon=True）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sub thread start!the thread name is:%s\r&#x27;</span> % threading.currentThread().getName())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the arg is:%s\r&#x27;</span> %arg)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">4</span>):</span><br><span class="line">    t =threading.Thread(target=action,args=(i,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>)  <span class="comment"># 设置线程为后台线程</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main_thread end!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行结果：</span></span><br><span class="line"><span class="comment"># main_thread end!</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Process finished with exit code 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看出，主线程执行完毕后，后台线程不管是成功与否，主线程均停止</span></span><br><span class="line">验证了serDeamon(<span class="literal">True</span>)后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，主线程均停止。</span><br></pre></td></tr></table></figure>

<p><strong>示例三（设置join）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def action(arg):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&#x27;sub thread start!the thread name is:%s &#x27; % threading.currentThread().getName())</span><br><span class="line">    print(&#x27;the arg is:%s &#x27; %arg)</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line">thread_list = []  # 线程存放列表</span><br><span class="line">for i in xrange(4):</span><br><span class="line">    t =threading.Thread(target=action,args=(i,))</span><br><span class="line">    t.setDaemon(True)</span><br><span class="line">    thread_list.append(t)</span><br><span class="line"></span><br><span class="line">for t in thread_list:</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">for t in thread_list:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 运行结果：</span><br><span class="line"># sub thread start!the thread name is:Thread-2    </span><br><span class="line"># the arg is:1   </span><br><span class="line"># sub thread start!the thread name is:Thread-3    </span><br><span class="line"># the arg is:2   </span><br><span class="line"># sub thread start!the thread name is:Thread-1    </span><br><span class="line"># the arg is:0   </span><br><span class="line"># sub thread start!the thread name is:Thread-4    </span><br><span class="line"># the arg is:3   </span><br><span class="line"># main_thread end!</span><br><span class="line"># </span><br><span class="line"># Process finished with exit code 0</span><br><span class="line"></span><br><span class="line"># 设置join之后，主线程等待子线程全部执行完成后或者子线程超时后，主线程才结束。</span><br><span class="line"># 验证了 join()阻塞当前上下文环境的线程，直到调用此方法的线程终止或到达指定的timeout，即使设置了setDeamon（True）主线程依然要等待子线程结束。</span><br></pre></td></tr></table></figure>

<p><strong>示例四（join不妥当的用法，使多线程编程顺序执行）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def action(arg):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&#x27;sub thread start!the thread name is:%s &#x27; % threading.currentThread().getName())</span><br><span class="line">    print(&#x27;the arg is:%s &#x27; %arg)</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in xrange(4):</span><br><span class="line">    t =threading.Thread(target=action,args=(i,))</span><br><span class="line">    t.setDaemon(True)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">print(&#x27;main_thread end!&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 运行结果：</span><br><span class="line"># sub thread start!the thread name is:Thread-1    </span><br><span class="line"># the arg is:0   </span><br><span class="line"># sub thread start!the thread name is:Thread-2    </span><br><span class="line"># the arg is:1   </span><br><span class="line"># sub thread start!the thread name is:Thread-3    </span><br><span class="line"># the arg is:2   </span><br><span class="line"># sub thread start!the thread name is:Thread-4    </span><br><span class="line"># the arg is:3   </span><br><span class="line"># main_thread end!</span><br><span class="line"># </span><br><span class="line"># Process finished with exit code 0</span><br><span class="line"></span><br><span class="line"># 可以看出此时，程序只能顺序执行，每个线程都被上一个线程的join阻塞，使得&quot;多线程&quot;失去了多线程意义。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Lock、Rlock类"><a href="#Lock、Rlock类" class="headerlink" title="Lock、Rlock类"></a>Lock、Rlock类</h3><ul>
<li>由于线程之间随机调度：某线程可能在执行n条后，CPU接着执行其他线程。为了多个线程同时操作一个内存中的资源时不产生混乱，我们使用锁。</li>
<li>Lock（指令锁）是可用的最低级的同步指令。Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法。<br>可以认为Lock有一个锁定池，当线程请求锁定时，将线程至于池中，直到获得锁定后出池。池中的线程处于状态图中的同步阻塞状态。</li>
<li>RLock（可重入锁）是一个可以被同一个线程请求多次的同步指令。RLock使用了”拥有的线程”和”递归等级”的概念，处于锁定状态时，RLock被某个线程拥有。拥有RLock的线程可以再次调用acquire()，释放锁时需要调用release()相同次数。</li>
<li>可以认为RLock包含一个锁定池和一个初始值为0的计数器，每次成功调用 acquire()/release()，计数器将+1/-1，为0时锁处于未锁定状态。</li>
</ul>
<p><strong>简言之：Lock属于全局，Rlock属于线程。</strong></p>
<ul>
<li><p>构造方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lock()，Rlock（）,推荐使用Rlock()</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例方法： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acquire([timeout]): 尝试获得锁定。使线程进入同步阻塞状态。 </span><br><span class="line">release(): 释放锁。使用前线程必须已获得锁定，否则将抛出异常。</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><strong>示例一（未使用锁）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    gl_num +=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(gl_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=show, args=(i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;main thread stop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行结果：</span></span><br><span class="line"><span class="comment"># main thread stop</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#  3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 568</span></span><br><span class="line"><span class="comment">#  9</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 910</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Process finished with exit code 0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 多次运行可能产生混乱。这种场景就是适合使用锁的场景。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例二（使用锁）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lock = threading.RLock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用acquire([timeout])时，线程将一直阻塞，</span></span><br><span class="line"><span class="comment"># 直到获得锁定或者直到timeout秒后（timeout参数可选）。</span></span><br><span class="line"><span class="comment"># 返回是否获得锁。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Func</span>():</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    gl_num += <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(gl_num)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=Func)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行结果：</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Process finished with exit code 0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 可以看出，全局变量在在每次被调用时都要获得锁，才能操作，因此保证了共享数据的安全性</span></span><br></pre></td></tr></table></figure>

<h4 id="Lock对比Rlock"><a href="#Lock对比Rlock" class="headerlink" title="Lock对比Rlock"></a>Lock对比Rlock</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Lock</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">lock = threading.Lock() <span class="comment">#Lock对象</span></span><br><span class="line">lock.acquire()</span><br><span class="line">lock.acquire()  <span class="comment"># 产生了死锁。</span></span><br><span class="line">lock.release()</span><br><span class="line">lock.release()</span><br><span class="line"><span class="built_in">print</span> lock.acquire()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># RLock</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">rLock = threading.RLock()  <span class="comment"># RLock对象</span></span><br><span class="line">rLock.acquire()</span><br><span class="line">rLock.acquire()  <span class="comment"># 在同一线程内，程序不会堵塞。</span></span><br><span class="line">rLock.release()</span><br><span class="line">rLock.release()</span><br></pre></td></tr></table></figure>

<h3 id="Condition类"><a href="#Condition类" class="headerlink" title="Condition类"></a>Condition类</h3><ul>
<li>Condition（条件变量）通常与一个锁关联。需要在多个Contidion中共享一个锁时，可以传递一个Lock/RLock实例给构造方法，否则它将自己生成一个RLock实例。</li>
<li>可以认为，除了Lock带有的锁定池外，Condition还包含一个等待池，池中的线程处于等待阻塞状态，直到另一个线程调用notify()/notifyAll()通知；得到通知后线程进入锁定池等待锁定。</li>
</ul>
<ul>
<li><p>构造方法 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Condition([lock/rlock])</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acquire([timeout])/release(): 调用关联的锁的相应方法。 </span><br><span class="line">wait([timeout]): 调用这个方法将使线程进入Condition的等待池等待通知，并释放锁。使用前线程必须已获得锁定，否则将抛出异常。 </span><br><span class="line">notify(): 调用这个方法将从等待池挑选一个线程并通知，收到通知的线程将自动调用acquire()尝试获得锁定（进入锁定池）；其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。 </span><br><span class="line">notifyAll(): 调用这个方法将通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>示例：生产者消费者模型</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品</span></span><br><span class="line">product = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 条件变量</span></span><br><span class="line">con = threading.Condition()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">produce</span>():</span><br><span class="line">    <span class="keyword">global</span> product</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> con.acquire():</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> product <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;produce...&#x27;</span>)</span><br><span class="line">                product = <span class="string">&#x27;anything&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 通知消费者，商品已经生产</span></span><br><span class="line">                con.notify()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 等待通知</span></span><br><span class="line">            con.wait()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consume</span>():</span><br><span class="line">    <span class="keyword">global</span> product</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> con.acquire():</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> product <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;consume...&#x27;</span>)</span><br><span class="line">                product = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 通知生产者，商品已经没了</span></span><br><span class="line">                con.notify()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 等待通知</span></span><br><span class="line">            con.wait()</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=produce)</span><br><span class="line">t2 = threading.Thread(target=consume)</span><br><span class="line">t2.start()</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 运行结果：</span></span><br><span class="line"><span class="comment"># produce...</span></span><br><span class="line"><span class="comment"># consume...</span></span><br><span class="line"><span class="comment"># produce...</span></span><br><span class="line"><span class="comment"># consume...</span></span><br><span class="line"><span class="comment"># produce...</span></span><br><span class="line"><span class="comment"># consume...</span></span><br><span class="line"><span class="comment"># produce...</span></span><br><span class="line"><span class="comment"># consume...</span></span><br><span class="line"><span class="comment"># produce...</span></span><br><span class="line"><span class="comment"># consume...</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Process finished with exit code -1</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 程序不断循环运行下去。重复生产消费过程。</span></span><br></pre></td></tr></table></figure>


<p><strong>示例二：生产者消费者模型</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">condition = threading.Condition()</span><br><span class="line">products = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> products</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> condition.acquire():</span><br><span class="line">                <span class="keyword">if</span> products &lt; <span class="number">10</span>:</span><br><span class="line">                    products += <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Producer(%s):deliver one, now products:%s&quot;</span> %(self.name, products))</span><br><span class="line">                    condition.notify()  <span class="comment"># 不释放锁定，因此需要下面一句</span></span><br><span class="line">                    condition.release()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Producer(%s):already 10, stop deliver, now products:%s&quot;</span> %(self.name, products))</span><br><span class="line">                    condition.wait();  <span class="comment"># 自动释放锁定</span></span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> products</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> condition.acquire():</span><br><span class="line">                <span class="keyword">if</span> products &gt; <span class="number">1</span>:</span><br><span class="line">                    products -= <span class="number">1</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Consumer(%s):consume one, now products:%s&quot;</span> %(self.name, products))</span><br><span class="line">                    condition.notify()</span><br><span class="line">                    condition.release()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Consumer(%s):only 1, stop consume, products:%s&quot;</span> %(self.name, products))</span><br><span class="line">                    condition.wait();</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">        p = Producer()</span><br><span class="line">        p.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">        c = Consumer()</span><br><span class="line">        c.start()</span><br></pre></td></tr></table></figure>


<p><strong>示例三</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line">alist = <span class="literal">None</span></span><br><span class="line">condition = threading.Condition()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doSet</span>():</span><br><span class="line">    <span class="keyword">if</span> condition.acquire():</span><br><span class="line">        <span class="keyword">while</span> alist <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            condition.wait()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(alist))[::-<span class="number">1</span>]:</span><br><span class="line">            alist[i] = <span class="number">1</span></span><br><span class="line">        condition.release()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doPrint</span>():</span><br><span class="line">    <span class="keyword">if</span> condition.acquire():</span><br><span class="line">        <span class="keyword">while</span> alist <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            condition.wait()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">            <span class="built_in">print</span>(i),</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        condition.release()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doCreate</span>():</span><br><span class="line">    <span class="keyword">global</span> alist</span><br><span class="line">    <span class="keyword">if</span> condition.acquire():</span><br><span class="line">        <span class="keyword">if</span> alist <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            alist = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">            condition.notifyAll()</span><br><span class="line">        condition.release()</span><br><span class="line"> </span><br><span class="line">tset = threading.Thread(target=doSet,name=<span class="string">&#x27;tset&#x27;</span>)</span><br><span class="line">tprint = threading.Thread(target=doPrint,name=<span class="string">&#x27;tprint&#x27;</span>)</span><br><span class="line">tcreate = threading.Thread(target=doCreate,name=<span class="string">&#x27;tcreate&#x27;</span>)</span><br><span class="line">tset.start()</span><br><span class="line">tprint.start()</span><br><span class="line">tcreate.start()</span><br></pre></td></tr></table></figure>

<h3 id="Event类"><a href="#Event类" class="headerlink" title="Event类"></a>Event类</h3><ul>
<li>Event（事件）是最简单的线程通信机制之一：一个线程通知事件，其他线程等待事件。</li>
<li>Event内置了一个初始为False的标志，当调用set()时设为True，调用clear()时重置为 False。wait()将阻塞线程至等待阻塞状态。</li>
<li>Event其实就是一个简化版的 Condition。Event没有锁，无法使线程进入同步阻塞状态。</li>
</ul>
<ul>
<li><p>构造方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Event()</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例方法： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isSet(): 当内置标志为True时返回True。 </span><br><span class="line">set(): 将标志设为True，并通知所有处于等待阻塞状态的线程恢复运行状态。 </span><br><span class="line">clear(): 将标志设为False。 </span><br><span class="line">wait([timeout]): 如果标志为True将立即返回，否则阻塞线程至等待阻塞状态，等待其他线程调用set()。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">event = threading.Event()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="comment"># 等待事件，进入等待阻塞状态</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s wait for event...&#x27;</span> % threading.currentThread().getName())</span><br><span class="line">    event.wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 收到事件后进入运行状态</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s recv event.&#x27;</span> % threading.currentThread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=func)</span><br><span class="line">t2 = threading.Thread(target=func)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送事件通知</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MainThread set event.&#x27;</span>)</span><br><span class="line">event.<span class="built_in">set</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="timer类"><a href="#timer类" class="headerlink" title="timer类"></a>timer类</h3><ul>
<li>Timer（定时器）是Thread的派生类，用于在指定时间后调用一个方法。</li>
</ul>
<ul>
<li><p>构造方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Timer(interval, function, args=[], kwargs=&#123;&#125;) </span><br><span class="line"></span><br><span class="line">interval: 指定的时间 </span><br><span class="line">function: 要执行的方法 </span><br><span class="line">args/kwargs: 方法的参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Timer从Thread派生，没有增加实例方法。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding: UTF-8</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    print(&#x27;hello timer!&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timer = threading.Timer(5, func)</span><br><span class="line">timer.start()</span><br><span class="line"></span><br><span class="line">## 响应结果</span><br><span class="line"># 线程延迟5秒后执行。</span><br></pre></td></tr></table></figure>

<h3 id="local类"><a href="#local类" class="headerlink" title="local类"></a>local类</h3><ul>
<li>local是一个小写字母开头的类，用于管理 thread-local（线程局部的）数据。对于同一个local，线程无法访问其他线程设置的属性；线程设置的属性不会被其他线程设置的同名属性替换。</li>
<li>可以把local看成是一个”线程-属性字典”的字典，local封装了从自身使用线程作为 key检索对应的属性字典、再使用属性名作为key检索属性值的细节。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding: UTF-8</span><br><span class="line">import threading</span><br><span class="line"> </span><br><span class="line">local = threading.local()</span><br><span class="line">local.tname = &#x27;main&#x27;</span><br><span class="line"> </span><br><span class="line">def func():</span><br><span class="line">    local.tname = &#x27;notmain&#x27;</span><br><span class="line">    print(local.tname)</span><br><span class="line"> </span><br><span class="line">t1 = threading.Thread(target=func)</span><br><span class="line">t1.start()</span><br><span class="line">t1.join()</span><br><span class="line"></span><br><span class="line">print(local.tname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 响应结果</span><br><span class="line"># notmain</span><br><span class="line"># main</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="参考-http-www-cnblogs-com-tkqasn-p-5700281-html"><a href="#参考-http-www-cnblogs-com-tkqasn-p-5700281-html" class="headerlink" title="参考: http://www.cnblogs.com/tkqasn/p/5700281.html"></a>参考: <a href="http://www.cnblogs.com/tkqasn/p/5700281.html">http://www.cnblogs.com/tkqasn/p/5700281.html</a></h4>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>实现SNMP Agent代理程序</title>
    <url>/2022/04/01/%E5%AE%9E%E7%8E%B0Agent%E4%BB%A3%E7%90%86%E7%A8%8B%E5%BA%8F(SNMP)/</url>
    <content><![CDATA[<h2 id="安装snmp及mib2c工具"><a href="#安装snmp及mib2c工具" class="headerlink" title="安装snmp及mib2c工具"></a>安装snmp及mib2c工具</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览器：http://net-snmp.sourceforge.net/download.html</span><br><span class="line">命令行：wget --no-check-certificate https://sourceforge.net/projects/net-snmp/files/net-snmp/5.8/net-snmp-5.8.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf net-snmp-5.8.tar.gz &amp;&amp; mv net-snmp-5.8 /opt/net-snmp</span><br></pre></td></tr></table></figure>

<h3 id="3-配置并安装"><a href="#3-配置并安装" class="headerlink" title="3. 配置并安装"></a>3. 配置并安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker -y</span><br><span class="line"></span><br><span class="line">cd /opt/net-snmp</span><br><span class="line"></span><br><span class="line">./configure --with-default-snmp-version=&quot;2&quot; --with-sys-contact=&quot;myz0012@h3c.com&quot; --with-sys-location=&quot;China&quot; --with-logfile=&quot;/var/log/snmpd.log&quot; --with-persistent-directory=&quot;/var/net-snmp&quot; --enable-mfd-rewrites</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">cp /opt/net-snmp/python/netsnmp/tests/cp snmpd.conf /etc/snmp/snmpd.conf</span><br></pre></td></tr></table></figure>

<h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/sbin/snmpd -c /etc/snmp/snmpd.conf &amp;</span><br></pre></td></tr></table></figure>

<h3 id="5-停止"><a href="#5-停止" class="headerlink" title="5. 停止"></a>5. 停止</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 `ps -ef | grep &quot;snmpd&quot; | grep -v &quot;grep&quot; | awk &#x27;&#123;printf $2&#125;&#x27;`</span><br></pre></td></tr></table></figure>

<h2 id="定义MIB及加载"><a href="#定义MIB及加载" class="headerlink" title="定义MIB及加载"></a>定义MIB及加载</h2><h3 id="1-定义MIB"><a href="#1-定义MIB" class="headerlink" title="1. 定义MIB"></a>1. 定义MIB</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- the filename is mib-demo.txt</span><br><span class="line">-- MIB file的都以DEFINITIONS ::= BEGIN关键字开始，以END结束</span><br><span class="line">DEMO-MIB DEFINITIONS ::= BEGIN</span><br><span class="line"></span><br><span class="line">-- 模块引用区域，利用IMPORTS标识</span><br><span class="line">-- 所有的模块引用及群组的引用均使用FROM关键字说明其出处,引用使用分号（;）结束。</span><br><span class="line">IMPORTS</span><br><span class="line">    OBJECT-GROUP, MODULE-COMPLIANCE, NOTIFICATION-GROUP</span><br><span class="line">        FROM SNMPv2-CONF</span><br><span class="line">    enterprises, Integer32, Unsigned32, OBJECT-TYPE, MODULE-IDENTITY, NOTIFICATION-TYPE</span><br><span class="line">        FROM SNMPv2-SMI</span><br><span class="line">    DisplayString</span><br><span class="line">        FROM SNMPv2-TC;</span><br><span class="line"></span><br><span class="line">--enterprises就是.1.3.4.1.4.1</span><br><span class="line">-- ::=&#123;&#125;格式里定义的就是当前节点的访问地址</span><br><span class="line">--.1.3.6.1.4.1.54321</span><br><span class="line">demoMIB MODULE-IDENTITY</span><br><span class="line">    LAST-UPDATED &quot;202203251450Z&quot;</span><br><span class="line">    ORGANIZATION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    CONTACT-INFO</span><br><span class="line">        &quot;admin&quot;</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;DEMO List MIB.&quot;</span><br><span class="line">    ::= &#123; enterprises 54321 &#125;</span><br><span class="line"></span><br><span class="line">--定义一个根节点，访问地址为 demoMIB.1,也就是.1.3.6.1.4.1.54321.1</span><br><span class="line">--这个根节点下面又定义了3个子节点</span><br><span class="line">--SYNTAX是该节点数据类型，可自定义。标准类型：Counter(计数)、Gauge(标准)、DisplayString(显示字符串)、Interger(整数)、TimeTicks（时间戳）、NetworkAddress(网络地址)、IpAddress（Ipv4地址）</span><br><span class="line">--MAX-Access是该节点的读写属性，如：not-accessibl(不可访问),read-only(只读),read-write(读写),read-create(读和创建)</span><br><span class="line">--STATUS是该节点的状态，如：current (当前的)、deprecated (反对的)、obsolete(废弃的)</span><br><span class="line">demo OBJECT IDENTIFIER ::= &#123; demoMIB 1 &#125;</span><br><span class="line">    name OBJECT-TYPE</span><br><span class="line">        SYNTAX DisplayString</span><br><span class="line">        MAX-ACCESS read-write</span><br><span class="line">        STATUS current</span><br><span class="line">        DESCRIPTION</span><br><span class="line">            &quot;this is name.&quot;</span><br><span class="line">        ::= &#123; demo 1 &#125;</span><br><span class="line"></span><br><span class="line">    limit OBJECT-TYPE</span><br><span class="line">        SYNTAX Integer32</span><br><span class="line">        MAX-ACCESS read-write</span><br><span class="line">        STATUS current</span><br><span class="line">        DESCRIPTION</span><br><span class="line">            &quot;this is limit.&quot;</span><br><span class="line">        ::= &#123; demo 2 &#125;</span><br><span class="line"></span><br><span class="line">    type OBJECT-TYPE</span><br><span class="line">        SYNTAX Integer32</span><br><span class="line">        MAX-ACCESS read-write</span><br><span class="line">        STATUS obsolete</span><br><span class="line">        DESCRIPTION</span><br><span class="line">            &quot;this is type.&quot;</span><br><span class="line">        ::= &#123; demo 3 &#125;</span><br><span class="line"></span><br><span class="line">-- 定义TRAP</span><br><span class="line">demoTraps OBJECT IDENTIFIER ::= &#123; demoMIB 2 &#125;</span><br><span class="line">demoTrapPrefix OBJECT IDENTIFIER ::= &#123; demoTraps 0 &#125;</span><br><span class="line"></span><br><span class="line">demoInfo NOTIFICATION-TYPE</span><br><span class="line">    OBJECTS &#123;</span><br><span class="line">        name,</span><br><span class="line">        limit</span><br><span class="line">    &#125;</span><br><span class="line">    STATUS  current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;This is demo message.&quot;</span><br><span class="line">    ::= &#123; demoTrapPrefix 1 &#125;</span><br><span class="line"></span><br><span class="line">-- 定义表格</span><br><span class="line">-- demoTable OBJECT INDETIFIER ::= &#123; demoMIB 3&#125;</span><br><span class="line">demoTable OBJECT-TYPE</span><br><span class="line">    SYNTAX SEQUENCE OF demoEntry</span><br><span class="line">    MAX-ACCESS not-accessible</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;this is test table.&quot;</span><br><span class="line">    ::= &#123;demoMIB 3&#125;</span><br><span class="line"></span><br><span class="line">demoEntry OBJECT-TYPE</span><br><span class="line">    SYNTAX demoSequence</span><br><span class="line">    MAX-ACCESS not-accessible</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;this is test entry.&quot;</span><br><span class="line">    INDEX &#123; demoIndex &#125;</span><br><span class="line">    ::= &#123;demoTable 1&#125;</span><br><span class="line"></span><br><span class="line">demoSequence ::= SEQUENCE &#123;undefined</span><br><span class="line">    demoIndex  Integer32,</span><br><span class="line">    demoNum Integer32,</span><br><span class="line">    demoname  DisplayString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demoIndex OBJECT-TYPE</span><br><span class="line">    SYNTAX  Integer32</span><br><span class="line">    MAX-ACCESS read-write</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    ::= &#123;demoEntry 1&#125;</span><br><span class="line"></span><br><span class="line">demoNum OBJECT-TYPE</span><br><span class="line">    SYNTAX  Integer32</span><br><span class="line">    MAX-ACCESS read-write</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    ::= &#123;demoEntry 2&#125;</span><br><span class="line"></span><br><span class="line">demoname OBJECT-TYPE</span><br><span class="line">    SYNTAX  DisplayString</span><br><span class="line">    MAX-ACCESS read-write</span><br><span class="line">    STATUS current</span><br><span class="line">    DESCRIPTION</span><br><span class="line">        &quot;&quot;</span><br><span class="line">    ::= &#123;demoEntry 3&#125;</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-加载MIB"><a href="#2-加载MIB" class="headerlink" title="2. 加载MIB"></a>2. 加载MIB</h3><p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/snmp/snmp.conf &lt;&lt;EOF</span><br><span class="line">mibdirs /usr/share/snmp/mibs:/usr/local/share/snmp/mibs</span><br><span class="line">mibs All</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmptranslate -Tp -IR demoMIB</span><br><span class="line">// 或</span><br><span class="line">snmptranslate -Tp -IR DEMO-MIB::demoMIB</span><br></pre></td></tr></table></figure>
<p>请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmpget -c public -v 2c localhost .1.3.6.1.4.1.54321.1</span><br><span class="line"></span><br><span class="line">//结果：DEMO-MIB::demo = No Such Object available on this agent at this OID</span><br></pre></td></tr></table></figure>

<h3 id="3-生产并编译"><a href="#3-生产并编译" class="headerlink" title="3. 生产并编译"></a>3. 生产并编译</h3><h4 id="a-生成-c和-h文件"><a href="#a-生成-c和-h文件" class="headerlink" title="a. 生成.c和.h文件"></a>a. 生成.c和.h文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; mib2c -c mib2c.scalar.conf demo</span><br><span class="line"></span><br><span class="line">//说明：mib2c.int_watch.conf为只读， mib2c.scalar.conf为其他</span><br></pre></td></tr></table></figure>
<h4 id="b-修改节点demo-c和demo-h"><a href="#b-修改节点demo-c和demo-h" class="headerlink" title="b. 修改节点demo.c和demo.h"></a>b. 修改节点demo.c和demo.h</h4><p>修改demo.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Note: this file originally auto-generated by mib2c</span><br><span class="line"> * using mib2c.scalar.conf</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">#include &lt;net-snmp/net-snmp-config.h&gt;</span><br><span class="line">#include &lt;net-snmp/net-snmp-includes.h&gt;</span><br><span class="line">#include &lt;net-snmp/agent/net-snmp-agent-includes.h&gt;</span><br><span class="line">#include &quot;demo.h&quot;</span><br><span class="line"></span><br><span class="line">/* myName*/</span><br><span class="line">#define BUFSIZE 1024</span><br><span class="line">static char myName[BUFSIZE] = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">/* 定义默认limit、type */</span><br><span class="line">unsigned int myLimit = 10;</span><br><span class="line">unsigned int myType = 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** Initializes the demo module */</span><br><span class="line">void</span><br><span class="line">init_demo(void)</span><br><span class="line">&#123;</span><br><span class="line">    const oid name_oid[] = &#123; 1,3,6,1,4,1,54321,1,1 &#125;;</span><br><span class="line">    const oid limit_oid[] = &#123; 1,3,6,1,4,1,54321,1,2 &#125;;</span><br><span class="line">    const oid type_oid[] = &#123; 1,3,6,1,4,1,54321,1,3 &#125;;</span><br><span class="line"></span><br><span class="line">  DEBUGMSGTL((&quot;demo&quot;, &quot;Initializing\n&quot;));</span><br><span class="line"></span><br><span class="line">    netsnmp_register_scalar(</span><br><span class="line">        netsnmp_create_handler_registration(&quot;name&quot;, handle_name,</span><br><span class="line">                               name_oid, OID_LENGTH(name_oid),</span><br><span class="line">                               HANDLER_CAN_RWRITE</span><br><span class="line">        ));</span><br><span class="line">    netsnmp_register_scalar(</span><br><span class="line">        netsnmp_create_handler_registration(&quot;limit&quot;, handle_limit,</span><br><span class="line">                               limit_oid, OID_LENGTH(limit_oid),</span><br><span class="line">                               HANDLER_CAN_RWRITE</span><br><span class="line">        ));</span><br><span class="line">    netsnmp_register_scalar(</span><br><span class="line">        netsnmp_create_handler_registration(&quot;type&quot;, handle_type,</span><br><span class="line">                               type_oid, OID_LENGTH(type_oid),</span><br><span class="line">                               HANDLER_CAN_RWRITE</span><br><span class="line">        ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">handle_name(netsnmp_mib_handler *handler,</span><br><span class="line">                          netsnmp_handler_registration *reginfo,</span><br><span class="line">                          netsnmp_agent_request_info   *reqinfo,</span><br><span class="line">                          netsnmp_request_info         *requests)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    switch(reqinfo-&gt;mode) &#123;</span><br><span class="line">        </span><br><span class="line">        /*完善get处理*/</span><br><span class="line">        case MODE_GET:</span><br><span class="line">            snmp_set_var_typed_value(requests-&gt;requestvb, ASN_OCTET_STR,</span><br><span class="line">                                   myName  /* XXX: a pointer to the scalar&#x27;s data */,</span><br><span class="line">                                   strlen(myName)  /* XXX: the length of the data in bytes */);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE1:</span><br><span class="line">            ret = netsnmp_check_vb_type(requests-&gt;requestvb, ASN_OCTET_STR);</span><br><span class="line">            if ( ret != SNMP_ERR_NOERROR ) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, ret );</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE2:</span><br><span class="line">            if ( 0 /* XXX if malloc, or whatever, failed: */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_FREE:</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_ACTION:</span><br><span class="line">            memcpy(myName,requests-&gt;requestvb-&gt;buf,requests-&gt;requestvb-&gt;val_len);</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, /* some error */0);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_COMMIT:</span><br><span class="line">            /* XXX: delete temporary storage */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_UNDO:</span><br><span class="line">            /* XXX: UNDO and return to previous value for the object */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_UNDOFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            /* we should never get here, so this is a really bad error */</span><br><span class="line">            snmp_log(LOG_ERR, &quot;unknown mode (%d) in handle_name\n&quot;, reqinfo-&gt;mode );</span><br><span class="line">            return SNMP_ERR_GENERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return SNMP_ERR_NOERROR;</span><br><span class="line">&#125;</span><br><span class="line">int</span><br><span class="line">handle_limit(netsnmp_mib_handler *handler,</span><br><span class="line">                          netsnmp_handler_registration *reginfo,</span><br><span class="line">                          netsnmp_agent_request_info   *reqinfo,</span><br><span class="line">                          netsnmp_request_info         *requests)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    </span><br><span class="line">    switch(reqinfo-&gt;mode) &#123;</span><br><span class="line"></span><br><span class="line">        case MODE_GET:</span><br><span class="line">            snmp_set_var_typed_value(requests-&gt;requestvb, ASN_INTEGER,</span><br><span class="line">                                      (u_char *)&amp;myLimit /* XXX: a pointer to the scalar&#x27;s data */,</span><br><span class="line">                                     sizeof(myLimit) /* XXX: the length of the data in bytes */);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE1:</span><br><span class="line">            ret = netsnmp_check_vb_type(requests-&gt;requestvb, ASN_INTEGER);</span><br><span class="line">            if ( ret != SNMP_ERR_NOERROR ) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, ret );</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE2:</span><br><span class="line">            if (0/* XXX if malloc, or whatever, failed: */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_FREE:</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_ACTION:</span><br><span class="line">            memcpy(&amp;myLimit,requests-&gt;requestvb-&gt;buf,requests-&gt;requestvb-&gt;val_len);</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, /* some error */0);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_COMMIT:</span><br><span class="line">            /* XXX: delete temporary storage */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_UNDO:</span><br><span class="line">            /* XXX: UNDO and return to previous value for the object */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_UNDOFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            /* we should never get here, so this is a really bad error */</span><br><span class="line">            snmp_log(LOG_ERR, &quot;unknown mode (%d) in handle_limit\n&quot;, reqinfo-&gt;mode );</span><br><span class="line">            return SNMP_ERR_GENERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return SNMP_ERR_NOERROR;</span><br><span class="line">&#125;</span><br><span class="line">int</span><br><span class="line">handle_type(netsnmp_mib_handler *handler,</span><br><span class="line">                          netsnmp_handler_registration *reginfo,</span><br><span class="line">                          netsnmp_agent_request_info   *reqinfo,</span><br><span class="line">                          netsnmp_request_info         *requests)</span><br><span class="line">&#123;</span><br><span class="line">    int ret;</span><br><span class="line">    </span><br><span class="line">    switch(reqinfo-&gt;mode) &#123;</span><br><span class="line"></span><br><span class="line">        case MODE_GET:</span><br><span class="line">            snmp_set_var_typed_value(requests-&gt;requestvb, ASN_INTEGER,</span><br><span class="line">                                     (u_char *)&amp;myType /* XXX: a pointer to the scalar&#x27;s data */,</span><br><span class="line">                                     sizeof(myType)/* XXX: the length of the data in bytes */);</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE1:</span><br><span class="line">            /* or you could use netsnmp_check_vb_type_and_size instead */</span><br><span class="line">            ret = netsnmp_check_vb_type(requests-&gt;requestvb, ASN_INTEGER);</span><br><span class="line">            if ( ret != SNMP_ERR_NOERROR ) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, ret );</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_RESERVE2:</span><br><span class="line">            /* XXX malloc &quot;undo&quot; storage buffer */</span><br><span class="line">            if (0/* XXX if malloc, or whatever, failed: */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_FREE:</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_ACTION:</span><br><span class="line">            memcpy(&amp;myType,requests-&gt;requestvb-&gt;buf,requests-&gt;requestvb-&gt;val_len);</span><br><span class="line">            /* XXX: perform the value change here */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, /* some error */0);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_COMMIT:</span><br><span class="line">            /* XXX: delete temporary storage */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_COMMITFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case MODE_SET_UNDO:</span><br><span class="line">            /* XXX: UNDO and return to previous value for the object */</span><br><span class="line">            if (0/* XXX: error? */) &#123;</span><br><span class="line">                /* try _really_really_ hard to never get to this point */</span><br><span class="line">                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_UNDOFAILED);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            /* we should never get here, so this is a really bad error */</span><br><span class="line">            snmp_log(LOG_ERR, &quot;unknown mode (%d) in handle_type\n&quot;, reqinfo-&gt;mode );</span><br><span class="line">            return SNMP_ERR_GENERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return SNMP_ERR_NOERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="c-编译："><a href="#c-编译：" class="headerlink" title="c. 编译："></a>c. 编译：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env MIBS=&quot;+DEMO-MIB&quot; net-snmp-config --compile-subagent demo demo.c</span><br><span class="line">// 或</span><br><span class="line">env MIBS=&quot;+DEMO-MIB&quot; net-snmp-config --compile-subagent demo --norm demo.c // --norm 参数来阻止编译后删除生成的中间代码文件</span><br></pre></td></tr></table></figure>
<h4 id="d·运行demo"><a href="#d·运行demo" class="headerlink" title="d·运行demo"></a>d·运行demo</h4><blockquote>
<p>注意<br>上面编译后并没有生效，暂时不知原因，换另外一种方式（重新编译snmpd）：</p>
</blockquote>
<h4 id="c-拷贝：demo-c和demo-h到源码目录-opt-net-snmp-net-snmp-agent-mibgroup-下"><a href="#c-拷贝：demo-c和demo-h到源码目录-opt-net-snmp-net-snmp-agent-mibgroup-下" class="headerlink" title="c. 拷贝：demo.c和demo.h到源码目录/opt/net-snmp/net-snmp/agent/mibgroup/下"></a>c. 拷贝：demo.c和demo.h到源码目录/opt/net-snmp/net-snmp/agent/mibgroup/下</h4><h4 id="d-配置并编译"><a href="#d-配置并编译" class="headerlink" title="d. 配置并编译"></a>d. 配置并编译</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure --with-default-snmp-version=&quot;2&quot; --with-sys-contact=&quot;myz0012@h3c.com&quot; --with-sys-location=&quot;China&quot; --with-logfile=&quot;/var/log/snmpd.log&quot; --with-persistent-directory=&quot;/var/snmp&quot; --enable-mfd-rewrites --with-mib-modules=&quot;demo&quot;</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h4 id="e-重新reboot"><a href="#e-重新reboot" class="headerlink" title="e. 重新reboot"></a>e. 重新reboot</h4><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误信息：error while loading shared libraries: libnetsnmpmibs.so.35: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line">// 解决，设置环境变量</span><br><span class="line">cat &gt;&gt; /etc/profile&lt;&lt;EOF</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib</span><br><span class="line">EOF</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置</span><br><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmpset -c public -v 2c localhost .1.3.6.1.4.1.54321.1.1.0 s &quot;nihao&quot;</span><br><span class="line">// 查询</span><br><span class="line">env MIBS=&quot;+DEMO-MIB&quot; snmpget -c public -v 2c localhost .1.3.6.1.4.1.54321.1.1.0</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="编译的方法"><a href="#编译的方法" class="headerlink" title="编译的方法"></a>编译的方法</h2><ol>
<li>静态加载，将生成的.c和.h文件加入到相应的位置，重新编译snmp库，优点是不需要修改配置文件，缺点是每次添加都得重新编译；</li>
<li>动态加载，将生成的.c和.h文件再编译成.so库，修改snmpd.conf配置文件。优点是每次添加不需要重新编译，缺点是必须支持dlmod命令；</li>
<li>子代理扩展，将生成的.c和.h文件编译成可执行程序，运行该程序和snmpd即可，优点是操作简单，缺点是需要运行两个程序才行。</li>
</ol>
<h3 id="一、静态链接"><a href="#一、静态链接" class="headerlink" title="一、静态链接"></a>一、静态链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">demo.c和demo.h复制到/opt/net-snmp/agent/mibgroup，这里是说net-snmp源码里。</span><br><span class="line">编译./configure --with-mib-modules=demo，make &amp;&amp; make install。</span><br><span class="line">静态加载成功</span><br></pre></td></tr></table></figure>

<h3 id="二、动态加载"><a href="#二、动态加载" class="headerlink" title="二、动态加载"></a>二、动态加载</h3><p>编写makefile文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">FLAGS=-I. `net-snmp-config --cflags` -g</span><br><span class="line">DLFLAGS=-shared -fPIC -g</span><br><span class="line">demo.so: demo.c</span><br><span class="line">    $(CC) $(CFLAGS) $(DLFLAGS) -c -o demo.o demo.c</span><br><span class="line">    $(CC) $(CFLAGS) $(DLFLAGS) -o demo.so demo.o</span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">    rm -f *.so *.o</span><br></pre></td></tr></table></figure>
<p>编译生成.so库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改snmpd.conf配置文件，在文件末尾加入dlmod demo $&#123;demo.so所在绝对路径&#125;/demo.so</span><br><span class="line">启动snmpd: /usr/local/sbin/snmpd -c /etc/snmp/snmpd.conf &amp;</span><br><span class="line">动态加载完成</span><br></pre></td></tr></table></figure>

<h3 id="三、子代理扩展"><a href="#三、子代理扩展" class="headerlink" title="三、子代理扩展"></a>三、子代理扩展</h3><p>生成demo程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net-snmp-config --compile-subagent demo demo.c</span><br></pre></td></tr></table></figure>

<p>启动snmpd,demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/sbin/snmpd -c /etc/snmp/snmpd.conf</span><br><span class="line">./demo</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SNMP</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-HA高可用集群安装</title>
    <url>/2021/06/29/k8s-HA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1准备虚拟机，准备3台虚拟机"><a href="#1准备虚拟机，准备3台虚拟机" class="headerlink" title="1准备虚拟机，准备3台虚拟机"></a>1准备虚拟机，准备3台虚拟机</h3><p>规划机器。操作系统：CentOS Linux release 7.9.2009 (Core)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.68.164 master01</span><br><span class="line">192.168.68.165 master02</span><br><span class="line">192.168.68.167 master03</span><br></pre></td></tr></table></figure>

<p>拷贝文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拷贝文件都3台机器</span><br><span class="line">scp -r install-k8s/ root@192.168.68.164:/root/</span><br><span class="line">scp -r install-k8s/ root@192.168.68.165:/root/</span><br><span class="line">scp -r install-k8s/ root@192.168.68.167:/root/</span><br></pre></td></tr></table></figure>

<p>设置hostname</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#机器192.168.68.164执行</span></span><br><span class="line">hostnamectl --static set-hostname  master01</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.68.165执行</span></span><br><span class="line">hostnamectl --static set-hostname  master02</span><br><span class="line"></span><br><span class="line"><span class="comment">#机器192.168.68.167执行</span></span><br><span class="line">hostnamectl --static set-hostname  master03</span><br></pre></td></tr></table></figure>

<h3 id="2虚拟机设置"><a href="#2虚拟机设置" class="headerlink" title="2虚拟机设置"></a>2虚拟机设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#执行初始化脚本</span><br><span class="line">sh step1-initServer.sh</span><br></pre></td></tr></table></figure>

<h3 id="3安装haproxy和keepalive"><a href="#3安装haproxy和keepalive" class="headerlink" title="3安装haproxy和keepalive"></a>3安装haproxy和keepalive</h3><h4 id="创建-HAProxy-启动脚本"><a href="#创建-HAProxy-启动脚本" class="headerlink" title="创建 HAProxy 启动脚本"></a>创建 HAProxy 启动脚本</h4><blockquote>
<p>该步骤在 <code>master01 master02 master03</code> 执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/kubernetes/lb</span><br><span class="line">vi /usr/local/kubernetes/lb/start-haproxy.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容如下</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 修改为你自己的 Master 地址</span></span><br><span class="line">MasterIP1=192.168.68.164</span><br><span class="line">MasterIP2=192.168.68.165</span><br><span class="line">MasterIP3=192.168.68.167</span><br><span class="line"><span class="comment"># 这是 kube-apiserver 默认端口，不用修改</span></span><br><span class="line">MasterPort=6443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器将 HAProxy 的 6444 端口暴露出去</span></span><br><span class="line">docker run -d --restart=always --name HAProxy-K8S -p 6444:6444 \</span><br><span class="line">        -e MasterIP1=<span class="variable">$MasterIP1</span> \</span><br><span class="line">        -e MasterIP2=<span class="variable">$MasterIP2</span> \</span><br><span class="line">        -e MasterIP3=<span class="variable">$MasterIP3</span> \</span><br><span class="line">        -e MasterPort=<span class="variable">$MasterPort</span> \</span><br><span class="line">        wise2c/haproxy-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x start-haproxy.sh</span><br></pre></td></tr></table></figure>


<h4 id="创建-Keepalived-启动脚本"><a href="#创建-Keepalived-启动脚本" class="headerlink" title="创建 Keepalived 启动脚本"></a>创建 Keepalived 启动脚本</h4><blockquote>
<p>该步骤在 <code>master01 master02 master03</code> 执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/kubernetes/lb</span><br><span class="line">vi /usr/local/kubernetes/lb/start-keepalived.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容如下</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 修改为你自己的虚拟 IP 地址</span></span><br><span class="line">VIRTUAL_IP=192.168.68.200</span><br><span class="line"><span class="comment"># 虚拟网卡设备名</span></span><br><span class="line">INTERFACE=ens33</span><br><span class="line"><span class="comment"># 虚拟网卡的子网掩码</span></span><br><span class="line">NETMASK_BIT=24</span><br><span class="line"><span class="comment"># HAProxy 暴露端口，内部指向 kube-apiserver 的 6443 端口</span></span><br><span class="line">CHECK_PORT=6444</span><br><span class="line"><span class="comment"># 路由标识符</span></span><br><span class="line">RID=10</span><br><span class="line"><span class="comment"># 虚拟路由标识符</span></span><br><span class="line">VRID=160</span><br><span class="line"><span class="comment"># IPV4 多播地址，默认 224.0.0.18</span></span><br><span class="line">MCAST_GROUP=224.0.0.18</span><br><span class="line"></span><br><span class="line">docker run -itd --restart=always --name=Keepalived-K8S \</span><br><span class="line">        --net=host --cap-add=NET_ADMIN \</span><br><span class="line">        -e VIRTUAL_IP=<span class="variable">$VIRTUAL_IP</span> \</span><br><span class="line">        -e INTERFACE=<span class="variable">$INTERFACE</span> \</span><br><span class="line">        -e CHECK_PORT=<span class="variable">$CHECK_PORT</span> \</span><br><span class="line">        -e RID=<span class="variable">$RID</span> \</span><br><span class="line">        -e VRID=<span class="variable">$VRID</span> \</span><br><span class="line">        -e NETMASK_BIT=<span class="variable">$NETMASK_BIT</span> \</span><br><span class="line">        -e MCAST_GROUP=<span class="variable">$MCAST_GROUP</span> \</span><br><span class="line">        wise2c/keepalived-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x start-keepalived.sh</span><br></pre></td></tr></table></figure>

<h3 id="4初始化-Master"><a href="#4初始化-Master" class="headerlink" title="4初始化 Master"></a>4初始化 Master</h3><blockquote>
<p>该步骤在 <code>master01</code> 执行</p>
</blockquote>
<ul>
<li>创建工作目录并导出配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出配置文件到工作目录</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br></pre></td></tr></table></figure>

<p><code>vi kubeadm.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="comment"># 修改为主节点 IP</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">192.168</span><span class="number">.68</span><span class="number">.164</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-master</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="comment"># 配置 Keepalived 地址和 HAProxy 端口</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="string">&quot;192.168.68.200:6444&quot;</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="comment"># 国内不能访问 Google，修改为阿里云</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="comment"># 修改版本号</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.19.7</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="comment"># 配置成 Calico 的默认网段</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># kubeadm 初始化</span><br><span class="line">kubeadm init --config=kubeadm.yml | tee kubeadm-init.log</span><br><span class="line"></span><br><span class="line"># 配置 kubectl</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line"># 安装网络</span><br><span class="line">kubectl apply -f tars/calico.yaml</span><br><span class="line">sleep 120s</span><br><span class="line"></span><br><span class="line">#查看集群</span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>

<h3 id="5节点加入"><a href="#5节点加入" class="headerlink" title="5节点加入"></a>5节点加入</h3><blockquote>
<p>该步骤在 <code> master02 master03</code> 执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#master02 master03创建文件夹</span><br><span class="line">mkdir -p /etc/kubernetes/pki/etcd/</span><br><span class="line"></span><br><span class="line">#拷贝master01上的证书到机器master02</span><br><span class="line">scp /etc/kubernetes/pki/ca.* root@192.168.68.165:/etc/kubernetes/pki</span><br><span class="line">scp /etc/kubernetes/pki/sa.* root@192.168.68.165:/etc/kubernetes/pki</span><br><span class="line">scp /etc/kubernetes/pki/front-proxy-ca.* root@192.168.68.165:/etc/kubernetes/pki/</span><br><span class="line">scp /etc/kubernetes/pki/etcd/ca.* root@192.168.68.165:/etc/kubernetes/pki/etcd/</span><br><span class="line">scp /etc/kubernetes/admin.conf root@192.168.68.165:/etc/kubernetes/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#拷贝master01上的证书到机器master03</span><br><span class="line">scp /etc/kubernetes/pki/ca.* root@192.168.68.167:/etc/kubernetes/pki</span><br><span class="line">scp /etc/kubernetes/pki/sa.* root@192.168.68.167:/etc/kubernetes/pki</span><br><span class="line">scp /etc/kubernetes/pki/front-proxy-ca.* root@192.168.68.167:/etc/kubernetes/pki/</span><br><span class="line">scp /etc/kubernetes/pki/etcd/ca.* root@192.168.68.167:/etc/kubernetes/pki/etcd/</span><br><span class="line">scp /etc/kubernetes/admin.conf root@192.168.68.167:/etc/kubernetes/</span><br><span class="line"></span><br><span class="line">#在文件kubeadm-init.log找到如下命令，将master02 master03加入</span><br><span class="line">#其他master加入执行如下命令</span><br><span class="line">kubeadm join 192.168.68.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:9ee9c17195287307cdf8bf8658b597d71fc788d69fe34df885fbd41986db6a5a \</span><br><span class="line">    --control-plane </span><br><span class="line">#加入成功后master02 master03执行如下命令</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">#node加入执行</span><br><span class="line">kubeadm join 192.168.68.200:6444 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:9ee9c17195287307cdf8bf8658b597d71fc788d69fe34df885fbd41986db6a5a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6安装dashboard"><a href="#6安装dashboard" class="headerlink" title="6安装dashboard"></a>6安装dashboard</h3><blockquote>
<p>该步骤在 `master01  执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装dashboard</span><br><span class="line">kubectl create -f tars/recommended.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">#命令获取token</span><br><span class="line">kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token</span><br></pre></td></tr></table></figure>



<p>参考；<a href="https://www.funtl.com/zh/service-mesh-kubernetes/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.html#%E5%AE%89%E8%A3%85-haproxy-keepalived">https://www.funtl.com/zh/service-mesh-kubernetes/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.html#%E5%AE%89%E8%A3%85-haproxy-keepalived</a></p>
]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
</search>
